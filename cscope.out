cscope 15 $HOME/os161/src               0000802042
	@build/install/hostinclude/hostcompat.h

31 
	~<sys/ty≥s.h
>

32 
	~<°döt.h
>

34 
ho°com∑t_öô
(
¨gc
, **
¨gv
);

36 
time_t
 
__time
—ime_à*
£cs
, *
n£cs
);

38 #ifde‡
DECLARE_NTOHLL


39 
uöt64_t
 
¡ohŒ
(uint64_t);

40 
	#ht⁄Œ
(
x
Ë(
	`¡ohŒ
(x))

	)

	@build/install/include/assert.h

30 #i‚de‡
_ASSERT_H_


31 
	#_ASSERT_H_


	)

36 #unde‡
as£π


41 
__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
msg
);

47 #ifde‡
NDEBUG


50 
	#as£π
(
x
Ë(()(x)Ë

	)

52 
	#as£π
(
x
Ë(()0Ë

	)

56 
	#as£π
(
x
Ë((xË? ()0 : 
	`__bad_as£π
(
__FILE__
, 
__LINE__
, #x))

	)

	@build/install/include/err.h

30 #i‚de‡
_ERR_H_


31 
	#_ERR_H_


	)

33 
	~<sys/cdefs.h
>

34 
	~<kîn/ty≥s.h
>

48 
w¨n
(c⁄° *
fmt
, ...);

49 
w¨nx
(c⁄° *
fmt
, ...);

50 
__DEAD
 
îr
(
exôcode
, c⁄° *
fmt
, ...);

51 
__DEAD
 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

53 
vw¨n
(c⁄° *
fmt
, 
__va_li°
);

54 
vw¨nx
(c⁄° *
fmt
, 
__va_li°
);

55 
__DEAD
 
vîr
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

56 
__DEAD
 
vîrx
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

	@build/install/include/errno.h

30 #i‚de‡
_ERRNO_H_


31 
	#_ERRNO_H_


	)

34 
	~<kîn/î∫o.h
>

37 
î∫o
;

	@build/install/include/fcntl.h

31 
	~<uni°d.h
>

	@build/install/include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@build/install/include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@build/install/include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@build/install/include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@build/install/include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@build/install/include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@build/install/include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

60 
	#__NAME_MAX
 255

	)

63 
	#__PATH_MAX
 1024

	)

66 
	#__ARG_MAX
 (64 * 1024)

	)

77 
	#__PID_MIN
 2

	)

80 
	#__PID_MAX
 32767

	)

83 
	#__OPEN_MAX
 128

	)

86 
	#__PIPE_BUF
 512

	)

95 
	#__NGROUPS_MAX
 32

	)

98 
	#__LOGIN_NAME_MAX
 17

	)

106 
	#__IOV_MAX
 1024

	)

	@build/install/include/kern/mips/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIPS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@build/install/include/kern/mips/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@build/install/include/kern/mips/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@build/install/include/kern/mips/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@build/install/include/kern/mips/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@build/install/include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@build/install/include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@build/install/include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@build/install/include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_NINDIRECT
 1

	)

44 
	#SFS_NDINDIRECT
 0

	)

45 
	#SFS_NTINDIRECT
 0

	)

46 
	#SFS_DBPERIDB
 128

	)

47 
	#SFS_NAMELEN
 60

	)

48 
	#SFS_SUPER_BLOCK
 0

	)

49 
	#SFS_FREEMAP_START
 2

	)

50 
	#SFS_NOINO
 0

	)

51 
	#SFS_ROOTDIR_INO
 1

	)

54 
	#SFS_BITSPERBLOCK
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

57 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

60 
	#SFS_FREEMAPBITS
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BITSPERBLOCK
)

	)

63 
	#SFS_FREEMAPBLOCKS
(
nblocks
Ë(
	`SFS_FREEMAPBITS
“blocks)/
SFS_BITSPERBLOCK
)

	)

66 
	#SFS_TYPE_INVAL
 0

	)

67 
	#SFS_TYPE_FILE
 1

	)

68 
	#SFS_TYPE_DIR
 2

	)

73 
	ssfs_su≥rblock
 {

74 
uöt32_t
 
	msb_magic
;

75 
uöt32_t
 
	msb_nblocks
;

76 
	msb_vﬁ«me
[
SFS_VOLNAME_SIZE
];

77 
uöt32_t
 
	mª£rved
[118];

83 
	ssfs_döode
 {

84 
uöt32_t
 
	msfi_size
;

85 
uöt16_t
 
	msfi_ty≥
;

86 
uöt16_t
 
	msfi_lökcou¡
;

87 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

88 
uöt32_t
 
	msfi_ödúe˘
;

89 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

95 
	ssfs_dúíåy
 {

96 
uöt32_t
 
	msfd_öo
;

97 
	msfd_«me
[
SFS_NAMELEN
];

	@build/install/include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@build/install/include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@build/install/include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@build/install/include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@build/install/include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@build/install/include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@build/install/include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@build/install/include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@build/install/include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@build/install/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@build/install/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

34 
	~<machöe/£tjmp.h
>

49 
£tjmp
(
jmp_buf
 
jb
);

50 
l⁄gjmp
(
jmp_buf
 
jb
, 
code
);

	@build/install/include/signal.h

30 
	~<kîn/sig«l.h
>

	@build/install/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

33 
	~<kîn/ty≥s.h
>

43 
__va_li°
 
	tva_li°
;

45 #i‡
__GNUC__
 < 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 < 8)

46 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p, fmt)

	)

48 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_va_°¨t
◊p, fmt)

	)

50 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

51 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

52 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@build/install/include/stdbool.h

30 #i‚de‡
_STDBOOL_H_


31 
	#_STDBOOL_H_


	)

33 
_Boﬁ
 
	tboﬁ
;

34 
	#åue
 1

	)

35 
	#Ál£
 0

	)

	@build/install/include/stdint.h

30 #i‚de‡
_STDINT_H_


31 
	#_STDINT_H_


	)

37 
	~<kîn/ty≥s.h
>

39 
__i8
 
	töt8_t
;

40 
__i16
 
	töt16_t
;

41 
__i32
 
	töt32_t
;

42 
__i64
 
	töt64_t
;

43 
__u8
 
	tuöt8_t
;

44 
__u16
 
	tuöt16_t
;

45 
__u32
 
	tuöt32_t
;

46 
__u64
 
	tuöt64_t
;

48 
__öçå_t
 
	töçå_t
;

49 
__uöçå_t
 
	tuöçå_t
;

	@build/install/include/stdio.h

30 #i‚de‡
_STDIO_H_


31 
	#_STDIO_H_


	)

37 
	~<kîn/ty≥s.h
>

38 
	~<ty≥s/size_t.h
>

39 
	~<sys/nuŒ.h
>

42 
	#EOF
 (-1)

	)

48 
__v¥ötf
((*
£ndfunc
)(*
˛õ¡d©a
, c⁄° *, 
size_t
 
Àn
),

49 *
˛õ¡d©a
,

50 c⁄° *
fmt
,

51 
__va_li°
 
≠
);

54 
	`¥ötf
(c⁄° *
fmt
, ...);

55 
	`v¥ötf
(c⁄° *
fmt
, 
__va_li°
 
≠
);

56 
	`¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...);

57 
	`v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
__va_li°
 
≠
);

60 
	`puts
(const *);

64 
	`__puts
(const *);

67 
	`putch¨
();

70 
	`gëch¨
();

	@build/install/include/stdlib.h

30 #i‚de‡
_STDLIB_H_


31 
	#_STDLIB_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 
©oi
(const *);

45 
ab‹t
();

51 
exô
(
code
);

57 *
gëív
(c⁄° *
v¨
);

62 
sy°em
(c⁄° *
comm™d
);

67 
	#RAND_MAX
 0x7fffffff

	)

68 
øndom
();

69 
§™dom
(
£ed
);

70 *
öô°©e
(, *, 
size_t
);

71 *
£t°©e
(*);

76 *
mÆloc
(
size_t
 
size
);

77 
‰ì
(*
±r
);

82 
qs‹t
(*
d©a
, 
num
, 
size_t
 
size
,

83 (*
f
)(const *, const *));

	@build/install/include/string.h

30 #i‚de‡
_STRING_H_


31 
	#_STRING_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 *
°rˇt
(*, const *);

41 *
°r˝y
(*, const *);

42 *
°rchr
(const *, );

43 *
°ºchr
(const *, );

44 
°rcmp
(const *, const *);

45 
size_t
 
°æí
(const *);

46 *
°πok_r
(*, const *, **);

47 *
°πok
(*, const *);

49 *
mem£t
(*, 
c
, 
size_t
);

50 *
mem˝y
(*, c⁄° *, 
size_t
);

51 *
memmove
(*, c⁄° *, 
size_t
);

52 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

57 c⁄° *
°ªº‹
(
îrcode
);

62 
bzîo
(*, 
size_t
);

	@build/install/include/sys/cdefs.h

36 #i‚de‡
_SYS_CDEFS_H_


37 
	#_SYS_CDEFS_H_


	)

39 #ifde‡
__GNUC__


40 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

42 
	#__DEAD


	)

	@build/install/include/sys/endian.h

30 #i‚de‡
_SYS_ENDIAN_H_


31 
	#_SYS_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

	@build/install/include/sys/ioctl.h

31 
	~<uni°d.h
>

	@build/install/include/sys/null.h

30 #i‚de‡
_SYS_NULL_H_


31 
	#_SYS_NULL_H_


	)

37 
	#NULL
 ((*)0)

	)

	@build/install/include/sys/reboot.h

31 
	~<uni°d.h
>

	@build/install/include/sys/stat.h

30 #i‚de‡
_SYS_STAT_H_


31 
	#_SYS_STAT_H_


	)

36 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

42 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

43 
	#S_ISREG
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFREG
)

	)

44 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

45 
	#S_ISLNK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFLNK
)

	)

46 
	#S_ISIFO
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFIFO
)

	)

47 
	#S_ISSOCK
(
mode
Ë((modê& 
_S_IFMT
Ë==
_S_IFSOCK
)

	)

48 
	#S_ISCHR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFCHR
)

	)

49 
	#S_ISBLK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFBLK
)

	)

55 
	#S_IFMT
 
_S_IFMT


	)

56 
	#S_IFREG
 
_S_IFREG


	)

57 
	#S_IFDIR
 
_S_IFDIR


	)

58 
	#S_IFLNK
 
_S_IFLNK


	)

59 
	#S_IFIFO
 
_S_IFIFO


	)

60 
	#S_IFSOCK
 
_S_IFSOCK


	)

61 
	#S_IFCHR
 
_S_IFCHR


	)

62 
	#S_IFBLK
 
_S_IFBLK


	)

71 
f°©
(
fûeh™dÀ
, 
°©
 *
buf
);

72 
°©
(c⁄° *
∑th
, °© *
buf
);

73 
l°©
(c⁄° *
∑th
, 
°©
 *
buf
);

80 
mkdú
(c⁄° *
dú«me
, 
ign‹e
);

	@build/install/include/sys/types.h

30 #i‚de‡
_SYS_TYPES_H_


31 
	#_SYS_TYPES_H_


	)

42 
	~<kîn/ty≥s.h
>

45 
	~<ty≥s/size_t.h
>

46 
	~<sys/nuŒ.h
>

55 
__ssize_t
 
	tssize_t
;

56 
__±rdiff_t
 
	t±rdiff_t
;

59 
__blk˙t_t
 
	tblk˙t_t
;

60 
__blksize_t
 
	tblksize_t
;

61 
__daddr_t
 
	tdaddr_t
;

62 
__dev_t
 
	tdev_t
;

63 
__fsid_t
 
	tfsid_t
;

64 
__gid_t
 
	tgid_t
;

65 
__ö_addr_t
 
	tö_addr_t
;

66 
__ö_p‹t_t
 
	tö_p‹t_t
;

67 
__öo_t
 
	töo_t
;

68 
__mode_t
 
	tmode_t
;

69 
__∆ök_t
 
	t∆ök_t
;

70 
__off_t
 
	toff_t
;

71 
__pid_t
 
	tpid_t
;

72 
__æim_t
 
	tæim_t
;

73 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

74 
__time_t
 
	ttime_t
;

75 
__uid_t
 
	tuid_t
;

77 
__nfds_t
 
	tnfds_t
;

78 
__sockÀn_t
 
	tsockÀn_t
;

84 
	#CHAR_BIT
 
__CHAR_BIT


	)

	@build/install/include/sys/wait.h

31 
	~<uni°d.h
>

	@build/install/include/test/quint.h

30 
quöt
(c⁄° *
¥og
);

	@build/install/include/test/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@build/install/include/time.h

31 
	~<uni°d.h
>

	@build/install/include/types/size_t.h

30 #i‚de‡
_TYPES_SIZE_T_H_


31 
	#_TYPES_SIZE_T_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
__size_t
 
	tsize_t
;

	@build/install/include/unistd.h

30 #i‚de‡
_UNISTD_H_


31 
	#_UNISTD_H_


	)

33 
	~<sys/cdefs.h
>

34 
	~<sys/ty≥s.h
>

41 
	~<kîn/f˙é.h
>

42 
	~<kîn/io˘l.h
>

43 
	~<kîn/ªboŸ.h
>

44 
	~<kîn/£ek.h
>

45 
	~<kîn/time.h
>

46 
	~<kîn/uni°d.h
>

47 
	~<kîn/waô.h
>

112 
__DEAD
 
_exô
(
code
);

113 
execv
(c⁄° *
¥og
, *c⁄° *
¨gs
);

114 
pid_t
 
f‹k
();

115 
pid_t
 
waôpid
’id_à
pid
, *
ªtu∫code
, 
Êags
);

121 
›í
(c⁄° *
fûíame
, 
Êags
, ...);

122 
ssize_t
 
ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
);

123 
ssize_t
 
wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

124 
˛o£
(
fûeh™dÀ
);

125 
ªboŸ
(
code
);

126 
sync
();

128 
rmdú
(c⁄° *
dú«me
);

131 
pid_t
 
gëpid
();

132 
io˘l
(
fûeh™dÀ
, 
code
, *
buf
);

133 
off_t
 
l£ek
(
fûeh™dÀ
, off_à
pos
, 
code
);

134 
fsync
(
fûeh™dÀ
);

135 
·runˇã
(
fûeh™dÀ
, 
off_t
 
size
);

136 
ªmove
(c⁄° *
fûíame
);

137 
ª«me
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

138 
lök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

140 
chdú
(c⁄° *
∑th
);

143 *
sbrk
(
__öçå_t
 
ch™ge
);

144 
ssize_t
 
gëdúíåy
(
fûeh™dÀ
, *
buf
, 
size_t
 
buÊí
);

145 
symlök
(c⁄° *
èrgë
, c⁄° *
lök«me
);

146 
ssize_t
 
ªadlök
(c⁄° *
∑th
, *
buf
, 
size_t
 
buÊí
);

147 
dup2
(
fûeh™dÀ
, 
√wh™dÀ
);

148 
pùe
(
fûeh™dÀs
[2]);

149 
__time
(
time_t
 *
£c⁄ds
, *
«no£c⁄ds
);

150 
ssize_t
 
__gëcwd
(*
buf
, 
size_t
 
buÊí
);

158 
execvp
(c⁄° *
¥og
, *c⁄° *
¨gs
);

159 *
gëcwd
(*
buf
, 
size_t
 
buÊí
);

160 
time_t
 
time
—ime_à*
£c⁄ds
);

	@common/gcc-millicode/adddi3.c

38 
	~"l⁄gl⁄g.h
"

47 
	$__adddi3
(
a
, 
b
)

49 
uu
 
Ø
, 
bb
, 
sum
;

51 
Ø
.
Œ
 = 
a
;

52 
bb
.
Œ
 = 
b
;

53 
sum
.
ui
[
L
] = 
Ø
.ui[L] + 
bb
.ui[L];

54 
sum
.
ui
[
H
] = 
Ø
.ui[H] + 
bb
.ui[H] + (sum.ui[
L
] < bb.ui[L]);

55  (
sum
.
Œ
);

56 
	}
}

	@common/gcc-millicode/anddi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__™ddi3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] &
bb
.ui[0];

51 
Ø
.
ui
[1] &
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@common/gcc-millicode/ashldi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__ashldi3
(
a
, 
shi·
)

47 
uu
 
Ø
;

49 i‡(
shi·
 == 0)

50 (
a
);

51 
Ø
.
Œ
 = 
a
;

52 i‡(
shi·
 >
INT_BITS
) {

53 
Ø
.
ui
[
H
] =áa.ui[
L
] << (
shi·
 - 
INT_BITS
);

54 
Ø
.
ui
[
L
] = 0;

56 
Ø
.
ui
[
H
] = (Ø.ui[H] << 
shi·
) |

57 (
Ø
.
ui
[
L
] >> (
INT_BITS
 - 
shi·
));

58 
Ø
.
ui
[
L
] <<
shi·
;

60  (
Ø
.
Œ
);

61 
	}
}

	@common/gcc-millicode/ashrdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__ashrdi3
(
a
, 
shi·
)

46 
uu
 
Ø
;

48 i‡(
shi·
 == 0)

49 (
a
);

50 
Ø
.
Œ
 = 
a
;

51 i‡(
shi·
 >
INT_BITS
) {

52 
s
;

62 
s
 = (
Ø
.
si
[
H
] >> (
INT_BITS
 - 1)) >> 1;

64 
Ø
.
ui
[
L
] =áa.
si
[
H
] >> (
shi·
 - 
INT_BITS
);

65 
Ø
.
ui
[
H
] = 
s
;

67 
Ø
.
ui
[
L
] = (Ø.ui[L] >> 
shi·
) |

68 (
Ø
.
ui
[
H
] << (
INT_BITS
 - 
shi·
));

70 
Ø
.
si
[
H
] >>
shi·
;

72  (
Ø
.
Œ
);

73 
	}
}

	@common/gcc-millicode/cmpdi2.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__cmpdi2
(
a
, 
b
)

48 
uu
 
Ø
, 
bb
;

50 
Ø
.
Œ
 = 
a
;

51 
bb
.
Œ
 = 
b
;

52  (
Ø
.
si
[
H
] < 
bb
.si[H] ? 0 :áa.si[H] > bb.si[H] ? 2 :

53 
Ø
.
ui
[
L
] < 
bb
.ui[L] ? 0 :áa.ui[L] > bb.ui[L] ? 2 : 1);

54 
	}
}

	@common/gcc-millicode/divdi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__divdi3
(
a
, 
b
)

47 
ua
, 
ub
, 
uq
;

48 
√g
 = 0;

50 
ua
 = 
a
;

51 
ub
 = 
b
;

53 i‡(
a
 < 0)

54 
ua
 = -ua, 
√g
 ^= 1;

55 i‡(
b
 < 0)

56 
ub
 = -ub, 
√g
 ^= 1;

58 
uq
 = 
	`__qdivªm
(
ua
, 
ub
, 
NULL
);

59 i‡(
√g
)

60 
uq
 = - uq;

61  
uq
;

62 
	}
}

	@common/gcc-millicode/iordi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__i‹di3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] |
bb
.ui[0];

51 
Ø
.
ui
[1] |
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@common/gcc-millicode/longlong.h

56 #i‡
deföed
(
_KERNEL
)

57 
	~<ty≥s.h
>

58 
	~<ídün.h
>

60 
	~<sys/ty≥s.h
>

61 
	~<sys/ídün.h
>

64 
	~<limôs.h
>

70 
	uuu
 {

71 
	mŒ
;

72 
	muŒ
;

73 
	msi
[2];

74 
	mui
[2];

80 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


81 
	#H
 1

	)

82 
	#L
 0

	)

85 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


86 
	#H
 0

	)

87 
	#L
 1

	)

96 
	#LONGLONG_BITS
 ((Ë* 
CHAR_BIT
)

	)

97 
	#INT_BITS
 ((Ë* 
CHAR_BIT
)

	)

98 
	#HALF_BITS
 ((Ë* 
CHAR_BIT
 / 2)

	)

110 
	#HHALF
(
x
Ë(()(xË>> 
HALF_BITS
)

	)

111 
	#LHALF
(
x
Ë(()(xË& ((()1 << 
HALF_BITS
Ë- 1))

	)

112 
	#LHUP
(
x
Ë(()(xË<< 
HALF_BITS
)

	)

114 
__adddi3
 ( , );

115 
__™ddi3
 ( , );

116 
__ashldi3
 ( , );

117 
__ashrdi3
 ( , );

118 
__cmpdi2
 ( , );

119 
__divdi3
 ( , );

120 
__i‹di3
 ( , );

121 
__lshldi3
 ( , );

122 
__lshrdi3
 ( , );

123 
__moddi3
 ( , );

124 
__muldi3
 ( , );

125 
__√gdi2
 ( );

126 
__⁄e_cm∂di2
 ( );

127 
__subdi3
 ( , );

128 
__ucmpdi2
 (, );

129 
__udivdi3
 (, );

130 
__umoddi3
 (, );

131 
__x‹di3
 ( , );

133 #i‚de‡
_KERNEL


134 
__fixdfdi
 ();

135 
__fixsfdi
 ();

136 
__fixunsdfdi
 ();

137 
__fixunssfdi
 ();

138 
__Êﬂtdidf
 ();

139 
__Êﬂtdisf
 ();

140 
__Êﬂtunsdidf
();

143 
__qdivªm
 (, ,

	@common/gcc-millicode/lshldi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__lshldi3
(
a
, 
shi·
)

47 
uu
 
Ø
;

49 i‡(
shi·
 == 0)

50 (
a
);

51 
Ø
.
Œ
 = 
a
;

52 i‡(
shi·
 >
INT_BITS
) {

53 
Ø
.
ui
[
H
] =áa.ui[
L
] << (
shi·
 - 
INT_BITS
);

54 
Ø
.
ui
[
L
] = 0;

56 
Ø
.
ui
[
H
] = (Ø.ui[H] << 
shi·
) |

57 (
Ø
.
ui
[
L
] >> (
INT_BITS
 - 
shi·
));

58 
Ø
.
ui
[
L
] <<
shi·
;

60  (
Ø
.
Œ
);

61 
	}
}

	@common/gcc-millicode/lshrdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__lshrdi3
(
a
, 
shi·
)

46 
uu
 
Ø
;

48 i‡(
shi·
 == 0)

49 (
a
);

50 
Ø
.
Œ
 = 
a
;

51 i‡(
shi·
 >
INT_BITS
) {

52 
Ø
.
ui
[
L
] =áa.ui[
H
] >> (
shi·
 - 
INT_BITS
);

53 
Ø
.
ui
[
H
] = 0;

55 
Ø
.
ui
[
L
] = (Ø.ui[L] >> 
shi·
) |

56 (
Ø
.
ui
[
H
] << (
INT_BITS
 - 
shi·
));

57 
Ø
.
ui
[
H
] >>
shi·
;

59  (
Ø
.
Œ
);

60 
	}
}

	@common/gcc-millicode/moddi3.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__moddi3
(
a
, 
b
)

48 
ua
, 
ub
, 
ur
;

49 
√g
 = 0;

51 
ua
 = 
a
;

52 
ub
 = 
b
;

54 i‡(
a
 < 0)

55 
ua
 = -ua, 
√g
 ^= 1;

56 i‡(
b
 < 0)

57 
ub
 = -ub;

58 ()
	`__qdivªm
(
ua
, 
ub
, &
ur
);

59 i‡(
√g
)

60 
ur
 = -ur;

61  (
ur
);

62 
	}
}

	@common/gcc-millicode/muldi3.c

38 
	~"l⁄gl⁄g.h
"

97 
__lmulq
(, );

100 
	$__muldi3
(
a
, 
b
)

102 
uu
 
u
, 
v
, 
low
, 
¥od
;

103 
high
, 
mid
, 
udiff
, 
vdiff
;

104 
√gÆl
, 
√gmid
;

105 
	#u1
 
u
.
ui
[
H
]

	)

106 
	#u0
 
u
.
ui
[
L
]

	)

107 
	#v1
 
v
.
ui
[
H
]

	)

108 
	#v0
 
v
.
ui
[
L
]

	)

115 i‡(
a
 >= 0)

116 
u
.
Œ
 = 
a
, 
√gÆl
 = 0;

118 
u
.
Œ
 = -
a
, 
√gÆl
 = 1;

119 i‡(
b
 >= 0)

120 
v
.
Œ
 = 
b
;

122 
v
.
Œ
 = -
b
, 
√gÆl
 ^= 1;

124 i‡(
u1
 =0 && 
v1
 == 0) {

130 
¥od
.
Œ
 = 
	`__lmulq
(
u0
, 
v0
);

138 
low
.
Œ
 = 
	`__lmulq
(
u0
, 
v0
);

140 i‡(
u1
 >
u0
)

141 
√gmid
 = 0, 
udiff
 = 
u1
 - 
u0
;

143 
√gmid
 = 1, 
udiff
 = 
u0
 - 
u1
;

144 i‡(
v0
 >
v1
)

145 
vdiff
 = 
v0
 - 
v1
;

147 
vdiff
 = 
v1
 - 
v0
, 
√gmid
 ^= 1;

148 
mid
 = 
udiff
 * 
vdiff
;

150 
high
 = 
u1
 * 
v1
;

155 
¥od
.
ui
[
H
] = 
high
 + (
√gmid
 ? -
mid
 : midË+ 
low
.ui[
L
] +

156 
low
.
ui
[
H
];

157 
¥od
.
ui
[
L
] = 
low
.ui[L];

159  (
√gÆl
 ? -
¥od
.
Œ
 :Örod.ll);

160 #unde‡
u1


161 #unde‡
u0


162 #unde‡
v1


163 #unde‡
v0


164 
	}
}

184 
	$__lmulq
(
u
, 
v
)

186 
u1
, 
u0
, 
v1
, 
v0
, 
udiff
, 
vdiff
, 
high
, 
mid
, 
low
;

187 
¥odh
, 
¥odl
, 
was
;

188 
uu
 
¥od
;

189 
√g
;

191 
u1
 = 
	`HHALF
(
u
);

192 
u0
 = 
	`LHALF
(
u
);

193 
v1
 = 
	`HHALF
(
v
);

194 
v0
 = 
	`LHALF
(
v
);

196 
low
 = 
u0
 * 
v0
;

199 i‡(
u1
 =0 && 
v1
 == 0)

200  (
low
);

202 i‡(
u1
 >
u0
)

203 
udiff
 = 
u1
 - 
u0
, 
√g
 = 0;

205 
udiff
 = 
u0
 - 
u1
, 
√g
 = 1;

206 i‡(
v0
 >
v1
)

207 
vdiff
 = 
v0
 - 
v1
;

209 
vdiff
 = 
v1
 - 
v0
, 
√g
 ^= 1;

210 
mid
 = 
udiff
 * 
vdiff
;

212 
high
 = 
u1
 * 
v1
;

215 
¥odh
 = 
high
 + 
	`HHALF
(high);

216 
¥odl
 = 
	`LHUP
(
high
);

219 i‡(
√g
) {

220 
was
 = 
¥odl
;

221 
¥odl
 -
	`LHUP
(
mid
);

222 
¥odh
 -
	`HHALF
(
mid
Ë+ (
¥odl
 > 
was
);

224 
was
 = 
¥odl
;

225 
¥odl
 +
	`LHUP
(
mid
);

226 
¥odh
 +
	`HHALF
(
mid
Ë+ (
¥odl
 < 
was
);

230 
was
 = 
¥odl
;

231 
¥odl
 +
	`LHUP
(
low
);

232 
¥odh
 +
	`HHALF
(
low
Ë+ (
¥odl
 < 
was
);

234 i‡((
¥odl
 +
low
) <Üow)

235 
¥odh
++;

238 
¥od
.
ui
[
H
] = 
¥odh
;

239 
¥od
.
ui
[
L
] = 
¥odl
;

240  (
¥od
.
Œ
);

241 
	}
}

	@common/gcc-millicode/negdi2.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__√gdi2
(
a
)

46 
uu
 
Ø
, 
ªs
;

48 
Ø
.
Œ
 = 
a
;

49 
ªs
.
ui
[
L
] = -
Ø
.ui[L];

50 
ªs
.
ui
[
H
] = -
Ø
.ui[H] - (ªs.ui[
L
] > 0);

51  (
ªs
.
Œ
);

52 
	}
}

	@common/gcc-millicode/notdi2.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__⁄e_cm∂di2
(
a
)

47 
uu
 
Ø
;

49 
Ø
.
Œ
 = 
a
;

50 
Ø
.
ui
[0] = ~aa.ui[0];

51 
Ø
.
ui
[1] = ~aa.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@common/gcc-millicode/qdivrem.c

43 
	~"l⁄gl⁄g.h
"

45 
	#B
 (()1 << 
HALF_BITS
Ë

	)

48 
	#COMBINE
(
a
, 
b
Ë((()◊Ë<< 
HALF_BITS
Ë| (b))

	)

51 #i‡
UINT_MAX
 =0xffffffffU && 
USHRT_MAX
 >= 0xffff

52 
	tdigô
;

54 
	tdigô
;

57 
shl
(
digô
 *
p
, 
Àn
, 
sh
);

68 
	$__qdivªm
(
uŒ
, 
vŒ
,

69 *
¨q
)

71 
uu
 
tmp
;

72 
digô
 *
u
, *
v
, *
q
;

73 
digô
 
v1
, 
v2
;

74 
qh©
, 
rh©
, 
t
;

75 
m
, 
n
, 
d
, 
j
, 
i
;

76 
digô
 
u•a˚
[5], 
v•a˚
[5], 
q•a˚
[5];

81 i‡(
vŒ
 == 0) {

83 vﬁ©ûêc⁄° 
zîo
 = 0;

85 
tmp
.
ui
[
H
] =Åmp.ui[
L
] = 1 / 
zîo
;

86 i‡(
¨q
)

87 *
¨q
 = 
uŒ
;

88  (
tmp
.
Œ
);

90 i‡(
uŒ
 < 
vŒ
) {

91 i‡(
¨q
)

92 *
¨q
 = 
uŒ
;

95 
u
 = &
u•a˚
[0];

96 
v
 = &
v•a˚
[0];

97 
q
 = &
q•a˚
[0];

112 
tmp
.
uŒ
 = ull;

113 
u
[0] = 0;

114 
u
[1] = (
digô
)
	`HHALF
(
tmp
.
ui
[
H
]);

115 
u
[2] = (
digô
)
	`LHALF
(
tmp
.
ui
[
H
]);

116 
u
[3] = (
digô
)
	`HHALF
(
tmp
.
ui
[
L
]);

117 
u
[4] = (
digô
)
	`LHALF
(
tmp
.
ui
[
L
]);

118 
tmp
.
uŒ
 = 
vŒ
;

119 
v
[1] = (
digô
)
	`HHALF
(
tmp
.
ui
[
H
]);

120 
v
[2] = (
digô
)
	`LHALF
(
tmp
.
ui
[
H
]);

121 
v
[3] = (
digô
)
	`HHALF
(
tmp
.
ui
[
L
]);

122 
v
[4] = (
digô
)
	`LHALF
(
tmp
.
ui
[
L
]);

123 
n
 = 4; 
v
[1] == 0; v++) {

124 i‡(--
n
 == 1) {

125 
rbj
;

126 
digô
 
q1
, 
q2
, 
q3
, 
q4
;

136 
t
 = 
v
[2];

137 
q1
 = (
digô
)(
u
[1] / 
t
);

138 
rbj
 = 
	`COMBINE
(
u
[1] % 
t
, u[2]);

139 
q2
 = (
digô
)(
rbj
 / 
t
);

140 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[3]);

141 
q3
 = (
digô
)(
rbj
 / 
t
);

142 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[4]);

143 
q4
 = (
digô
)(
rbj
 / 
t
);

144 i‡(
¨q
)

145 *
¨q
 = 
rbj
 % 
t
;

146 
tmp
.
ui
[
H
] = 
	`COMBINE
(
q1
, 
q2
);

147 
tmp
.
ui
[
L
] = 
	`COMBINE
(
q3
, 
q4
);

148  (
tmp
.
Œ
);

157 
m
 = 4 - 
n
; 
u
[1] == 0; u++)

158 
m
--;

159 
i
 = 4 - 
m
; --i >= 0;)

160 
q
[
i
] = 0;

161 
q
 +4 - 
m
;

169 
d
 = 0;

170 
t
 = 
v
[1];Å < 
B
 / 2;Å <<= 1)

171 
d
++;

172 i‡(
d
 > 0) {

173 
	`shl
(&
u
[0], 
m
 + 
n
, 
d
);

174 
	`shl
(&
v
[1], 
n
 - 1, 
d
);

179 
j
 = 0;

180 
v1
 = 
v
[1];

181 
v2
 = 
v
[2];

183 
digô
 
uj0
, 
uj1
, 
uj2
;

193 
uj0
 = 
u
[
j
 + 0];

194 
uj1
 = 
u
[
j
 + 1];

195 
uj2
 = 
u
[
j
 + 2];

196 i‡(
uj0
 =
v1
) {

197 
qh©
 = 
B
;

198 
rh©
 = 
uj1
;

199 
qh©_too_big
;

201 
¬
 = 
	`COMBINE
(
uj0
, 
uj1
);

202 
qh©
 = 
¬
 / 
v1
;

203 
rh©
 = 
¬
 % 
v1
;

205 
v2
 * 
qh©
 > 
	`COMBINE
(
rh©
, 
uj2
)) {

206 
qh©_too_big
:

207 
qh©
--;

208 i‡((
rh©
 +
v1
Ë>
B
)

217 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

218 
t
 = 
u
[
i
 + 
j
] - 
v
[i] * 
qh©
 -Å;

219 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

220 
t
 = (
B
 - 
	`HHALF
(t)) & (B - 1);

222 
t
 = 
u
[
j
] -Å;

223 
u
[
j
] = (
digô
)
	`LHALF
(
t
);

230 i‡(
	`HHALF
(
t
)) {

231 
qh©
--;

232 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

233 
t
 +
u
[
i
 + 
j
] + 
v
[i];

234 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

235 
t
 = 
	`HHALF
(t);

237 
u
[
j
] = (
digô
)
	`LHALF
(u[j] + 
t
);

239 
q
[
j
] = (
digô
)
qh©
;

240 } ++
j
 <
m
);

247 i‡(
¨q
) {

248 i‡(
d
) {

249 
i
 = 
m
 + 
n
; i > m; --i)

250 
u
[
i
] = (
digô
)((()u[i] >> 
d
) |

251 
	`LHALF
(()
u
[
i
 - 1] <<

252 (
HALF_BITS
 - 
d
)));

253 
u
[
i
] = 0;

255 
tmp
.
ui
[
H
] = 
	`COMBINE
(
u•a˚
[1], uspace[2]);

256 
tmp
.
ui
[
L
] = 
	`COMBINE
(
u•a˚
[3], uspace[4]);

257 *
¨q
 = 
tmp
.
Œ
;

260 
tmp
.
ui
[
H
] = 
	`COMBINE
(
q•a˚
[1], qspace[2]);

261 
tmp
.
ui
[
L
] = 
	`COMBINE
(
q•a˚
[3], qspace[4]);

262  (
tmp
.
Œ
);

263 
	}
}

271 
	$shl
(
digô
 *
p
, 
Àn
, 
sh
)

273 
i
;

275 
i
 = 0; i < 
Àn
; i++)

276 
p
[
i
] = (
digô
)(
	`LHALF
((Ì[i] << 
sh
) |

277 (()
p
[
i
 + 1] >> (
HALF_BITS
 - 
sh
)));

278 
p
[
i
] = (
digô
)(
	`LHALF
((Ì[i] << 
sh
));

279 
	}
}

	@common/gcc-millicode/subdi3.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__subdi3
(
a
, 
b
)

48 
uu
 
Ø
, 
bb
, 
diff
;

50 
Ø
.
Œ
 = 
a
;

51 
bb
.
Œ
 = 
b
;

52 
diff
.
ui
[
L
] = 
Ø
.ui[L] - 
bb
.ui[L];

53 
diff
.
ui
[
H
] = 
Ø
.ui[H] - 
bb
.ui[H] - (diff.ui[
L
] >áa.ui[L]);

54  (
diff
.
Œ
);

55 
	}
}

	@common/gcc-millicode/ucmpdi2.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__ucmpdi2
(
a
, 
b
)

47 
uu
 
Ø
, 
bb
;

49 
Ø
.
uŒ
 = 
a
;

50 
bb
.
uŒ
 = 
b
;

51  (
Ø
.
ui
[
H
] < 
bb
.ui[H] ? 0 :áa.ui[H] > bb.ui[H] ? 2 :

52 
Ø
.
ui
[
L
] < 
bb
.ui[L] ? 0 :áa.ui[L] > bb.ui[L] ? 2 : 1);

53 
	}
}

	@common/gcc-millicode/udivdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__udivdi3
(
a
, 
b
)

47  
	`__qdivªm
(
a
, 
b
, 
NULL
);

48 
	}
}

	@common/gcc-millicode/umoddi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__umoddi3
(
a
, 
b
)

46 
r
;

48 ()
	`__qdivªm
(
a
, 
b
, &
r
);

49  (
r
);

50 
	}
}

	@common/gcc-millicode/xordi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__x‹di3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] ^
bb
.ui[0];

51 
Ø
.
ui
[1] ^
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@common/libc/printf/__printf.c

40 #ifde‡
_KERNEL


41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	#as£π
 
KASSERT


	)

46 
	~<sys/ty≥s.h
>

47 
	~<as£π.h
>

48 
	~<°döt.h
>

49 
	~<°dio.h
>

50 
	~<°rög.h
>

53 
	~<°d¨g.h
>

64 
	#USE_LONGLONG


	)

69 #ifde‡
USE_LONGLONG


70 
	#INTTYPE
 

	)

72 
	#INTTYPE
 

	)

84 
	#NUMBER_BUF_SIZE
 (((
INTTYPE
Ë* 
CHAR_BIT
Ë/ 3 + 2)

	)

91 (*
	m£ndfunc
)(*
	m˛õ¡d©a
, c⁄° *
	m°r
, 
size_t
 
	mÀn
);

92 *
	m˛õ¡d©a
;

95 
va_li°
 
	m≠
;

98 
	mch¨cou¡
;

101 
	mö_p˘
;

105 
	mINTSZ
,

106 
	mLONGSZ
,

107 #ifde‡
USE_LONGLONG


108 
	mLLONGSZ
,

110 
	mSIZETSZ
,

111 } 
	msize
;

114 
INTTYPE
 
	mnum
;

117 
	msign
;

120 
	m•acög
;

123 
	mright•c
;

126 
	mfûlch¨
;

129 
	mba£
;

132 
	mba£¥efix
;

135 
	mÆtf‹m©
;

136 } 
	tPF
;

146 
	$__pf_¥öt
(
PF
 *
pf
, c⁄° *
txt
, 
size_t
 
Àn
)

148 
pf
->
	`£ndfunc
’f->
˛õ¡d©a
, 
txt
, 
Àn
);

149 
pf
->
ch¨cou¡
 +
Àn
;

150 
	}
}

157 
	$__pf_ídfõld
(
PF
 *
pf
)

159 
pf
->
ö_p˘
 = 0;

160 
pf
->
size
 = 
INTSZ
;

161 
pf
->
num
 = 0;

162 
pf
->
sign
 = 0;

163 
pf
->
•acög
 = 0;

164 
pf
->
right•c
 = 0;

165 
pf
->
fûlch¨
 = ' ';

166 
pf
->
ba£
 = 0;

167 
pf
->
ba£¥efix
 = 0;

168 
pf
->
Ætf‹m©
 = 0;

169 
	}
}

182 
	$__pf_modifõr
(
PF
 *
pf
, 
ch
)

184 
ch
) {

186 
pf
->
Ætf‹m©
 = 1;

189 
pf
->
right•c
 = 1;

192 i‡(
pf
->
size
==
LONGSZ
) {

193 #ifde‡
USE_LONGLONG


194 
pf
->
size
 = 
LLONGSZ
;

198 
pf
->
size
 = 
LONGSZ
;

202 
pf
->
size
 = 
SIZETSZ
;

205 i‡(
pf
->
•acög
>0) {

210 
pf
->
•acög
 =Öf->spacing*10;

216 
pf
->
fûlch¨
 = '0';

225 
	`as£π
(
ch
>'0' && ch<='9');

230 
pf
->
•acög
 =Öf->•acög*10 + (
ch
-'0');

233 
	}
}

242 
	$__pf_gënum
(
PF
 *
pf
, 
ch
)

244 i‡(
ch
=='p') {

251 
pf
->
num
 = (
uöçå_t
Ë
	`va_¨g
’f->
≠
, *);

253 i‡(
ch
=='d') {

255 
INTTYPE
 
sig√dnum
=0;

256 
pf
->
size
) {

257 
INTSZ
:

259 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

261 
LONGSZ
:

263 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

265 #ifde‡
USE_LONGLONG


266 
LLONGSZ
:

268 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

271 
SIZETSZ
:

273 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, 
ssize_t
);

280 i‡(
sig√dnum
 < 0) {

281 
pf
->
sign
 = -1;

282 
pf
->
num
 = -
sig√dnum
;

285 
pf
->
num
 = 
sig√dnum
;

290 
pf
->
size
) {

291 
INTSZ
:

293 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

295 
LONGSZ
:

297 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

299 #ifde‡
USE_LONGLONG


300 
LLONGSZ
:

302 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

305 
SIZETSZ
:

307 
pf
->
num
 = 
	`va_¨g
’f->
≠
, 
size_t
);

311 
	}
}

325 
	$__pf_£tba£
(
PF
 *
pf
, 
ch
)

327 
ch
) {

330 
pf
->
ba£
 = 10;

334 
pf
->
ba£
 = 16;

337 
pf
->
ba£
 = 8;

340 i‡(
pf
->
Ætf‹m©
 || 
ch
=='p') {

341 
pf
->
ba£¥efix
 = 1;

343 
	}
}

350 
	$__pf_fûl
(
PF
 *
pf
, 
•c
)

352 
f
 = 
pf
->
fûlch¨
;

353 
i
;

354 
i
=0; i<
•c
; i++) {

355 
	`__pf_¥öt
(
pf
, &
f
, 1);

357 
	}
}

367 
	$__pf_¥öt°uff
(
PF
 *
pf
,

368 c⁄° *
¥efix
, c⁄° *
¥efix2
,

369 c⁄° *
°uff
)

372 
Àn
 = 
	`°æí
(
¥efix
)+°æí(
¥efix2
)+°æí(
°uff
);

375 
•c
 = 
pf
->
•acög
;

376 i‡(
•c
 > 
Àn
) {

377 
•c
 -
Àn
;

380 
•c
 = 0;

384 i‡(
•c
 > 0 && 
pf
->
right•c
==0 &&Öf->
fûlch¨
!='0') {

385 
	`__pf_fûl
(
pf
, 
•c
);

389 
	`__pf_¥öt
(
pf
, 
¥efix
, 
	`°æí
(prefix));

390 
	`__pf_¥öt
(
pf
, 
¥efix2
, 
	`°æí
(prefix2));

393 i‡(
•c
 > 0 && 
pf
->
right•c
==0 &&Öf->
fûlch¨
=='0') {

394 
	`__pf_fûl
(
pf
, 
•c
);

398 
	`__pf_¥öt
(
pf
, 
°uff
, 
	`°æí
(stuff));

401 i‡(
•c
 > 0 && 
pf
->
right•c
!=0) {

402 
	`__pf_fûl
(
pf
, 
•c
);

404 
	}
}

415 
	$__pf_¥öäum
(
PF
 *
pf
)

418 c⁄° *c⁄° 
digôs
 = "0123456789abcdef";

420 
buf
[
NUMBER_BUF_SIZE
];

421 *
x
;

422 
INTTYPE
 
xnum
;

423 c⁄° *
b¥efix
;

424 c⁄° *
•ªfix
;

427 
x
 = 
buf
+(buf)-1;

430 *
x
-- = 0;

433 
xnum
 = 
pf
->
num
;

444 *
x
 = 
digôs
[
xnum
 % 
pf
->
ba£
];

449 
x
--;

454 
xnum
 = xnum / 
pf
->
ba£
;

459 } 
xnum
 > 0);

467 
x
++;

472 i‡(
pf
->
ba£¥efix
 &&Öf->
ba£
==16) {

473 
b¥efix
 = "0x";

475 i‡(
pf
->
ba£¥efix
 &&Öf->
ba£
==8) {

476 
b¥efix
 = "0";

479 
b¥efix
 = "";

485 
•ªfix
 = 
pf
->
sign
 ? "-" : "";

490 
	`__pf_¥öt°uff
(
pf
, 
•ªfix
, 
b¥efix
, 
x
);

491 
	}
}

498 
	$__pf_£nd
(
PF
 *
pf
, 
ch
)

501 
	`as£π
(
ch
!=0);

503 i‡(
pf
->
ö_p˘
==0 && 
ch
!='%') {

508 
c
 = 
ch
;

509 
	`__pf_¥öt
(
pf
, &
c
, 1);

511 i‡(
pf
->
ö_p˘
==0) {

515 
pf
->
ö_p˘
 = 1;

517 i‡(
	`°rchr
("#-lz0123456789", 
ch
)) {

522 
	`__pf_modifõr
(
pf
, 
ch
);

524 i‡(
	`°rchr
("doupx", 
ch
)) {

530 
	`__pf_gënum
(
pf
, 
ch
);

531 
	`__pf_£tba£
(
pf
, 
ch
);

532 
	`__pf_¥öäum
(
pf
);

533 
	`__pf_ídfõld
(
pf
);

535 i‡(
ch
=='s') {

539 c⁄° *
°r
 = 
	`va_¨g
(
pf
->
≠
, const *);

540 i‡(
°r
==
NULL
) {

541 
°r
 = "(null)";

543 
	`__pf_¥öt°uff
(
pf
, "", "", 
°r
);

544 
	`__pf_ídfõld
(
pf
);

552 
x
[2];

553 i‡(
ch
=='c') {

554 
x
[0] = 
	`va_¨g
(
pf
->
≠
, );

557 
x
[0] = 
ch
;

559 
x
[1] = 0;

560 
	`__pf_¥öt°uff
(
pf
, "", "", 
x
);

561 
	`__pf_ídfõld
(
pf
);

563 
	}
}

571 
__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

572 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

574 
PF
 
pf
;

575 
i
;

577 
pf
.
£ndfunc
 = 
func
;

578 
pf
.
˛õ¡d©a
 = clientdata;

579 #ifde‡
va_c›y


580 
	`va_c›y
(
pf
.
≠
,áp);

582 
pf
.
≠
 =áp;

584 
pf
.
ch¨cou¡
 = 0;

585 
	`__pf_ídfõld
(&
pf
);

587 
i
=0; 
f‹m©
[i]; i++) {

588 
	`__pf_£nd
(&
pf
, 
f‹m©
[
i
]);

591  
pf
.
ch¨cou¡
;

592 
	}
}

	@common/libc/printf/snprintf.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

40 
	~<°dio.h
>

44 
	~<°d¨g.h
>

61 *
	mbuf
;

62 
size_t
 
	mbuÊí
;

63 
size_t
 
	mbuÂos
;

64 } 
	tSNP
;

75 
	$__¢¥ötf_£nd
(*
myd©a
, c⁄° *
d©a
, 
size_t
 
Àn
)

77 
SNP
 *
¢p
 = 
myd©a
;

78 
i
;

81 
i
=0; i<
Àn
; i++) {

84 i‡(
¢p
->
buÂos
 < s≈->
buÊí
) {

87 
¢p
->
buf
[¢p->
buÂos
] = 
d©a
[
i
];

90 
¢p
->
buÂos
++;

93 
	}
}

99 
	$v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
va_li°
 
≠
)

101 
ch¨s
;

102 
SNP
 
¢p
;

111 
¢p
.
buf
 = buf;

112 i‡(
Àn
==0) {

113 
¢p
.
buÊí
 = 0;

116 
¢p
.
buÊí
 = 
Àn
-1;

118 
¢p
.
buÂos
 = 0;

121 
ch¨s
 = 
	`__v¥ötf
(
__¢¥ötf_£nd
, &
¢p
, 
fmt
, 
≠
);

130 i‡(
Àn
 > 0) {

131 
buf
[
¢p
.
buÂos
] = 0;

141  
ch¨s
;

142 
	}
}

148 
	$¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...)

150 
ch¨s
;

151 
va_li°
 
≠
;

152 
	`va_°¨t
(
≠
, 
fmt
);

153 
ch¨s
 = 
	`v¢¥ötf
(
buf
, 
Àn
, 
fmt
, 
≠
);

154 
	`va_íd
(
≠
);

155  
ch¨s
;

156 
	}
}

	@common/libc/stdlib/atoi.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

50 
	$©oi
(c⁄° *
s
)

52 c⁄° 
digôs
[] = "0123456789";

53 
vÆ
=0;

54 
√g
=0;

57 *
s
==' ' || *s=='\t') {

58 
s
++;

62 i‡(*
s
=='-') {

63 
√g
=1;

64 
s
++;

66 i‡(*
s
=='+') {

67 
s
++;

71 *
s
) {

72 c⁄° *
whîe
;

73 
digô
;

76 
whîe
 = 
	`°rchr
(
digôs
, *
s
);

77 i‡(
whîe
==
NULL
) {

83 
digô
 = (
whîe
 - 
digôs
);

88 
vÆ
 = vÆ*10 + 
digô
;

91 
s
++;

95 i‡(
√g
) {

96  -
vÆ
;

100  
vÆ
;

101 
	}
}

	@common/libc/string/bzero.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

49 
	$bzîo
(*
vblock
, 
size_t
 
Àn
)

51 *
block
 = 
vblock
;

52 
size_t
 
i
;

64 i‡((
uöçå_t
)
block
 % () == 0 &&

65 
Àn
 % () == 0) {

66 *
lb
 = (*)
block
;

67 
i
=0; i<
Àn
/(); i++) {

68 
lb
[
i
] = 0;

72 
i
=0; i<
Àn
; i++) {

73 
block
[
i
] = 0;

76 
	}
}

	@common/libc/string/memcpy.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

48 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

50 
size_t
 
i
;

65 i‡((
uöçå_t
)
d°
 % () == 0 &&

66 (
uöçå_t
)
§c
 % () == 0 &&

67 
Àn
 % () == 0) {

69 *
d
 = 
d°
;

70 c⁄° *
s
 = 
§c
;

72 
i
=0; i<
Àn
/(); i++) {

73 
d
[
i
] = 
s
[i];

77 *
d
 = 
d°
;

78 c⁄° *
s
 = 
§c
;

80 
i
=0; i<
Àn
; i++) {

81 
d
[
i
] = 
s
[i];

85  
d°
;

86 
	}
}

	@common/libc/string/memmove.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

49 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

51 
size_t
 
i
;

78 i‡((
uöçå_t
)
d°
 < (uöçå_t)
§c
) {

83  
	`mem˝y
(
d°
, 
§c
, 
Àn
);

91 i‡((
uöçå_t
)
d°
 % () == 0 &&

92 (
uöçå_t
)
§c
 % () == 0 &&

93 
Àn
 % () == 0) {

95 *
d
 = 
d°
;

96 c⁄° *
s
 = 
§c
;

103 
i
=
Àn
/(); i>0; i--) {

104 
d
[
i
-1] = 
s
[i-1];

108 *
d
 = 
d°
;

109 c⁄° *
s
 = 
§c
;

111 
i
=
Àn
; i>0; i--) {

112 
d
[
i
-1] = 
s
[i-1];

116  
d°
;

117 
	}
}

	@common/libc/string/memset.c

30 #ifde‡
_KERNEL


31 
	~<ty≥s.h
>

32 
	~<lib.h
>

34 
	~<°rög.h
>

42 
	$mem£t
(*
±r
, 
ch
, 
size_t
 
Àn
)

44 *
p
 = 
±r
;

45 
size_t
 
i
;

47 
i
=0; i<
Àn
; i++) {

48 
p
[
i
] = 
ch
;

51  
±r
;

52 
	}
}

	@common/libc/string/strcat.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°rˇt
(*
de°
, c⁄° *
§c
)

49 
size_t
 
off£t
;

51 
off£t
 = 
	`°æí
(
de°
);

52 
	`°r˝y
(
de°
+
off£t
, 
§c
);

53  
de°
;

54 
	}
}

	@common/libc/string/strchr.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°rchr
(c⁄° *
s
, 
ch_¨g
)

50 c⁄° 
ch
 = 
ch_¨g
;

53 *
s
) {

55 i‡(*
s
 =
ch
) {

56  (*)
s
;

58 
s
++;

62 i‡(*
s
 =
ch
) {

63  (*)
s
;

67  
NULL
;

68 
	}
}

	@common/libc/string/strcmp.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

48 
	$°rcmp
(c⁄° *
a
, c⁄° *
b
)

50 
size_t
 
i
;

66 
i
=0; 
a
[i]!=0 &&á[i]==
b
[i]; i++) {

83 i‡(()
a
[
i
] > ()
b
[i]) {

86 i‡(
a
[
i
] =
b
[i]) {

90 
	}
}

	@common/libc/string/strcpy.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

46 
	$°r˝y
(*
de°
, c⁄° *
§c
)

48 
size_t
 
i
;

53 
i
=0; 
§c
[i]; i++) {

54 
de°
[
i
] = 
§c
[i];

60 
de°
[
i
] = 0;

62  
de°
;

63 
	}
}

	@common/libc/string/strlen.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

46 
size_t


47 
	$°æí
(c⁄° *
°r
)

49 
size_t
 
ªt
 = 0;

51 
°r
[
ªt
]) {

52 
ªt
++;

54  
ªt
;

55 
	}
}

	@common/libc/string/strrchr.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°ºchr
(c⁄° *
s
, 
ch_¨g
)

50 c⁄° 
ch
 = 
ch_¨g
;

53 
size_t
 
i
 = 
	`°æí
(
s
)+1;

56 
i
 > 0) {

59 
i
--;

62 i‡(
s
[
i
] =
ch
) {

63  (*)(
s
+
i
);

68  
NULL
;

69 
	}
}

	@common/libc/string/strtok_r.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

50 
	$°πok_r
(*
°rög
, c⁄° *
£ps
, **
c⁄ãxt
)

52 *
hód
;

53 *
èû
;

56 i‡(
°rög
) {

57 *
c⁄ãxt
 = 
°rög
;

61 
hód
 = *
c⁄ãxt
;

62 i‡(
hód
 =
NULL
) {

63  
NULL
;

67 *
hód
 && 
	`°rchr
(
£ps
, *head)) {

68 
hód
++;

72 i‡(*
hód
 == 0) {

74 *
c⁄ãxt
 = 
NULL
;

75  
NULL
;

79 
èû
 = 
hód
;

80 *
èû
 && !
	`°rchr
(
£ps
, *tail)) {

81 
èû
++;

85 i‡(*
èû
 == 0) {

86 *
c⁄ãxt
 = 
NULL
;

89 *
èû
 = 0;

90 
èû
++;

91 *
c⁄ãxt
 = 
èû
;

95  
hód
;

96 
	}
}

	@kern/arch/mips/include/current.h

30 #i‚de‡
_MIPS_CURRENT_H_


31 
	#_MIPS_CURRENT_H_


	)

62 #ifde‡
__GNUC__


63 
thªad
 *
cuπhªad
 
__asm
("$23");

67 #unde‡
__NEED_CURTHREAD


68 
	#__NEED_CURCPU


	)

71 
	#INIT_CURCPU
(
˝u
, 
thªad
Ë(
cuπhªad
 = (thªad), 
cur˝u
 = (˝u))

	)

	@kern/arch/mips/include/elf.h

30 #i‚de‡
_MIPS_ELF_H_


31 
	#_MIPS_ELF_H_


	)

39 
	#EM_MACHINE
 
EM_MIPS


	)

42 
	#R_MIPS_NONE
 0

	)

43 
	#R_MIPS_16
 1

	)

44 
	#R_MIPS_32
 2

	)

45 
	#R_MIPS_REL32
 3

	)

46 
	#R_MIPS_26
 4

	)

47 
	#R_MIPS_HI16
 5

	)

48 
	#R_MIPS_LO16
 6

	)

49 
	#R_MIPS_GPREL16
 7

	)

50 
	#R_MIPS_LITERAL
 8

	)

51 
	#R_MIPS_GOT16
 9

	)

52 
	#R_MIPS_PC16
 10

	)

53 
	#R_MIPS_CALL16
 11

	)

54 
	#R_MIPS_GPREL32
 12

	)

	@kern/arch/mips/include/kern/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIPS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@kern/arch/mips/include/kern/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@kern/arch/mips/include/kern/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@kern/arch/mips/include/kern/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@kern/arch/mips/include/kern/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@kern/arch/mips/include/membar.h

30 #i‚de‡
_MIPS_MEMBAR_H_


31 
	#_MIPS_MEMBAR_H_


	)

43 
MEMBAR_INLINE


45 
	$memb¨_™y_™y
()

47 
__asm
 volatile(

55 
	}
}

57 
MEMBAR_INLINE
 
	$memb¨_lﬂd_lﬂd
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

58 
MEMBAR_INLINE
 
	$memb¨_°‹e_°‹e
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

59 
MEMBAR_INLINE
 
	$memb¨_°‹e_™y
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

60 
MEMBAR_INLINE
 
	$memb¨_™y_°‹e
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

	@kern/arch/mips/include/specialreg.h

30 #i‚de‡
_MIPS_SPECIALREG_H_


31 
	#_MIPS_SPECIALREG_H_


	)

37 
	#c0_ödex
 
$0


	)

38 
	#c0_øndom
 
$1


	)

39 
	#c0_íåylo
 
$2


	)

42 
	#c0_c⁄ãxt
 
$4


	)

45 
	#c0_vaddr
 
$8


	)

46 
	#c0_cou¡
 
$9


	)

47 
	#c0_íåyhi
 
$10


	)

48 
	#c0_com∑ª
 
$11


	)

49 
	#c0_°©us
 
$12


	)

50 
	#c0_ˇu£
 
$13


	)

51 
	#c0_ïc
 
$14


	)

52 
	#c0_¥id
 
$15


	)

61 
	#CST_IEc
 0x00000001

	)

62 
	#CST_KUc
 0x00000002

	)

63 
	#CST_IEp
 0x00000004

	)

64 
	#CST_KUp
 0x00000008

	)

65 
	#CST_IEo
 0x00000010

	)

66 
	#CST_KUo
 0x00000020

	)

67 
	#CST_MODEMASK
 0x0000003‡

	)

68 
	#CST_IRQMASK
 0x0000ff00

	)

69 
	#CST_BEV
 0x00400000

	)

74 
	#CCA_UTLB
 0x00000001

	)

75 
	#CCA_CODE
 0x0000003¯

	)

76 
	#CCA_IRQS
 0x0000ff00

	)

77 
	#CCA_COPN
 0x30000000

	)

78 
	#CCA_JD
 0x80000000

	)

80 
	#CCA_CODESHIFT
 2

	)

85 
	#CIN_P
 0x80000000

	)

86 
	#CIN_INDEX
 0x00003f00

	)

88 
	#CIN_INDEXSHIFT
 8

	)

105 
	#CTX_VSHIFT
 0x001ffff¯

	)

106 
	#CTX_PTBASE
 0xf„00000

	)

108 
	#CTX_PTBASESHIFT
 21

	)

113 
	#EXADDR_UTLB
 0x80000000

	)

114 
	#EXADDR_GENERAL
 0x80000080

	)

	@kern/arch/mips/include/spinlock.h

30 #i‚de‡
_MIPS_SPINLOCK_H_


31 
	#_MIPS_SPINLOCK_H_


	)

33 
	~<cdefs.h
>

37 
	t•ölock_d©a_t
;

40 
	#SPINLOCK_DATA_INITIALIZER
 0

	)

43 
SPINLOCK_INLINE


44 
•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
);

45 
SPINLOCK_INLINE


46 
•ölock_d©a_t
 
•ölock_d©a_gë
(vﬁ©ûê•ölock_d©a_à*
sd
);

47 
SPINLOCK_INLINE


48 
•ölock_d©a_t
 
•ölock_d©a_ã°™d£t
(vﬁ©ûê•ölock_d©a_à*
sd
);

52 
SPINLOCK_INLINE


54 
	$•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
)

56 *
sd
 = 
vÆ
;

57 
	}
}

59 
SPINLOCK_INLINE


60 
•ölock_d©a_t


61 
	$•ölock_d©a_gë
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

63  *
sd
;

64 
	}
}

66 
SPINLOCK_INLINE


67 
•ölock_d©a_t


68 
	$•ölock_d©a_ã°™d£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

70 
•ölock_d©a_t
 
x
;

71 
•ölock_d©a_t
 
y
;

84 
y
 = 1;

85 
__asm
 volatile(

92 : "=&r" (
x
), "+r" (
y
Ë: "r" (
sd
));

93 i‡(
y
 == 0) {

96  
x
;

97 
	}
}

	@kern/arch/mips/include/thread.h

30 #i‚de‡
_MIPS_THREAD_H_


31 
	#_MIPS_THREAD_H_


	)

38 
	~<£tjmp.h
>

40 (*
	tbadÁu…func_t
)();

42 
	sthªad_machdï
 {

43 
badÁu…func_t
 
tm_badÁu…func
;

44 
jmp_buf
 
tm_c›yjmp
;

	@kern/arch/mips/include/tlb.h

30 #i‚de‡
_MIPS_TLB_H_


31 
	#_MIPS_TLB_H_


	)

58 
éb_øndom
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

59 
éb_wrôe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
, uöt32_à
ödex
);

60 
éb_ªad
(
uöt32_t
 *
íåyhi
, uöt32_à*
íåylo
, uöt32_à
ödex
);

61 
éb_¥obe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

80 
	#TLBHI_VPAGE
 0xfffff000

	)

84 
	#TLBLO_PPAGE
 0xfffff000

	)

85 
	#TLBLO_NOCACHE
 0x00000800

	)

86 
	#TLBLO_DIRTY
 0x00000400

	)

87 
	#TLBLO_VALID
 0x00000200

	)

95 
	#TLBHI_INVALID
(
íåyno
Ë((0x80000+”¡ryno))<<12)

	)

96 
	#TLBLO_INVALID
(Ë(0)

	)

102 
	#NUM_TLB
 64

	)

	@kern/arch/mips/include/trapframe.h

30 #i‚de‡
_MIPS_TRAPFRAME_H_


31 
	#_MIPS_TRAPFRAME_H_


	)

40 
	så≠‰ame
 {

41 
uöt32_t
 
	mtf_vaddr
;

42 
uöt32_t
 
	mtf_°©us
;

43 
uöt32_t
 
	mtf_ˇu£
;

44 
uöt32_t
 
	mtf_lo
;

45 
uöt32_t
 
	mtf_hi
;

46 
uöt32_t
 
	mtf_ø
;

47 
uöt32_t
 
	mtf_©
;

48 
uöt32_t
 
	mtf_v0
;

49 
uöt32_t
 
	mtf_v1
;

50 
uöt32_t
 
	mtf_a0
;

51 
uöt32_t
 
	mtf_a1
;

52 
uöt32_t
 
	mtf_a2
;

53 
uöt32_t
 
	mtf_a3
;

54 
uöt32_t
 
	mtf_t0
;

55 
uöt32_t
 
	mtf_t1
;

56 
uöt32_t
 
	mtf_t2
;

57 
uöt32_t
 
	mtf_t3
;

58 
uöt32_t
 
	mtf_t4
;

59 
uöt32_t
 
	mtf_t5
;

60 
uöt32_t
 
	mtf_t6
;

61 
uöt32_t
 
	mtf_t7
;

62 
uöt32_t
 
	mtf_s0
;

63 
uöt32_t
 
	mtf_s1
;

64 
uöt32_t
 
	mtf_s2
;

65 
uöt32_t
 
	mtf_s3
;

66 
uöt32_t
 
	mtf_s4
;

67 
uöt32_t
 
	mtf_s5
;

68 
uöt32_t
 
	mtf_s6
;

69 
uöt32_t
 
	mtf_s7
;

70 
uöt32_t
 
	mtf_t8
;

71 
uöt32_t
 
	mtf_t9
;

72 
uöt32_t
 
	mtf_k0
;

73 
uöt32_t
 
	mtf_k1
;

74 
uöt32_t
 
	mtf_gp
;

75 
uöt32_t
 
	mtf_•
;

76 
uöt32_t
 
	mtf_s8
;

77 
uöt32_t
 
	mtf_ïc
;

83 
	#EX_IRQ
 0

	)

84 
	#EX_MOD
 1

	)

85 
	#EX_TLBL
 2

	)

86 
	#EX_TLBS
 3

	)

87 
	#EX_ADEL
 4

	)

88 
	#EX_ADES
 5

	)

89 
	#EX_IBE
 6

	)

90 
	#EX_DBE
 7

	)

91 
	#EX_SYS
 8

	)

92 
	#EX_BP
 9

	)

93 
	#EX_RI
 10

	)

94 
	#EX_CPU
 11

	)

95 
	#EX_OVF
 12

	)

101 
__DEAD
 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

106 
vaddr_t
 
˝u°acks
[];

107 
vaddr_t
 
˝uthªads
[];

	@kern/arch/mips/include/types.h

30 #i‚de‡
_MIPS_TYPES_H_


31 
	#_MIPS_TYPES_H_


	)

43 
__u32
 
	t∑ddr_t
;

44 
__u32
 
	tvaddr_t
;

	@kern/arch/mips/include/vm.h

30 #i‚de‡
_MIPS_VM_H_


31 
	#_MIPS_VM_H_


	)

38 
	#PAGE_SIZE
 4096

	)

39 
	#PAGE_FRAME
 0xfffff000

	)

51 
	#MIPS_KUSEG
 0x00000000

	)

52 
	#MIPS_KSEG0
 0x80000000

	)

53 
	#MIPS_KSEG1
 0xa0000000

	)

54 
	#MIPS_KSEG2
 0xc0000000

	)

68 
	#PADDR_TO_KVADDR
(
∑ddr
Ë(’addr)+
MIPS_KSEG0
)

	)

74 
	#USERSPACETOP
 
MIPS_KSEG0


	)

84 
	#USERSTACK
 
USERSPACETOP


	)

108 
øm_boŸ°øp
();

109 
∑ddr_t
 
øm_°ólmem
(
≈ages
);

110 
∑ddr_t
 
øm_gësize
();

111 
∑ddr_t
 
øm_gëfú°‰ì
();

119 
	sébshoŸdown
 {

123 
	mts_∂a˚hﬁdî
;

126 
	#TLBSHOOTDOWN_MAX
 16

	)

	@kern/arch/mips/locore/trap.c

30 
	~<ty≥s.h
>

31 
	~<sig«l.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<vm.h
>

40 
	~<maöbus.h
>

41 
	~<sysˇŒ.h
>

45 
__DEAD
 
asm_u£rmode
(
å≠‰ame
 *
tf
);

48 
mùs_å≠
(
å≠‰ame
 *
tf
);

52 
	#NTRAPCODES
 13

	)

53 c⁄° *c⁄° 
	gå≠codíames
[
NTRAPCODES
] = {

74 
	$kûl_cuπhªad
(
vaddr_t
 
ïc
, 
code
, vaddr_à
vaddr
)

76 
sig
 = 0;

78 
	`KASSERT
(
code
 < 
NTRAPCODES
);

79 
code
) {

80 
EX_IRQ
:

81 
EX_IBE
:

82 
EX_DBE
:

83 
EX_SYS
:

85 
	`KASSERT
(0);

86 
sig
 = 
SIGABRT
;

88 
EX_MOD
:

89 
EX_TLBL
:

90 
EX_TLBS
:

91 
sig
 = 
SIGSEGV
;

93 
EX_ADEL
:

94 
EX_ADES
:

95 
sig
 = 
SIGBUS
;

97 
EX_BP
:

98 
sig
 = 
SIGTRAP
;

100 
EX_RI
:

101 
sig
 = 
SIGILL
;

103 
EX_CPU
:

104 
sig
 = 
SIGSEGV
;

106 
EX_OVF
:

107 
sig
 = 
SIGFPE
;

115 
	`k¥ötf
("Fatal user modeÅrap %u sig %d (%s,Épc 0x%x, vaddr 0x%x)\n",

116 
code
, 
sig
, 
å≠codíames
[code], 
ïc
, 
vaddr
);

117 
	`∑nic
("I don't know howÅo handleÅhis\n");

118 
	}
}

126 
	$mùs_å≠
(
å≠‰ame
 *
tf
)

128 
uöt32_t
 
code
;

130 
boﬁ
 
iskîn
;

131 
•l
;

134 
	`KASSERT
((
å≠‰ame
)==(37*4));

139 
code
 = (
tf
->
tf_ˇu£
 & 
CCA_CODE
Ë>> 
CCA_CODESHIFT
;

141 
iskîn
 = (
tf
->
tf_°©us
 & 
CST_KUp
) == 0;

143 
	`KASSERT
(
code
 < 
NTRAPCODES
);

146 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

147 
	`KASSERT
((
vaddr_t
)
tf
 > (vaddr_t)
cuπhªad
->
t_°ack
);

148 
	`KASSERT
((
vaddr_t
)
tf
 < (vaddr_t)(
cuπhªad
->
t_°ack


149 + 
STACK_SIZE
));

153 i‡(
code
 =
EX_IRQ
) {

154 
ﬁd_ö
;

155 
boﬁ
 
dﬂdju°
;

157 
ﬁd_ö
 = 
cuπhªad
->
t_ö_öãºu±
;

158 
cuπhªad
->
t_ö_öãºu±
 = 1;

177 i‡(
cuπhªad
->
t_cur•l
 == 0) {

178 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

179 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

180 
cuπhªad
->
t_cur•l
 = 
IPL_HIGH
;

181 
cuπhªad
->
t_ùlhigh_cou¡
++;

182 
dﬂdju°
 = 
åue
;

185 
dﬂdju°
 = 
Ál£
;

188 
	`maöbus_öãºu±
(
tf
);

190 i‡(
dﬂdju°
) {

191 
	`KASSERT
(
cuπhªad
->
t_cur•l
 =
IPL_HIGH
);

192 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 1);

193 
cuπhªad
->
t_ùlhigh_cou¡
--;

194 
cuπhªad
->
t_cur•l
 = 0;

197 
cuπhªad
->
t_ö_öãºu±
 = 
ﬁd_ö
;

198 
d⁄e2
;

212 
•l
 = 
	`•lhigh
();

213 
	`•lx
(
•l
);

216 i‡(
code
 =
EX_SYS
) {

218 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

219 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

221 
	`DEBUG
(
DB_SYSCALL
, "syscall: #%d,árgs %x %x %x %x\n",

222 
tf
->
tf_v0
,Åf->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
,Åf->
tf_a3
);

224 
	`sysˇŒ
(
tf
);

225 
d⁄e
;

233 
code
) {

234 
EX_MOD
:

235 i‡(
	`vm_Áu…
(
VM_FAULT_READONLY
, 
tf
->
tf_vaddr
)==0) {

236 
d⁄e
;

239 
EX_TLBL
:

240 i‡(
	`vm_Áu…
(
VM_FAULT_READ
, 
tf
->
tf_vaddr
)==0) {

241 
d⁄e
;

244 
EX_TLBS
:

245 i‡(
	`vm_Áu…
(
VM_FAULT_WRITE
, 
tf
->
tf_vaddr
)==0) {

246 
d⁄e
;

249 
EX_IBE
:

250 
EX_DBE
:

260 
	`∑nic
("Bu†îr‹Éx˚±i⁄, PC=0x%x\n", 
tf
->
tf_ïc
);

270 i‡(!
iskîn
) {

275 
	`kûl_cuπhªad
(
tf
->
tf_ïc
, 
code
,Åf->
tf_vaddr
);

276 
d⁄e
;

300 i‡(
cuπhªad
 !
NULL
 &&

301 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 !
NULL
) {

302 
tf
->
tf_ïc
 = (
vaddr_t
Ë
cuπhªad
->
t_machdï
.
tm_badÁu…func
;

303 
d⁄e
;

310 
	`k¥ötf
("∑nic: F©ÆÉx˚±i⁄ %u (%sËö kî√»mode\n", 
code
,

311 
å≠codíames
[
code
]);

312 
	`k¥ötf
("panic: EPC 0x%x,Éxception vaddr 0x%x\n",

313 
tf
->
tf_ïc
,Åf->
tf_vaddr
);

315 
	`∑nic
("I can't handleÅhis... IÅhink I'll just dieÇow...\n");

317 
d⁄e
:

322 
	`˝u_úqoff
();

323 
d⁄e2
:

331 i‡(
cuπhªad
->
t_°ack
 =
NULL
) {

335 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

336 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

347 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

348 
	}
}

368 
	$mùs_u£rmode
(
å≠‰ame
 *
tf
)

377 
	`•l0
();

378 
	`˝u_úqoff
();

380 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

381 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

398 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

403 
	`asm_u£rmode
(
tf
);

404 
	}
}

423 
	$íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, u£Ωå_à
ív
,

424 
vaddr_t
 
°ack
, vaddr_à
íåy
)

426 
å≠‰ame
 
tf
;

428 
	`bzîo
(&
tf
, (tf));

430 
tf
.
tf_°©us
 = 
CST_IRQMASK
 | 
CST_IEp
 | 
CST_KUp
;

431 
tf
.
tf_ïc
 = 
íåy
;

432 
tf
.
tf_a0
 = 
¨gc
;

433 
tf
.
tf_a1
 = (
vaddr_t
)
¨gv
;

434 
tf
.
tf_a2
 = (
vaddr_t
)
ív
;

435 
tf
.
tf_•
 = 
°ack
;

437 
	`mùs_u£rmode
(&
tf
);

438 
	}
}

	@kern/arch/mips/syscall/syscall.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/sysˇŒ.h
>

33 
	~<lib.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<sysˇŒ.h
>

79 
	$sysˇŒ
(
å≠‰ame
 *
tf
)

81 
ˇŒno
;

82 
öt32_t
 
ªtvÆ
;

83 
îr
;

85 
	`KASSERT
(
cuπhªad
 !
NULL
);

86 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

87 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

89 
ˇŒno
 = 
tf
->
tf_v0
;

100 
ªtvÆ
 = 0;

102 
ˇŒno
) {

103 
SYS_ªboŸ
:

104 
îr
 = 
	`sys_ªboŸ
(
tf
->
tf_a0
);

107 
SYS___time
:

108 
îr
 = 
	`sys___time
((
u£Ωå_t
)
tf
->
tf_a0
,

109 (
u£Ωå_t
)
tf
->
tf_a1
);

115 
	`k¥ötf
("Unknow¿sysˇŒ %d\n", 
ˇŒno
);

116 
îr
 = 
ENOSYS
;

121 i‡(
îr
) {

127 
tf
->
tf_v0
 = 
îr
;

128 
tf
->
tf_a3
 = 1;

132 
tf
->
tf_v0
 = 
ªtvÆ
;

133 
tf
->
tf_a3
 = 0;

141 
tf
->
tf_ïc
 += 4;

144 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

146 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

147 
	}
}

158 
	$íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
)

160 ()
tf
;

161 
	}
}

	@kern/arch/mips/thread/cpu.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<mùs/•ecüÃeg.h
>

37 
	~<mùs/å≠‰ame.h
>

38 
	~<∂©f‹m/max˝us.h
>

39 
	~<˝u.h
>

40 
	~<thªad.h
>

59 
vaddr_t
 
	g˝u°acks
[
MAXCPUS
];

60 
vaddr_t
 
	g˝uthªads
[
MAXCPUS
];

68 
	$˝u_machdï_öô
(
˝u
 *
c
)

70 
vaddr_t
 
°ackpoöãr
;

72 
	`KASSERT
(
c
->
c_numbî
 < 
MAXCPUS
);

74 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

84 
°ackpoöãr
 = (
vaddr_t
Ë
c
->
c_cuπhªad
->
t_°ack
;

86 
°ackpoöãr
 +
STACK_SIZE
;

88 
˝u°acks
[
c
->
c_numbî
] = 
°ackpoöãr
;

89 
˝uthªads
[
c
->
c_numbî
] = (
vaddr_t
)c->
c_cuπhªad
;

91 
	}
}

102 
	#SYS161_PRID_ORIG
 0x000003ff

	)

103 
	#SYS161_PRID_2X
 0x000000a1

	)

105 
ölöe


106 
uöt32_t


107 
	$˝u_gë¥id
()

109 
uöt32_t
 
¥id
;

111 
__asm
 vﬁ©ûe("mfc0 %0,$15" : "Ù" (
¥id
));

112  
¥id
;

113 
	}
}

115 
ölöe


116 
uöt32_t


117 
	$˝u_gë„©uªs
()

119 
uöt32_t
 
„©uªs
;

121 
__asm
 volatile(".setÖush;"

125 : "Ù" (
„©uªs
));

126  
„©uªs
;

127 
	}
}

129 
ölöe


130 
uöt32_t


131 
	$˝u_gëi„©uªs
()

133 
uöt32_t
 
„©uªs
;

135 
__asm
 volatile(".setÖush;"

139 : "Ù" (
„©uªs
));

140  
„©uªs
;

141 
	}
}

144 
	$˝u_idítify
(*
buf
, 
size_t
 
max
)

146 
uöt32_t
 
¥id
;

147 
uöt32_t
 
„©uªs
;

149 
¥id
 = 
	`˝u_gë¥id
();

150 
¥id
) {

151 
SYS161_PRID_ORIG
:

152 
	`¢¥ötf
(
buf
, 
max
, "MIPS/161 (System/161 1.xándÖre-2.x)");

154 
SYS161_PRID_2X
:

155 
„©uªs
 = 
	`˝u_gë„©uªs
();

156 
	`¢¥ötf
(
buf
, 
max
, "MIPS/161 (System/161 2.x) features 0x%x",

157 
„©uªs
);

158 
„©uªs
 = 
	`˝u_gëi„©uªs
();

159 i‡(
„©uªs
 != 0) {

160 
	`k¥ötf
("WARNING: unknown CPU incompatible features "

161 "0x%x\n", 
„©uªs
);

165 
	`¢¥ötf
(
buf
, 
max
, "32-bit MIPS (unknownÅype, CPU ID 0x%x)",

166 
¥id
);

169 
	}
}

195 
	#GET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mfc0 %0,$12" : "Ù" (x))

	)

196 
	#SET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mtc0 %0,$12" :: "r" (x))

	)

202 
	$˝u_úq⁄
()

204 
uöt32_t
 
x
;

206 
	`GET_STATUS
(
x
);

207 
x
 |
CST_IEc
;

208 
	`SET_STATUS
(
x
);

209 
	}
}

215 
	$˝u_úqoff
()

217 
uöt32_t
 
x
;

219 
	`GET_STATUS
(
x
);

220 
x
 &~(
uöt32_t
)
CST_IEc
;

221 
	`SET_STATUS
(
x
);

222 
	}
}

229 
	$˝u_úq⁄off
()

231 
uöt32_t
 
x
, 
x⁄
, 
xoff
;

233 
	`GET_STATUS
(
x
);

234 
x⁄
 = 
x
 | 
CST_IEc
;

235 
xoff
 = 
x
 & ~(
uöt32_t
)
CST_IEc
;

236 
	`SET_STATUS
(
x⁄
);

237 
__asm
 volatile("nop;Çop;Çop;Çop");

238 
	`SET_STATUS
(
xoff
);

239 
	}
}

257 
ölöe


259 
	$waô
()

272 
__asm
 volatile(

279 
	}
}

285 
	$˝u_idÀ
()

287 
	`waô
();

288 
	`˝u_úq⁄off
();

289 
	}
}

295 
	$˝u_hÆt
()

297 
	`˝u_úqoff
();

299 
	`waô
();

301 
	}
}

	@kern/arch/mips/thread/switchframe.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªad¥iv©e.h
>

35 
	~"swôch‰ame.h
"

38 
mùs_thªad°¨t
( );

55 
swôch‰ame_öô
(
thªad
 *thread,

56 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

57 *
d©a1
, 
d©a2
)

59 
vaddr_t
 
°ackt›
;

60 
swôch‰ame
 *
sf
;

67 
°ackt›
 = ((
vaddr_t
)
thªad
->
t_°ack
Ë+ 
STACK_SIZE
;

68 
sf
 = ((
swôch‰ame
 *Ë
°ackt›
) - 1;

71 
	`bzîo
(
sf
, (*sf));

91 
sf
->
sf_s0
 = (
uöt32_t
)
íåypoöt
;

92 
sf
->
sf_s1
 = (
uöt32_t
)
d©a1
;

93 
sf
->
sf_s2
 = (
uöt32_t
)
d©a2
;

94 
sf
->
sf_ø
 = (
uöt32_t
)
mùs_thªad°¨t
;

97 
thªad
->
t_c⁄ãxt
 = 
sf
;

98 
	}
}

	@kern/arch/mips/thread/switchframe.h

30 #i‚de‡
_MIPS_SWITCHFRAME_H_


31 
	#_MIPS_SWITCHFRAME_H_


	)

39 
	sswôch‰ame
 {

40 
uöt32_t
 
	msf_s0
;

41 
uöt32_t
 
	msf_s1
;

42 
uöt32_t
 
	msf_s2
;

43 
uöt32_t
 
	msf_s3
;

44 
uöt32_t
 
	msf_s4
;

45 
uöt32_t
 
	msf_s5
;

46 
uöt32_t
 
	msf_s6
;

47 
uöt32_t
 
	msf_s8
;

48 
uöt32_t
 
	msf_gp
;

49 
uöt32_t
 
	msf_ø
;

	@kern/arch/mips/thread/thread_machdep.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªad¥iv©e.h
>

40 
	$thªad_machdï_öô
(
thªad_machdï
 *
tm
)

42 
tm
->
tm_badÁu…func
 = 
NULL
;

43 
	}
}

46 
	$thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
)

48 
	`KASSERT
(
tm
->
tm_badÁu…func
 =
NULL
);

49 
	}
}

	@kern/arch/mips/vm/dumbvm.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<•l.h
>

34 
	~<•ölock.h
>

35 
	~<¥oc.h
>

36 
	~<cuºít.h
>

37 
	~<mùs/éb.h
>

38 
	~<addr•a˚.h
>

39 
	~<vm.h
>

59 
	#DUMBVM_STACKPAGES
 18

	)

64 
•ölock
 
	g°ólmem_lock
 = 
SPINLOCK_INITIALIZER
;

67 
	$vm_boŸ°øp
()

70 
	}
}

73 
∑ddr_t


74 
	$gëµages
(
≈ages
)

76 
∑ddr_t
 
addr
;

78 
	`•ölock_acquúe
(&
°ólmem_lock
);

80 
addr
 = 
	`øm_°ólmem
(
≈ages
);

82 
	`•ölock_ªÀa£
(&
°ólmem_lock
);

83  
addr
;

84 
	}
}

87 
vaddr_t


88 
	$Æloc_k∑ges
(
≈ages
)

90 
∑ddr_t
 
∑
;

91 
∑
 = 
	`gëµages
(
≈ages
);

92 i‡(
∑
==0) {

95  
	`PADDR_TO_KVADDR
(
∑
);

96 
	}
}

99 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

103 ()
addr
;

104 
	}
}

107 
	$vm_ébshoŸdown_Æl
()

109 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

110 
	}
}

113 
	$vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *
ts
)

115 ()
ts
;

116 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

117 
	}
}

120 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

122 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

123 
∑ddr_t
 
∑ddr
;

124 
i
;

125 
uöt32_t
 
ehi
, 
ño
;

126 
addr•a˚
 *
as
;

127 
•l
;

129 
Áu…addªss
 &
PAGE_FRAME
;

131 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

133 
Áu…ty≥
) {

134 
VM_FAULT_READONLY
:

136 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

137 
VM_FAULT_READ
:

138 
VM_FAULT_WRITE
:

141  
EINVAL
;

144 i‡(
cuΩroc
 =
NULL
) {

150  
EFAULT
;

153 
as
 = 
	`¥oc_gëas
();

154 i‡(
as
 =
NULL
) {

159  
EFAULT
;

163 
	`KASSERT
(
as
->
as_vba£1
 != 0);

164 
	`KASSERT
(
as
->
as_pba£1
 != 0);

165 
	`KASSERT
(
as
->
as_≈ages1
 != 0);

166 
	`KASSERT
(
as
->
as_vba£2
 != 0);

167 
	`KASSERT
(
as
->
as_pba£2
 != 0);

168 
	`KASSERT
(
as
->
as_≈ages2
 != 0);

169 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

170 
	`KASSERT
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

171 
	`KASSERT
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

172 
	`KASSERT
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

173 
	`KASSERT
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

174 
	`KASSERT
((
as
->
as_°ackpba£
 & 
PAGE_FRAME
) ==ás->as_stackpbase);

176 
vba£1
 = 
as
->
as_vba£1
;

177 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

178 
vba£2
 = 
as
->
as_vba£2
;

179 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

180 
°ackba£
 = 
USERSTACK
 - 
DUMBVM_STACKPAGES
 * 
PAGE_SIZE
;

181 
°ackt›
 = 
USERSTACK
;

183 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

184 
∑ddr
 = (
Áu…addªss
 - 
vba£1
Ë+ 
as
->
as_pba£1
;

186 i‡(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

187 
∑ddr
 = (
Áu…addªss
 - 
vba£2
Ë+ 
as
->
as_pba£2
;

189 i‡(
Áu…addªss
 >
°ackba£
 && fau…addªs†< 
°ackt›
) {

190 
∑ddr
 = (
Áu…addªss
 - 
°ackba£
Ë+ 
as
->
as_°ackpba£
;

193  
EFAULT
;

197 
	`KASSERT
((
∑ddr
 & 
PAGE_FRAME
) ==Öaddr);

200 
•l
 = 
	`•lhigh
();

202 
i
=0; i<
NUM_TLB
; i++) {

203 
	`éb_ªad
(&
ehi
, &
ño
, 
i
);

204 i‡(
ño
 & 
TLBLO_VALID
) {

207 
ehi
 = 
Áu…addªss
;

208 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

209 
	`DEBUG
(
DB_VM
, "dumbvm: 0x%x -> 0x%x\n", 
Áu…addªss
, 
∑ddr
);

210 
	`éb_wrôe
(
ehi
, 
ño
, 
i
);

211 
	`•lx
(
•l
);

215 
	`k¥ötf
("dumbvm: Ran out of TLBÉntries - cannot handleÖage fault\n");

216 
	`•lx
(
•l
);

217  
EFAULT
;

218 
	}
}

220 
addr•a˚
 *

221 
	$as_¸óã
()

223 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

224 i‡(
as
==
NULL
) {

225  
NULL
;

228 
as
->
as_vba£1
 = 0;

229 
as
->
as_pba£1
 = 0;

230 
as
->
as_≈ages1
 = 0;

231 
as
->
as_vba£2
 = 0;

232 
as
->
as_pba£2
 = 0;

233 
as
->
as_≈ages2
 = 0;

234 
as
->
as_°ackpba£
 = 0;

236  
as
;

237 
	}
}

240 
	$as_de°roy
(
addr•a˚
 *
as
)

242 
	`k‰ì
(
as
);

243 
	}
}

246 
	$as_a˘iv©e
()

248 
i
, 
•l
;

249 
addr•a˚
 *
as
;

251 
as
 = 
	`¥oc_gëas
();

252 i‡(
as
 =
NULL
) {

257 
•l
 = 
	`•lhigh
();

259 
i
=0; i<
NUM_TLB
; i++) {

260 
	`éb_wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

263 
	`•lx
(
•l
);

264 
	}
}

267 
	$as_dó˘iv©e
()

270 
	}
}

273 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

274 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

276 
size_t
 
≈ages
;

279 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

280 
vaddr
 &
PAGE_FRAME
;

283 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

285 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

288 ()
ªadabÀ
;

289 ()
wrôóbÀ
;

290 ()
execuèbÀ
;

292 i‡(
as
->
as_vba£1
 == 0) {

293 
as
->
as_vba£1
 = 
vaddr
;

294 
as
->
as_≈ages1
 = 
≈ages
;

298 i‡(
as
->
as_vba£2
 == 0) {

299 
as
->
as_vba£2
 = 
vaddr
;

300 
as
->
as_≈ages2
 = 
≈ages
;

307 
	`k¥ötf
("dumbvm: Warning:Åoo manyÑegions\n");

308  
ENOSYS
;

309 
	}
}

313 
	$as_zîo_ªgi⁄
(
∑ddr_t
 
∑ddr
, 
≈ages
)

315 
	`bzîo
((*)
	`PADDR_TO_KVADDR
(
∑ddr
), 
≈ages
 * 
PAGE_SIZE
);

316 
	}
}

319 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

321 
	`KASSERT
(
as
->
as_pba£1
 == 0);

322 
	`KASSERT
(
as
->
as_pba£2
 == 0);

323 
	`KASSERT
(
as
->
as_°ackpba£
 == 0);

325 
as
->
as_pba£1
 = 
	`gëµages
◊s->
as_≈ages1
);

326 i‡(
as
->
as_pba£1
 == 0) {

327  
ENOMEM
;

330 
as
->
as_pba£2
 = 
	`gëµages
◊s->
as_≈ages2
);

331 i‡(
as
->
as_pba£2
 == 0) {

332  
ENOMEM
;

335 
as
->
as_°ackpba£
 = 
	`gëµages
(
DUMBVM_STACKPAGES
);

336 i‡(
as
->
as_°ackpba£
 == 0) {

337  
ENOMEM
;

340 
	`as_zîo_ªgi⁄
(
as
->
as_pba£1
,ás->
as_≈ages1
);

341 
	`as_zîo_ªgi⁄
(
as
->
as_pba£2
,ás->
as_≈ages2
);

342 
	`as_zîo_ªgi⁄
(
as
->
as_°ackpba£
, 
DUMBVM_STACKPAGES
);

345 
	}
}

348 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

350 ()
as
;

352 
	}
}

355 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

357 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

359 *
°ack±r
 = 
USERSTACK
;

361 
	}
}

364 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

366 
addr•a˚
 *
√w
;

368 
√w
 = 
	`as_¸óã
();

369 i‡(
√w
==
NULL
) {

370  
ENOMEM
;

373 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

374 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

375 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

376 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

379 i‡(
	`as_¥ï¨e_lﬂd
(
√w
)) {

380 
	`as_de°roy
(
√w
);

381  
ENOMEM
;

384 
	`KASSERT
(
√w
->
as_pba£1
 != 0);

385 
	`KASSERT
(
√w
->
as_pba£2
 != 0);

386 
	`KASSERT
(
√w
->
as_°ackpba£
 != 0);

388 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£1
),

389 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£1
),

390 
ﬁd
->
as_≈ages1
*
PAGE_SIZE
);

392 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£2
),

393 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£2
),

394 
ﬁd
->
as_≈ages2
*
PAGE_SIZE
);

396 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_°ackpba£
),

397 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_°ackpba£
),

398 
DUMBVM_STACKPAGES
*
PAGE_SIZE
);

400 *
ªt
 = 
√w
;

402 
	}
}

	@kern/arch/mips/vm/ram.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<vm.h
>

33 
	~<maöbus.h
>

36 
vaddr_t
 
	gfú°‰ì
;

38 
∑ddr_t
 
	gfú°∑ddr
;

39 
∑ddr_t
 
	gœ°∑ddr
;

46 
	$øm_boŸ°øp
()

48 
size_t
 
ømsize
;

51 
ømsize
 = 
	`maöbus_ømsize
();

60 i‡(
ømsize
 > 512*1024*1024) {

61 
ømsize
 = 512*1024*1024;

64 
œ°∑ddr
 = 
ømsize
;

70 
fú°∑ddr
 = 
fú°‰ì
 - 
MIPS_KSEG0
;

72 
	`k¥ötf
("%ukÖhysical memoryávailable\n",

73 (
œ°∑ddr
-
fú°∑ddr
)/1024);

74 
	}
}

94 
∑ddr_t


95 
	$øm_°ólmem
(
≈ages
)

97 
size_t
 
size
;

98 
∑ddr_t
 
∑ddr
;

100 
size
 = 
≈ages
 * 
PAGE_SIZE
;

102 i‡(
fú°∑ddr
 + 
size
 > 
œ°∑ddr
) {

106 
∑ddr
 = 
fú°∑ddr
;

107 
fú°∑ddr
 +
size
;

109  
∑ddr
;

110 
	}
}

127 
∑ddr_t


128 
	$øm_gësize
()

130  
œ°∑ddr
;

131 
	}
}

145 
∑ddr_t


146 
	$øm_gëfú°‰ì
()

148 
∑ddr_t
 
ªt
;

150 
ªt
 = 
fú°∑ddr
;

151 
fú°∑ddr
 = 
œ°∑ddr
 = 0;

152  
ªt
;

153 
	}
}

	@kern/arch/sys161/dev/lamebus_machdep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<cuºít.h
>

40 
	~<memb¨.h
>

41 
	~<synch.h
>

42 
	~<maöbus.h
>

43 
	~<sys161/bus.h
>

44 
	~<œmebus/œmebus.h
>

45 
	~"autoc⁄f.h
"

53 
	#CPU_FREQUENCY
 25000000

	)

64 
	$mùs_timî_£t
(
uöt32_t
 
cou¡
)

70 
__asm
 volatile(

75 :: "r" (
cou¡
));

76 
	}
}

83 
œmebus_so·c
 *
	gœmebus
;

86 
	$maöbus_boŸ°øp
()

89 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

92 
œmebus
 = 
	`œmebus_öô
();

95 
	`œmebus_föd_˝us
(
œmebus
);

100 
	`k¥ötf
("lamebus0 (system main bus)\n");

107 
	`•l0
();

113 
	`autoc⁄f_œmebus
(
œmebus
, 0);

118 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

119 
	}
}

125 
	$maöbus_°¨t_˝us
()

127 
	`œmebus_°¨t_˝us
(
œmebus
);

128 
	}
}

136 
	$œmebus_m≠_¨ó
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

138 
uöt32_t
 
addªss
;

140 ()
bus
;

142 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

144 
addªss
 = 
LB_BASEADDR
 + 
¶Ÿ
*
LB_SLOT_SIZE
 + 
off£t
;

145  (*)
addªss
;

146 
	}
}

151 
uöt32_t


152 
	$œmebus_ªad_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

154 
uöt32_t
 *
±r
;

156 
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

162 
	`memb¨_lﬂd_lﬂd
();

164  *
±r
;

165 
	}
}

171 
	$œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
,

172 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

174 
uöt32_t
 *
±r
;

176 
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

177 *
±r
 = 
vÆ
;

183 
	`memb¨_°‹e_°‹e
();

184 
	}
}

191 
	$maöbus_powîoff
()

199 
	`œmebus_powîoff
(
œmebus
);

200 
	}
}

206 
	$maöbus_ªboŸ
()

215 
	`k¥ötf
("CannotÑeboot -Öowering off instead, sorry.\n");

216 
	`maöbus_powîoff
();

217 
	}
}

225 
	$maöbus_hÆt
()

227 
	`˝u_hÆt
();

228 
	}
}

238 
	$maöbus_∑nic
()

240 
	`maöbus_powîoff
();

241 
	}
}

247 
uöt32_t


248 
	$maöbus_ømsize
()

250 
uöt32_t
 
ømsize
;

252 
ømsize
 = 
	`œmebus_ømsize
();

262 i‡(
ømsize
 > 508*1024*1024) {

263 
ømsize
 = 508*1024*1024;

266  
ømsize
;

267 
	}
}

273 
	$maöbus_£nd_ùi
(
˝u
 *
èrgë
)

275 
	`œmebus_as£π_ùi
(
œmebus
, 
èrgë
);

276 
	}
}

283 
	#LAMEBUS_IRQ_BIT
 0x00000400

	)

284 
	#LAMEBUS_IPI_BIT
 0x00000800

	)

285 
	#MIPS_TIMER_BIT
 0x00008000

	)

288 
	$maöbus_öãºu±
(
å≠‰ame
 *
tf
)

290 
uöt32_t
 
ˇu£
;

291 
boﬁ
 
£í
 = 
Ál£
;

294 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

296 
ˇu£
 = 
tf
->
tf_ˇu£
;

297 i‡(
ˇu£
 & 
LAMEBUS_IRQ_BIT
) {

298 
	`œmebus_öãºu±
(
œmebus
);

299 
£í
 = 
åue
;

301 i‡(
ˇu£
 & 
LAMEBUS_IPI_BIT
) {

302 
	`öãΩro˚ss‹_öãºu±
();

303 
	`œmebus_˛ór_ùi
(
œmebus
, 
cur˝u
);

304 
£í
 = 
åue
;

306 i‡(
ˇu£
 & 
MIPS_TIMER_BIT
) {

308 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

310 
	`h¨d˛ock
();

311 
£í
 = 
åue
;

314 i‡(!
£í
) {

315 i‡((
ˇu£
 & 
CCA_IRQS
) == 0) {

330 
	`∑nic
("Unknown interrupt; causeÑegister is %08x\n",

331 
ˇu£
);

334 
	}
}

	@kern/arch/sys161/include/bus.h

30 #i‚de‡
_SYS161_BUS_H_


31 
	#_SYS161_BUS_H_


	)

40 
	~<machöe/vm.h
>

41 
	~<œmebus/œmebus.h
>

43 
	#bus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
) \

44 
	`œmebus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
)

	)

46 
	#bus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
) \

47 
	`œmebus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
)

	)

49 
	#bus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
) \

50 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
)

	)

57 
	#LB_BASEADDR
 (
MIPS_KSEG1
 + 0x1„00000)

	)

	@kern/arch/sys161/include/maxcpus.h

30 #i‚de‡
_SYS161_MAXCPUS_H_


31 
	#_SYS161_MAXCPUS_H_


	)

42 
	#MAXCPUS
 32

	)

	@kern/compile/DUMBVM/.depend.__printf.c

	@kern/compile/DUMBVM/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_øndom
 <= 0) {

282 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

285 
	}
}

289 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

291 ()
bus
; ()
busunô
;

292 
	}
}

296 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

298 ()
bus
; ()
busunô
;

299 
	}
}

303 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

305 ()
bus
; ()
busunô
;

306 
	}
}

310 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

312 ()
bus
; ()
busunô
;

313 
	}
}

317 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

319 ()
bus
; ()
busunô
;

320 
	}
}

323 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

325 ()
bus
; ()
busunô
;

327 
ªsu…
, 
devunô
=
√xtunô_emu
;

329 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

330 
devunô
++;

331 } 
ªsu…
==0);

334 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

336 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

337 
devunô
++;

338 } 
ªsu…
==0);

341 
ªsu…
, 
devunô
=
√xtunô_…imî
;

343 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

344 
devunô
++;

345 } 
ªsu…
==0);

348 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

350 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

351 
devunô
++;

352 } 
ªsu…
==0);

355 
ªsu…
, 
devunô
=
√xtunô_lhd
;

357 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

358 
devunô
++;

359 } 
ªsu…
==0);

362 
ªsu…
, 
devunô
=
√xtunô_l£r
;

364 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

365 
devunô
++;

366 } 
ªsu…
==0);

368 
	}
}

372 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

374 ()
bus
; ()
busunô
;

376 i‡(
√xtunô_c⁄
 <= 0) {

377 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

380 
	}
}

384 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

386 ()
bus
; ()
busunô
;

387 
	}
}

391 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

393 ()
bus
; ()
busunô
;

395 i‡(
√xtunô_bìp
 <= 0) {

396 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

400 i‡(
√xtunô_π˛ock
 <= 0) {

401 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@kern/compile/DUMBVM/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@kern/compile/DUMBVM/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@kern/compile/DUMBVM/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@kern/compile/DUMBVM/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@kern/compile/DUMBVM/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@kern/compile/DUMBVM/opt-semfs.h

2 #i‚de‡
_OPT_SEMFS_H_


3 
	#_OPT_SEMFS_H_


	)

4 
	#OPT_SEMFS
 1

	)

	@kern/compile/DUMBVM/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@kern/compile/DUMBVM/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 1;

3 c⁄° 
	gbuûdc⁄fig
[] = "DUMBVM";

	@kern/dev/generic/beep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<gíîic/bìp.h
>

34 
	~"autoc⁄f.h
"

47 
bìp_so·c
 *
	gthe_bìp
 = 
NULL
;

50 
	$c⁄fig_bìp
(
bìp_so·c
 *
bs
, 
unô
)

53 i‡(
unô
!=0) {

54  
ENODEV
;

57 
	`KASSERT
(
the_bìp
==
NULL
);

58 
the_bìp
 = 
bs
;

60 
	}
}

63 
	$bìp
()

65 i‡(
the_bìp
!=
NULL
) {

66 
the_bìp
->
	`bs_bìp
—he_bìp->
bs_devd©a
);

69 
	`k¥ötf
("beep: Warning:Ço beep device\n");

71 
	}
}

	@kern/dev/generic/beep.h

30 #i‚de‡
_GENERIC_BEEP_H_


31 
	#_GENERIC_BEEP_H_


	)

38 
	sbìp_so·c
 {

39 *
	mbs_devd©a
;

40 (*
	mbs_bìp
)(*
	mdevd©a
);

	@kern/dev/generic/console.c

50 
	~<ty≥s.h
>

51 
	~<kîn/î∫o.h
>

52 
	~<lib.h
>

53 
	~<uio.h
>

54 
	~<˝u.h
>

55 
	~<thªad.h
>

56 
	~<cuºít.h
>

57 
	~<synch.h
>

58 
	~<gíîic/c⁄sﬁe.h
>

59 
	~<vfs.h
>

60 
	~<devi˚.h
>

61 
	~"autoc⁄f.h
"

66 
c⁄_so·c
 *
	gthe_c⁄sﬁe
 = 
NULL
;

72 
lock
 *
	gc⁄_u£æock_ªad
 = 
NULL
;

73 
lock
 *
	gc⁄_u£æock_wrôe
 = 
NULL
;

82 
	#DELAYBUFSIZE
 1024

	)

83 
	gdñayed_outbuf
[
DELAYBUFSIZE
];

84 
size_t
 
	gdñayed_outbuf_pos
=0;

88 
	$putch_dñayed
(
ch
)

95 
	`KASSERT
(
dñayed_outbuf_pos
 < (
dñayed_outbuf
));

96 
dñayed_outbuf
[
dñayed_outbuf_pos
++] = 
ch
;

97 
	}
}

101 
	$Êush_dñay_buf
()

103 
size_t
 
i
;

104 
i
=0; i<
dñayed_outbuf_pos
; i++) {

105 
	`putch
(
dñayed_outbuf
[
i
]);

107 
dñayed_outbuf_pos
 = 0;

108 
	}
}

118 
	$putch_pﬁÀd
(
c⁄_so·c
 *
cs
, 
ch
)

120 
cs
->
	`cs_£ndpﬁÀd
(cs->
cs_devd©a
, 
ch
);

121 
	}
}

130 
	$putch_öå
(
c⁄_so·c
 *
cs
, 
ch
)

132 
	`P
(
cs
->
cs_w£m
);

133 
cs
->
	`cs_£nd
(cs->
cs_devd©a
, 
ch
);

134 
	}
}

141 
	$gëch_öå
(
c⁄_so·c
 *
cs
)

143 
ªt
;

145 
	`P
(
cs
->
cs_r£m
);

146 
ªt
 = 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_èû
];

147 
cs
->
cs_gŸch¨s_èû
 =

148 (
cs
->
cs_gŸch¨s_èû
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

149  
ªt
;

150 
	}
}

162 
	$c⁄_öput
(*
vcs
, 
ch
)

164 
c⁄_so·c
 *
cs
 = 
vcs
;

165 
√xthód
;

167 
√xthód
 = (
cs
->
cs_gŸch¨s_hód
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

168 i‡(
√xthód
 =
cs
->
cs_gŸch¨s_èû
) {

173 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_hód
] = 
ch
;

174 
cs
->
cs_gŸch¨s_hód
 = 
√xthód
;

176 
	`V
(
cs
->
cs_r£m
);

177 
	}
}

183 
	$c⁄_°¨t
(*
vcs
)

185 
c⁄_so·c
 *
cs
 = 
vcs
;

187 
	`V
(
cs
->
cs_w£m
);

188 
	}
}

201 
	$putch
(
ch
)

203 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

205 i‡(
cs
==
NULL
) {

206 
	`putch_dñayed
(
ch
);

208 i‡(
cuπhªad
->
t_ö_öãºu±
 ||

209 
cuπhªad
->
t_cur•l
 > 0 ||

210 
cur˝u
->
c_•ölocks
 > 0) {

211 
	`putch_pﬁÀd
(
cs
, 
ch
);

214 
	`putch_öå
(
cs
, 
ch
);

216 
	}
}

219 
	$gëch
()

221 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

222 
	`KASSERT
(
cs
 !
NULL
);

223 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
 && cuπhªad->
t_ùlhigh_cou¡
 == 0);

225  
	`gëch_öå
(
cs
);

226 
	}
}

236 
	$c⁄_óch›í
(
devi˚
 *
dev
, 
›íÊags
)

238 ()
dev
;

239 ()
›íÊags
;

241 
	}
}

245 
	$c⁄_io
(
devi˚
 *
dev
, 
uio
 *uio)

247 
ªsu…
;

248 
ch
;

249 
lock
 *
lk
;

251 ()
dev
;

253 i‡(
uio
->
uio_rw
==
UIO_READ
) {

254 
lk
 = 
c⁄_u£æock_ªad
;

257 
lk
 = 
c⁄_u£æock_wrôe
;

260 
	`KASSERT
(
lk
 !
NULL
);

261 
	`lock_acquúe
(
lk
);

263 
uio
->
uio_ªsid
 > 0) {

264 i‡(
uio
->
uio_rw
==
UIO_READ
) {

265 
ch
 = 
	`gëch
();

266 i‡(
ch
=='\r') {

267 
ch
 = '\n';

269 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

270 i‡(
ªsu…
) {

271 
	`lock_ªÀa£
(
lk
);

272  
ªsu…
;

274 i‡(
ch
=='\n') {

279 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

280 i‡(
ªsu…
) {

281 
	`lock_ªÀa£
(
lk
);

282  
ªsu…
;

284 i‡(
ch
=='\n') {

285 
	`putch
('\r');

287 
	`putch
(
ch
);

290 
	`lock_ªÀa£
(
lk
);

292 
	}
}

296 
	$c⁄_io˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

299 ()
dev
;

300 ()
›
;

301 ()
d©a
;

302  
EINVAL
;

303 
	}
}

305 c⁄° 
devi˚_›s
 
	gc⁄sﬁe_dev›s
 = {

306 .
dev›_óch›í
 = 
c⁄_óch›í
,

307 .
	gdev›_io
 = 
c⁄_io
,

308 .
	gdev›_io˘l
 = 
c⁄_io˘l
,

313 
	$©èch_c⁄sﬁe_to_vfs
(
c⁄_so·c
 *
cs
)

315 
devi˚
 *
dev
;

316 
ªsu…
;

318 
dev
 = 
	`kmÆloc
((*dev));

319 i‡(
dev
==
NULL
) {

320  
ENOMEM
;

323 
dev
->
d_›s
 = &
c⁄sﬁe_dev›s
;

324 
dev
->
d_blocks
 = 0;

325 
dev
->
d_blocksize
 = 1;

326 
dev
->
d_d©a
 = 
cs
;

328 
ªsu…
 = 
	`vfs_adddev
("c⁄", 
dev
, 0);

329 i‡(
ªsu…
) {

330 
	`k‰ì
(
dev
);

331  
ªsu…
;

335 
	}
}

344 
	$c⁄fig_c⁄
(
c⁄_so·c
 *
cs
, 
unô
)

346 
£m≠h‹e
 *
r£m
, *
w£m
;

347 
lock
 *
æk
, *
wlk
;

356 i‡(
unô
>0) {

357 
	`KASSERT
(
the_c⁄sﬁe
!=
NULL
);

358  
ENODEV
;

360 
	`KASSERT
(
the_c⁄sﬁe
==
NULL
);

362 
r£m
 = 
	`£m_¸óã
("consoleÑead", 0);

363 i‡(
r£m
 =
NULL
) {

364  
ENOMEM
;

366 
w£m
 = 
	`£m_¸óã
("console write", 1);

367 i‡(
w£m
 =
NULL
) {

368 
	`£m_de°roy
(
r£m
);

369  
ENOMEM
;

371 
æk
 = 
	`lock_¸óã
("console-lock-read");

372 i‡(
æk
 =
NULL
) {

373 
	`£m_de°roy
(
r£m
);

374 
	`£m_de°roy
(
w£m
);

375  
ENOMEM
;

377 
wlk
 = 
	`lock_¸óã
("console-lock-write");

378 i‡(
wlk
 =
NULL
) {

379 
	`lock_de°roy
(
æk
);

380 
	`£m_de°roy
(
r£m
);

381 
	`£m_de°roy
(
w£m
);

382  
ENOMEM
;

385 
cs
->
cs_r£m
 = 
r£m
;

386 
cs
->
cs_w£m
 = 
w£m
;

387 
cs
->
cs_gŸch¨s_hód
 = 0;

388 
cs
->
cs_gŸch¨s_èû
 = 0;

390 
the_c⁄sﬁe
 = 
cs
;

391 
c⁄_u£æock_ªad
 = 
æk
;

392 
c⁄_u£æock_wrôe
 = 
wlk
;

394 
	`Êush_dñay_buf
();

396  
	`©èch_c⁄sﬁe_to_vfs
(
cs
);

397 
	}
}

	@kern/dev/generic/console.h

30 #i‚de‡
_GENERIC_CONSOLE_H_


31 
	#_GENERIC_CONSOLE_H_


	)

40 
	#CONSOLE_INPUT_BUFFER_SIZE
 32

	)

42 
	sc⁄_so·c
 {

44 *
	mcs_devd©a
;

45 (*
	mcs_£nd
)(*
	mdevd©a
, 
	mch
);

46 (*
	mcs_£ndpﬁÀd
)(*
	mdevd©a
, 
	mch
);

49 
£m≠h‹e
 *
	mcs_r£m
;

50 
£m≠h‹e
 *
	mcs_w£m
;

51 
	mcs_gŸch¨s
[
CONSOLE_INPUT_BUFFER_SIZE
];

52 
	mcs_gŸch¨s_hód
;

53 
	mcs_gŸch¨s_èû
;

59 
c⁄_öput
–*
cs
, 
ch
);

60 
c⁄_°¨t
–*
cs
);

	@kern/dev/generic/random.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<lib.h
>

34 
	~<uio.h
>

35 
	~<vfs.h
>

36 
	~<gíîic/øndom.h
>

37 
	~"autoc⁄f.h
"

50 
øndom_so·c
 *
	gthe_øndom
 = 
NULL
;

58 
	$øndóch›í
(
devi˚
 *
dev
, 
›íÊags
)

60 ()
dev
;

62 i‡(
›íÊags
 !
O_RDONLY
) {

63  
EIO
;

67 
	}
}

74 
	$øndio
(
devi˚
 *
dev
, 
uio
 *uio)

76 
øndom_so·c
 *
rs
 = 
dev
->
d_d©a
;

78 i‡(
uio
->
uio_rw
 !
UIO_READ
) {

79  
EIO
;

82  
rs
->
	`rs_ªad
‘s->
rs_devd©a
, 
uio
);

83 
	}
}

90 
	$øndio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

95 ()
dev
;

96 ()
›
;

97 ()
d©a
;

98  
EIOCTL
;

99 
	}
}

101 c⁄° 
devi˚_›s
 
	gøndom_dev›s
 = {

102 .
dev›_óch›í
 = 
øndóch›í
,

103 .
	gdev›_io
 = 
øndio
,

104 .
	gdev›_io˘l
 = 
øndio˘l
,

111 
	$c⁄fig_øndom
(
øndom_so·c
 *
rs
, 
unô
)

113 
ªsu…
;

116 i‡(
unô
!=0) {

117  
ENODEV
;

120 
	`KASSERT
(
the_øndom
==
NULL
);

121 
the_øndom
 = 
rs
;

123 
rs
->
rs_dev
.
d_›s
 = &
øndom_dev›s
;

124 
rs
->
rs_dev
.
d_blocks
 = 0;

125 
rs
->
rs_dev
.
d_blocksize
 = 1;

126 
rs
->
rs_dev
.
d_d©a
 =Ñs;

129 
ªsu…
 = 
	`vfs_adddev
("øndom", &
rs
->
rs_dev
, 0);

130 i‡(
ªsu…
) {

131  
ªsu…
;

135 
	}
}

142 
uöt32_t


143 
	$øndom
()

145 i‡(
the_øndom
==
NULL
) {

146 
	`∑nic
("NoÑandom device\n");

148  
the_øndom
->
	`rs_øndom
—he_øndom->
rs_devd©a
);

149 
	}
}

151 
uöt32_t


152 
	$øndmax
()

154 i‡(
the_øndom
==
NULL
) {

155 
	`∑nic
("NoÑandom device\n");

157  
the_øndom
->
	`rs_øndmax
—he_øndom->
rs_devd©a
);

158 
	}
}

	@kern/dev/generic/random.h

30 #i‚de‡
_GENERIC_RANDOM_H_


31 
	#_GENERIC_RANDOM_H_


	)

33 
	~<devi˚.h
>

34 
	guio
;

36 
	søndom_so·c
 {

38 *
	mrs_devd©a
;

39 
uöt32_t
 (*
rs_øndom
)(*
	mdevd©a
);

40 
uöt32_t
 (*
rs_øndmax
)(*
	mdevd©a
);

41 (*
	mrs_ªad
)(*
	mdevd©a
, 
uio
 *
	muio
);

43 
devi˚
 
	mrs_dev
;

	@kern/dev/generic/rtclock.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<lib.h
>

46 
	~<˛ock.h
>

47 
	~<gíîic/π˛ock.h
>

48 
	~"autoc⁄f.h
"

50 
π˛ock_so·c
 *
	gthe_˛ock
 = 
NULL
;

53 
	$c⁄fig_π˛ock
(
π˛ock_so·c
 *
πc
, 
unô
)

56 i‡(
unô
!=0) {

57  
ENODEV
;

60 
	`KASSERT
(
the_˛ock
==
NULL
);

61 
the_˛ock
 = 
πc
;

63 
	}
}

66 
	$gëtime
(
time•ec
 *
ts
)

68 
	`KASSERT
(
the_˛ock
!=
NULL
);

69 
the_˛ock
->
	`πc_gëtime
—he_˛ock->
πc_devd©a
, 
ts
);

70 
	}
}

	@kern/dev/generic/rtclock.h

30 #i‚de‡
_GENERIC_RTCLOCK_H_


31 
	#_GENERIC_RTCLOCK_H_


	)

38 
	gtime•ec
;

40 
	sπ˛ock_so·c
 {

41 *
	mπc_devd©a
;

42 (*
	mπc_gëtime
)(*
	mdevd©a
, 
	mtime•ec
 *);

	@kern/dev/lamebus/beep_ltimer.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/bìp.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

41 
bìp_so·c
 *

42 
	$©èch_bìp_to_…imî
(
bì≤o
, 
…imî_so·c
 *
ls
)

44 
bìp_so·c
 *
bs
 = 
	`kmÆloc
((beep_softc));

45 i‡(
bs
==
NULL
) {

46  
NULL
;

49 ()
bì≤o
;

51 
bs
->
bs_devd©a
 = 
ls
;

52 
bs
->
bs_bìp
 = 
…imî_bìp
;

54  
bs
;

55 
	}
}

	@kern/dev/lamebus/con_lscreen.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/ls¸ìn.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_ls¸ìn
(
c⁄¢o
, 
ls¸ìn_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 
cs
->
cs_devd©a
 = 
ls
;

50 
cs
->
cs_£nd
 = 
ls¸ìn_wrôe
;

51 
cs
->
cs_£ndpﬁÀd
 = 
ls¸ìn_wrôe
;

53 
ls
->
ls_devd©a
 = 
cs
;

54 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

55 
ls
->
ls_öput
 = 
c⁄_öput
;

57  
cs
;

58 
	}
}

	@kern/dev/lamebus/con_lser.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/l£r.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_l£r
(
c⁄¢o
, 
l£r_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 ()
c⁄¢o
;

51 
cs
->
cs_devd©a
 = 
ls
;

52 
cs
->
cs_£nd
 = 
l£r_wrôe
;

53 
cs
->
cs_£ndpﬁÀd
 = 
l£r_wrôïﬁÀd
;

55 
ls
->
ls_devd©a
 = 
cs
;

56 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

57 
ls
->
ls_öput
 = 
c⁄_öput
;

59  
cs
;

60 
	}
}

	@kern/dev/lamebus/emu.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<kîn/f˙é.h
>

46 
	~<°©.h
>

47 
	~<lib.h
>

48 
	~<¨øy.h
>

49 
	~<uio.h
>

50 
	~<memb¨.h
>

51 
	~<synch.h
>

52 
	~<œmebus/emu.h
>

53 
	~<∂©f‹m/bus.h
>

54 
	~<vfs.h
>

55 
	~<emufs.h
>

56 
	~"autoc⁄f.h
"

59 
	#REG_HANDLE
 0

	)

60 
	#REG_OFFSET
 4

	)

61 
	#REG_IOLEN
 8

	)

62 
	#REG_OPER
 12

	)

63 
	#REG_RESULT
 16

	)

66 
	#EMU_BUFFER
 32768

	)

69 
	#EMU_OP_OPEN
 1

	)

70 
	#EMU_OP_CREATE
 2

	)

71 
	#EMU_OP_EXCLCREATE
 3

	)

72 
	#EMU_OP_CLOSE
 4

	)

73 
	#EMU_OP_READ
 5

	)

74 
	#EMU_OP_READDIR
 6

	)

75 
	#EMU_OP_WRITE
 7

	)

76 
	#EMU_OP_GETSIZE
 8

	)

77 
	#EMU_OP_TRUNC
 9

	)

80 
	#EMU_RES_SUCCESS
 1

	)

81 
	#EMU_RES_BADHANDLE
 2

	)

82 
	#EMU_RES_BADOP
 3

	)

83 
	#EMU_RES_BADPATH
 4

	)

84 
	#EMU_RES_BADSIZE
 5

	)

85 
	#EMU_RES_EXISTS
 6

	)

86 
	#EMU_RES_ISDIR
 7

	)

87 
	#EMU_RES_MEDIA
 8

	)

88 
	#EMU_RES_NOHANDLES
 9

	)

89 
	#EMU_RES_NOSPACE
 10

	)

90 
	#EMU_RES_NOTDIR
 11

	)

91 
	#EMU_RES_UNKNOWN
 12

	)

92 
	#EMU_RES_UNSUPP
 13

	)

103 
ölöe


104 
uöt32_t


105 
	$emu_ºeg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
)

107  
	`bus_ªad_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
);

108 
	}
}

114 
ölöe


116 
	$emu_wªg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

118 
	`bus_wrôe_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
, 
vÆ
);

119 
	}
}

125 
	$emu_úq
(*
dev
)

127 
emu_so·c
 *
sc
 = 
dev
;

129 
sc
->
e_ªsu…
 = 
	`emu_ºeg
(sc, 
REG_RESULT
);

130 
	`emu_wªg
(
sc
, 
REG_RESULT
, 0);

132 
	`V
(
sc
->
e_£m
);

133 
	}
}

140 
uöt32_t


141 
	$å™¶©e_îr
(
emu_so·c
 *
sc
, 
uöt32_t
 
code
)

143 
code
) {

144 
EMU_RES_SUCCESS
:  0;

145 
EMU_RES_BADHANDLE
:

146 
EMU_RES_BADOP
:

147 
EMU_RES_BADSIZE
:

148 
	`∑nic
("emu%d: gŸ f©ÆÑesu… codê%d\n", 
sc
->
e_unô
, 
code
);

149 
EMU_RES_BADPATH
:  
ENOENT
;

150 
EMU_RES_EXISTS
:  
EEXIST
;

151 
EMU_RES_ISDIR
:  
EISDIR
;

152 
EMU_RES_MEDIA
:  
EIO
;

153 
EMU_RES_NOHANDLES
:  
ENFILE
;

154 
EMU_RES_NOSPACE
:  
ENOSPC
;

155 
EMU_RES_NOTDIR
:  
ENOTDIR
;

156 
EMU_RES_UNKNOWN
:  
EIO
;

157 
EMU_RES_UNSUPP
:  
ENOSYS
;

159 
	`k¥ötf
("emu%d: Unknow¿ªsu… codê%d\n", 
sc
->
e_unô
, 
code
);

160  
EAGAIN
;

161 
	}
}

168 
	$emu_waôd⁄e
(
emu_so·c
 *
sc
)

170 
	`P
(
sc
->
e_£m
);

171  
	`å™¶©e_îr
(
sc
, sc->
e_ªsu…
);

172 
	}
}

182 
	$emu_›í
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, c⁄° *
«me
,

183 
boﬁ
 
¸óã
, boﬁ 
ex˛
, 
mode_t
 
mode
,

184 
uöt32_t
 *
√wh™dÀ
, *
√wisdú
)

186 
uöt32_t
 
›
;

187 
ªsu…
;

189 i‡(
	`°æí
(
«me
)+1 > 
EMU_MAXIO
) {

190  
ENAMETOOLONG
;

193 i‡(
¸óã
 && 
ex˛
) {

194 
›
 = 
EMU_OP_EXCLCREATE
;

196 i‡(
¸óã
) {

197 
›
 = 
EMU_OP_CREATE
;

200 
›
 = 
EMU_OP_OPEN
;

204 ()
mode
;

206 
	`lock_acquúe
(
sc
->
e_lock
);

208 
	`°r˝y
(
sc
->
e_iobuf
, 
«me
);

209 
	`memb¨_°‹e_°‹e
();

210 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
	`°æí
(
«me
));

211 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

212 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

213 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

215 i‡(
ªsu…
==0) {

216 *
√wh™dÀ
 = 
	`emu_ºeg
(
sc
, 
REG_HANDLE
);

217 *
√wisdú
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
)>0;

220 
	`lock_ªÀa£
(
sc
->
e_lock
);

221  
ªsu…
;

222 
	}
}

231 
	$emu_˛o£
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
)

233 
ªsu…
;

234 
boﬁ
 
möe
;

235 
ªåõs
 = 0;

237 
möe
 = 
	`lock_do_i_hﬁd
(
sc
->
e_lock
);

238 i‡(!
möe
) {

239 
	`lock_acquúe
(
sc
->
e_lock
);

245 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

246 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_CLOSE
);

247 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

249 i‡(
ªsu…
==
EIO
 && 
ªåõs
 < 10) {

250 
	`k¥ötf
("emu%d: I/OÉrror on close,Ñetrying\n",

251 
sc
->
e_unô
);

252 
ªåõs
++;

258 i‡(!
möe
) {

259 
	`lock_ªÀa£
(
sc
->
e_lock
);

261  
ªsu…
;

262 
	}
}

269 
	$emu_d‹ód
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

270 
uöt32_t
 
›
, 
uio
 *uio)

272 
ªsu…
;

274 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

276 i‡(
uio
->
uio_off£t
 > (
off_t
)0xffffffff) {

281 
	`lock_acquúe
(
sc
->
e_lock
);

283 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

284 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

285 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

286 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

287 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

288 i‡(
ªsu…
) {

289 
out
;

292 
	`memb¨_lﬂd_lﬂd
();

293 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
	`emu_ºeg
(sc, 
REG_IOLEN
), 
uio
);

295 
uio
->
uio_off£t
 = 
	`emu_ºeg
(
sc
, 
REG_OFFSET
);

297 
out
:

298 
	`lock_ªÀa£
(
sc
->
e_lock
);

299  
ªsu…
;

300 
	}
}

307 
	$emu_ªad
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

308 
uio
 *uio)

310  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READ
, 
uio
);

311 
	}
}

318 
	$emu_ªaddú
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

319 
uio
 *uio)

321  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READDIR
, 
uio
);

322 
	}
}

329 
	$emu_wrôe
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

330 
uio
 *uio)

332 
ªsu…
;

334 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

336 i‡(
uio
->
uio_off£t
 > (
off_t
)0xffffffff) {

337  
EFBIG
;

340 
	`lock_acquúe
(
sc
->
e_lock
);

342 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

343 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

344 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

346 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
Àn
, 
uio
);

347 
	`memb¨_°‹e_°‹e
();

348 i‡(
ªsu…
) {

349 
out
;

352 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_WRITE
);

353 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

355 
out
:

356 
	`lock_ªÀa£
(
sc
->
e_lock
);

357  
ªsu…
;

358 
	}
}

365 
	$emu_gësize
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 *
ªtvÆ
)

367 
ªsu…
;

369 
	`lock_acquúe
(
sc
->
e_lock
);

371 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

372 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_GETSIZE
);

373 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

374 i‡(
ªsu…
==0) {

375 *
ªtvÆ
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
);

378 
	`lock_ªÀa£
(
sc
->
e_lock
);

379  
ªsu…
;

380 
	}
}

387 
	$emu_åunc
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 
Àn
)

389 
ªsu…
;

391 
	`KASSERT
(
Àn
 >= 0);

393 
	`lock_acquúe
(
sc
->
e_lock
);

395 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

396 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

397 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_TRUNC
);

398 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

400 
	`lock_ªÀa£
(
sc
->
e_lock
);

401  
ªsu…
;

402 
	}
}

414 
emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

415 
emufs_vnode
 **
ªt
);

422 
	$emufs_óch›í
(
vnode
 *
v
, 
›íÊags
)

432 ()
v
;

433 ()
›íÊags
;

436 
	}
}

443 
	$emufs_óch›ídú
(
vnode
 *
v
, 
›íÊags
)

445 
›íÊags
 & 
O_ACCMODE
) {

446 
O_RDONLY
:

448 
O_WRONLY
:

449 
O_RDWR
:

451  
EISDIR
;

453 i‡(
›íÊags
 & 
O_APPEND
) {

454  
EISDIR
;

457 ()
v
;

459 
	}
}

468 
	$emufs_ª˛aim
(
vnode
 *
v
)

470 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

471 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

472 
ix
, 
i
, 
num
;

473 
ªsu…
;

481 
	`vfs_biglock_acquúe
();

482 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

483 
	`•ölock_acquúe
(&
ev
->
ev_v
.
vn_cou¡lock
);

485 i‡(
ev
->
ev_v
.
vn_ªfcou¡
 > 1) {

487 
ev
->
ev_v
.
vn_ªfcou¡
--;

489 
	`•ölock_ªÀa£
(&
ev
->
ev_v
.
vn_cou¡lock
);

490 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

491 
	`vfs_biglock_ªÀa£
();

492  
EBUSY
;

494 
	`KASSERT
(
ev
->
ev_v
.
vn_ªfcou¡
 == 1);

500 
	`•ölock_ªÀa£
(&
ev
->
ev_v
.
vn_cou¡lock
);

503 
ªsu…
 = 
	`emu_˛o£
(
ev
->
ev_emu
,Év->
ev_h™dÀ
);

504 i‡(
ªsu…
) {

505 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

506 
	`vfs_biglock_ªÀa£
();

507  
ªsu…
;

510 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

511 
ix
 = 
num
;

512 
i
=0; i<
num
; i++) {

513 
vnode
 *
vx
;

515 
vx
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

516 i‡(
vx
 =
v
) {

517 
ix
 = 
i
;

521 i‡(
ix
 =
num
) {

522 
	`∑nic
("emu%d:Ñeclaim vnode %uÇot in vnodeÖool\n",

523 
ef
->
ef_emu
->
e_unô
, 
ev
->
ev_h™dÀ
);

526 
	`vnodóºay_ªmove
(
ef
->
ef_vnodes
, 
ix
);

527 
	`vnode_˛ónup
(&
ev
->
ev_v
);

529 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

530 
	`vfs_biglock_ªÀa£
();

532 
	`k‰ì
(
ev
);

534 
	}
}

541 
	$emufs_ªad
(
vnode
 *
v
, 
uio
 *uio)

543 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

544 
uöt32_t
 
amt
;

545 
size_t
 
ﬁdªsid
;

546 
ªsu…
;

548 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

550 
uio
->
uio_ªsid
 > 0) {

551 
amt
 = 
uio
->
uio_ªsid
;

552 i‡(
amt
 > 
EMU_MAXIO
) {

553 
amt
 = 
EMU_MAXIO
;

556 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

558 
ªsu…
 = 
	`emu_ªad
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

559 i‡(
ªsu…
) {

560  
ªsu…
;

563 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

570 
	}
}

577 
	$emufs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

579 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

580 
uöt32_t
 
amt
;

582 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

584 
amt
 = 
uio
->
uio_ªsid
;

585 i‡(
amt
 > 
EMU_MAXIO
) {

586 
amt
 = 
EMU_MAXIO
;

589  
	`emu_ªaddú
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

590 
	}
}

597 
	$emufs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

599 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

600 
uöt32_t
 
amt
;

601 
size_t
 
ﬁdªsid
;

602 
ªsu…
;

604 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

606 
uio
->
uio_ªsid
 > 0) {

607 
amt
 = 
uio
->
uio_ªsid
;

608 i‡(
amt
 > 
EMU_MAXIO
) {

609 
amt
 = 
EMU_MAXIO
;

612 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

614 
ªsu…
 = 
	`emu_wrôe
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

615 i‡(
ªsu…
) {

616  
ªsu…
;

619 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

626 
	}
}

633 
	$emufs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

639 ()
v
;

640 ()
›
;

641 ()
d©a
;

643  
EINVAL
;

644 
	}
}

651 
	$emufs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

653 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

654 
ªsu…
;

656 
	`bzîo
(
°©buf
, (
°©
));

658 
ªsu…
 = 
	`emu_gësize
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, &
°©buf
->
°_size
);

659 i‡(
ªsu…
) {

660  
ªsu…
;

663 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

664 i‡(
ªsu…
) {

665  
ªsu…
;

667 
°©buf
->
°_mode
 |= 0644;

668 
°©buf
->
°_∆ök
 = 1;

669 
°©buf
->
°_blocks
 = 0;

672 
	}
}

679 
	$emufs_fûe_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

681 ()
v
;

682 *
ªsu…
 = 
S_IFREG
;

684 
	}
}

691 
	$emufs_dú_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

693 ()
v
;

694 *
ªsu…
 = 
S_IFDIR
;

696 
	}
}

702 
boﬁ


703 
	$emufs_is£ekabÀ
(
vnode
 *
v
)

705 ()
v
;

706  
åue
;

707 
	}
}

714 
	$emufs_fsync
(
vnode
 *
v
)

716 ()
v
;

718 
	}
}

725 
	$emufs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

727 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

728  
	`emu_åunc
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
Àn
);

729 
	}
}

736 
	$emufs_¸ót
(
vnode
 *
dú
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

737 
vnode
 **
ªt
)

739 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

740 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

741 
emufs_vnode
 *
√wguy
;

742 
uöt32_t
 
h™dÀ
;

743 
ªsu…
;

744 
isdú
;

746 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
«me
, 
åue
, 
ex˛
, 
mode
,

747 &
h™dÀ
, &
isdú
);

748 i‡(
ªsu…
) {

749  
ªsu…
;

752 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

753 i‡(
ªsu…
) {

754 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

755  
ªsu…
;

758 *
ªt
 = &
√wguy
->
ev_v
;

760 
	}
}

767 
	$emufs_lookup
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
)

769 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

770 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

771 
emufs_vnode
 *
√wguy
;

772 
uöt32_t
 
h™dÀ
;

773 
ªsu…
;

774 
isdú
;

776 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
∑th«me
, 
Ál£
, false, 0,

777 &
h™dÀ
, &
isdú
);

778 i‡(
ªsu…
) {

779  
ªsu…
;

782 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

783 i‡(
ªsu…
) {

784 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

785  
ªsu…
;

788 *
ªt
 = &
√wguy
->
ev_v
;

790 
	}
}

797 
	$emufs_look∑ª¡
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
,

798 *
buf
, 
size_t
 
Àn
)

800 *
s
;

802 
s
 = 
	`°ºchr
(
∑th«me
, '/');

803 i‡(
s
==
NULL
) {

805 i‡(
	`°æí
(
∑th«me
)+1 > 
Àn
) {

806  
ENAMETOOLONG
;

808 
	`VOP_INCREF
(
dú
);

809 *
ªt
 = 
dú
;

810 
	`°r˝y
(
buf
, 
∑th«me
);

814 *
s
 = 0;

815 
s
++;

816 i‡(
	`°æí
(
s
)+1 > 
Àn
) {

817  
ENAMETOOLONG
;

819 
	`°r˝y
(
buf
, 
s
);

821  
	`emufs_lookup
(
dú
, 
∑th«me
, 
ªt
);

822 
	}
}

829 
	$emufs_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

831 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

832 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

834 i‡(
ev
 =
ef
->
ef_roŸ
) {

841 ()
uio
;

843  
ENOSYS
;

844 
	}
}

851 
	$emufs_mm≠
(
vnode
 *
v
)

853 ()
v
;

854  
ENOSYS
;

855 
	}
}

865 
	$emufs_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

867 ()
v
;

868 ()
c⁄ã¡s
;

869 ()
«me
;

870  
ENOSYS
;

871 
	}
}

875 
	$emufs_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

877 ()
v
;

878 ()
«me
;

879 ()
mode
;

880  
ENOSYS
;

881 
	}
}

885 
	$emufs_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

887 ()
v
;

888 ()
«me
;

889 ()
èrgë
;

890  
ENOSYS
;

891 
	}
}

895 
	$emufs_ªmove
(
vnode
 *
v
, c⁄° *
«me
)

897 ()
v
;

898 ()
«me
;

899  
ENOSYS
;

900 
	}
}

904 
	$emufs_rmdú
(
vnode
 *
v
, c⁄° *
«me
)

906 ()
v
;

907 ()
«me
;

908  
ENOSYS
;

909 
	}
}

913 
	$emufs_ª«me
(
vnode
 *
v1
, c⁄° *
n1
,

914 
vnode
 *
v2
, c⁄° *
n2
)

916 ()
v1
;

917 ()
n1
;

918 ()
v2
;

919 ()
n2
;

920  
ENOSYS
;

921 
	}
}

940 
	$emufs_void_›_isdú
(
vnode
 *
v
)

942 ()
v
;

943  
EISDIR
;

944 
	}
}

948 
	$emufs_uio_›_isdú
(
vnode
 *
v
, 
uio
 *uio)

950 ()
v
;

951 ()
uio
;

952  
EISDIR
;

953 
	}
}

957 
	$emufs_uio_›_nŸdú
(
vnode
 *
v
, 
uio
 *uio)

959 ()
v
;

960 ()
uio
;

961  
ENOTDIR
;

962 
	}
}

966 
	$emufs_«me_›_nŸdú
(
vnode
 *
v
, c⁄° *
«me
)

968 ()
v
;

969 ()
«me
;

970  
ENOTDIR
;

971 
	}
}

975 
	$emufs_ªadlök_nŸlök
(
vnode
 *
v
, 
uio
 *uio)

977 ()
v
;

978 ()
uio
;

979  
EINVAL
;

980 
	}
}

984 
	$emufs_¸ót_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

985 
vnode
 **
ªtvÆ
)

987 ()
v
;

988 ()
«me
;

989 ()
ex˛
;

990 ()
mode
;

991 ()
ªtvÆ
;

992  
ENOTDIR
;

993 
	}
}

997 
	$emufs_symlök_nŸdú
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

999 ()
v
;

1000 ()
c⁄ã¡s
;

1001 ()
«me
;

1002  
ENOTDIR
;

1003 
	}
}

1007 
	$emufs_mkdú_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

1009 ()
v
;

1010 ()
«me
;

1011 ()
mode
;

1012  
ENOTDIR
;

1013 
	}
}

1017 
	$emufs_lök_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

1019 ()
v
;

1020 ()
«me
;

1021 ()
èrgë
;

1022  
ENOTDIR
;

1023 
	}
}

1027 
	$emufs_ª«me_nŸdú
(
vnode
 *
v1
, c⁄° *
n1
,

1028 
vnode
 *
v2
, c⁄° *
n2
)

1030 ()
v1
;

1031 ()
n1
;

1032 ()
v2
;

1033 ()
n2
;

1034  
ENOTDIR
;

1035 
	}
}

1039 
	$emufs_lookup_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
)

1041 ()
v
;

1042 ()
∑th«me
;

1043 ()
ªsu…
;

1044  
ENOTDIR
;

1045 
	}
}

1049 
	$emufs_look∑ª¡_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
,

1050 *
buf
, 
size_t
 
Àn
)

1052 ()
v
;

1053 ()
∑th«me
;

1054 ()
ªsu…
;

1055 ()
buf
;

1056 ()
Àn
;

1057  
ENOTDIR
;

1058 
	}
}

1063 
	$emufs_åunˇã_isdú
(
vnode
 *
v
, 
off_t
 
Àn
)

1065 ()
v
;

1066 ()
Àn
;

1067  
ENOTDIR
;

1068 
	}
}

1075 c⁄° 
vnode_›s
 
	gemufs_fûe›s
 = {

1076 .
v›_magic
 = 
VOP_MAGIC
,

1078 .
	gv›_óch›í
 = 
emufs_óch›í
,

1079 .
	gv›_ª˛aim
 = 
emufs_ª˛aim
,

1081 .
	gv›_ªad
 = 
emufs_ªad
,

1082 .
	gv›_ªadlök
 = 
emufs_ªadlök_nŸlök
,

1083 .
	gv›_gëdúíåy
 = 
emufs_uio_›_nŸdú
,

1084 .
	gv›_wrôe
 = 
emufs_wrôe
,

1085 .
	gv›_io˘l
 = 
emufs_io˘l
,

1086 .
	gv›_°©
 = 
emufs_°©
,

1087 .
	gv›_gëty≥
 = 
emufs_fûe_gëty≥
,

1088 .
	gv›_is£ekabÀ
 = 
emufs_is£ekabÀ
,

1089 .
	gv›_fsync
 = 
emufs_fsync
,

1090 .
	gv›_mm≠
 = 
emufs_mm≠
,

1091 .
	gv›_åunˇã
 = 
emufs_åunˇã
,

1092 .
	gv›_«mefûe
 = 
emufs_uio_›_nŸdú
,

1094 .
	gv›_¸ót
 = 
emufs_¸ót_nŸdú
,

1095 .
	gv›_symlök
 = 
emufs_symlök_nŸdú
,

1096 .
	gv›_mkdú
 = 
emufs_mkdú_nŸdú
,

1097 .
	gv›_lök
 = 
emufs_lök_nŸdú
,

1098 .
	gv›_ªmove
 = 
emufs_«me_›_nŸdú
,

1099 .
	gv›_rmdú
 = 
emufs_«me_›_nŸdú
,

1100 .
	gv›_ª«me
 = 
emufs_ª«me_nŸdú
,

1102 .
	gv›_lookup
 = 
emufs_lookup_nŸdú
,

1103 .
	gv›_look∑ª¡
 = 
emufs_look∑ª¡_nŸdú
,

1109 c⁄° 
vnode_›s
 
	gemufs_dú›s
 = {

1110 .
v›_magic
 = 
VOP_MAGIC
,

1112 .
	gv›_óch›í
 = 
emufs_óch›ídú
,

1113 .
	gv›_ª˛aim
 = 
emufs_ª˛aim
,

1115 .
	gv›_ªad
 = 
emufs_uio_›_isdú
,

1116 .
	gv›_ªadlök
 = 
emufs_uio_›_isdú
,

1117 .
	gv›_gëdúíåy
 = 
emufs_gëdúíåy
,

1118 .
	gv›_wrôe
 = 
emufs_uio_›_isdú
,

1119 .
	gv›_io˘l
 = 
emufs_io˘l
,

1120 .
	gv›_°©
 = 
emufs_°©
,

1121 .
	gv›_gëty≥
 = 
emufs_dú_gëty≥
,

1122 .
	gv›_is£ekabÀ
 = 
emufs_is£ekabÀ
,

1123 .
	gv›_fsync
 = 
emufs_void_›_isdú
,

1124 .
	gv›_mm≠
 = 
emufs_void_›_isdú
,

1125 .
	gv›_åunˇã
 = 
emufs_åunˇã_isdú
,

1126 .
	gv›_«mefûe
 = 
emufs_«mefûe
,

1128 .
	gv›_¸ót
 = 
emufs_¸ót
,

1129 .
	gv›_symlök
 = 
emufs_symlök
,

1130 .
	gv›_mkdú
 = 
emufs_mkdú
,

1131 .
	gv›_lök
 = 
emufs_lök
,

1132 .
	gv›_ªmove
 = 
emufs_ªmove
,

1133 .
	gv›_rmdú
 = 
emufs_rmdú
,

1134 .
	gv›_ª«me
 = 
emufs_ª«me
,

1136 .
	gv›_lookup
 = 
emufs_lookup
,

1137 .
	gv›_look∑ª¡
 = 
emufs_look∑ª¡
,

1145 
	$emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

1146 
emufs_vnode
 **
ªt
)

1148 
vnode
 *
v
;

1149 
emufs_vnode
 *
ev
;

1150 
i
, 
num
;

1151 
ªsu…
;

1153 
	`vfs_biglock_acquúe
();

1154 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

1156 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

1157 
i
=0; i<
num
; i++) {

1158 
v
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

1159 
ev
 = 
v
->
vn_d©a
;

1160 i‡(
ev
->
ev_h™dÀ
 =
h™dÀ
) {

1163 
	`VOP_INCREF
(&
ev
->
ev_v
);

1165 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1166 
	`vfs_biglock_ªÀa£
();

1167 *
ªt
 = 
ev
;

1174 
ev
 = 
	`kmÆloc
((
emufs_vnode
));

1175 i‡(
ev
==
NULL
) {

1176 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1177  
ENOMEM
;

1180 
ev
->
ev_emu
 = 
ef
->
ef_emu
;

1181 
ev
->
ev_h™dÀ
 = 
h™dÀ
;

1183 
ªsu…
 = 
	`vnode_öô
(&
ev
->
ev_v
, 
isdú
 ? &
emufs_dú›s
 : &
emufs_fûe›s
,

1184 &
ef
->
ef_fs
, 
ev
);

1185 i‡(
ªsu…
) {

1186 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1187 
	`vfs_biglock_ªÀa£
();

1188 
	`k‰ì
(
ev
);

1189  
ªsu…
;

1192 
ªsu…
 = 
	`vnodóºay_add
(
ef
->
ef_vnodes
, &
ev
->
ev_v
, 
NULL
);

1193 i‡(
ªsu…
) {

1195 
	`vnode_˛ónup
(&
ev
->
ev_v
);

1196 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1197 
	`vfs_biglock_ªÀa£
();

1198 
	`k‰ì
(
ev
);

1199  
ªsu…
;

1202 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1203 
	`vfs_biglock_ªÀa£
();

1205 *
ªt
 = 
ev
;

1207 
	}
}

1222 
	$emufs_sync
(
fs
 *fs)

1224 ()
fs
;

1226 
	}
}

1233 
	$emufs_gëvﬁ«me
(
fs
 *fs)

1236 ()
fs
;

1237  
NULL
;

1238 
	}
}

1244 
vnode
 *

1245 
	$emufs_gëroŸ
(
fs
 *fs)

1247 
emufs_fs
 *
ef
;

1249 
	`KASSERT
(
fs
 !
NULL
);

1251 
ef
 = 
fs
->
fs_d©a
;

1253 
	`KASSERT
(
ef
 !
NULL
);

1254 
	`KASSERT
(
ef
->
ef_roŸ
 !
NULL
);

1256 
	`VOP_INCREF
(&
ef
->
ef_roŸ
->
ev_v
);

1257  &
ef
->
ef_roŸ
->
ev_v
;

1258 
	}
}

1265 
	$emufs_unmou¡
(
fs
 *fs)

1268 ()
fs
;

1269  
EBUSY
;

1270 
	}
}

1275 c⁄° 
fs_›s
 
	gemufs_fs›s
 = {

1276 .
fs›_sync
 = 
emufs_sync
,

1277 .
	gfs›_gëvﬁ«me
 = 
emufs_gëvﬁ«me
,

1278 .
	gfs›_gëroŸ
 = 
emufs_gëroŸ
,

1279 .
	gfs›_unmou¡
 = 
emufs_unmou¡
,

1291 
	$emufs_addtovfs
(
emu_so·c
 *
sc
, c⁄° *
dev«me
)

1293 
emufs_fs
 *
ef
;

1294 
ªsu…
;

1296 
ef
 = 
	`kmÆloc
((
emufs_fs
));

1297 i‡(
ef
==
NULL
) {

1298  
ENOMEM
;

1301 
ef
->
ef_fs
.
fs_d©a
 =Éf;

1302 
ef
->
ef_fs
.
fs_›s
 = &
emufs_fs›s
;

1304 
ef
->
ef_emu
 = 
sc
;

1305 
ef
->
ef_roŸ
 = 
NULL
;

1306 
ef
->
ef_vnodes
 = 
	`vnodóºay_¸óã
();

1307 i‡(
ef
->
ef_vnodes
 =
NULL
) {

1308 
	`k‰ì
(
ef
);

1309  
ENOMEM
;

1312 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
EMU_ROOTHANDLE
, 1, &ef->
ef_roŸ
);

1313 i‡(
ªsu…
) {

1314 
	`k‰ì
(
ef
);

1315  
ªsu…
;

1318 
	`KASSERT
(
ef
->
ef_roŸ
!=
NULL
);

1320 
ªsu…
 = 
	`vfs_addfs
(
dev«me
, &
ef
->
ef_fs
);

1321 i‡(
ªsu…
) {

1322 
	`VOP_DECREF
(&
ef
->
ef_roŸ
->
ev_v
);

1323 
	`k‰ì
(
ef
);

1325  
ªsu…
;

1326 
	}
}

1337 
	$c⁄fig_emu
(
emu_so·c
 *
sc
, 
emuno
)

1339 
«me
[32];

1341 
sc
->
e_lock
 = 
	`lock_¸óã
("emufs-lock");

1342 i‡(
sc
->
e_lock
 =
NULL
) {

1343  
ENOMEM
;

1345 
sc
->
e_£m
 = 
	`£m_¸óã
("emufs-sem", 0);

1346 i‡(
sc
->
e_£m
 =
NULL
) {

1347 
	`lock_de°roy
(
sc
->
e_lock
);

1348 
sc
->
e_lock
 = 
NULL
;

1349  
ENOMEM
;

1351 
sc
->
e_iobuf
 = 
	`bus_m≠_¨ó
(sc->
e_busd©a
, sc->
e_bu•os
, 
EMU_BUFFER
);

1353 
	`¢¥ötf
(
«me
, “ame), "emu%d", 
emuno
);

1355  
	`emufs_addtovfs
(
sc
, 
«me
);

1356 
	}
}

	@kern/dev/lamebus/emu.h

30 #i‚de‡
_LAMEBUS_EMU_H_


31 
	#_LAMEBUS_EMU_H_


	)

34 
	#EMU_MAXIO
 16384

	)

35 
	#EMU_ROOTHANDLE
 0

	)

43 
	semu_so·c
 {

45 *
	me_busd©a
;

46 
uöt32_t
 
	me_bu•os
;

47 
	me_unô
;

50 
lock
 *
	me_lock
;

51 
£m≠h‹e
 *
	me_£m
;

52 *
	me_iobuf
;

55 
uöt32_t
 
	me_ªsu…
;

59 
emu_úq
( *);

	@kern/dev/lamebus/emu_att.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<œmebus/œmebus.h
>

37 
	~<œmebus/emu.h
>

38 
	~"autoc⁄f.h
"

41 
	#LOW_VERSION
 1

	)

43 
emu_so·c
 *

44 
	$©èch_emu_to_œmebus
(
emuno
, 
œmebus_so·c
 *
sc
)

46 
emu_so·c
 *
es
;

47 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_EMUFS
,

48 
LOW_VERSION
, 
NULL
);

49 i‡(
¶Ÿ
 < 0) {

50  
NULL
;

53 
es
 = 
	`kmÆloc
((
emu_so·c
));

54 i‡(
es
==
NULL
) {

55  
NULL
;

58 
es
->
e_busd©a
 = 
sc
;

59 
es
->
e_bu•os
 = 
¶Ÿ
;

60 
es
->
e_unô
 = 
emuno
;

62 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
es
, 
emu_úq
);

65  
es
;

66 
	}
}

	@kern/dev/lamebus/lamebus.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<memb¨.h
>

38 
	~<•ölock.h
>

39 
	~<cuºít.h
>

40 
	~<œmebus/œmebus.h
>

43 
	#CFGREG_VID
 0

	)

44 
	#CFGREG_DID
 4

	)

45 
	#CFGREG_DRL
 8

	)

48 
	#CTLREG_RAMSZ
 0x200

	)

49 
	#CTLREG_IRQS
 0x204

	)

50 
	#CTLREG_PWR
 0x208

	)

51 
	#CTLREG_IRQE
 0x20c

	)

52 
	#CTLREG_CPUS
 0x210

	)

53 
	#CTLREG_CPUE
 0x214

	)

54 
	#CTLREG_SELF
 0x218

	)

57 
	#CTLCPU_CIRQE
 0x000

	)

58 
	#CTLCPU_CIPI
 0x004

	)

59 
	#CTLCPU_CRAM
 0x300

	)

66 
ölöe


67 
uöt32_t


68 
	$ªad_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

71 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

72  
	`œmebus_ªad_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

73 
	}
}

79 
ölöe


81 
	$wrôe_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
,

82 
uöt32_t
 
vÆ
)

84 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

85 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

86 
	}
}

92 
ölöe


93 
uöt32_t


94 
	$ªad_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
)

97  
	`ªad_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

98 
	}
}

104 
ölöe


106 
	$wrôe_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

108 
	`wrôe_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

109 
	}
}

115 
ölöe


117 
	$wrôe_˘l˝u_ªgi°î
(
œmebus_so·c
 *
lb
, 
hw_˝unum
,

118 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

120 
off£t
 +
LB_CTLCPU_OFFSET
 + 
hw_˝unum
 * 
LB_CTLCPU_SIZE
;

121 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

122 
	}
}

128 
	$œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
)

130 
uöt32_t
 
maöbﬂrd_vid
, 
maöbﬂrd_did
;

131 
uöt32_t
 
˝umask
, 
£lf
, 
bô
, 
vÆ
;

132 
i
, 
num˝us
, 
boŸ˝u
;

133 
hwnum
[32];

135 
maöbﬂrd_vid
 = 
	`ªad_cfg_ªgi°î
(
œmebus
, 
LB_CONTROLLER_SLOT
,

136 
CFGREG_VID
);

137 
maöbﬂrd_did
 = 
	`ªad_cfg_ªgi°î
(
œmebus
, 
LB_CONTROLLER_SLOT
,

138 
CFGREG_DID
);

139 i‡(
maöbﬂrd_vid
 =
LB_VENDOR_CS161
 &&

140 
maöbﬂrd_did
 =
LBCS161_UPBUSCTL
) {

142 
œmebus
->
ls_unùro˚ss‹
 = 1;

146 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

147 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

149 
num˝us
 = 0;

150 
boŸ˝u
 = 0;

151 
i
=0; i<32; i++) {

152 
bô
 = (
uöt32_t
)1 << 
i
;

153 i‡((
˝umask
 & 
bô
) != 0) {

154 i‡(
£lf
 & 
bô
) {

155 
boŸ˝u
 = 
num˝us
;

156 
cur˝u
->
c_h¨dw¨e_numbî
 = 
i
;

158 
hwnum
[
num˝us
] = 
i
;

159 
num˝us
++;

163 
i
=0; i<
num˝us
; i++) {

164 i‡(
i
 !
boŸ˝u
) {

165 
	`˝u_¸óã
(
hwnum
[
i
]);

175 
i
=0; i<
num˝us
; i++) {

176 i‡(
i
 !
boŸ˝u
) {

177 
vÆ
 = 0;

180 
vÆ
 = 0xffffffff;

182 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
hwnum
[
i
], 
CTLCPU_CIRQE
, 
vÆ
);

184 
	}
}

197 
	$œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
)

199 
uöt32_t
 
˝umask
, 
£lf
, 
bô
;

200 
uöt32_t
 
˘l˝uoff£t
;

201 
uöt32_t
 *
¸am
;

202 
i
;

203 
˝unum
;

205 i‡(
œmebus
->
ls_unùro˚ss‹
) {

209 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

210 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

213 
˝unum
 = 1;

214 
i
=0; i<32; i++) {

215 
bô
 = (
uöt32_t
)1 << 
i
;

216 i‡((
˝umask
 & 
bô
) != 0) {

217 i‡(
£lf
 & 
bô
) {

220 
˘l˝uoff£t
 = 
LB_CTLCPU_OFFSET
 + 
i
 * 
LB_CTLCPU_SIZE
;

221 
¸am
 = 
	`œmebus_m≠_¨ó
(
œmebus
,

222 
LB_CONTROLLER_SLOT
,

223 
˘l˝uoff£t
 + 
CTLCPU_CRAM
);

224 
¸am
[0] = (
uöt32_t
)
˝u_°¨t_£c⁄d¨y
;

225 
¸am
[1] = 
˝unum
++;

229 
	`memb¨_°‹e_°‹e
();

232 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUE
, 
˝umask
);

233 
	}
}

251 
	$œmebus_¥obe
(
œmebus_so·c
 *
sc
,

252 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

253 
uöt32_t
 
lowvî
, uöt32_à*
vîsi⁄_ªt
)

255 
¶Ÿ
;

256 
uöt32_t
 
vÆ
;

263 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

265 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; slot++) {

266 i‡(
sc
->
ls_¶Ÿsöu£
 & (1<<
¶Ÿ
)) {

271 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_VID
);

272 i‡(
vÆ
!=
víd‹id
) {

277 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DID
);

278 i‡(
vÆ
 !
devi˚id
) {

283 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DRL
);

284 i‡(
vÆ
 < 
lowvî
) {

288 i‡(
vîsi⁄_ªt
 !
NULL
) {

289 *
vîsi⁄_ªt
 = 
vÆ
;

294 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

295  
¶Ÿ
;

300 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

302 
	}
}

310 
	$œmebus_m¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

312 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

313 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

315 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

317 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)!=0) {

318 
	`∑nic
("œmebus_m¨k: slŸ %dáÃódy i¿u£\n", 
¶Ÿ
);

321 
sc
->
ls_¶Ÿsöu£
 |
mask
;

323 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

324 
	}
}

330 
	$œmebus_unm¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

332 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

333 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

335 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

337 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

338 
	`∑nic
("œmebus_m¨k: slŸ %dÇŸ m¨ked i¿u£\n", 
¶Ÿ
);

341 
sc
->
ls_¶Ÿsöu£
 &~
mask
;

343 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

344 
	}
}

351 
œmebus_©èch_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
,

352 *
devd©a
,

353 (*
úqfunc
)(*
devd©a
))

355 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

356 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

358 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

360 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

361 
	`∑nic
("lamebus_attach_interrupt: slot %dÇot marked in use\n",

362 
¶Ÿ
);

365 
	`KASSERT
(
sc
->
ls_devd©a
[
¶Ÿ
]==
NULL
);

366 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
);

368 
sc
->
ls_devd©a
[
¶Ÿ
] = 
devd©a
;

369 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
úqfunc
;

371 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

372 
	}
}

379 
	$œmebus_dëach_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

381 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

382 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

384 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

386 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

387 
	`∑nic
("lamebus_detach_interrupt: slot %dÇot marked in use\n",

388 
¶Ÿ
);

391 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]!=
NULL
);

393 
sc
->
ls_devd©a
[
¶Ÿ
] = 
NULL
;

394 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
NULL
;

396 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

397 
	}
}

403 
	$œmebus_mask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

405 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

406 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

408 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

409 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

410 
bôs
 &~
mask
;

411 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

412 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

413 
	}
}

416 
	$œmebus_unmask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

418 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

419 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

421 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

422 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

423 
bôs
 |
mask
;

424 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

425 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

426 
	}
}

433 
	$œmebus_öãºu±
(
œmebus_so·c
 *
œmebus
)

446 
¶Ÿ
;

447 
uöt32_t
 
mask
;

448 
uöt32_t
 
úqs
;

449 (*
h™dÀr
)(*);

450 *
d©a
;

453 
duds
 = 0;

454 
duds_this_time
 = 0;

457 
	`KASSERT
(
œmebus
 !
NULL
);

460 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

466 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

468 i‡(
úqs
 == 0) {

472 
	`k¥ötf
("lamebus: stray interrupt on cpu %u\n",

473 
cur˝u
->
c_numbî
);

474 
duds
++;

475 
duds_this_time
++;

495 
mask
=1, 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; mask<<=1, slot++) {

496 i‡((
úqs
 & 
mask
) == 0) {

505 i‡((
œmebus
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

509 
duds
++;

510 
duds_this_time
++;

514 i‡(
œmebus
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
) {

519 
duds
++;

520 
duds_this_time
++;

529 
h™dÀr
 = 
œmebus
->
ls_úqfuncs
[
¶Ÿ
];

530 
d©a
 = 
œmebus
->
ls_devd©a
[
¶Ÿ
];

531 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

533 
	`h™dÀr
(
d©a
);

535 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

543 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

565 i‡(
duds_this_time
 =0 && 
duds
 > 0) {

566 
	`k¥ötf
("œmebus: %d dud i¡îru±s\n", 
duds
);

567 
duds
 = 0;

570 i‡(
duds
 > 10000) {

571 
	`∑nic
("œmebus:Åoÿm™y (%dËdud i¡îru±s\n", 
duds
);

575 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

576 
	}
}

582 
	$œmebus_powîoff
(
œmebus_so·c
 *
œmebus
)

588 
	`˝u_úqoff
();

589 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_PWR
, 0);

592 
	`˝u_hÆt
();

593 
	}
}

598 
uöt32_t


599 
	$œmebus_ømsize
()

608  
	`ªad_˘l_ªgi°î
(
NULL
, 
CTLREG_RAMSZ
);

609 
	}
}

615 
	$œmebus_as£π_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

617 i‡(
œmebus
->
ls_unùro˚ss‹
) {

620 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

621 
CTLCPU_CIPI
, 1);

622 
	}
}

625 
	$œmebus_˛ór_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

627 i‡(
œmebus
->
ls_unùro˚ss‹
) {

630 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

631 
CTLCPU_CIPI
, 0);

632 
	}
}

638 
œmebus_so·c
 *

639 
	$œmebus_öô
()

641 
œmebus_so·c
 *
œmebus
;

642 
i
;

645 
œmebus
 = 
	`kmÆloc
((
œmebus_so·c
));

646 i‡(
œmebus
==
NULL
) {

647 
	`∑nic
("lamebus_init: Out of memory\n");

650 
	`•ölock_öô
(&
œmebus
->
ls_lock
);

655 
œmebus
->
ls_¶Ÿsöu£
 = 1 << 
LB_CONTROLLER_SLOT
;

657 
i
=0; i<
LB_NSLOTS
; i++) {

658 
œmebus
->
ls_devd©a
[
i
] = 
NULL
;

659 
œmebus
->
ls_úqfuncs
[
i
] = 
NULL
;

662 
œmebus
->
ls_unùro˚ss‹
 = 0;

664  
œmebus
;

665 
	}
}

	@kern/dev/lamebus/lamebus.h

30 #i‚de‡
_LAMEBUS_H_


31 
	#_LAMEBUS_H_


	)

33 
	~<˝u.h
>

34 
	~<•ölock.h
>

44 
	#LB_VENDOR_CS161
 1

	)

47 
	#LBCS161_UPBUSCTL
 1

	)

48 
	#LBCS161_TIMER
 2

	)

49 
	#LBCS161_DISK
 3

	)

50 
	#LBCS161_SERIAL
 4

	)

51 
	#LBCS161_SCREEN
 5

	)

52 
	#LBCS161_NET
 6

	)

53 
	#LBCS161_EMUFS
 7

	)

54 
	#LBCS161_TRACE
 8

	)

55 
	#LBCS161_RANDOM
 9

	)

56 
	#LBCS161_MPBUSCTL
 10

	)

59 
	#LB_CONTROLLER_SLOT
 31

	)

62 
	#LB_NSLOTS
 32

	)

65 
	#LB_CONFIG_SIZE
 1024

	)

68 
	#LB_CTLCPU_SIZE
 1024

	)

71 
	#LB_CTLCPU_OFFSET
 32768

	)

74 
	#LB_SLOT_SIZE
 65536

	)

77 (*
	tlb_úqfunc
)(*
	tdevd©a
);

82 
	sœmebus_so·c
 {

83 
•ölock
 
ls_lock
;

86 
uöt32_t
 
ls_¶Ÿsöu£
;

87 *
ls_devd©a
[
LB_NSLOTS
];

88 
lb_úqfunc
 
ls_úqfuncs
[
LB_NSLOTS
];

91 
ls_unùro˚ss‹
;

97 
œmebus_so·c
 *
	`œmebus_öô
();

102 
	`œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
);

107 
	`œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
);

116 
	`œmebus_¥obe
(
œmebus_so·c
 *,

117 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

118 
uöt32_t
 
lowvî
, uöt32_à*
vîsi⁄_ªt
);

125 
	`œmebus_m¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

126 
	`œmebus_unm¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

131 
	`œmebus_©èch_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
,

132 *
devd©a
,

133 (*
úqfunc
)(*
devd©a
));

137 
	`œmebus_dëach_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

142 
	`œmebus_mask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

143 
	`œmebus_unmask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

148 
	`œmebus_öãºu±
(
œmebus_so·c
 *);

153 
	`œmebus_powîoff
(
œmebus_so·c
 *);

158 
size_t
 
	`œmebus_ømsize
();

163 
	`œmebus_as£π_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

164 
	`œmebus_˛ór_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

170 
uöt32_t
 
	`œmebus_ªad_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

171 
uöt32_t
 
off£t
);

172 
	`œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

173 
uöt32_t
 
off£t
, uöt32_à
vÆ
);

178 *
	`œmebus_m≠_¨ó
(
œmebus_so·c
 *, 
¶Ÿ
,

179 
uöt32_t
 
off£t
);

	@kern/dev/lamebus/lhd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<memb¨.h
>

39 
	~<synch.h
>

40 
	~<∂©f‹m/bus.h
>

41 
	~<vfs.h
>

42 
	~<œmebus/lhd.h
>

43 
	~"autoc⁄f.h
"

46 
	#LHD_REG_NSECT
 0

	)

47 
	#LHD_REG_STAT
 4

	)

48 
	#LHD_REG_SECT
 8

	)

49 
	#LHD_REG_RPM
 12

	)

52 
	#LHD_IDLE
 0

	)

53 
	#LHD_WORKING
 1

	)

54 
	#LHD_OK
 4

	)

55 
	#LHD_INVSECT
 12

	)

56 
	#LHD_MEDIA
 20

	)

57 
	#LHD_ISWRITE
 2

	)

58 
	#LHD_STATEMASK
 0x1d

	)

61 
	#LHD_BUFFER
 32768

	)

67 
ölöe


68 
uöt32_t
 
	$lhd_rdªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
)

70  
	`bus_ªad_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
);

71 
	}
}

77 
ölöe


78 
	$lhd_wªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

80 
	`bus_wrôe_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
, 
vÆ
);

81 
	}
}

87 
	$lhd_code_to_î∫o
(
lhd_so·c
 *
lh
, 
code
)

89 
code
 & 
LHD_STATEMASK
) {

90 
LHD_OK
:  0;

91 
LHD_INVSECT
:  
EINVAL
;

92 
LHD_MEDIA
:  
EIO
;

94 
	`k¥ötf
("lhd%d: Unknow¿ªsu… codê%d\n", 
lh
->
lh_unô
, 
code
);

95  
EAGAIN
;

96 
	}
}

104 
	$lhd_iod⁄e
(
lhd_so·c
 *
lh
, 
îr
)

106 
lh
->
lh_ªsu…
 = 
îr
;

107 
	`V
(
lh
->
lh_d⁄e
);

108 
	}
}

116 
	$lhd_úq
(*
vlh
)

118 
lhd_so·c
 *
lh
 = 
vlh
;

119 
uöt32_t
 
vÆ
;

121 
vÆ
 = 
	`lhd_rdªg
(
lh
, 
LHD_REG_STAT
);

123 
vÆ
 & 
LHD_STATEMASK
) {

124 
LHD_IDLE
:

125 
LHD_WORKING
:

127 
LHD_OK
:

128 
LHD_INVSECT
:

129 
LHD_MEDIA
:

130 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

131 
	`lhd_iod⁄e
(
lh
, 
	`lhd_code_to_î∫o
÷h, 
vÆ
));

134 
	}
}

141 
	$lhd_óch›í
(
devi˚
 *
d
, 
›íÊags
)

146 ()
d
;

147 ()
›íÊags
;

150 
	}
}

157 
	$lhd_io˘l
(
devi˚
 *
d
, 
›
, 
u£Ωå_t
 
d©a
)

162 ()
d
;

163 ()
›
;

164 ()
d©a
;

165  
EIOCTL
;

166 
	}
}

176 
	$lhd_ª£t
(
lhd_so·c
 *
lh
)

178 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

179 
	}
}

187 
	$lhd_io
(
devi˚
 *
d
, 
uio
 *uio)

189 
lhd_so·c
 *
lh
 = 
d
->
d_d©a
;

191 
uöt32_t
 
£˘‹
 = 
uio
->
uio_off£t
 / 
LHD_SECTSIZE
;

192 
uöt32_t
 
£˘off
 = 
uio
->
uio_off£t
 % 
LHD_SECTSIZE
;

193 
uöt32_t
 
Àn
 = 
uio
->
uio_ªsid
 / 
LHD_SECTSIZE
;

194 
uöt32_t
 
Ànoff
 = 
uio
->
uio_ªsid
 % 
LHD_SECTSIZE
;

195 
uöt32_t
 
i
;

196 
uöt32_t
 
°©vÆ
 = 
LHD_WORKING
;

197 
ªsu…
;

200 i‡(
£˘off
 !0 || 
Ànoff
 != 0) {

201  
EINVAL
;

206 i‡(
£˘‹
+
Àn
 > 
lh
->
lh_dev
.
d_blocks
) {

207  
EINVAL
;

211 i‡(
uio
->
uio_rw
==
UIO_WRITE
) {

212 
°©vÆ
 |
LHD_ISWRITE
;

216 
i
=0; i<
Àn
; i++) {

219 
	`P
(
lh
->
lh_˛ór
);

225 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

226 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

227 
	`memb¨_°‹e_°‹e
();

228 i‡(
ªsu…
) {

229 
	`V
(
lh
->
lh_˛ór
);

230  
ªsu…
;

235 
	`lhd_wªg
(
lh
, 
LHD_REG_SECT
, 
£˘‹
+
i
);

238 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 
°©vÆ
);

241 
	`P
(
lh
->
lh_d⁄e
);

244 
ªsu…
 = 
lh
->
lh_ªsu…
;

250 i‡(
ªsu…
==0 && 
uio
->
uio_rw
==
UIO_READ
) {

251 
	`memb¨_lﬂd_lﬂd
();

252 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

256 
	`V
(
lh
->
lh_˛ór
);

259 i‡(
ªsu…
) {

260  
ªsu…
;

265 
	}
}

267 c⁄° 
devi˚_›s
 
	glhd_dev›s
 = {

268 .
dev›_óch›í
 = 
lhd_óch›í
,

269 .
	gdev›_io
 = 
lhd_io
,

270 .
	gdev›_io˘l
 = 
lhd_io˘l
,

277 
	$c⁄fig_lhd
(
lhd_so·c
 *
lh
, 
lhdno
)

279 
«me
[32];

282 
	`¢¥ötf
(
«me
, “ame), "lhd%d", 
lhdno
);

285 
lh
->
lh_buf
 = 
	`bus_m≠_¨ó
÷h->
lh_busd©a
,Üh->
lh_bu•os
, 
LHD_BUFFER
);

288 
lh
->
lh_˛ór
 = 
	`£m_¸óã
("lhd-clear", 1);

289 i‡(
lh
->
lh_˛ór
 =
NULL
) {

290  
ENOMEM
;

292 
lh
->
lh_d⁄e
 = 
	`£m_¸óã
("lhd-done", 0);

293 i‡(
lh
->
lh_d⁄e
 =
NULL
) {

294 
	`£m_de°roy
(
lh
->
lh_˛ór
);

295 
lh
->
lh_˛ór
 = 
NULL
;

296  
ENOMEM
;

300 
lh
->
lh_dev
.
d_›s
 = &
lhd_dev›s
;

301 
lh
->
lh_dev
.
d_blocks
 = 
	`bus_ªad_ªgi°î
÷h->
lh_busd©a
,Üh->
lh_bu•os
,

302 
LHD_REG_NSECT
);

303 
lh
->
lh_dev
.
d_blocksize
 = 
LHD_SECTSIZE
;

304 
lh
->
lh_dev
.
d_d©a
 =Üh;

307  
	`vfs_adddev
(
«me
, &
lh
->
lh_dev
, 1);

308 
	}
}

	@kern/dev/lamebus/lhd.h

30 #i‚de‡
_LAMEBUS_LHD_H_


31 
	#_LAMEBUS_LHD_H_


	)

33 
	~<devi˚.h
>

38 
	#LHD_SECTSIZE
 512

	)

43 
	slhd_so·c
 {

45 *
	mlh_busd©a
;

46 
uöt32_t
 
	mlh_bu•os
;

47 
	mlh_unô
;

53 *
	mlh_buf
;

54 
	mlh_ªsu…
;

55 
£m≠h‹e
 *
	mlh_˛ór
;

56 
£m≠h‹e
 *
	mlh_d⁄e
;

58 
devi˚
 
	mlh_dev
;

62 
lhd_úq
( *);

	@kern/dev/lamebus/lhd_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/lhd.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 2

	)

42 
lhd_so·c
 *

43 
	$©èch_lhd_to_œmebus
(
lhdno
, 
œmebus_so·c
 *
sc
)

45 
lhd_so·c
 *
lh
;

46 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_DISK
,

47 
LOW_VERSION
, 
NULL
);

48 i‡(
¶Ÿ
 < 0) {

50  
NULL
;

53 
lh
 = 
	`kmÆloc
((
lhd_so·c
));

54 i‡(
lh
==
NULL
) {

56  
NULL
;

60 
lh
->
lh_busd©a
 = 
sc
;

61 
lh
->
lh_bu•os
 = 
¶Ÿ
;

62 
lh
->
lh_unô
 = 
lhdno
;

65 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

66 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
lh
, 
lhd_úq
);

68  
lh
;

69 
	}
}

	@kern/dev/lamebus/lnet.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

34 
	~"autoc⁄f.h
"

37 
	$c⁄fig_ ë
(
 ë_so·c
 *
sc
, 
 ëno
)

39 ()
sc
;

41 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

43  
ENODEV
;

44 
	}
}

	@kern/dev/lamebus/lnet_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~"autoc⁄f.h
"

36 
	#LOW_VERSION
 1

	)

38 
	#HIGH_VERSION
 1

	)

40 
 ë_so·c
 *

41 
	$©èch_ ë_to_œmebus
(
 ëno
, 
œmebus_so·c
 *
sc
)

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_NET
,

44 
LOW_VERSION
, 
HIGH_VERSION
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

51  
NULL
;

52 
	}
}

	@kern/dev/lamebus/lrandom.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<uio.h
>

36 
	~<∂©f‹m/bus.h
>

37 
	~<œmebus/Ã™dom.h
>

38 
	~"autoc⁄f.h
"

41 
	#LR_REG_RAND
 0

	)

44 
	#LR_RANDMAX
 0xffffffff

	)

47 
	$c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
Ã
, 
Ã™domno
)

49 ()
Ã™domno
;

50 ()
Ã
;

52 
	}
}

54 
uöt32_t


55 
	$Ã™dom_øndom
(*
devd©a
)

57 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

58  
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
, 
LR_REG_RAND
);

59 
	}
}

61 
uöt32_t


62 
	$Ã™dom_øndmax
(*
devd©a
)

64 ()
devd©a
;

65  
LR_RANDMAX
;

66 
	}
}

69 
	$Ã™dom_ªad
(*
devd©a
, 
uio
 *uio)

71 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

72 
uöt32_t
 
vÆ
;

73 
ªsu…
;

75 
uio
->
uio_ªsid
 > 0) {

76 
vÆ
 = 
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
,

77 
LR_REG_RAND
);

78 
ªsu…
 = 
	`uiomove
(&
vÆ
, (vÆ), 
uio
);

79 i‡(
ªsu…
) {

80  
ªsu…
;

85 
	}
}

	@kern/dev/lamebus/lrandom.h

30 #i‚de‡
_LAMEBUS_LRANDOM_H_


31 
	#_LAMEBUS_LRANDOM_H_


	)

33 
	guio
;

35 
	sÃ™dom_so·c
 {

37 *
	mÃ_bus
;

38 
uöt32_t
 
	mÃ_bu•os
;

42 
uöt32_t
 
Ã™dom_øndom
–*
devd©a
);

43 
uöt32_t
 
Ã™dom_øndmax
–*
devd©a
);

44 
Ã™dom_ªad
–*, 
uio
 *);

	@kern/dev/lamebus/lrandom_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/Ã™dom.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
Ã™dom_so·c
 *

40 
	$©èch_Ã™dom_to_œmebus
(
Ã™domno
, 
œmebus_so·c
 *
sc
)

42 
Ã™dom_so·c
 *
Ã
;

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_RANDOM
,

44 
LOW_VERSION
, 
NULL
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
Ã
 = 
	`kmÆloc
((
Ã™dom_so·c
));

50 i‡(
Ã
==
NULL
) {

51  
NULL
;

54 ()
Ã™domno
;

56 
Ã
->
Ã_bus
 = 
sc
;

57 
Ã
->
Ã_bu•os
 = 
¶Ÿ
;

59 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

61  
Ã
;

62 
	}
}

	@kern/dev/lamebus/lscreen.c

36 
	~<ty≥s.h
>

37 
	~<lib.h
>

38 
	~<•ölock.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<œmebus/ls¸ìn.h
>

41 
	~"autoc⁄f.h
"

44 
	#LSCR_REG_POSN
 0

	)

45 
	#LSCR_REG_SIZE
 4

	)

46 
	#LSCR_REG_CHAR
 8

	)

47 
	#LSCR_REG_RIRQ
 12

	)

50 
	#LSCR_IRQ_ENABLE
 1

	)

51 
	#LSCR_IRQ_ACTIVE
 2

	)

54 
	#LSCR_SCREEN
 32768

	)

58 
ölöe


60 
	$•lôxy
(
uöt32_t
 
xy
, *
x
, *
y
)

62 *
x
 = 
xy
 >> 16;

63 *
y
 = 
xy
 & 0xffff;

64 
	}
}

68 
ölöe


69 
uöt32_t


70 
	$mîgexy
(
x
, 
y
)

72 
uöt32_t
 
vÆ
 = 
x
;

74  (
vÆ
 << 16Ë| 
y
;

75 
	}
}

83 
	$ls¸ìn_úq
(*
vsc
)

85 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

86 
uöt32_t
 
ch
, 
x
;

88 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

90 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSCR_REG_RIRQ
);

91 i‡(
x
 & 
LSCR_IRQ_ACTIVE
) {

92 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

93 
LSCR_REG_CHAR
);

94 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

95 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

97 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

98 i‡(
sc
->
ls_öput
) {

99 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

103 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

105 
	}
}

114 
	$ls¸ìn_√wlöe
(
ls¸ìn_so·c
 *
sc
)

116 i‡(
sc
->
ls_cy
 >sc->
ls_height
-1) {

121 
	`memmove
(
sc
->
ls_s¸ìn
, sc->ls_s¸ì¿+ sc->
ls_width
,

122 
sc
->
ls_width
 * (sc->
ls_height
-1));

123 
	`bzîo
(
sc
->
ls_s¸ìn
 + sc->
ls_width
 * (sc->
ls_height
-1),

124 
sc
->
ls_width
);

127 
sc
->
ls_cy
++;

129 
sc
->
ls_cx
=0;

130 
	}
}

137 
	$ls¸ìn_ch¨
(
ls¸ìn_so·c
 *
sc
, 
ch
)

139 i‡(
sc
->
ls_cx
 >sc->
ls_width
) {

140 
	`ls¸ìn_√wlöe
(
sc
);

143 
sc
->
ls_s¸ìn
[sc->
ls_cy
*sc->
ls_width
 + sc->
ls_cx
] = 
ch
;

144 
sc
->
ls_cx
++;

145 
	}
}

152 
	$ls¸ìn_wrôe
(*
vsc
, 
ch
)

154 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

155 
ccx
, 
ccy
;

157 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

159 
ch
) {

160 '\n': 
	`ls¸ìn_√wlöe
(
sc
); ;

161 : 
	`ls¸ìn_ch¨
(
sc
, 
ch
); ;

169 
ccx
 = 
sc
->
ls_cx
;

170 
ccy
 = 
sc
->
ls_cy
;

171 i‡(
ccx
==
sc
->
ls_width
) {

172 
ccx
--;

176 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

177 
LSCR_REG_POSN
, 
	`mîgexy
(
ccx
, 
ccy
));

179 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

180 
	}
}

188 
	$c⁄fig_ls¸ìn
(
ls¸ìn_so·c
 *
sc
, 
ls¸ì¬o
)

190 
uöt32_t
 
vÆ
;

192 ()
ls¸ì¬o
;

194 
	`•ölock_öô
(&
sc
->
ls_lock
);

200 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

201 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

206 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

207 
LSCR_REG_SIZE
);

208 
	`•lôxy
(
vÆ
, &
sc
->
ls_width
, &sc->
ls_height
);

213 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

214 
LSCR_REG_POSN
);

215 
	`•lôxy
(
vÆ
, &
sc
->
ls_cx
, &sc->
ls_cy
);

220 
sc
->
ls_s¸ìn
 = 
	`bus_m≠_¨ó
(sc->
ls_busd©a
, sc->
ls_bu•os
,

221 
LSCR_SCREEN
);

224 
	}
}

	@kern/dev/lamebus/lscreen.h

30 #i‚de‡
_LAMEBUS_LSCREEN_H_


31 
	#_LAMEBUS_LSCREEN_H_


	)

36 
	sls¸ìn_so·c
 {

38 
•ölock
 
	mls_lock
;

39 
	mls_width
, 
	mls_height
;

40 
	mls_cx
, 
	mls_cy
;

41 *
	mls_s¸ìn
;

44 *
	mls_busd©a
;

45 
uöt32_t
 
	mls_bu•os
;

48 *
	mls_devd©a
;

49 (*
	mls_°¨t
)(*
	mdevd©a
);

50 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

54 
ls¸ìn_úq
–*
sc
);

57 
ls¸ìn_wrôe
–*
sc
, 
ch
);

	@kern/dev/lamebus/lscreen_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/ls¸ìn.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
ls¸ìn_so·c
 *

45 
	$©èch_ls¸ìn_to_œmebus
(
ls¸ì¬o
, 
œmebus_so·c
 *
sc
)

47 
ls¸ìn_so·c
 *
ls
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SCREEN
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
ls
 = 
	`kmÆloc
((
ls¸ìn_so·c
));

56 i‡(
ls
==
NULL
) {

58  
NULL
;

62 
ls
->
ls_busd©a
 = 
sc
;

63 
ls
->
ls_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
ls¸ìn_úq
);

69  
ls
;

70 
	}
}

	@kern/dev/lamebus/lser.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<∂©f‹m/bus.h
>

34 
	~<œmebus/l£r.h
>

35 
	~"autoc⁄f.h
"

38 
	#LSER_REG_CHAR
 0

	)

39 
	#LSER_REG_WIRQ
 4

	)

40 
	#LSER_REG_RIRQ
 8

	)

43 
	#LSER_IRQ_ENABLE
 1

	)

44 
	#LSER_IRQ_ACTIVE
 2

	)

45 
	#LSER_IRQ_FORCE
 4

	)

48 
	$l£r_úq
(*
vsc
)

50 
l£r_so·c
 *
sc
 = 
vsc
;

51 
uöt32_t
 
x
;

52 
boﬁ
 
˛ór_to_wrôe
 = 
Ál£
;

53 
boﬁ
 
gŸ_a_ªad
 = 
Ál£
;

54 
uöt32_t
 
ch
 = 0;

56 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

58 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

59 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

60 
x
 = 
LSER_IRQ_ENABLE
;

61 
sc
->
ls_wbusy
 = 0;

62 
˛ór_to_wrôe
 = 
åue
;

63 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

64 
LSER_REG_WIRQ
, 
x
);

67 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

68 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

69 
x
 = 
LSER_IRQ_ENABLE
;

70 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

71 
LSER_REG_CHAR
);

72 
gŸ_a_ªad
 = 
åue
;

73 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

74 
LSER_REG_RIRQ
, 
x
);

77 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

79 i‡(
˛ór_to_wrôe
 && 
sc
->
ls_°¨t
 !
NULL
) {

80 
sc
->
	`ls_°¨t
(sc->
ls_devd©a
);

82 i‡(
gŸ_a_ªad
 && 
sc
->
ls_öput
 !
NULL
) {

83 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

85 
	}
}

88 
	$l£r_wrôe
(*
vls
, 
ch
)

90 
l£r_so·c
 *
ls
 = 
vls
;

92 
	`•ölock_acquúe
(&
ls
->
ls_lock
);

94 i‡(
ls
->
ls_wbusy
) {

106 
	`∑nic
("lser: Not clearÅo write\n");

108 
ls
->
ls_wbusy
 = 
åue
;

110 
	`bus_wrôe_ªgi°î
(
ls
->
ls_busd©a
,Üs->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

112 
	`•ölock_ªÀa£
(&
ls
->
ls_lock
);

113 
	}
}

117 
	$l£r_pﬁl_u¡û_wrôe
(
l£r_so·c
 *
sc
)

119 
uöt32_t
 
vÆ
;

121 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
sc
->
ls_lock
));

124 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

125 
LSER_REG_WIRQ
);

127 (
vÆ
 & 
LSER_IRQ_ACTIVE
) == 0);

128 
	}
}

131 
	$l£r_wrôïﬁÀd
(*
vsc
, 
ch
)

133 
l£r_so·c
 *
sc
 = 
vsc
;

134 
boﬁ
 
úq≥ndög
;

136 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

138 i‡(
sc
->
ls_wbusy
) {

139 
úq≥ndög
 = 
åue
;

140 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

142 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

143 
LSER_REG_WIRQ
,

144 
LSER_IRQ_FORCE
|
LSER_IRQ_ENABLE
);

147 
úq≥ndög
 = 
Ál£
;

149 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

150 
LSER_REG_WIRQ
, 0);

154 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

157 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

166 i‡(!
úq≥ndög
) {

167 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

168 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

171 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

172 
	}
}

175 
	$c⁄fig_l£r
(
l£r_so·c
 *
sc
, 
l£∫o
)

177 ()
l£∫o
;

183 
	`•ölock_öô
(&
sc
->
ls_lock
);

184 
sc
->
ls_wbusy
 = 
Ál£
;

186 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

187 
LSER_REG_RIRQ
, 
LSER_IRQ_ENABLE
);

188 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

189 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

192 
	}
}

	@kern/dev/lamebus/lser.h

30 #i‚de‡
_LAMEBUS_LSER_H_


31 
	#_LAMEBUS_LSER_H_


	)

33 
	~<•ölock.h
>

35 
	sl£r_so·c
 {

37 
•ölock
 
	mls_lock
;

38 vﬁ©ûê
boﬁ
 
	mls_wbusy
;

41 *
	mls_busd©a
;

42 
uöt32_t
 
	mls_bu•os
;

45 *
	mls_devd©a
;

46 (*
	mls_°¨t
)(*
	mdevd©a
);

47 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

51 
l£r_úq
–*
sc
);

54 
l£r_wrôe
–*
sc
, 
ch
);

55 
l£r_wrôïﬁÀd
–*
sc
, 
ch
);

	@kern/dev/lamebus/lser_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/l£r.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
l£r_so·c
 *

40 
	$©èch_l£r_to_œmebus
(
l£∫o
, 
œmebus_so·c
 *
sc
)

42 
l£r_so·c
 *
ls
;

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SERIAL
,

44 
LOW_VERSION
, 
NULL
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
ls
 = 
	`kmÆloc
((
l£r_so·c
));

50 i‡(
ls
==
NULL
) {

51  
NULL
;

54 ()
l£∫o
;

56 
ls
->
ls_busd©a
 = 
sc
;

57 
ls
->
ls_bu•os
 = 
¶Ÿ
;

59 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

60 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
l£r_úq
);

62  
ls
;

63 
	}
}

	@kern/dev/lamebus/ltimer.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<∂©f‹m/bus.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

42 
	#LT_REG_SEC
 0

	)

43 
	#LT_REG_NSEC
 4

	)

44 
	#LT_REG_ROE
 8

	)

45 
	#LT_REG_IRQ
 12

	)

46 
	#LT_REG_COUNT
 16

	)

47 
	#LT_REG_SPKR
 20

	)

50 
	#LT_GRANULARITY
 1000000

	)

52 
boﬁ
 
	ghavëimî˛ock
;

58 
	$c⁄fig_…imî
(
…imî_so·c
 *
…
, 
…imîno
)

83 ()
…imîno
;

84 
…
->
…_h¨d˛ock
 = 0;

90 i‡(!
havëimî˛ock
) {

91 
havëimî˛ock
 = 
åue
;

92 
…
->
…_timî˛ock
 = 1;

95 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_ROE
, 1);

96 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_COUNT
,

97 
LT_GRANULARITY
);

101 
	}
}

107 
	$…imî_úq
(*
v…
)

109 
…imî_so·c
 *
…
 = 
v…
;

110 
uöt32_t
 
vÆ
;

112 
vÆ
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_IRQ
);

113 i‡(
vÆ
) {

118 i‡(
…
->
…_h¨d˛ock
) {

119 
	`h¨d˛ock
();

124 i‡(
…
->
…_timî˛ock
) {

125 
	`timî˛ock
();

128 
	}
}

136 
	$…imî_bìp
(*
v…
)

138 
…imî_so·c
 *
…
 = 
v…
;

140 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_SPKR
, 440);

141 
	}
}

149 
	$…imî_gëtime
(*
v…
, 
time•ec
 *
ts
)

151 
…imî_so·c
 *
…
 = 
v…
;

152 
uöt32_t
 
£cs1
, 
£cs2
;

153 
•l
;

170 
•l
 = 
	`•lhigh
();

172 
£cs1
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

173 
LT_REG_SEC
);

174 
ts
->
tv_n£c
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

175 
LT_REG_NSEC
);

176 
£cs2
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

177 
LT_REG_SEC
);

179 
	`•lx
(
•l
);

181 i‡(
ts
->
tv_n£c
 < 5000000) {

182 
ts
->
tv_£c
 = 
£cs2
;

185 
ts
->
tv_£c
 = 
£cs1
;

187 
	}
}

	@kern/dev/lamebus/ltimer.h

30 #i‚de‡
_LAMEBUS_LTIMER_H_


31 
	#_LAMEBUS_LTIMER_H_


	)

33 
	gtime•ec
;

38 
	s…imî_so·c
 {

40 
	m…_h¨d˛ock
;

41 
	m…_timî˛ock
;

44 *
	m…_bus
;

45 
uöt32_t
 
	m…_bu•os
;

49 
…imî_úq
–*
…
);

52 
…imî_bìp
–*
devd©a
);

53 
…imî_gëtime
–*
devd©a
,

54 
time•ec
 *
ts
);

	@kern/dev/lamebus/ltimer_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/…imî.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
…imî_so·c
 *

43 
	$©èch_…imî_to_œmebus
(
…imîno
, 
œmebus_so·c
 *
sc
)

45 
…imî_so·c
 *
…
;

46 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TIMER
,

47 
LOW_VERSION
, 
NULL
);

48 i‡(
¶Ÿ
 < 0) {

50  
NULL
;

53 
…
 = 
	`kmÆloc
((
…imî_so·c
));

54 i‡(
…
==
NULL
) {

56  
NULL
;

59 ()
…imîno
;

62 
…
->
…_bus
 = 
sc
;

63 
…
->
…_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
…
, 
…imî_úq
);

69  
…
;

70 
	}
}

	@kern/dev/lamebus/ltrace.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<∂©f‹m/bus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LTRACE_REG_TRON
 0

	)

38 
	#LTRACE_REG_TROFF
 4

	)

39 
	#LTRACE_REG_DEBUG
 8

	)

40 
	#LTRACE_REG_DUMP
 12

	)

42 
…ø˚_so·c
 *
	gthe_åa˚
;

45 
	$…ø˚_⁄
(
uöt32_t
 
code
)

47 i‡(
the_åa˚
 !
NULL
) {

48 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

49 
LTRACE_REG_TRON
, 
code
);

51 
	}
}

54 
	$…ø˚_off
(
uöt32_t
 
code
)

56 i‡(
the_åa˚
 !
NULL
) {

57 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

58 
LTRACE_REG_TROFF
, 
code
);

60 
	}
}

63 
	$…ø˚_debug
(
uöt32_t
 
code
)

65 i‡(
the_åa˚
 !
NULL
) {

66 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

67 
LTRACE_REG_DEBUG
, 
code
);

69 
	}
}

72 
	$…ø˚_dump
(
uöt32_t
 
code
)

74 i‡(
the_åa˚
 !
NULL
) {

75 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

76 
LTRACE_REG_DUMP
, 
code
);

78 
	}
}

81 
	$c⁄fig_…ø˚
(
…ø˚_so·c
 *
sc
, 
…ø˚no
)

83 ()
…ø˚no
;

84 
the_åa˚
 = 
sc
;

86 
	}
}

	@kern/dev/lamebus/ltrace.h

30 #i‚de‡
_LAMEBUS_LTRACE_H_


31 
	#_LAMEBUS_LTRACE_H_


	)

33 
	s…ø˚_so·c
 {

35 *
	m…_busd©a
;

36 
uöt32_t
 
	m…_bu•os
;

62 
…ø˚_⁄
(
uöt32_t
 
code
);

63 
…ø˚_off
(
uöt32_t
 
code
);

64 
…ø˚_debug
(
uöt32_t
 
code
);

65 
…ø˚_dump
(
uöt32_t
 
code
);

	@kern/dev/lamebus/ltrace_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
…ø˚_so·c
 *

40 
	$©èch_…ø˚_to_œmebus
(
…ø˚no
, 
œmebus_so·c
 *
sc
)

42 
…ø˚_so·c
 *
…
;

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TRACE
,

44 
LOW_VERSION
, 
NULL
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
…
 = 
	`kmÆloc
((
…ø˚_so·c
));

50 i‡(
…
==
NULL
) {

51  
NULL
;

54 ()
…ø˚no
;

56 
…
->
…_busd©a
 = 
sc
;

57 
…
->
…_bu•os
 = 
¶Ÿ
;

59 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

61  
…
;

62 
	}
}

	@kern/dev/lamebus/random_lrandom.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/øndom.h
>

38 
	~<œmebus/Ã™dom.h
>

39 
	~"autoc⁄f.h
"

41 
øndom_so·c
 *

42 
	$©èch_øndom_to_Ã™dom
(
øndomno
, 
Ã™dom_so·c
 *
ls
)

44 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

45 i‡(
rs
==
NULL
) {

46  
NULL
;

49 ()
øndomno
;

51 
rs
->
rs_devd©a
 = 
ls
;

52 
rs
->
rs_øndom
 = 
Ã™dom_øndom
;

53 
rs
->
rs_øndmax
 = 
Ã™dom_øndmax
;

54 
rs
->
rs_ªad
 = 
Ã™dom_ªad
;

56  
rs
;

57 
	}
}

	@kern/dev/lamebus/rtclock_ltimer.c

41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	~<gíîic/π˛ock.h
>

44 
	~<œmebus/…imî.h
>

45 
	~"autoc⁄f.h
"

47 
π˛ock_so·c
 *

48 
	$©èch_π˛ock_to_…imî
(
π˛ockno
, 
…imî_so·c
 *
ls
)

54 
π˛ock_so·c
 *
πc
 = 
	`kmÆloc
((rtclock_softc));

55 i‡(
πc
==
NULL
) {

57  
NULL
;

60 ()
π˛ockno
;

62 
πc
->
πc_devd©a
 = 
ls
;

63 
πc
->
πc_gëtime
 = 
…imî_gëtime
;

65  
πc
;

66 
	}
}

	@kern/fs/semfs/semfs.h

30 #i‚de‡
SEMFS_H


31 
	#SEMFS_H


	)

33 
	~<¨øy.h
>

34 
	~<fs.h
>

35 
	~<vnode.h
>

37 #i‚de‡
SEMFS_INLINE


38 
	#SEMFS_INLINE
 
INLINE


	)

45 
	#SEMFS_ROOTDIR
 0xffffffffU

	)

54 
	s£mfs_£m
 {

55 
lock
 *
	m£ms_lock
;

56 
cv
 *
	m£ms_cv
;

57 
	m£ms_cou¡
;

58 
boﬁ
 
	m£ms_hasvnode
;

59 
boﬁ
 
	m£ms_löked
;

61 
DECLARRAY
(
£mfs_£m
, 
SEMFS_INLINE
);

66 
	s£mfs_dúíåy
 {

67 *
	m£md_«me
;

68 
	m£md_£mnum
;

70 
DECLARRAY
(
£mfs_dúíåy
, 
SEMFS_INLINE
);

79 
	s£mfs_vnode
 {

80 
vnode
 
	m£mv_absvn
;

81 
£mfs
 *
	m£mv_£mfs
;

82 
	m£mv_£mnum
;

89 
	s£mfs
 {

90 
fs
 
	m£mfs_absfs
;

92 
lock
 *
	m£mfs_èbÀlock
;

93 
vnodóºay
 *
	m£mfs_vnodes
;

94 
£mfs_£m¨øy
 *
	m£mfs_£ms
;

96 
lock
 *
	m£mfs_dúlock
;

97 
£mfs_dúíåy¨øy
 *
	m£mfs_díts
;

104 
DEFARRAY
(
£mfs_£m
, 
SEMFS_INLINE
);

105 
DEFARRAY
(
£mfs_dúíåy
, 
SEMFS_INLINE
);

113 
£mfs_£m
 *
£mfs_£m_¸óã
(c⁄° *
«me
);

114 
£mfs_£m_ö£π
(
£mfs
 *, 
£mfs_£m
 *, *);

115 
£mfs_£m_de°roy
(
£mfs_£m
 *);

116 
£mfs_dúíåy
 *
£mfs_dúíåy_¸óã
(c⁄° *
«me
, 
£mno
);

117 
£mfs_dúíåy_de°roy
(
£mfs_dúíåy
 *);

120 
£mfs_gëvnode
(
£mfs
 *, , 
vnode
 **
ªt
);

	@kern/fs/semfs/semfs_fsops.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<synch.h
>

33 
	~<vfs.h
>

34 
	~<fs.h
>

35 
	~<vnode.h
>

37 
	~"£mfs.h
"

47 
	$£mfs_sync
(
fs
 *fs)

49 ()
fs
;

51 
	}
}

58 
	$£mfs_gëvﬁ«me
(
fs
 *fs)

60 ()
fs
;

62 
	}
}

68 
vnode
 *

69 
	$£mfs_gëroŸ
(
fs
 *fs)

71 
£mfs
 *£mf†
fs
->
fs_d©a
;

72 
vnode
 *
vn
;

73 
ªsu…
;

75 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
SEMFS_ROOTDIR
, &
vn
);

76 i‡(
ªsu…
) {

77 
	`∑nic
("semfs: couldn'tÜoadÑoot vnode: %s\n",

78 
	`°ªº‹
(
ªsu…
));

80  
vn
;

81 
	}
}

92 
	$£mfs_de°roy
(
£mfs
 *semfs)

94 
£mfs_£m
 *
£m
;

95 
£mfs_dúíåy
 *
dít
;

96 
i
, 
num
;

98 
num
 = 
	`£mfs_£m¨øy_num
(
£mfs
->
£mfs_£ms
);

99 
i
=0; i<
num
; i++) {

100 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
i
);

101 
	`£mfs_£m_de°roy
(
£m
);

103 
	`£mfs_£m¨øy_£tsize
(
£mfs
->
£mfs_£ms
, 0);

105 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

106 
i
=0; i<
num
; i++) {

107 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

108 
	`£mfs_dúíåy_de°roy
(
dít
);

110 
	`£mfs_dúíåy¨øy_£tsize
(
£mfs
->
£mfs_díts
, 0);

112 
	`£mfs_dúíåy¨øy_de°roy
(
£mfs
->
£mfs_díts
);

113 
	`lock_de°roy
(
£mfs
->
£mfs_dúlock
);

114 
	`£mfs_£m¨øy_de°roy
(
£mfs
->
£mfs_£ms
);

115 
	`vnodóºay_de°roy
(
£mfs
->
£mfs_vnodes
);

116 
	`lock_de°roy
(
£mfs
->
£mfs_èbÀlock
);

117 
	`k‰ì
(
£mfs
);

118 
	}
}

126 
	$£mfs_unmou¡
(
fs
 *fs)

128 
£mfs
 *£mf†
fs
->
fs_d©a
;

130 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

131 i‡(
	`vnodóºay_num
(
£mfs
->
£mfs_vnodes
) > 0) {

132 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

133  
EBUSY
;

136 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

137 
	`£mfs_de°roy
(
£mfs
);

140 
	}
}

145 c⁄° 
fs_›s
 
	g£mfs_fs›s
 = {

146 .
fs›_sync
 = 
£mfs_sync
,

147 .
	gfs›_gëvﬁ«me
 = 
£mfs_gëvﬁ«me
,

148 .
	gfs›_gëroŸ
 = 
£mfs_gëroŸ
,

149 .
	gfs›_unmou¡
 = 
£mfs_unmou¡
,

156 
£mfs
 *

157 
	$£mfs_¸óã
()

159 
£mfs
 *semfs;

161 
£mfs
 = 
	`kmÆloc
((*semfs));

162 i‡(
£mfs
 =
NULL
) {

163 
Áû_tŸÆ
;

166 
£mfs
->
£mfs_èbÀlock
 = 
	`lock_¸óã
("semfs_table");

167 i‡(
£mfs
->
£mfs_èbÀlock
 =
NULL
) {

168 
Áû_£mfs
;

170 
£mfs
->
£mfs_vnodes
 = 
	`vnodóºay_¸óã
();

171 i‡(
£mfs
->
£mfs_vnodes
 =
NULL
) {

172 
Áû_èbÀlock
;

174 
£mfs
->
£mfs_£ms
 = 
	`£mfs_£m¨øy_¸óã
();

175 i‡(
£mfs
->
£mfs_£ms
 =
NULL
) {

176 
Áû_vnodes
;

179 
£mfs
->
£mfs_dúlock
 = 
	`lock_¸óã
("semfs_dir");

180 i‡(
£mfs
->
£mfs_dúlock
 =
NULL
) {

181 
Áû_£ms
;

183 
£mfs
->
£mfs_díts
 = 
	`£mfs_dúíåy¨øy_¸óã
();

184 i‡(
£mfs
->
£mfs_díts
 =
NULL
) {

185 
Áû_dúlock
;

188 
£mfs
->
£mfs_absfs
.
fs_d©a
 = semfs;

189 
£mfs
->
£mfs_absfs
.
fs_›s
 = &
£mfs_fs›s
;

190  
£mfs
;

192 
Áû_dúlock
:

193 
	`lock_de°roy
(
£mfs
->
£mfs_dúlock
);

194 
Áû_£ms
:

195 
	`£mfs_£m¨øy_de°roy
(
£mfs
->
£mfs_£ms
);

196 
Áû_vnodes
:

197 
	`vnodóºay_de°roy
(
£mfs
->
£mfs_vnodes
);

198 
Áû_èbÀlock
:

199 
	`lock_de°roy
(
£mfs
->
£mfs_èbÀlock
);

200 
Áû_£mfs
:

201 
	`k‰ì
(
£mfs
);

202 
Áû_tŸÆ
:

203  
NULL
;

204 
	}
}

211 
	$£mfs_boŸ°øp
()

213 
£mfs
 *semfs;

214 
ªsu…
;

216 
£mfs
 = 
	`£mfs_¸óã
();

217 i‡(
£mfs
 =
NULL
) {

218 
	`∑nic
("Out of memory creating semfs\n");

220 
ªsu…
 = 
	`vfs_addfs
("£m", &
£mfs
->
£mfs_absfs
);

221 i‡(
ªsu…
) {

222 
	`∑nic
("Aâachög semfs: %s\n", 
	`°ªº‹
(
ªsu…
));

224 
	}
}

	@kern/fs/semfs/semfs_obj.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<synch.h
>

34 
	#SEMFS_INLINE


	)

35 
	~"£mfs.h
"

43 
£mfs_£m
 *

44 
	$£mfs_£m_¸óã
(c⁄° *
«me
)

46 
£mfs_£m
 *
£m
;

47 
lock«me
[32];

48 
cv«me
[32];

50 
	`¢¥ötf
(
lock«me
, ÷ock«me), "£m:l.%s", 
«me
);

51 
	`¢¥ötf
(
cv«me
, (cv«me), "£m:%s", 
«me
);

53 
£m
 = 
	`kmÆloc
((*sem));

54 i‡(
£m
 =
NULL
) {

55 
Áû_ªtu∫
;

57 
£m
->
£ms_lock
 = 
	`lock_¸óã
(
lock«me
);

58 i‡(
£m
->
£ms_lock
 =
NULL
) {

59 
Áû_£m
;

61 
£m
->
£ms_cv
 = 
	`cv_¸óã
(
cv«me
);

62 i‡(
£m
->
£ms_cv
 =
NULL
) {

63 
Áû_lock
;

65 
£m
->
£ms_cou¡
 = 0;

66 
£m
->
£ms_hasvnode
 = 
Ál£
;

67 
£m
->
£ms_löked
 = 
Ál£
;

68  
£m
;

70 
Áû_lock
:

71 
	`lock_de°roy
(
£m
->
£ms_lock
);

72 
Áû_£m
:

73 
	`k‰ì
(
£m
);

74 
Áû_ªtu∫
:

75  
NULL
;

76 
	}
}

82 
	$£mfs_£m_de°roy
(
£mfs_£m
 *
£m
)

84 
	`cv_de°roy
(
£m
->
£ms_cv
);

85 
	`lock_de°roy
(
£m
->
£ms_lock
);

86 
	`k‰ì
(
£m
);

87 
	}
}

93 
	$£mfs_£m_ö£π
(
£mfs
 *£mfs, 
£mfs_£m
 *
£m
, *
ªt
)

95 
i
, 
num
;

97 
	`KASSERT
(
	`lock_do_i_hﬁd
(
£mfs
->
£mfs_èbÀlock
));

98 
num
 = 
	`£mfs_£m¨øy_num
(
£mfs
->
£mfs_£ms
);

99 i‡(
num
 =
SEMFS_ROOTDIR
) {

101  
ENOSPC
;

103 
i
=0; i<
num
; i++) {

104 i‡(
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
i
Ë=
NULL
) {

105 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
, 
i
, 
£m
);

106 *
ªt
 = 
i
;

110  
	`£mfs_£m¨øy_add
(
£mfs
->
£mfs_£ms
, 
£m
, 
ªt
);

111 
	}
}

119 
£mfs_dúíåy
 *

120 
	$£mfs_dúíåy_¸óã
(c⁄° *
«me
, 
£mnum
)

122 
£mfs_dúíåy
 *
dít
;

124 
dít
 = 
	`kmÆloc
((*dent));

125 i‡(
dít
 =
NULL
) {

126  
NULL
;

128 
dít
->
£md_«me
 = 
	`k°rdup
(
«me
);

129 i‡(
dít
->
£md_«me
 =
NULL
) {

130 
	`k‰ì
(
dít
);

131  
NULL
;

133 
dít
->
£md_£mnum
 = 
£mnum
;

134  
dít
;

135 
	}
}

141 
	$£mfs_dúíåy_de°roy
(
£mfs_dúíåy
 *
dít
)

143 
	`k‰ì
(
dít
->
£md_«me
);

144 
	`k‰ì
(
dít
);

145 
	}
}

	@kern/fs/semfs/semfs_vnops.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<°©.h
>

34 
	~<uio.h
>

35 
	~<synch.h
>

36 
	~<thªad.h
>

37 
	~<¥oc.h
>

38 
	~<cuºít.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

42 
	~"£mfs.h
"

49 
	$£mfs_óch›í
(
vnode
 *
vn
, 
›íÊags
)

51 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

53 i‡(
£mv
->
£mv_£mnum
 =
SEMFS_ROOTDIR
) {

54 i‡((
›íÊags
 & 
O_ACCMODE
Ë!
O_RDONLY
) {

55  
EISDIR
;

57 i‡(
›íÊags
 & 
O_APPEND
) {

58  
EISDIR
;

63 
	}
}

67 
	$£mfs_io˘l
(
vnode
 *
vn
, 
›
, 
u£Ωå_t
 
d©a
)

69 ()
vn
;

70 ()
›
;

71 ()
d©a
;

72  
EINVAL
;

73 
	}
}

77 
	$£mfs_gëty≥
(
vnode
 *
vn
, 
mode_t
 *
ªt
)

79 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

81 *
ªt
 = 
£mv
->
£mv_£mnum
 =
SEMFS_ROOTDIR
 ? 
S_IFDIR
 : 
S_IFREG
;

83 
	}
}

86 
boﬁ


87 
	$£mfs_is£ekabÀ
(
vnode
 *
vn
)

89 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

91 i‡(
£mv
->
£mv_£mnum
 !
SEMFS_ROOTDIR
) {

93  
Ál£
;

95  
åue
;

96 
	}
}

100 
	$£mfs_fsync
(
vnode
 *
vn
)

102 ()
vn
;

104 
	}
}

114 
£mfs_£m
 *

115 
	$£mfs_gë£mbynum
(
£mfs
 *£mfs, 
£mnum
)

117 
£mfs_£m
 *
£m
;

119 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

120 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
£mnum
);

121 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

123  
£m
;

124 
	}
}

127 
£mfs_£m
 *

128 
	$£mfs_gë£m
(
£mfs_vnode
 *
£mv
)

130 
£mfs
 *£mf†
£mv
->
£mv_£mfs
;

132  
	`£mfs_gë£mbynum
(
£mfs
, 
£mv
->
£mv_£mnum
);

133 
	}
}

143 
	$£mfs_wakeup
(
£mfs_£m
 *
£m
, 
√wcou¡
)

145 i‡(
£m
->
£ms_cou¡
 > 0 || 
√wcou¡
 == 0) {

148 i‡(
√wcou¡
 == 1) {

149 
	`cv_sig«l
(
£m
->
£ms_cv
, sem->
£ms_lock
);

152 
	`cv_brﬂdˇ°
(
£m
->
£ms_cv
, sem->
£ms_lock
);

154 
	}
}

161 
	$£mfs_£m°©
(
vnode
 *
vn
, 
°©
 *
buf
)

163 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

164 
£mfs_£m
 *
£m
;

166 
£m
 = 
	`£mfs_gë£m
(
£mv
);

168 
	`bzîo
(
buf
, (*buf));

170 
	`lock_acquúe
(
£m
->
£ms_lock
);

171 
buf
->
°_size
 = 
£m
->
£ms_cou¡
;

172 
buf
->
°_∆ök
 = 
£m
->
£ms_löked
 ? 1 : 0;

173 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

175 
buf
->
°_mode
 = 
S_IFREG
 | 0666;

176 
buf
->
°_blocks
 = 0;

177 
buf
->
°_dev
 = 0;

178 
buf
->
°_öo
 = 
£mv
->
£mv_£mnum
;

181 
	}
}

189 
	$£mfs_ªad
(
vnode
 *
vn
, 
uio
 *uio)

191 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

192 
£mfs_£m
 *
£m
;

193 
size_t
 
c⁄sume
;

195 
£m
 = 
	`£mfs_gë£m
(
£mv
);

197 
	`lock_acquúe
(
£m
->
£ms_lock
);

198 
uio
->
uio_ªsid
 > 0) {

199 i‡(
£m
->
£ms_cou¡
 > 0) {

200 
c⁄sume
 = 
uio
->
uio_ªsid
;

201 i‡(
c⁄sume
 > 
£m
->
£ms_cou¡
) {

202 
c⁄sume
 = 
£m
->
£ms_cou¡
;

204 
	`DEBUG
(
DB_SEMFS
, "semfs: sem%u: P, count %u -> %u\n",

205 
£mv
->
£mv_£mnum
, 
£m
->
£ms_cou¡
,

206 
£m
->
£ms_cou¡
 - 
c⁄sume
);

207 
£m
->
£ms_cou¡
 -
c⁄sume
;

209 
uio
->
uio_ªsid
 -
c⁄sume
;

211 i‡(
uio
->
uio_ªsid
 == 0) {

214 i‡(
£m
->
£ms_cou¡
 == 0) {

215 
	`DEBUG
(
DB_SEMFS
, "semfs: sem%u: blocking\n",

216 
£mv
->
£mv_£mnum
);

217 
	`cv_waô
(
£m
->
£ms_cv
, sem->
£ms_lock
);

220 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

222 
	}
}

230 
	$£mfs_wrôe
(
vnode
 *
vn
, 
uio
 *uio)

232 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

233 
£mfs_£m
 *
£m
;

234 
√wcou¡
;

236 
£m
 = 
	`£mfs_gë£m
(
£mv
);

238 
	`lock_acquúe
(
£m
->
£ms_lock
);

239 
uio
->
uio_ªsid
 > 0) {

240 
√wcou¡
 = 
£m
->
£ms_cou¡
 + 
uio
->
uio_ªsid
;

241 i‡(
√wcou¡
 < 
£m
->
£ms_cou¡
) {

243 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

244  
EFBIG
;

246 
	`DEBUG
(
DB_SEMFS
, "semfs: sem%u: V, count %u -> %u\n",

247 
£mv
->
£mv_£mnum
, 
£m
->
£ms_cou¡
, 
√wcou¡
);

248 
	`£mfs_wakeup
(
£m
, 
√wcou¡
);

249 
£m
->
£ms_cou¡
 = 
√wcou¡
;

250 
uio
->
uio_ªsid
 = 0;

252 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

254 
	}
}

265 
	$£mfs_åunˇã
(
vnode
 *
vn
, 
off_t
 
Àn
)

268 c⁄° 
max
 = ()-1;

270 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

271 
£mfs_£m
 *
£m
;

272 
√wcou¡
;

274 i‡(
Àn
 < 0) {

275  
EINVAL
;

277 i‡(
Àn
 > (
off_t
)
max
) {

278  
EFBIG
;

280 
√wcou¡
 = 
Àn
;

282 
£m
 = 
	`£mfs_gë£m
(
£mv
);

284 
	`lock_acquúe
(
£m
->
£ms_lock
);

285 
	`£mfs_wakeup
(
£m
, 
√wcou¡
);

286 
£m
->
£ms_cou¡
 = 
√wcou¡
;

287 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

290 
	}
}

301 
	$£mfs_gëdúíåy
(
vnode
 *
dúvn
, 
uio
 *uio)

303 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

304 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

305 
£mfs_dúíåy
 *
dít
;

306 
num
, 
pos
;

307 
ªsu…
;

309 
	`KASSERT
(
uio
->
uio_off£t
 >= 0);

310 
pos
 = 
uio
->
uio_off£t
;

312 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

314 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

315 i‡(
pos
 >
num
) {

317 
ªsu…
 = 0;

320 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
pos
);

321 
ªsu…
 = 
	`uiomove
(
dít
->
£md_«me
, 
	`°æí
(dent->semd_name),

322 
uio
);

325 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

326  
ªsu…
;

327 
	}
}

334 
	$£mfs_dú°©
(
vnode
 *
vn
, 
°©
 *
buf
)

336 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

337 
£mfs
 *£mf†
£mv
->
£mv_£mfs
;

339 
	`bzîo
(
buf
, (*buf));

341 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

342 
buf
->
°_size
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

343 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

345 
buf
->
°_mode
 = 
S_IFDIR
 | 1777;

346 
buf
->
°_∆ök
 = 2;

347 
buf
->
°_blocks
 = 0;

348 
buf
->
°_dev
 = 0;

349 
buf
->
°_öo
 = 
SEMFS_ROOTDIR
;

352 
	}
}

360 
	$£mfs_«mefûe
(
vnode
 *
vn
, 
uio
 *uio)

362 ()
vn
;

363 ()
uio
;

365 
	}
}

372 
	$£mfs_¸ót
(
vnode
 *
dúvn
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

373 
vnode
 **
ªsu…vn
)

375 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

376 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

377 
£mfs_dúíåy
 *
dít
;

378 
£mfs_£m
 *
£m
;

379 
i
, 
num
, 
em±y
, 
£mnum
;

380 
ªsu…
;

382 ()
mode
;

383 i‡(!
	`°rcmp
(
«me
, ".") || !strcmp(name, "..")) {

384  
EEXIST
;

387 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

388 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

389 
em±y
 = 
num
;

390 
i
=0; i<
num
; i++) {

391 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

392 i‡(
dít
 =
NULL
) {

393 i‡(
em±y
 =
num
) {

394 
em±y
 = 
i
;

398 i‡(!
	`°rcmp
(
dít
->
£md_«me
, 
«me
)) {

400 i‡(
ex˛
) {

401 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

402  
EEXIST
;

404 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
dít
->
£md_£mnum
,

405 
ªsu…vn
);

406 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

407  
ªsu…
;

412 
£m
 = 
	`£mfs_£m_¸óã
(
«me
);

413 i‡(
£m
 =
NULL
) {

414 
ªsu…
 = 
ENOMEM
;

415 
Áû_u∆ock
;

417 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

418 
ªsu…
 = 
	`£mfs_£m_ö£π
(
£mfs
, 
£m
, &
£mnum
);

419 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

420 i‡(
ªsu…
) {

421 
Áû_un¸óã
;

424 
dít
 = 
	`£mfs_dúíåy_¸óã
(
«me
, 
£mnum
);

425 i‡(
dít
 =
NULL
) {

426 
Áû_unö£π
;

429 i‡(
em±y
 < 
num
) {

430 
	`£mfs_dúíåy¨øy_£t
(
£mfs
->
£mfs_díts
, 
em±y
, 
dít
);

433 
ªsu…
 = 
	`£mfs_dúíåy¨øy_add
(
£mfs
->
£mfs_díts
, 
dít
,

434 &
em±y
);

435 i‡(
ªsu…
) {

436 
Áû_undít
;

440 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
£mnum
, 
ªsu…vn
);

441 i‡(
ªsu…
) {

442 
Áû_undú
;

445 
£m
->
£ms_löked
 = 
åue
;

446 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

449 
Áû_undú
:

450 
	`£mfs_dúíåy¨øy_£t
(
£mfs
->
£mfs_díts
, 
em±y
, 
NULL
);

451 
Áû_undít
:

452 
	`£mfs_dúíåy_de°roy
(
dít
);

453 
Áû_unö£π
:

454 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

455 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
, 
£mnum
, 
NULL
);

456 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

457 
Áû_un¸óã
:

458 
	`£mfs_£m_de°roy
(
£m
);

459 
Áû_u∆ock
:

460 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

461  
ªsu…
;

462 
	}
}

470 
	$£mfs_ªmove
(
vnode
 *
dúvn
, c⁄° *
«me
)

472 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

473 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

474 
£mfs_dúíåy
 *
dít
;

475 
£mfs_£m
 *
£m
;

476 
i
, 
num
;

477 
ªsu…
;

479 i‡(!
	`°rcmp
(
«me
, ".") || !strcmp(name, "..")) {

480  
EINVAL
;

483 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

484 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

485 
i
=0; i<
num
; i++) {

486 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

487 i‡(
dít
 =
NULL
) {

490 i‡(!
	`°rcmp
(
«me
, 
dít
->
£md_«me
)) {

492 
£m
 = 
	`£mfs_gë£mbynum
(
£mfs
, 
dít
->
£md_£mnum
);

493 
	`lock_acquúe
(
£m
->
£ms_lock
);

494 
	`KASSERT
(
£m
->
£ms_löked
);

495 
£m
->
£ms_löked
 = 
Ál£
;

496 i‡(
£m
->
£ms_hasvnode
 =
Ál£
) {

497 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

498 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
,

499 
dít
->
£md_£mnum
, 
NULL
);

500 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

501 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

502 
	`£mfs_£m_de°roy
(
£m
);

505 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

507 
	`£mfs_dúíåy¨øy_£t
(
£mfs
->
£mfs_díts
, 
i
, 
NULL
);

508 
	`£mfs_dúíåy_de°roy
(
dít
);

509 
ªsu…
 = 0;

510 
out
;

513 
ªsu…
 = 
ENOENT
;

514 
out
:

515 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

516  
ªsu…
;

517 
	}
}

524 
	$£mfs_lookup
(
vnode
 *
dúvn
, *
∑th
, vnodê**
ªsu…vn
)

526 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

527 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

528 
£mfs_dúíåy
 *
dít
;

529 
i
, 
num
;

530 
ªsu…
;

532 i‡(!
	`°rcmp
(
∑th
, ".") || !strcmp(path, "..")) {

533 
	`VOP_INCREF
(
dúvn
);

534 *
ªsu…vn
 = 
dúvn
;

538 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

539 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

540 
i
=0; i<
num
; i++) {

541 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

542 i‡(
dít
 =
NULL
) {

545 i‡(!
	`°rcmp
(
∑th
, 
dít
->
£md_«me
)) {

546 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
dít
->
£md_£mnum
,

547 
ªsu…vn
);

548 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

549  
ªsu…
;

552 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

553  
ENOENT
;

554 
	}
}

562 
	$£mfs_look∑ª¡
(
vnode
 *
dúvn
, *
∑th
,

563 
vnode
 **
ªsu…dúvn
, *
«mebuf
, 
size_t
 
bufmax
)

565 i‡(
	`°æí
(
∑th
)+1 > 
bufmax
) {

566  
ENAMETOOLONG
;

568 
	`°r˝y
(
«mebuf
, 
∑th
);

570 
	`VOP_INCREF
(
dúvn
);

571 *
ªsu…dúvn
 = 
dúvn
;

573 
	}
}

583 
	$£mfs_vnode_de°roy
(
£mfs_vnode
 *
£mv
)

585 
	`vnode_˛ónup
(&
£mv
->
£mv_absvn
);

586 
	`k‰ì
(
£mv
);

587 
	}
}

594 
	$£mfs_ª˛aim
(
vnode
 *
vn
)

596 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

597 
£mfs
 *£mf†
£mv
->
£mv_£mfs
;

598 
vnode
 *
vn2
;

599 
£mfs_£m
 *
£m
;

600 
i
, 
num
;

602 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

605 
	`•ölock_acquúe
(&
vn
->
vn_cou¡lock
);

606 i‡(
vn
->
vn_ªfcou¡
 > 1) {

608 
vn
->
vn_ªfcou¡
--;

610 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

611 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

612  
EBUSY
;

615 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

618 
num
 = 
	`vnodóºay_num
(
£mfs
->
£mfs_vnodes
);

619 
i
=0; i<
num
; i++) {

620 
vn2
 = 
	`vnodóºay_gë
(
£mfs
->
£mfs_vnodes
, 
i
);

621 i‡(
vn2
 =
vn
) {

622 
	`vnodóºay_ªmove
(
£mfs
->
£mfs_vnodes
, 
i
);

627 i‡(
£mv
->
£mv_£mnum
 !
SEMFS_ROOTDIR
) {

628 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
£mv
->
£mv_£mnum
);

629 
	`KASSERT
(
£m
->
£ms_hasvnode
);

630 
£m
->
£ms_hasvnode
 = 
Ál£
;

631 i‡(
£m
->
£ms_löked
 =
Ál£
) {

632 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
,

633 
£mv
->
£mv_£mnum
, 
NULL
);

634 
	`£mfs_£m_de°roy
(
£m
);

639 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

642 
	`£mfs_vnode_de°roy
(
£mv
);

644 
	}
}

649 c⁄° 
vnode_›s
 
	g£mfs_dú›s
 = {

650 .
v›_magic
 = 
VOP_MAGIC
,

652 .
	gv›_óch›í
 = 
£mfs_óch›í
,

653 .
	gv›_ª˛aim
 = 
£mfs_ª˛aim
,

655 .
	gv›_ªad
 = 
v›Áû_uio_isdú
,

656 .
	gv›_ªadlök
 = 
v›Áû_uio_isdú
,

657 .
	gv›_gëdúíåy
 = 
£mfs_gëdúíåy
,

658 .
	gv›_wrôe
 = 
v›Áû_uio_isdú
,

659 .
	gv›_io˘l
 = 
£mfs_io˘l
,

660 .
	gv›_°©
 = 
£mfs_dú°©
,

661 .
	gv›_gëty≥
 = 
£mfs_gëty≥
,

662 .
	gv›_is£ekabÀ
 = 
£mfs_is£ekabÀ
,

663 .
	gv›_fsync
 = 
£mfs_fsync
,

664 .
	gv›_mm≠
 = 
v›Áû_mm≠_isdú
,

665 .
	gv›_åunˇã
 = 
v›Áû_åunˇã_isdú
,

666 .
	gv›_«mefûe
 = 
£mfs_«mefûe
,

668 .
	gv›_¸ót
 = 
£mfs_¸ót
,

669 .
	gv›_symlök
 = 
v›Áû_symlök_nosys
,

670 .
	gv›_mkdú
 = 
v›Áû_mkdú_nosys
,

671 .
	gv›_lök
 = 
v›Áû_lök_nosys
,

672 .
	gv›_ªmove
 = 
£mfs_ªmove
,

673 .
	gv›_rmdú
 = 
v›Áû_°rög_nosys
,

674 .
	gv›_ª«me
 = 
v›Áû_ª«me_nosys
,

675 .
	gv›_lookup
 = 
£mfs_lookup
,

676 .
	gv›_look∑ª¡
 = 
£mfs_look∑ª¡
,

682 c⁄° 
vnode_›s
 
	g£mfs_£m›s
 = {

683 .
v›_magic
 = 
VOP_MAGIC
,

685 .
	gv›_óch›í
 = 
£mfs_óch›í
,

686 .
	gv›_ª˛aim
 = 
£mfs_ª˛aim
,

688 .
	gv›_ªad
 = 
£mfs_ªad
,

689 .
	gv›_ªadlök
 = 
v›Áû_uio_övÆ
,

690 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nŸdú
,

691 .
	gv›_wrôe
 = 
£mfs_wrôe
,

692 .
	gv›_io˘l
 = 
£mfs_io˘l
,

693 .
	gv›_°©
 = 
£mfs_£m°©
,

694 .
	gv›_gëty≥
 = 
£mfs_gëty≥
,

695 .
	gv›_is£ekabÀ
 = 
£mfs_is£ekabÀ
,

696 .
	gv›_fsync
 = 
£mfs_fsync
,

697 .
	gv›_mm≠
 = 
v›Áû_mm≠_≥rm
,

698 .
	gv›_åunˇã
 = 
£mfs_åunˇã
,

699 .
	gv›_«mefûe
 = 
v›Áû_uio_nŸdú
,

701 .
	gv›_¸ót
 = 
v›Áû_¸ót_nŸdú
,

702 .
	gv›_symlök
 = 
v›Áû_symlök_nŸdú
,

703 .
	gv›_mkdú
 = 
v›Áû_mkdú_nŸdú
,

704 .
	gv›_lök
 = 
v›Áû_lök_nŸdú
,

705 .
	gv›_ªmove
 = 
v›Áû_°rög_nŸdú
,

706 .
	gv›_rmdú
 = 
v›Áû_°rög_nŸdú
,

707 .
	gv›_ª«me
 = 
v›Áû_ª«me_nŸdú
,

708 .
	gv›_lookup
 = 
v›Áû_lookup_nŸdú
,

709 .
	gv›_look∑ª¡
 = 
v›Áû_look∑ª¡_nŸdú
,

716 
£mfs_vnode
 *

717 
	$£mfs_vnode_¸óã
(
£mfs
 *£mfs, 
£mnum
)

719 c⁄° 
vnode_›s
 *
›èbÀ
;

720 
£mfs_vnode
 *
£mv
;

721 
ªsu…
;

723 i‡(
£mnum
 =
SEMFS_ROOTDIR
) {

724 
›èbÀ
 = &
£mfs_dú›s
;

727 
›èbÀ
 = &
£mfs_£m›s
;

730 
£mv
 = 
	`kmÆloc
((*semv));

731 i‡(
£mv
 =
NULL
) {

732  
NULL
;

735 
£mv
->
£mv_£mfs
 = 
£mfs
;

736 
£mv
->
£mv_£mnum
 = 
£mnum
;

738 
ªsu…
 = 
	`vnode_öô
(&
£mv
->
£mv_absvn
, 
›èbÀ
,

739 &
£mfs
->
£mfs_absfs
, 
£mv
);

741 
	`KASSERT
(
ªsu…
 == 0);

743  
£mv
;

744 
	}
}

751 
	$£mfs_gëvnode
(
£mfs
 *£mfs, 
£mnum
, 
vnode
 **
ªt
)

753 
vnode
 *
vn
;

754 
£mfs_vnode
 *
£mv
;

755 
£mfs_£m
 *
£m
;

756 
i
, 
num
;

757 
ªsu…
;

760 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

763 
num
 = 
	`vnodóºay_num
(
£mfs
->
£mfs_vnodes
);

764 
i
=0; i<
num
; i++) {

765 
vn
 = 
	`vnodóºay_gë
(
£mfs
->
£mfs_vnodes
, 
i
);

766 
£mv
 = 
vn
->
vn_d©a
;

767 i‡(
£mv
->
£mv_£mnum
 =
£mnum
) {

768 
	`VOP_INCREF
(
vn
);

769 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

770 *
ªt
 = 
vn
;

776 
£mv
 = 
	`£mfs_vnode_¸óã
(
£mfs
, 
£mnum
);

777 i‡(
£mv
 =
NULL
) {

778 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

779  
ENOMEM
;

781 
ªsu…
 = 
	`vnodóºay_add
(
£mfs
->
£mfs_vnodes
, &
£mv
->
£mv_absvn
, 
NULL
);

782 i‡(
ªsu…
) {

783 
	`£mfs_vnode_de°roy
(
£mv
);

784 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

785  
ENOMEM
;

787 i‡(
£mnum
 !
SEMFS_ROOTDIR
) {

788 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
£mnum
);

789 
	`KASSERT
(
£m
 !
NULL
);

790 
	`KASSERT
(
£m
->
£ms_hasvnode
 =
Ál£
);

791 
£m
->
£ms_hasvnode
 = 
åue
;

793 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

795 *
ªt
 = &
£mv
->
£mv_absvn
;

797 
	}
}

	@kern/fs/sfs/sfs_balloc.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

38 
	~<sfs.h
>

39 
	~"sf•riv©e.h
"

46 
	$sfs_˛órblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
)

49 
zîos
[
SFS_BLOCKSIZE
];

51  
	`sfs_wrôeblock
(
sfs
, 
block
, 
zîos
, 
SFS_BLOCKSIZE
);

52 
	}
}

58 
	$sfs_bÆloc
(
sfs_fs
 *
sfs
, 
daddr_t
 *
diskblock
)

60 
ªsu…
;

62 
ªsu…
 = 
	`bôm≠_Æloc
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

63 i‡(
ªsu…
) {

64  
ªsu…
;

66 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

68 i‡(*
diskblock
 >
sfs
->
sfs_sb
.
sb_nblocks
) {

69 
	`∑nic
("sfs: bÆloc: invÆid block %u\n", *
diskblock
);

73 
ªsu…
 = 
	`sfs_˛órblock
(
sfs
, *
diskblock
);

74 i‡(
ªsu…
) {

75 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, *
diskblock
);

77  
ªsu…
;

78 
	}
}

84 
	$sfs_b‰ì
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
)

86 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

87 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

88 
	}
}

94 
	$sfs_bu£d
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
)

96 i‡(
diskblock
 >
sfs
->
sfs_sb
.
sb_nblocks
) {

97 
	`∑nic
("sfs: sfs_bused called on out ofÑange block %u\n",

98 
diskblock
);

100  
	`bôm≠_is£t
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

101 
	}
}

	@kern/fs/sfs/sfs_bmap.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<vfs.h
>

39 
	~<sfs.h
>

40 
	~"sf•riv©e.h
"

49 
	$sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
, 
boﬁ
 
dﬂŒoc
,

50 
daddr_t
 *
diskblock
)

59 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

61 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

62 
daddr_t
 
block
;

63 
daddr_t
 
idblock
;

64 
uöt32_t
 
idnum
, 
idoff
;

65 
ªsu…
;

67 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

70 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

75 i‡(
fûeblock
 < 
SFS_NDIRECT
) {

79 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
];

84 i‡(
block
==0 && 
dﬂŒoc
) {

85 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

86 i‡(
ªsu…
) {

87  
ªsu…
;

91 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
] = 
block
;

92 
sv
->
sv_dúty
 = 
åue
;

98 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

99 
	`∑nic
("sfs: Data block %u (block %u of file %u) "

100 "m¨ked fªe\n", 
block
, 
fûeblock
, 
sv
->
sv_öo
);

102 *
diskblock
 = 
block
;

112 
fûeblock
 -
SFS_NDIRECT
;

115 
idnum
 = 
fûeblock
 / 
SFS_DBPERIDB
;

116 
idoff
 = 
fûeblock
 % 
SFS_DBPERIDB
;

122 i‡(
idnum
 >
SFS_NINDIRECT
) {

123  
EFBIG
;

127 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

129 i‡(
idblock
==0 && !
dﬂŒoc
) {

135 *
diskblock
 = 0;

138 i‡(
idblock
==0) {

145 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
idblock
);

146 i‡(
ªsu…
) {

147  
ªsu…
;

151 
sv
->
sv_i
.
sfi_ödúe˘
 = 
idblock
;

154 
sv
->
sv_dúty
 = 
åue
;

157 
	`bzîo
(
idbuf
, (idbuf));

163 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
idblock
, 
idbuf
, (idbuf));

164 i‡(
ªsu…
) {

165  
ªsu…
;

170 
block
 = 
idbuf
[
idoff
];

173 i‡(
block
==0 && 
dﬂŒoc
) {

174 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

175 i‡(
ªsu…
) {

176  
ªsu…
;

180 
idbuf
[
idoff
] = 
block
;

183 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
idblock
, 
idbuf
, (idbuf));

184 i‡(
ªsu…
) {

185  
ªsu…
;

190 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

191 
	`∑nic
("sfs: Data block %u (block %u of file %u) marked free\n",

192 
block
, 
fûeblock
, 
sv
->
sv_öo
);

194 *
diskblock
 = 
block
;

196 
	}
}

202 
	$sfs_ôrunc
(
sfs_vnode
 *
sv
, 
off_t
 
Àn
)

211 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

213 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

216 
uöt32_t
 
blockÀn
 = 
	`DIVROUNDUP
(
Àn
, 
SFS_BLOCKSIZE
);

218 
uöt32_t
 
i
, 
j
;

219 
daddr_t
 
block
, 
idblock
;

220 
uöt32_t
 
ba£block
, 
highblock
;

221 
ªsu…
;

222 
ha¢⁄zîo
, 
iddúty
;

224 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

226 
	`vfs_biglock_acquúe
();

232 
i
=0; i<
SFS_NDIRECT
; i++) {

233 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
i
];

234 i‡(
i
 >
blockÀn
 && 
block
 != 0) {

235 
	`sfs_b‰ì
(
sfs
, 
block
);

236 
sv
->
sv_i
.
sfi_dúe˘
[
i
] = 0;

237 
sv
->
sv_dúty
 = 
åue
;

242 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

245 
ba£block
 = 
SFS_NDIRECT
;

248 
highblock
 = 
ba£block
 + 
SFS_DBPERIDB
 - 1;

250 i‡(
blockÀn
 < 
highblock
 && 
idblock
 != 0) {

254 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
idblock
, 
idbuf
, (idbuf));

255 i‡(
ªsu…
) {

256 
	`vfs_biglock_ªÀa£
();

257  
ªsu…
;

260 
ha¢⁄zîo
 = 0;

261 
iddúty
 = 0;

262 
j
=0; j<
SFS_DBPERIDB
; j++) {

264 i‡(
blockÀn
 < 
ba£block
+
j
 && 
idbuf
[j] != 0) {

265 
	`sfs_b‰ì
(
sfs
, 
idbuf
[
j
]);

266 
idbuf
[
j
] = 0;

267 
iddúty
 = 1;

270 i‡(
idbuf
[
j
]!=0) {

271 
ha¢⁄zîo
=1;

275 i‡(!
ha¢⁄zîo
) {

277 
	`sfs_b‰ì
(
sfs
, 
idblock
);

278 
sv
->
sv_i
.
sfi_ödúe˘
 = 0;

279 
sv
->
sv_dúty
 = 
åue
;

281 i‡(
iddúty
) {

283 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
idblock
, 
idbuf
,

284 (
idbuf
));

285 i‡(
ªsu…
) {

286 
	`vfs_biglock_ªÀa£
();

287  
ªsu…
;

293 
sv
->
sv_i
.
sfi_size
 = 
Àn
;

296 
sv
->
sv_dúty
 = 
åue
;

298 
	`vfs_biglock_ªÀa£
();

300 
	}
}

	@kern/fs/sfs/sfs_dir.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<vfs.h
>

39 
	~<sfs.h
>

40 
	~"sf•riv©e.h
"

48 
	$sfs_ªaddú
(
sfs_vnode
 *
sv
, 
¶Ÿ
, 
sfs_dúíåy
 *
sd
)

50 
off_t
 
a˘uÆpos
;

53 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dúíåy
);

55  
	`sfs_mëaio
(
sv
, 
a˘uÆpos
, 
sd
, (*sd), 
UIO_READ
);

56 
	}
}

64 
	$sfs_wrôedú
(
sfs_vnode
 *
sv
, 
¶Ÿ
, 
sfs_dúíåy
 *
sd
)

66 
off_t
 
a˘uÆpos
;

69 
	`KASSERT
(
¶Ÿ
>=0);

70 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dúíåy
);

72  
	`sfs_mëaio
(
sv
, 
a˘uÆpos
, 
sd
, (*sd), 
UIO_WRITE
);

73 
	}
}

82 
	$sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
)

84 
off_t
 
size
;

86 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
);

88 
size
 = 
sv
->
sv_i
.
sfi_size
;

89 i‡(
size
 % (
sfs_dúíåy
) != 0) {

90 
	`∑nic
("sfs: directory %u: Invalid size %llu\n",

91 
sv
->
sv_öo
, 
size
);

94  
size
 / (
sfs_dúíåy
);

95 
	}
}

103 
	$sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

104 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
)

106 
sfs_dúíåy
 
tsd
;

107 
found
, 
√¡rõs
, 
i
, 
ªsu…
;

109 
√¡rõs
 = 
	`sfs_dú_√¡rõs
(
sv
);

112 
found
 = 0;

113 
i
=0; i<
√¡rõs
; i++) {

116 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, 
i
, &
tsd
);

117 i‡(
ªsu…
) {

118  
ªsu…
;

120 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

122 i‡(
em±y¶Ÿ
 !
NULL
) {

123 *
em±y¶Ÿ
 = 
i
;

128 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

129 i‡(!
	`°rcmp
(
tsd
.
sfd_«me
, 
«me
)) {

132 
	`KASSERT
(
found
==0);

134 
found
 = 1;

135 i‡(
¶Ÿ
 !
NULL
) {

136 *
¶Ÿ
 = 
i
;

138 i‡(
öo
 !
NULL
) {

139 *
öo
 = 
tsd
.
sfd_öo
;

145  
found
 ? 0 : 
ENOENT
;

146 
	}
}

153 
	$sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
, *
¶Ÿ
)

155 
em±y¶Ÿ
 = -1;

156 
ªsu…
;

157 
sfs_dúíåy
 
sd
;

160 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, 
NULL
, NULL, &
em±y¶Ÿ
);

161 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

162  
ªsu…
;

164 i‡(
ªsu…
==0) {

165  
EEXIST
;

168 i‡(
	`°æí
(
«me
)+1 > (
sd
.
sfd_«me
)) {

169  
ENAMETOOLONG
;

173 i‡(
em±y¶Ÿ
 < 0) {

174 
em±y¶Ÿ
 = 
	`sfs_dú_√¡rõs
(
sv
);

178 
	`bzîo
(&
sd
, (sd));

179 
sd
.
sfd_öo
 = 
öo
;

180 
	`°r˝y
(
sd
.
sfd_«me
, 
«me
);

183 i‡(
¶Ÿ
) {

184 *
¶Ÿ
 = 
em±y¶Ÿ
;

188  
	`sfs_wrôedú
(
sv
, 
em±y¶Ÿ
, &
sd
);

189 
	}
}

195 
	$sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
)

197 
sfs_dúíåy
 
sd
;

200 
	`bzîo
(&
sd
, (sd));

201 
sd
.
sfd_öo
 = 
SFS_NOINO
;

204  
	`sfs_wrôedú
(
sv
, 
¶Ÿ
, &
sd
);

205 
	}
}

212 
	$sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

213 
sfs_vnode
 **
ªt
,

214 *
¶Ÿ
)

216 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

217 
uöt32_t
 
öo
;

218 
ªsu…
;

220 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
¶Ÿ
, 
NULL
);

221 i‡(
ªsu…
) {

222  
ªsu…
;

225 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, 
ªt
);

226 i‡(
ªsu…
) {

227  
ªsu…
;

230 i‡((*
ªt
)->
sv_i
.
sfi_lökcou¡
 == 0) {

231 
	`∑nic
("sfs:Çame %s (inode %u) in dir %u hasÜinkcount 0\n",

232 
«me
, (*
ªt
)->
sv_öo
, 
sv
->sv_ino);

236 
	}
}

	@kern/fs/sfs/sfs_fsops.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<bôm≠.h
>

41 
	~<uio.h
>

42 
	~<vfs.h
>

43 
	~<devi˚.h
>

44 
	~<sfs.h
>

45 
	~"sf•riv©e.h
"

49 
	#SFS_FS_NBLOCKS
(
sfs
Ë((sfs)->
sfs_sb
.
sb_nblocks
)

	)

50 
	#SFS_FS_FREEMAPBITS
(
sfs
Ë
	`SFS_FREEMAPBITS
(
	`SFS_FS_NBLOCKS
(sfs))

	)

51 
	#SFS_FS_FREEMAPBLOCKS
(
sfs
Ë
	`SFS_FREEMAPBLOCKS
(
	`SFS_FS_NBLOCKS
(sfs))

	)

72 
	$sfs_‰ìm≠io
(
sfs_fs
 *
sfs
, 
uio_rw
 
rw
)

74 
uöt32_t
 
j
, 
‰ìm≠blocks
;

75 *
‰ìm≠d©a
;

76 
ªsu…
;

79 
‰ìm≠blocks
 = 
	`SFS_FS_FREEMAPBLOCKS
(
sfs
);

82 
‰ìm≠d©a
 = 
	`bôm≠_gëd©a
(
sfs
->
sfs_‰ìm≠
);

85 
j
=0; j<
‰ìm≠blocks
; j++) {

88 *
±r
 = 
‰ìm≠d©a
 + 
j
*
SFS_BLOCKSIZE
;

91 i‡(
rw
 =
UIO_READ
) {

92 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
SFS_FREEMAP_START
+
j
, 
±r
,

93 
SFS_BLOCKSIZE
);

96 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
SFS_FREEMAP_START
+
j
, 
±r
,

97 
SFS_BLOCKSIZE
);

101 i‡(
ªsu…
) {

102  
ªsu…
;

106 
	}
}

114 
	$sfs_sync
(
fs
 *fs)

116 
sfs_fs
 *
sfs
;

117 
i
, 
num
;

118 
ªsu…
;

120 
	`vfs_biglock_acquúe
();

152 
sfs
 = 
fs
->
fs_d©a
;

155 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

156 
i
=0; i<
num
; i++) {

157 
vnode
 *
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

158 
	`VOP_FSYNC
(
v
);

162 i‡(
sfs
->
sfs_‰ìm≠dúty
) {

163 
ªsu…
 = 
	`sfs_‰ìm≠io
(
sfs
, 
UIO_WRITE
);

164 i‡(
ªsu…
) {

165 
	`vfs_biglock_ªÀa£
();

166  
ªsu…
;

168 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

172 i‡(
sfs
->
sfs_su≥rdúty
) {

173 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
SFS_SUPER_BLOCK
, &sfs->
sfs_sb
,

174 (
sfs
->
sfs_sb
));

175 i‡(
ªsu…
) {

176 
	`vfs_biglock_ªÀa£
();

177  
ªsu…
;

179 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

182 
	`vfs_biglock_ªÀa£
();

184 
	}
}

193 
	$sfs_gëvﬁ«me
(
fs
 *fs)

195 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

196 c⁄° *
ªt
;

198 
	`vfs_biglock_acquúe
();

199 
ªt
 = 
sfs
->
sfs_sb
.
sb_vﬁ«me
;

200 
	`vfs_biglock_ªÀa£
();

202  
ªt
;

203 
	}
}

210 
	$sfs_fs_de°roy
(
sfs_fs
 *
sfs
)

212 i‡(
sfs
->
sfs_‰ìm≠
 !
NULL
) {

213 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

215 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

216 
	`KASSERT
(
sfs
->
sfs_devi˚
 =
NULL
);

217 
	`k‰ì
(
sfs
);

218 
	}
}

227 
	$sfs_unmou¡
(
fs
 *fs)

229 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

231 
	`vfs_biglock_acquúe
();

234 i‡(
	`vnodóºay_num
(
sfs
->
sfs_vnodes
) > 0) {

235 
	`vfs_biglock_ªÀa£
();

236  
EBUSY
;

240 
	`KASSERT
(
sfs
->
sfs_su≥rdúty
 =
Ál£
);

241 
	`KASSERT
(
sfs
->
sfs_‰ìm≠dúty
 =
Ál£
);

244 
sfs
->
sfs_devi˚
 = 
NULL
;

247 
	`sfs_fs_de°roy
(
sfs
);

250 
	`vfs_biglock_ªÀa£
();

252 
	}
}

257 c⁄° 
fs_›s
 
	gsfs_fs›s
 = {

258 .
fs›_sync
 = 
sfs_sync
,

259 .
	gfs›_gëvﬁ«me
 = 
sfs_gëvﬁ«me
,

260 .
	gfs›_gëroŸ
 = 
sfs_gëroŸ
,

261 .
	gfs›_unmou¡
 = 
sfs_unmou¡
,

270 
sfs_fs
 *

271 
	$sfs_fs_¸óã
()

273 
sfs_fs
 *
sfs
;

278 
	`COMPILE_ASSERT
((
sfs_su≥rblock
)==
SFS_BLOCKSIZE
);

279 
	`COMPILE_ASSERT
((
sfs_döode
)==
SFS_BLOCKSIZE
);

280 
	`COMPILE_ASSERT
(
SFS_BLOCKSIZE
 % (
sfs_dúíåy
) == 0);

283 
sfs
 = 
	`kmÆloc
((
sfs_fs
));

284 i‡(
sfs
==
NULL
) {

285 
Áû
;

293 
sfs
->
sfs_absfs
.
fs_d©a
 = sfs;

294 
sfs
->
sfs_absfs
.
fs_›s
 = &
sfs_fs›s
;

298 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

301 
sfs
->
sfs_devi˚
 = 
NULL
;

304 
sfs
->
sfs_vnodes
 = 
	`vnodóºay_¸óã
();

305 i‡(
sfs
->
sfs_vnodes
 =
NULL
) {

306 
˛ónup_obje˘
;

310 
sfs
->
sfs_‰ìm≠
 = 
NULL
;

311 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

313  
sfs
;

315 
˛ónup_obje˘
:

316 
	`k‰ì
(
sfs
);

317 
Áû
:

318  
NULL
;

319 
	}
}

336 
	$sfs_domou¡
(*
›ti⁄s
, 
devi˚
 *
dev
, 
fs
 **
ªt
)

338 
ªsu…
;

339 
sfs_fs
 *
sfs
;

341 
	`vfs_biglock_acquúe
();

344 ()
›ti⁄s
;

354 i‡(
dev
->
d_blocksize
 !
SFS_BLOCKSIZE
) {

355 
	`vfs_biglock_ªÀa£
();

356 
	`k¥ötf
("sfs: Cannot mount on device with blocksize %zu\n",

357 
dev
->
d_blocksize
);

358  
ENXIO
;

361 
sfs
 = 
	`sfs_fs_¸óã
();

362 i‡(
sfs
 =
NULL
) {

363 
	`vfs_biglock_ªÀa£
();

364  
ENOMEM
;

368 
sfs
->
sfs_devi˚
 = 
dev
;

371 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
SFS_SUPER_BLOCK
, &sfs->
sfs_sb
,

372 (
sfs
->
sfs_sb
));

373 i‡(
ªsu…
) {

374 
	`sfs_fs_de°roy
(
sfs
);

375 
	`vfs_biglock_ªÀa£
();

376  
ªsu…
;

381 i‡(
sfs
->
sfs_sb
.
sb_magic
 !
SFS_MAGIC
) {

382 
	`k¥ötf
("sfs: Wrong magicÇumber in superblock "

384 
sfs
->
sfs_sb
.
sb_magic
,

385 
SFS_MAGIC
);

386 
	`sfs_fs_de°roy
(
sfs
);

387 
	`vfs_biglock_ªÀa£
();

388  
EINVAL
;

391 i‡(
sfs
->
sfs_sb
.
sb_nblocks
 > 
dev
->
d_blocks
) {

392 
	`k¥ötf
("sfs: warning - fs has %u blocks, device has %u\n",

393 
sfs
->
sfs_sb
.
sb_nblocks
, 
dev
->
d_blocks
);

397 
sfs
->
sfs_sb
.
sb_vﬁ«me
[(sfs->sfs_sb.sb_volname)-1] = 0;

400 
sfs
->
sfs_‰ìm≠
 = 
	`bôm≠_¸óã
(
	`SFS_FS_FREEMAPBITS
(sfs));

401 i‡(
sfs
->
sfs_‰ìm≠
 =
NULL
) {

402 
	`sfs_fs_de°roy
(
sfs
);

403 
	`vfs_biglock_ªÀa£
();

404  
ENOMEM
;

406 
ªsu…
 = 
	`sfs_‰ìm≠io
(
sfs
, 
UIO_READ
);

407 i‡(
ªsu…
) {

408 
	`sfs_fs_de°roy
(
sfs
);

409 
	`vfs_biglock_ªÀa£
();

410  
ªsu…
;

414 *
ªt
 = &
sfs
->
sfs_absfs
;

416 
	`vfs_biglock_ªÀa£
();

418 
	}
}

424 
	$sfs_mou¡
(c⁄° *
devi˚
)

426  
	`vfs_mou¡
(
devi˚
, 
NULL
, 
sfs_domou¡
);

427 
	}
}

	@kern/fs/sfs/sfs_inode.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<vfs.h
>

39 
	~<sfs.h
>

40 
	~"sf•riv©e.h
"

47 
	$sfs_sync_öode
(
sfs_vnode
 *
sv
)

49 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

50 
ªsu…
;

52 i‡(
sv
->
sv_dúty
) {

53 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
sv
->
sv_öo
, &sv->
sv_i
,

54 (
sv
->
sv_i
));

55 i‡(
ªsu…
) {

56  
ªsu…
;

58 
sv
->
sv_dúty
 = 
Ál£
;

61 
	}
}

69 
	$sfs_ª˛aim
(
vnode
 *
v
)

71 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

72 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

73 
ix
, 
i
, 
num
;

74 
ªsu…
;

76 
	`vfs_biglock_acquúe
();

83 
	`•ölock_acquúe
(&
v
->
vn_cou¡lock
);

84 i‡(
v
->
vn_ªfcou¡
 != 1) {

87 
	`KASSERT
(
v
->
vn_ªfcou¡
>1);

88 
v
->
vn_ªfcou¡
--;

90 
	`•ölock_ªÀa£
(&
v
->
vn_cou¡lock
);

91 
	`vfs_biglock_ªÀa£
();

92  
EBUSY
;

94 
	`•ölock_ªÀa£
(&
v
->
vn_cou¡lock
);

97 i‡(
sv
->
sv_i
.
sfi_lökcou¡
 == 0) {

98 
ªsu…
 = 
	`sfs_ôrunc
(
sv
, 0);

99 i‡(
ªsu…
) {

100 
	`vfs_biglock_ªÀa£
();

101  
ªsu…
;

106 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

107 i‡(
ªsu…
) {

108 
	`vfs_biglock_ªÀa£
();

109  
ªsu…
;

113 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

114 
	`sfs_b‰ì
(
sfs
, 
sv
->
sv_öo
);

118 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

119 
ix
 = 
num
;

120 
i
=0; i<
num
; i++) {

121 
vnode
 *
v2
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

122 
sfs_vnode
 *
sv2
 = 
v2
->
vn_d©a
;

123 i‡(
sv2
 =
sv
) {

124 
ix
 = 
i
;

128 i‡(
ix
 =
num
) {

129 
	`∑nic
("sfs:Ñeclaim vnode %uÇot in vnodeÖool\n",

130 
sv
->
sv_öo
);

132 
	`vnodóºay_ªmove
(
sfs
->
sfs_vnodes
, 
ix
);

134 
	`vnode_˛ónup
(&
sv
->
sv_absvn
);

136 
	`vfs_biglock_ªÀa£
();

139 
	`k‰ì
(
sv
);

143 
	}
}

150 
	$sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

151 
sfs_vnode
 **
ªt
)

153 
vnode
 *
v
;

154 
sfs_vnode
 *
sv
;

155 c⁄° 
vnode_›s
 *
›s
;

156 
i
, 
num
;

157 
ªsu…
;

160 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

163 
i
=0; i<
num
; i++) {

164 
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

165 
sv
 = 
v
->
vn_d©a
;

168 i‡(!
	`sfs_bu£d
(
sfs
, 
sv
->
sv_öo
)) {

169 
	`∑nic
("sfs: Found inode %u in unallocated block\n",

170 
sv
->
sv_öo
);

173 i‡(
sv
->
sv_öo
==
öo
) {

177 
	`KASSERT
(
f‹˚ty≥
==
SFS_TYPE_INVAL
);

179 
	`VOP_INCREF
(&
sv
->
sv_absvn
);

180 *
ªt
 = 
sv
;

187 
sv
 = 
	`kmÆloc
((
sfs_vnode
));

188 i‡(
sv
==
NULL
) {

189  
ENOMEM
;

193 i‡(!
	`sfs_bu£d
(
sfs
, 
öo
)) {

194 
	`∑nic
("sfs: TriedÅoÜoad inode %u from unallocated block\n",

195 
öo
);

199 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
öo
, &
sv
->
sv_i
, (sv->sv_i));

200 i‡(
ªsu…
) {

201 
	`k‰ì
(
sv
);

202  
ªsu…
;

206 
sv
->
sv_dúty
 = 
Ál£
;

213 i‡(
f‹˚ty≥
 !
SFS_TYPE_INVAL
) {

214 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_INVAL
);

215 
sv
->
sv_i
.
sfi_ty≥
 = 
f‹˚ty≥
;

216 
sv
->
sv_dúty
 = 
åue
;

222 
sv
->
sv_i
.
sfi_ty≥
) {

223 
SFS_TYPE_FILE
:

224 
›s
 = &
sfs_fûe›s
;

226 
SFS_TYPE_DIR
:

227 
›s
 = &
sfs_dú›s
;

230 
	`∑nic
("sfs:Üoadvnode: Invalid inodeÅype "

232 
öo
, 
sv
->
sv_i
.
sfi_ty≥
);

236 
ªsu…
 = 
	`vnode_öô
(&
sv
->
sv_absvn
, 
›s
, &
sfs
->
sfs_absfs
, sv);

237 i‡(
ªsu…
) {

238 
	`k‰ì
(
sv
);

239  
ªsu…
;

243 
sv
->
sv_öo
 = 
öo
;

246 
ªsu…
 = 
	`vnodóºay_add
(
sfs
->
sfs_vnodes
, &
sv
->
sv_absvn
, 
NULL
);

247 i‡(
ªsu…
) {

248 
	`vnode_˛ónup
(&
sv
->
sv_absvn
);

249 
	`k‰ì
(
sv
);

250  
ªsu…
;

254 *
ªt
 = 
sv
;

256 
	}
}

262 
	$sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
)

264 
uöt32_t
 
öo
;

265 
ªsu…
;

272 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
öo
);

273 i‡(
ªsu…
) {

274  
ªsu…
;

281 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
ty≥
, 
ªt
);

282 i‡(
ªsu…
) {

283 
	`sfs_b‰ì
(
sfs
, 
öo
);

285  
ªsu…
;

286 
	}
}

292 
vnode
 *

293 
	$sfs_gëroŸ
(
fs
 *fs)

295 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

296 
sfs_vnode
 *
sv
;

297 
ªsu…
;

299 
	`vfs_biglock_acquúe
();

301 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
SFS_ROOTDIR_INO
, 
SFS_TYPE_INVAL
, &
sv
);

302 i‡(
ªsu…
) {

303 
	`∑nic
("sfs: getroot: CannotÜoadÑoot vnode\n");

306 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

307 
	`∑nic
("sfs: getroot:Çot directory (type %u)\n",

308 
sv
->
sv_i
.
sfi_ty≥
);

311 
	`vfs_biglock_ªÀa£
();

313  &
sv
->
sv_absvn
;

314 
	}
}

	@kern/fs/sfs/sfs_io.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<vfs.h
>

40 
	~<devi˚.h
>

41 
	~<sfs.h
>

42 
	~"sf•riv©e.h
"

60 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio)

62 
ªsu…
;

63 
åõs
=0;

65 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

67 
	`DEBUG
(
DB_SFS
, "sfs: %s %llu\n",

68 
uio
->
uio_rw
 =
UIO_READ
 ? "read" : "write",

69 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

71 
ªåy
:

72 
ªsu…
 = 
	`DEVOP_IO
(
sfs
->
sfs_devi˚
, 
uio
);

73 i‡(
ªsu…
 =
EINVAL
) {

79 
	`∑nic
("sfs: DEVOP_IOÑeturned EINVAL\n");

81 i‡(
ªsu…
 =
EIO
) {

82 i‡(
åõs
 == 0) {

83 
åõs
++;

84 
	`k¥ötf
("sfs: block %llu I/OÉrror,Ñetrying\n",

85 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

86 
ªåy
;

88 i‡(
åõs
 < 10) {

89 
åõs
++;

90 
ªåy
;

93 
	`k¥ötf
("sfs: block %llu I/OÉrror, giving upáfter "

95 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
, 
åõs
);

98  
ªsu…
;

99 
	}
}

105 
	$sfs_ªadblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
)

107 
iovec
 
iov
;

108 
uio
 
ku
;

110 
	`KASSERT
(
Àn
 =
SFS_BLOCKSIZE
);

112 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_READ
);

113  
	`sfs_rwblock
(
sfs
, &
ku
);

114 
	}
}

120 
	$sfs_wrôeblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
)

122 
iovec
 
iov
;

123 
uio
 
ku
;

125 
	`KASSERT
(
Àn
 =
SFS_BLOCKSIZE
);

127 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_WRITE
);

128  
	`sfs_rwblock
(
sfs
, &
ku
);

129 
	}
}

147 
	$sfs_∑πülio
(
sfs_vnode
 *
sv
, 
uio
 *uio,

148 
uöt32_t
 
skù°¨t
, uöt32_à
Àn
)

157 
iobuf
[
SFS_BLOCKSIZE
];

159 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

160 
daddr_t
 
diskblock
;

161 
uöt32_t
 
fûeblock
;

162 
ªsu…
;

165 
boﬁ
 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

167 
	`KASSERT
(
skù°¨t
 + 
Àn
 <
SFS_BLOCKSIZE
);

170 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

173 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

176 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

177 i‡(
ªsu…
) {

178  
ªsu…
;

181 i‡(
diskblock
 == 0) {

186 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

187 
	`bzîo
(
iobuf
, (iobuf));

193 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
diskblock
, 
iobuf
, (iobuf));

194 i‡(
ªsu…
) {

195  
ªsu…
;

202 
ªsu…
 = 
	`uiomove
(
iobuf
+
skù°¨t
, 
Àn
, 
uio
);

203 i‡(
ªsu…
) {

204  
ªsu…
;

210 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

211 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
diskblock
, 
iobuf
, (iobuf));

212 i‡(
ªsu…
) {

213  
ªsu…
;

218 
	}
}

225 
	$sfs_blockio
(
sfs_vnode
 *
sv
, 
uio
 *uio)

227 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

228 
daddr_t
 
diskblock
;

229 
uöt32_t
 
fûeblock
;

230 
ªsu…
;

231 
boﬁ
 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

232 
off_t
 
ßveoff
;

233 
off_t
 
diskoff
;

234 
off_t
 
ßvîes
;

235 
off_t
 
diskªs
;

238 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

241 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

242 i‡(
ªsu…
) {

243  
ªsu…
;

246 i‡(
diskblock
 == 0) {

253 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

254  
	`uiomovezîos
(
SFS_BLOCKSIZE
, 
uio
);

261 
ßveoff
 = 
uio
->
uio_off£t
;

262 
diskoff
 = 
diskblock
 * 
SFS_BLOCKSIZE
;

263 
uio
->
uio_off£t
 = 
diskoff
;

268 
	`KASSERT
(
uio
->
uio_ªsid
 >
SFS_BLOCKSIZE
);

269 
ßvîes
 = 
uio
->
uio_ªsid
;

270 
diskªs
 = 
SFS_BLOCKSIZE
;

271 
uio
->
uio_ªsid
 = 
diskªs
;

273 
ªsu…
 = 
	`sfs_rwblock
(
sfs
, 
uio
);

279 
uio
->
uio_off£t
 = (uio->uio_off£à- 
diskoff
Ë+ 
ßveoff
;

280 
uio
->
uio_ªsid
 = (uio->uio_ªsid - 
diskªs
Ë+ 
ßvîes
;

282  
ªsu…
;

283 
	}
}

289 
	$sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio)

291 
uöt32_t
 
blkoff
;

292 
uöt32_t
 
nblocks
, 
i
;

293 
ªsu…
 = 0;

294 
uöt32_t
 
‹igªsid
, 
exå¨esid
 = 0;

296 
‹igªsid
 = 
uio
->
uio_ªsid
;

303 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

304 
off_t
 
size
 = 
sv
->
sv_i
.
sfi_size
;

305 
off_t
 
ídpos
 = 
uio
->
uio_off£t
 + uio->
uio_ªsid
;

307 i‡(
uio
->
uio_off£t
 >
size
) {

312 i‡(
ídpos
 > 
size
) {

313 
exå¨esid
 = 
ídpos
 - 
size
;

314 
	`KASSERT
(
uio
->
uio_ªsid
 > 
exå¨esid
);

315 
uio
->
uio_ªsid
 -
exå¨esid
;

322 
blkoff
 = 
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
;

323 i‡(
blkoff
 != 0) {

325 
uöt32_t
 
skù
 = 
blkoff
;

328 
uöt32_t
 
Àn
 = 
SFS_BLOCKSIZE
 - 
blkoff
;

331 i‡(
Àn
 > 
uio
->
uio_ªsid
) {

332 
Àn
 = 
uio
->
uio_ªsid
;

336 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 
skù
, 
Àn
);

337 i‡(
ªsu…
) {

338 
out
;

343 i‡(
uio
->
uio_ªsid
==0) {

344 
out
;

350 
	`KASSERT
(
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
 == 0);

351 
nblocks
 = 
uio
->
uio_ªsid
 / 
SFS_BLOCKSIZE
;

352 
i
=0; i<
nblocks
; i++) {

353 
ªsu…
 = 
	`sfs_blockio
(
sv
, 
uio
);

354 i‡(
ªsu…
) {

355 
out
;

362 
	`KASSERT
(
uio
->
uio_ªsid
 < 
SFS_BLOCKSIZE
);

364 i‡(
uio
->
uio_ªsid
 > 0) {

365 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 0, uio->
uio_ªsid
);

366 i‡(
ªsu…
) {

367 
out
;

371 
out
:

374 i‡(
uio
->
uio_ªsid
 !
‹igªsid
 &&

375 
uio
->
uio_rw
 =
UIO_WRITE
 &&

376 
uio
->
uio_off£t
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

377 
sv
->
sv_i
.
sfi_size
 = 
uio
->
uio_off£t
;

378 
sv
->
sv_dúty
 = 
åue
;

382 
uio
->
uio_ªsid
 +
exå¨esid
;

385  
ªsu…
;

386 
	}
}

403 
	$sfs_mëaio
(
sfs_vnode
 *
sv
, 
off_t
 
a˘uÆpos
, *
d©a
, 
size_t
 
Àn
,

404 
uio_rw
 
rw
)

406 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

407 
off_t
 
ídpos
;

408 
uöt32_t
 
vnblock
;

409 
uöt32_t
 
blockoff£t
;

410 
daddr_t
 
diskblock
;

411 
boﬁ
 
dﬂŒoc
;

412 
ªsu…
;

421 
mëaiobuf
[
SFS_BLOCKSIZE
];

424 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

427 
vnblock
 = 
a˘uÆpos
 / 
SFS_BLOCKSIZE
;

428 
blockoff£t
 = 
a˘uÆpos
 % 
SFS_BLOCKSIZE
;

431 
dﬂŒoc
 = (
rw
 =
UIO_WRITE
);

432 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
vnblock
, 
dﬂŒoc
, &
diskblock
);

433 i‡(
ªsu…
) {

434  
ªsu…
;

437 i‡(
diskblock
 == 0) {

439 
	`KASSERT
(
rw
 =
UIO_READ
);

442 
	`bzîo
(
d©a
, 
Àn
);

447 
ªsu…
 = 
	`sfs_ªadblock
(
sfs
, 
diskblock
, 
mëaiobuf
, (metaiobuf));

448 i‡(
ªsu…
) {

449  
ªsu…
;

452 i‡(
rw
 =
UIO_READ
) {

454 
	`mem˝y
(
d©a
, 
mëaiobuf
 + 
blockoff£t
, 
Àn
);

458 
	`mem˝y
(
mëaiobuf
 + 
blockoff£t
, 
d©a
, 
Àn
);

461 
ªsu…
 = 
	`sfs_wrôeblock
(
sfs
, 
diskblock
,

462 
mëaiobuf
, (metaiobuf));

463 i‡(
ªsu…
) {

464  
ªsu…
;

468 
ídpos
 = 
a˘uÆpos
 + 
Àn
;

469 i‡(
ídpos
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

470 
sv
->
sv_i
.
sfi_size
 = 
ídpos
;

471 
sv
->
sv_dúty
 = 
åue
;

477 
	}
}

	@kern/fs/sfs/sfs_vnops.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<kîn/f˙é.h
>

38 
	~<°©.h
>

39 
	~<lib.h
>

40 
	~<uio.h
>

41 
	~<vfs.h
>

42 
	~<sfs.h
>

43 
	~"sf•riv©e.h
"

53 
	$sfs_óch›í
(
vnode
 *
v
, 
›íÊags
)

63 ()
v
;

64 ()
›íÊags
;

67 
	}
}

75 
	$sfs_óch›ídú
(
vnode
 *
v
, 
›íÊags
)

77 
›íÊags
 & 
O_ACCMODE
) {

78 
O_RDONLY
:

80 
O_WRONLY
:

81 
O_RDWR
:

83  
EISDIR
;

85 i‡(
›íÊags
 & 
O_APPEND
) {

86  
EISDIR
;

89 ()
v
;

91 
	}
}

98 
	$sfs_ªad
(
vnode
 *
v
, 
uio
 *uio)

100 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

101 
ªsu…
;

103 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

105 
	`vfs_biglock_acquúe
();

106 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

107 
	`vfs_biglock_ªÀa£
();

109  
ªsu…
;

110 
	}
}

117 
	$sfs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

119 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

120 
ªsu…
;

122 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

124 
	`vfs_biglock_acquúe
();

125 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

126 
	`vfs_biglock_ªÀa£
();

128  
ªsu…
;

129 
	}
}

136 
	$sfs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

142 ()
v
;

143 ()
›
;

144 ()
d©a
;

146  
EINVAL
;

147 
	}
}

154 
	$sfs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

156 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

157 
ªsu…
;

160 
	`bzîo
(
°©buf
, (
°©
));

162 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

163 i‡(
ªsu…
) {

164  
ªsu…
;

167 
°©buf
->
°_size
 = 
sv
->
sv_i
.
sfi_size
;

168 
°©buf
->
°_∆ök
 = 
sv
->
sv_i
.
sfi_lökcou¡
;

171 
°©buf
->
°_blocks
 = 0;

176 
	}
}

183 
	$sfs_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªt
)

185 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

187 
	`vfs_biglock_acquúe
();

189 
sv
->
sv_i
.
sfi_ty≥
) {

190 
SFS_TYPE_FILE
:

191 *
ªt
 = 
S_IFREG
;

192 
	`vfs_biglock_ªÀa£
();

194 
SFS_TYPE_DIR
:

195 *
ªt
 = 
S_IFDIR
;

196 
	`vfs_biglock_ªÀa£
();

199 
	`∑nic
("sfs: gettype: Invalid inodeÅype (inode %u,Åype %u)\n",

200 
sv
->
sv_öo
, sv->
sv_i
.
sfi_ty≥
);

201  
EINVAL
;

202 
	}
}

208 
boﬁ


209 
	$sfs_is£ekabÀ
(
vnode
 *
v
)

211 ()
v
;

212  
åue
;

213 
	}
}

221 
	$sfs_fsync
(
vnode
 *
v
)

223 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

224 
ªsu…
;

226 
	`vfs_biglock_acquúe
();

227 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

228 
	`vfs_biglock_ªÀa£
();

230  
ªsu…
;

231 
	}
}

238 
	$sfs_mm≠
(
vnode
 *
v
 )

240 ()
v
;

241  
ENOSYS
;

242 
	}
}

249 
	$sfs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

251 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

253  
	`sfs_ôrunc
(
sv
, 
Àn
);

254 
	}
}

264 
	$sfs_«mefûe
(
vnode
 *
vv
, 
uio
 *uio)

266 
sfs_vnode
 *
sv
 = 
vv
->
vn_d©a
;

267 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOTDIR_INO
);

271 ()
uio
;

274 
	}
}

282 
	$sfs_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

283 
vnode
 **
ªt
)

285 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

286 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

287 
sfs_vnode
 *
√wguy
;

288 
uöt32_t
 
öo
;

289 
ªsu…
;

291 
	`vfs_biglock_acquúe
();

294 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

295 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

296 
	`vfs_biglock_ªÀa£
();

297  
ªsu…
;

301 i‡(
ªsu…
==0 && 
ex˛
) {

302 
	`vfs_biglock_ªÀa£
();

303  
EEXIST
;

306 i‡(
ªsu…
==0) {

308 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, &
√wguy
);

309 i‡(
ªsu…
) {

310 
	`vfs_biglock_ªÀa£
();

311  
ªsu…
;

313 *
ªt
 = &
√wguy
->
sv_absvn
;

314 
	`vfs_biglock_ªÀa£
();

319 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_FILE
, &
√wguy
);

320 i‡(
ªsu…
) {

321 
	`vfs_biglock_ªÀa£
();

322  
ªsu…
;

326 ()
mode
;

329 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

330 i‡(
ªsu…
) {

331 
	`VOP_DECREF
(&
√wguy
->
sv_absvn
);

332 
	`vfs_biglock_ªÀa£
();

333  
ªsu…
;

337 
√wguy
->
sv_i
.
sfi_lökcou¡
++;

340 
√wguy
->
sv_dúty
 = 
åue
;

342 *
ªt
 = &
√wguy
->
sv_absvn
;

344 
	`vfs_biglock_ªÀa£
();

346 
	}
}

355 
	$sfs_lök
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

357 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

358 
sfs_vnode
 *
f
 = 
fûe
->
vn_d©a
;

359 
ªsu…
;

361 
	`KASSERT
(
fûe
->
vn_fs
 =
dú
->vn_fs);

363 
	`vfs_biglock_acquúe
();

366 i‡(
f
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
) {

367 
	`vfs_biglock_ªÀa£
();

368  
EINVAL
;

372 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
f
->
sv_öo
, 
NULL
);

373 i‡(
ªsu…
) {

374 
	`vfs_biglock_ªÀa£
();

375  
ªsu…
;

379 
f
->
sv_i
.
sfi_lökcou¡
++;

380 
f
->
sv_dúty
 = 
åue
;

382 
	`vfs_biglock_ªÀa£
();

384 
	}
}

391 
	$sfs_ªmove
(
vnode
 *
dú
, c⁄° *
«me
)

393 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

394 
sfs_vnode
 *
vi˘im
;

395 
¶Ÿ
;

396 
ªsu…
;

398 
	`vfs_biglock_acquúe
();

401 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

402 i‡(
ªsu…
) {

403 
	`vfs_biglock_ªÀa£
();

404  
ªsu…
;

408 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

409 i‡(
ªsu…
==0) {

411 
	`KASSERT
(
vi˘im
->
sv_i
.
sfi_lökcou¡
 > 0);

412 
vi˘im
->
sv_i
.
sfi_lökcou¡
--;

413 
vi˘im
->
sv_dúty
 = 
åue
;

417 
	`VOP_DECREF
(&
vi˘im
->
sv_absvn
);

419 
	`vfs_biglock_ªÀa£
();

420  
ªsu…
;

421 
	}
}

431 
	$sfs_ª«me
(
vnode
 *
d1
, c⁄° *
n1
,

432 
vnode
 *
d2
, c⁄° *
n2
)

434 
sfs_vnode
 *
sv
 = 
d1
->
vn_d©a
;

435 
sfs_vnode
 *
g1
;

436 
¶Ÿ1
, 
¶Ÿ2
;

437 
ªsu…
, 
ªsu…2
;

439 
	`vfs_biglock_acquúe
();

441 
	`KASSERT
(
d1
==
d2
);

442 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOTDIR_INO
);

445 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
n1
, &
g1
, &
¶Ÿ1
);

446 i‡(
ªsu…
) {

447 
	`vfs_biglock_ªÀa£
();

448  
ªsu…
;

452 
	`KASSERT
(
g1
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

462 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
n2
, 
g1
->
sv_öo
, &
¶Ÿ2
);

463 i‡(
ªsu…
) {

464 
puke
;

468 
g1
->
sv_i
.
sfi_lökcou¡
++;

469 
g1
->
sv_dúty
 = 
åue
;

472 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ1
);

473 i‡(
ªsu…
) {

474 
puke_h¨dî
;

481 
	`KASSERT
(
g1
->
sv_i
.
sfi_lökcou¡
>0);

482 
g1
->
sv_i
.
sfi_lökcou¡
--;

483 
g1
->
sv_dúty
 = 
åue
;

486 
	`VOP_DECREF
(&
g1
->
sv_absvn
);

488 
	`vfs_biglock_ªÀa£
();

491 
puke_h¨dî
:

495 
ªsu…2
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ2
);

496 i‡(
ªsu…2
) {

497 
	`k¥ötf
("sfs:Ñíame: %s\n", 
	`°ªº‹
(
ªsu…
));

498 
	`k¥ötf
("sfs:Ñename: while cleaning up: %s\n",

499 
	`°ªº‹
(
ªsu…2
));

500 
	`∑nic
("sfs:Ñename: CannotÑecover\n");

502 
g1
->
sv_i
.
sfi_lökcou¡
--;

503 
puke
:

505 
	`VOP_DECREF
(&
g1
->
sv_absvn
);

506 
	`vfs_biglock_ªÀa£
();

507  
ªsu…
;

508 
	}
}

519 
	$sfs_look∑ª¡
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

520 *
buf
, 
size_t
 
buÊí
)

522 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

524 
	`vfs_biglock_acquúe
();

526 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

527 
	`vfs_biglock_ªÀa£
();

528  
ENOTDIR
;

531 i‡(
	`°æí
(
∑th
)+1 > 
buÊí
) {

532 
	`vfs_biglock_ªÀa£
();

533  
ENAMETOOLONG
;

535 
	`°r˝y
(
buf
, 
∑th
);

537 
	`VOP_INCREF
(&
sv
->
sv_absvn
);

538 *
ªt
 = &
sv
->
sv_absvn
;

540 
	`vfs_biglock_ªÀa£
();

542 
	}
}

552 
	$sfs_lookup
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
)

554 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

555 
sfs_vnode
 *
föÆ
;

556 
ªsu…
;

558 
	`vfs_biglock_acquúe
();

560 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

561 
	`vfs_biglock_ªÀa£
();

562  
ENOTDIR
;

565 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
∑th
, &
föÆ
, 
NULL
);

566 i‡(
ªsu…
) {

567 
	`vfs_biglock_ªÀa£
();

568  
ªsu…
;

571 *
ªt
 = &
föÆ
->
sv_absvn
;

573 
	`vfs_biglock_ªÀa£
();

575 
	}
}

583 c⁄° 
vnode_›s
 
	gsfs_fûe›s
 = {

584 .
v›_magic
 = 
VOP_MAGIC
,

586 .
	gv›_óch›í
 = 
sfs_óch›í
,

587 .
	gv›_ª˛aim
 = 
sfs_ª˛aim
,

589 .
	gv›_ªad
 = 
sfs_ªad
,

590 .
	gv›_ªadlök
 = 
v›Áû_uio_nŸdú
,

591 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nŸdú
,

592 .
	gv›_wrôe
 = 
sfs_wrôe
,

593 .
	gv›_io˘l
 = 
sfs_io˘l
,

594 .
	gv›_°©
 = 
sfs_°©
,

595 .
	gv›_gëty≥
 = 
sfs_gëty≥
,

596 .
	gv›_is£ekabÀ
 = 
sfs_is£ekabÀ
,

597 .
	gv›_fsync
 = 
sfs_fsync
,

598 .
	gv›_mm≠
 = 
sfs_mm≠
,

599 .
	gv›_åunˇã
 = 
sfs_åunˇã
,

600 .
	gv›_«mefûe
 = 
v›Áû_uio_nŸdú
,

602 .
	gv›_¸ót
 = 
v›Áû_¸ót_nŸdú
,

603 .
	gv›_symlök
 = 
v›Áû_symlök_nŸdú
,

604 .
	gv›_mkdú
 = 
v›Áû_mkdú_nŸdú
,

605 .
	gv›_lök
 = 
v›Áû_lök_nŸdú
,

606 .
	gv›_ªmove
 = 
v›Áû_°rög_nŸdú
,

607 .
	gv›_rmdú
 = 
v›Áû_°rög_nŸdú
,

608 .
	gv›_ª«me
 = 
v›Áû_ª«me_nŸdú
,

610 .
	gv›_lookup
 = 
v›Áû_lookup_nŸdú
,

611 .
	gv›_look∑ª¡
 = 
v›Áû_look∑ª¡_nŸdú
,

617 c⁄° 
vnode_›s
 
	gsfs_dú›s
 = {

618 .
v›_magic
 = 
VOP_MAGIC
,

620 .
	gv›_óch›í
 = 
sfs_óch›ídú
,

621 .
	gv›_ª˛aim
 = 
sfs_ª˛aim
,

623 .
	gv›_ªad
 = 
v›Áû_uio_isdú
,

624 .
	gv›_ªadlök
 = 
v›Áû_uio_övÆ
,

625 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nosys
,

626 .
	gv›_wrôe
 = 
v›Áû_uio_isdú
,

627 .
	gv›_io˘l
 = 
sfs_io˘l
,

628 .
	gv›_°©
 = 
sfs_°©
,

629 .
	gv›_gëty≥
 = 
sfs_gëty≥
,

630 .
	gv›_is£ekabÀ
 = 
sfs_is£ekabÀ
,

631 .
	gv›_fsync
 = 
sfs_fsync
,

632 .
	gv›_mm≠
 = 
v›Áû_mm≠_isdú
,

633 .
	gv›_åunˇã
 = 
v›Áû_åunˇã_isdú
,

634 .
	gv›_«mefûe
 = 
sfs_«mefûe
,

636 .
	gv›_¸ót
 = 
sfs_¸ót
,

637 .
	gv›_symlök
 = 
v›Áû_symlök_nosys
,

638 .
	gv›_mkdú
 = 
v›Áû_mkdú_nosys
,

639 .
	gv›_lök
 = 
sfs_lök
,

640 .
	gv›_ªmove
 = 
sfs_ªmove
,

641 .
	gv›_rmdú
 = 
v›Áû_°rög_nosys
,

642 .
	gv›_ª«me
 = 
sfs_ª«me
,

644 .
	gv›_lookup
 = 
sfs_lookup
,

645 .
	gv›_look∑ª¡
 = 
sfs_look∑ª¡
,

	@kern/fs/sfs/sfsprivate.h

30 #i‚de‡
_SFSPRIVATE_H_


31 
	#_SFSPRIVATE_H_


	)

33 
	~<uio.h
>

37 c⁄° 
vnode_›s
 
sfs_fûe›s
;

38 c⁄° 
vnode_›s
 
sfs_dú›s
;

41 
	#SFSUIO
(
iov
, 
uio
, 
±r
, 
block
, 
rw
) \

42 
	`uio_köô
(
iov
, 
uio
, 
±r
, 
SFS_BLOCKSIZE
, ((
off_t
)(
block
))*SFS_BLOCKSIZE, 
rw
)

	)

46 
sfs_bÆloc
(
sfs_fs
 *
sfs
, 
daddr_t
 *
diskblock
);

47 
sfs_b‰ì
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
);

48 
sfs_bu£d
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
);

51 
sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
, 
boﬁ
 
dﬂŒoc
,

52 
daddr_t
 *
diskblock
);

53 
sfs_ôrunc
(
sfs_vnode
 *
sv
, 
off_t
 
Àn
);

56 
sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

57 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
);

58 
sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
,

59 *
¶Ÿ
);

60 
sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
);

61 
sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

62 
sfs_vnode
 **
ªt
,

63 *
¶Ÿ
);

66 
sfs_sync_öode
(
sfs_vnode
 *
sv
);

67 
sfs_ª˛aim
(
vnode
 *
v
);

68 
sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

69 
sfs_vnode
 **
ªt
);

70 
sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
);

71 
vnode
 *
sfs_gëroŸ
(
fs
 *fs);

74 
sfs_ªadblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
);

75 
sfs_wrôeblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
);

76 
sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio);

77 
sfs_mëaio
(
sfs_vnode
 *
sv
, 
off_t
 
pos
, *
d©a
, 
size_t
 
Àn
,

78 
uio_rw
 
rw
);

	@kern/include/addrspace.h

30 #i‚de‡
_ADDRSPACE_H_


31 
	#_ADDRSPACE_H_


	)

38 
	~<vm.h
>

39 
	~"›t-dumbvm.h
"

41 
	gvnode
;

51 
	saddr•a˚
 {

52 #i‡
OPT_DUMBVM


53 
vaddr_t
 
	mas_vba£1
;

54 
∑ddr_t
 
	mas_pba£1
;

55 
size_t
 
	mas_≈ages1
;

56 
vaddr_t
 
	mas_vba£2
;

57 
∑ddr_t
 
	mas_pba£2
;

58 
size_t
 
	mas_≈ages2
;

59 
∑ddr_t
 
	mas_°ackpba£
;

106 
addr•a˚
 *
as_¸óã
();

107 
as_c›y
(
addr•a˚
 *
§c
, addr•a˚ **
ªt
);

108 
as_a˘iv©e
();

109 
as_dó˘iv©e
();

110 
as_de°roy
(
addr•a˚
 *);

112 
as_deföe_ªgi⁄
(
addr•a˚
 *
as
,

113 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

114 
ªadabÀ
,

115 
wrôóbÀ
,

116 
execuèbÀ
);

117 
as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
);

118 
as_com∂ëe_lﬂd
(
addr•a˚
 *
as
);

119 
as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
öô°ack±r
);

129 
lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
);

	@kern/include/array.h

30 #i‚de‡
_ARRAY_H_


31 
	#_ARRAY_H_


	)

33 
	~<cdefs.h
>

34 
	~<lib.h
>

36 
	#ARRAYS_CHECKED


	)

38 #ifde‡
ARRAYS_CHECKED


39 
	#ARRAYASSERT
 
KASSERT


	)

41 
	#ARRAYASSERT
(
x
Ë(()(x))

	)

44 #i‚de‡
ARRAYINLINE


45 
	#ARRAYINLINE
 
INLINE


	)

70 
	s¨øy
 {

71 **
	mv
;

72 
	mnum
, 
	mmax
;

75 
¨øy
 *
¨øy_¸óã
();

76 
¨øy_de°roy
(
¨øy
 *);

77 
¨øy_öô
(
¨øy
 *);

78 
¨øy_˛ónup
(
¨øy
 *);

79 
ARRAYINLINE
 
¨øy_num
(c⁄° 
¨øy
 *);

80 
ARRAYINLINE
 *
¨øy_gë
(c⁄° 
¨øy
 *, 
ödex
);

81 
ARRAYINLINE
 
¨øy_£t
(c⁄° 
¨øy
 *, 
ödex
, *
vÆ
);

82 
¨øy_¥óŒoˇã
(
¨øy
 *, 
num
);

83 
¨øy_£tsize
(
¨øy
 *, 
num
);

84 
ARRAYINLINE
 
¨øy_add
(
¨øy
 *, *
vÆ
, *
ödex_ªt
);

85 
¨øy_ªmove
(
¨øy
 *, 
ödex
);

91 
ARRAYINLINE
 

92 
	$¨øy_num
(c⁄° 
¨øy
 *
a
)

94  
a
->
num
;

95 
	}
}

97 
ARRAYINLINE
 *

98 
	$¨øy_gë
(c⁄° 
¨øy
 *
a
, 
ödex
)

100 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

101  
a
->
v
[
ödex
];

102 
	}
}

104 
ARRAYINLINE
 

105 
	$¨øy_£t
(c⁄° 
¨øy
 *
a
, 
ödex
, *
vÆ
)

107 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

108 
a
->
v
[
ödex
] = 
vÆ
;

109 
	}
}

111 
ARRAYINLINE
 

112 
	$¨øy_add
(
¨øy
 *
a
, *
vÆ
, *
ödex_ªt
)

114 
ödex
;

115 
ªt
;

117 
ödex
 = 
a
->
num
;

118 
ªt
 = 
	`¨øy_£tsize
(
a
, 
ödex
+1);

119 i‡(
ªt
) {

120  
ªt
;

122 
a
->
v
[
ödex
] = 
vÆ
;

123 i‡(
ödex_ªt
 !
NULL
) {

124 *
ödex_ªt
 = 
ödex
;

127 
	}
}

168 
	#DECLARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

169 
	sARRAY
 { \

170 
¨øy
 
¨r
; \

173 
INLINE
 
ARRAY
 *ARRAY##
	`_¸óã
(); \

174 
INLINE
 
ARRAY
##
	`_de°roy
(ARRAY *
a
); \

175 
INLINE
 
ARRAY
##
	`_öô
(ARRAY *
a
); \

176 
INLINE
 
ARRAY
##
	`_˛ónup
(ARRAY *
a
); \

177 
INLINE
 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
); \

178 
INLINE
 
T
 *
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
); \

179 
INLINE
 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
); \

180 
INLINE
 
ARRAY
##
	`_¥óŒoˇã
(ARRAY *
a
, 
num
); \

181 
INLINE
 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
); \

182 
INLINE
 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
); \

183 
INLINE
 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
)

	)

185 
	#DEFARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

186 
INLINE
 
ARRAY
 * \

187 
ARRAY
##
	`_¸óã
() \

189 
ARRAY
 *
a
 = 
	`kmÆloc
((*a)); \

190 i‡(
a
 =
NULL
) { \

191  
NULL
; \

193 
	`¨øy_öô
(&
a
->
¨r
); \

194  
a
; \

197 
INLINE
 \

198 
ARRAY
##
	`_de°roy
(ARRAY *
a
) \

200 
	`¨øy_˛ónup
(&
a
->
¨r
); \

201 
	`k‰ì
(
a
); \

204 
INLINE
 \

205 
ARRAY
##
	`_öô
(ARRAY *
a
) \

207 
	`¨øy_öô
(&
a
->
¨r
); \

210 
INLINE
 \

211 
ARRAY
##
	`_˛ónup
(ARRAY *
a
) \

213 
	`¨øy_˛ónup
(&
a
->
¨r
); \

216 
INLINE
 \

217 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
) \

219  
	`¨øy_num
(&
a
->
¨r
); \

222 
INLINE
 
T
 * \

223 
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
) \

225  (
T
 *)
	`¨øy_gë
(&
a
->
¨r
, 
ödex
); \

228 
INLINE
 \

229 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
) \

231 
	`¨øy_£t
(&
a
->
¨r
, 
ödex
, (*)
vÆ
); \

234 
INLINE
 \

235 
ARRAY
##
	`_¥óŒoˇã
(ARRAY *
a
, 
num
) \

237  
	`¨øy_¥óŒoˇã
(&
a
->
¨r
, 
num
); \

240 
INLINE
 \

241 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
) \

243  
	`¨øy_£tsize
(&
a
->
¨r
, 
num
); \

246 
INLINE
 \

247 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
) \

249  
	`¨øy_add
(&
a
->
¨r
, (*)
vÆ
, 
ödex_ªt
); \

252 
INLINE
 \

253 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
) \

255 
	`¨øy_ªmove
(&
a
->
¨r
, 
ödex
); \

256 }

	)

258 
	#DECLARRAY
(
T
, 
INLINE
Ë
	`DECLARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

259 
	#DEFARRAY
(
T
, 
INLINE
Ë
	`DEFARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

265 
DECLARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

266 
DEFARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

	@kern/include/bitmap.h

30 #i‚de‡
_BITMAP_H_


31 
	#_BITMAP_H_


	)

48 
	gbôm≠
;

50 
bôm≠
 *
bôm≠_¸óã
(
nbôs
);

51 *
bôm≠_gëd©a
(
bôm≠
 *);

52 
bôm≠_Æloc
(
bôm≠
 *, *
ödex
);

53 
bôm≠_m¨k
(
bôm≠
 *, 
ödex
);

54 
bôm≠_unm¨k
(
bôm≠
 *, 
ödex
);

55 
bôm≠_is£t
(
bôm≠
 *, 
ödex
);

56 
bôm≠_de°roy
(
bôm≠
 *);

	@kern/include/cdefs.h

30 #i‚de‡
_CDEFS_H_


31 
	#_CDEFS_H_


	)

42 
	#COMPILE_ASSERT
(
x
Ë(()(°ru˘ { : ((x)?1:-1); }))

	)

48 
	#ARRAYCOUNT
(
¨r
Ë(◊ºË/ (◊º)[0]))

	)

56 #ifde‡
__GNUC__


57 
	#__PF
(
a
,
b
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,á, b)))

	)

58 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

59 
	#__UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

61 
	#__PF
(
a
,
b
)

	)

62 
	#__DEAD


	)

63 
	#__UNUSED


	)

127 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

129 
	#INLINE
 
ölöe


	)

131 #ñi‡
deföed
(
__STDC__
Ë&& 
__STDC_VERSION__
 >= 199901L

133 
	#INLINE
 
ölöe


	)

137 
	#INLINE
 
__UNUSED
 
ölöe


	)

	@kern/include/clock.h

30 #i‚de‡
_CLOCK_H_


31 
	#_CLOCK_H_


	)

37 
	~<kîn/time.h
>

46 
	#HZ
 100

	)

48 
h¨d˛ock_boŸ°øp
();

49 
h¨d˛ock
();

55 
timî˛ock
();

60 
gëtime
(
time•ec
 *
ªt
);

69 
time•ec_add
(c⁄° 
time•ec
 *
t1
,

70 c⁄° 
time•ec
 *
t2
,

71 
time•ec
 *
ªt
);

72 
time•ec_sub
(c⁄° 
time•ec
 *
t1
,

73 c⁄° 
time•ec
 *
t2
,

74 
time•ec
 *
ªt
);

80 
˛ock¶ìp
(
£c⁄ds
);

	@kern/include/copyinout.h

30 #i‚de‡
_COPYINOUT_H_


31 
	#_COPYINOUT_H_


	)

67 
c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
);

68 
c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
);

69 
c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
gŸ
);

70 
c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
gŸ
);

	@kern/include/cpu.h

30 #i‚de‡
_CPU_H_


31 
	#_CPU_H_


	)

34 
	~<•ölock.h
>

35 
	~<thªadli°.h
>

36 
	~<machöe/vm.h
>

49 
	s˝u
 {

53 
˝u
 *
	mc_£lf
;

54 
	mc_numbî
;

55 
	mc_h¨dw¨e_numbî
;

60 
thªad
 *
	mc_cuπhªad
;

61 
thªadli°
 
	mc_zombõs
;

62 
	mc_h¨d˛ocks
;

63 
	mc_•ölocks
;

69 
boﬁ
 
	mc_isidÀ
;

70 
thªadli°
 
	mc_runqueue
;

71 
•ölock
 
	mc_runqueue_lock
;

87 
uöt32_t
 
	mc_ùi_≥ndög
;

88 
ébshoŸdown
 
	mc_shoŸdown
[
TLBSHOOTDOWN_MAX
];

89 
	mc_numshoŸdown
;

90 
•ölock
 
	mc_ùi_lock
;

93 
	#TLBSHOOTDOWN_ALL
 (-1)

	)

108 
˝u
 *
˝u_¸óã
(
h¨dw¨e_numbî
);

109 
˝u_machdï_öô
(
˝u
 *);

110  
˝u_°¨t_£c⁄d¨y
();

111 
˝u_h©ch
(
so·w¨e_numbî
);

116 
˝u_idítify
(*
buf
, 
size_t
 
max
);

123 
˝u_úqoff
();

124 
˝u_úq⁄
();

140 
˝u_idÀ
();

141 
˝u_hÆt
();

162 
	#IPI_PANIC
 0

	)

163 
	#IPI_OFFLINE
 1

	)

164 
	#IPI_UNIDLE
 2

	)

165 
	#IPI_TLBSHOOTDOWN
 3

	)

167 
ùi_£nd
(
˝u
 *
èrgë
, 
code
);

168 
ùi_brﬂdˇ°
(
code
);

169 
ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
);

171 
öãΩro˚ss‹_öãºu±
();

	@kern/include/current.h

30 #i‚de‡
_CURRENT_H_


31 
	#_CURRENT_H_


	)

66 
	~<machöe/cuºít.h
>

68 #i‡
deföed
(
__NEED_CURTHREAD
)

70 
	~<˝u.h
>

71 
	#cuπhªad
 
cur˝u
->
c_cuπhªad


	)

72 
	#CURCPU_EXISTS
(Ë(
cur˝u
 !
NULL
)

	)

76 #i‡
deföed
(
__NEED_CURCPU
)

78 
	~<thªad.h
>

79 
	#cur˝u
 
cuπhªad
->
t_˝u


	)

80 
	#CURCPU_EXISTS
(Ë(
cuπhªad
 !
NULL
)

	)

90 
	#cuΩroc
 (
cuπhªad
->
t_¥oc
)

	)

	@kern/include/device.h

30 #i‚de‡
_DEVICE_H_


31 
	#_DEVICE_H_


	)

38 
	guio
;

43 
	sdevi˚
 {

44 c⁄° 
devi˚_›s
 *
	md_›s
;

46 
blk˙t_t
 
	md_blocks
;

47 
blksize_t
 
	md_blocksize
;

49 
dev_t
 
	md_devnumbî
;

51 *
	md_d©a
;

60 
	sdevi˚_›s
 {

61 (*
	mdev›_óch›í
)(
	mdevi˚
 *, 
	mÊags_‰om_›í
);

62 (*
	mdev›_io
)(
	mdevi˚
 *, 
	muio
 *);

63 (*
	mdev›_io˘l
)(
	mdevi˚
 *, 
	m›
, 
u£Ωå_t
 
	md©a
);

69 
	#DEVOP_EACHOPEN
(
d
, 
f
Ë((d)->
d_›s
->
	`dev›_óch›í
(d, f))

	)

70 
	#DEVOP_IO
(
d
, 
u
Ë((d)->
d_›s
->
	`dev›_io
(d, u))

	)

71 
	#DEVOP_IOCTL
(
d
, 
›
, 
p
Ë((d)->
d_›s
->
	`dev›_io˘l
(d, op,Ö))

	)

75 
vnode
 *
dev_¸óã_vnode
(
devi˚
 *
dev
);

79 
devnuŒ_¸óã
();

82 
dev_boŸ°øp
();

	@kern/include/elf.h

30 #i‚de‡
_ELF_H_


31 
	#_ELF_H_


	)

44 
	~<machöe/ñf.h
>

50 
	#ELF_NIDENT
 16

	)

52 
	me_idít
[
ELF_NIDENT
];

53 
uöt16_t
 
	me_ty≥
;

54 
uöt16_t
 
	me_machöe
;

55 
uöt32_t
 
	me_vîsi⁄
;

56 
uöt32_t
 
	me_íåy
;

57 
uöt32_t
 
	me_phoff
;

58 
uöt32_t
 
	me_shoff
;

59 
uöt32_t
 
	me_Êags
;

60 
uöt16_t
 
	me_ehsize
;

61 
uöt16_t
 
	me_phítsize
;

62 
uöt16_t
 
	me_phnum
;

63 
uöt16_t
 
	me_shítsize
;

64 
uöt16_t
 
	me_shnum
;

65 
uöt16_t
 
	me_sh°∫dx
;

66 } 
	tElf32_Ehdr
;

69 
	#EI_MAG0
 0

	)

70 
	#EI_MAG1
 1

	)

71 
	#EI_MAG2
 2

	)

72 
	#EI_MAG3
 3

	)

73 
	#EI_CLASS
 4

	)

74 
	#EI_DATA
 5

	)

75 
	#EI_VERSION
 6

	)

76 
	#EI_OSABI
 7

	)

77 
	#EI_ABIVERSION
 8

	)

78 
	#EI_PAD
 9

	)

83 
	#ELFMAG0
 0x7f

	)

84 
	#ELFMAG1
 'E'

	)

85 
	#ELFMAG2
 'L'

	)

86 
	#ELFMAG3
 'F'

	)

89 
	#ELFCLASSNONE
 0

	)

90 
	#ELFCLASS32
 1

	)

91 
	#ELFCLASS64
 2

	)

94 
	#ELFDATANONE
 0

	)

95 
	#ELFDATA2LSB
 1

	)

96 
	#ELFDATA2MSB
 2

	)

99 
	#EV_NONE
 0

	)

100 
	#EV_CURRENT
 1

	)

103 
	#ELFOSABI_SYSV
 0

	)

104 
	#ELFOSABI_HPUX
 1

	)

105 
	#ELFOSABI_STANDALONE
 255

	)

111 
	#ET_NONE
 0

	)

112 
	#ET_REL
 1

	)

113 
	#ET_EXEC
 2

	)

114 
	#ET_DYN
 3

	)

115 
	#ET_CORE
 4

	)

116 
	#ET_NUM
 5

	)

121 
	#EM_NONE
 0

	)

122 
	#EM_M32
 1

	)

123 
	#EM_SPARC
 2

	)

124 
	#EM_386
 3

	)

125 
	#EM_68K
 4

	)

126 
	#EM_88K
 5

	)

127 
	#EM_486
 6

	)

128 
	#EM_860
 7

	)

129 
	#EM_MIPS
 8

	)

130 
	#EM_S370
 9

	)

131 
	#EM_MIPS_RS3_LE
 10

	)

132 
	#EM_RS6000
 11

	)

133 
	#EM_PARISC
 15

	)

134 
	#EM_NCUBE
 16

	)

135 
	#EM_VPP500
 17

	)

136 
	#EM_SPARC32PLUS
 18

	)

137 
	#EM_960
 19

	)

138 
	#EM_PPC
 20

	)

139 
	#EM_V800
 36

	)

140 
	#EM_FR20
 37

	)

141 
	#EM_RH32
 38

	)

142 
	#EM_RCE
 39

	)

143 
	#EM_ARM
 40

	)

144 
	#EM_ALPHA
 41

	)

145 
	#EM_SH
 42

	)

146 
	#EM_SPARCV9
 43

	)

147 
	#EM_TRICORE
 44

	)

148 
	#EM_ARC
 45

	)

149 
	#EM_H8_300
 46

	)

150 
	#EM_H8_300H
 47

	)

151 
	#EM_H8S
 48

	)

152 
	#EM_H8_500
 49

	)

153 
	#EM_IA_64
 50

	)

154 
	#EM_MIPS_X
 51

	)

155 
	#EM_COLDFIRE
 52

	)

156 
	#EM_68HC12
 53

	)

157 
	#EM_VAX
 75

	)

158 
	#EM_ALPHA_EXP
 36902

	)

159 
	#EM_NUM
 36903

	)

169 
uöt32_t
 
	mp_ty≥
;

170 
uöt32_t
 
	mp_off£t
;

171 
uöt32_t
 
	mp_vaddr
;

172 
uöt32_t
 
	mp_∑ddr
;

173 
uöt32_t
 
	mp_fûesz
;

174 
uöt32_t
 
	mp_memsz
;

175 
uöt32_t
 
	mp_Êags
;

176 
uöt32_t
 
	mp_Æign
;

177 } 
	tElf32_Phdr
;

180 
	#PT_NULL
 0

	)

181 
	#PT_LOAD
 1

	)

182 
	#PT_DYNAMIC
 2

	)

183 
	#PT_INTERP
 3

	)

184 
	#PT_NOTE
 4

	)

185 
	#PT_SHLIB
 5

	)

186 
	#PT_PHDR
 6

	)

187 
	#PT_NUM
 7

	)

188 
	#PT_MIPS_REGINFO
 0x70000000

	)

191 
	#PF_R
 0x4

	)

192 
	#PF_W
 0x2

	)

193 
	#PF_X
 0x1

	)

196 
Elf32_Ehdr
 
	tElf_Ehdr
;

197 
Elf32_Phdr
 
	tElf_Phdr
;

	@kern/include/emufs.h

30 #i‚de‡
_EMUFS_H_


31 
	#_EMUFS_H_


	)

37 
	~<fs.h
>

38 
	~<vnode.h
>

44 
	semufs_vnode
 {

45 
vnode
 
	mev_v
;

46 
emu_so·c
 *
	mev_emu
;

47 
uöt32_t
 
	mev_h™dÀ
;

50 
	semufs_fs
 {

51 
fs
 
	mef_fs
;

52 
emu_so·c
 *
	mef_emu
;

53 
emufs_vnode
 *
	mef_roŸ
;

54 
vnodóºay
 *
	mef_vnodes
;

	@kern/include/endian.h

30 #i‚de‡
_ENDIAN_H_


31 
	#_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

39 
uöt16_t
 
bsw≠16
(uint16_t);

40 
uöt32_t
 
bsw≠32
(uint32_t);

41 
uöt64_t
 
bsw≠64
(uint64_t);

43 
uöt16_t
 
¡ohs
(uint16_t);

44 
uöt16_t
 
ht⁄s
(uint16_t);

45 
uöt32_t
 
¡ohl
(uint32_t);

46 
uöt32_t
 
ht⁄l
(uint32_t);

47 
uöt64_t
 
¡ohŒ
(uint64_t);

48 
uöt64_t
 
ht⁄Œ
(uint64_t);

51 
joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
);

52 
•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
);

	@kern/include/fs.h

30 #i‚de‡
_FS_H_


31 
	#_FS_H_


	)

40 
	sfs
 {

41 *
	mfs_d©a
;

42 c⁄° 
fs_›s
 *
	mfs_›s
;

70 
	sfs_›s
 {

71 (*
	mfs›_sync
)(
	mfs
 *);

72 c⁄° *(*
	mfs›_gëvﬁ«me
)(
	mfs
 *);

73 
	mvnode
 *(*
	mfs›_gëroŸ
)(
	mfs
 *);

74 (*
	mfs›_unmou¡
)(
	mfs
 *);

80 
	#FSOP_SYNC
(
fs
Ë((fs)->
fs_›s
->
	`fs›_sync
(fs))

	)

81 
	#FSOP_GETVOLNAME
(
fs
Ë((fs)->
fs_›s
->
	`fs›_gëvﬁ«me
(fs))

	)

82 
	#FSOP_GETROOT
(
fs
Ë((fs)->
fs_›s
->
	`fs›_gëroŸ
(fs))

	)

83 
	#FSOP_UNMOUNT
(
fs
Ë((fs)->
fs_›s
->
	`fs›_unmou¡
(fs))

	)

86 
£mfs_boŸ°øp
();

	@kern/include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@kern/include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@kern/include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@kern/include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@kern/include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@kern/include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@kern/include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

60 
	#__NAME_MAX
 255

	)

63 
	#__PATH_MAX
 1024

	)

66 
	#__ARG_MAX
 (64 * 1024)

	)

77 
	#__PID_MIN
 2

	)

80 
	#__PID_MAX
 32767

	)

83 
	#__OPEN_MAX
 128

	)

86 
	#__PIPE_BUF
 512

	)

95 
	#__NGROUPS_MAX
 32

	)

98 
	#__LOGIN_NAME_MAX
 17

	)

106 
	#__IOV_MAX
 1024

	)

	@kern/include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@kern/include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@kern/include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@kern/include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_NINDIRECT
 1

	)

44 
	#SFS_NDINDIRECT
 0

	)

45 
	#SFS_NTINDIRECT
 0

	)

46 
	#SFS_DBPERIDB
 128

	)

47 
	#SFS_NAMELEN
 60

	)

48 
	#SFS_SUPER_BLOCK
 0

	)

49 
	#SFS_FREEMAP_START
 2

	)

50 
	#SFS_NOINO
 0

	)

51 
	#SFS_ROOTDIR_INO
 1

	)

54 
	#SFS_BITSPERBLOCK
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

57 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

60 
	#SFS_FREEMAPBITS
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BITSPERBLOCK
)

	)

63 
	#SFS_FREEMAPBLOCKS
(
nblocks
Ë(
	`SFS_FREEMAPBITS
“blocks)/
SFS_BITSPERBLOCK
)

	)

66 
	#SFS_TYPE_INVAL
 0

	)

67 
	#SFS_TYPE_FILE
 1

	)

68 
	#SFS_TYPE_DIR
 2

	)

73 
	ssfs_su≥rblock
 {

74 
uöt32_t
 
	msb_magic
;

75 
uöt32_t
 
	msb_nblocks
;

76 
	msb_vﬁ«me
[
SFS_VOLNAME_SIZE
];

77 
uöt32_t
 
	mª£rved
[118];

83 
	ssfs_döode
 {

84 
uöt32_t
 
	msfi_size
;

85 
uöt16_t
 
	msfi_ty≥
;

86 
uöt16_t
 
	msfi_lökcou¡
;

87 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

88 
uöt32_t
 
	msfi_ödúe˘
;

89 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

95 
	ssfs_dúíåy
 {

96 
uöt32_t
 
	msfd_öo
;

97 
	msfd_«me
[
SFS_NAMELEN
];

	@kern/include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@kern/include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@kern/include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@kern/include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@kern/include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@kern/include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@kern/include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@kern/include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@kern/include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@kern/include/lib.h

30 #i‚de‡
_LIB_H_


31 
	#_LIB_H_


	)

41 
	~<cdefs.h
>

60 
	~"›t-nﬂs£πs.h
"

62 #i‡
OPT_NOASSERTS


63 
	#KASSERT
(
ex¥
Ë(()”x¥))

	)

65 
	#KASSERT
(
ex¥
) \

66 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

70 
	#DEBUGASSERT
(
ex¥
Ë(()”x¥))

	)

72 
	#DEBUGASSERT
(
ex¥
) \

73 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

79 
	#DB_LOCORE
 0x0001

	)

80 
	#DB_SYSCALL
 0x0002

	)

81 
	#DB_INTERRUPT
 0x0004

	)

82 
	#DB_DEVICE
 0x0008

	)

83 
	#DB_THREADS
 0x0010

	)

84 
	#DB_VM
 0x0020

	)

85 
	#DB_EXEC
 0x0040

	)

86 
	#DB_VFS
 0x0080

	)

87 
	#DB_SEMFS
 0x0100

	)

88 
	#DB_SFS
 0x0200

	)

89 
	#DB_NET
 0x0400

	)

90 
	#DB_NETFS
 0x0800

	)

91 
	#DB_KMALLOC
 0x1000

	)

93 
uöt32_t
 
dbÊags
;

111 
	#DEBUG
(
d
, ...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(
__VA_ARGS__
Ë: 0)

	)

118 
	#RANDOM_MAX
 (
	`øndmax
())

	)

119 
uöt32_t
 
øndmax
();

120 
uöt32_t
 
øndom
();

129 *
kmÆloc
(
size_t
 
size
);

130 
k‰ì
(*
±r
);

131 
khóp_¥öt°©s
();

132 
khóp_√xtgíî©i⁄
();

133 
khóp_dump
();

134 
khóp_dum∑Œ
();

142 
size_t
 
°æí
(c⁄° *
°r
);

143 
°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

144 *
°r˝y
(*
de°
, c⁄° *
§c
);

145 *
°rˇt
(*
de°
, c⁄° *
§c
);

146 *
k°rdup
(c⁄° *
°r
);

147 *
°rchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

148 *
°ºchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

149 *
°πok_r
(*
buf
, c⁄° *
£ps
, **
c⁄ãxt
);

151 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

152 *
memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

153 *
mem£t
(*
block
, 
ch
, 
size_t
 
Àn
);

154 
bzîo
(*
±r
, 
size_t
 
Àn
);

155 
©oi
(c⁄° *
°r
);

157 
	$¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...Ë
	`__PF
(3,4);

159 c⁄° *
	`°ªº‹
(
îrcode
);

164 
	`putch
(
ch
);

165 
	`gëch
();

166 
	`bìp
();

181 
	$k¥ötf
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

182 
__DEAD
 
	$∑nic
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

183 
__DEAD
 
	`badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
,

184 
löe
, c⁄° *
func
);

186 
	`kgës
(*
buf
, 
size_t
 
maxbuÊí
);

188 
	`k¥ötf_boŸ°øp
();

194 
	#DIVROUNDUP
(
a
,
b
Ë((◊)+(b)-1)/(b))

	)

195 
	#ROUNDUP
(
a
,
b
Ë(
	`DIVROUNDUP
◊,b)*b)

	)

	@kern/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@kern/include/mainbus.h

30 #i‚de‡
_MAINBUS_H_


31 
	#_MAINBUS_H_


	)

38 
	g˝u
;

39 
	gå≠‰ame
;

43 
maöbus_boŸ°øp
();

46 
maöbus_°¨t_˝us
();

49 
maöbus_öãºu±
(
å≠‰ame
 *);

53 
size_t
 
maöbus_ømsize
();

56 
maöbus_£nd_ùi
(
˝u
 *
èrgë
);

64 
maöbus_hÆt
();

65 
maöbus_powîoff
();

66 
maöbus_ªboŸ
();

67 
maöbus_∑nic
();

	@kern/include/membar.h

30 #i‚de‡
_MEMBAR_H_


31 
	#_MEMBAR_H_


	)

80 #i‚de‡
MEMBAR_INLINE


81 
	#MEMBAR_INLINE
 
INLINE


	)

84 
MEMBAR_INLINE
 
memb¨_lﬂd_lﬂd
();

85 
MEMBAR_INLINE
 
memb¨_°‹e_°‹e
();

86 
MEMBAR_INLINE
 
memb¨_°‹e_™y
();

87 
MEMBAR_INLINE
 
memb¨_™y_°‹e
();

88 
MEMBAR_INLINE
 
memb¨_™y_™y
();

91 
	~<machöe/memb¨.h
>

	@kern/include/proc.h

30 #i‚de‡
_PROC_H_


31 
	#_PROC_H_


	)

39 
	~<•ölock.h
>

40 
	~<thªad.h
>

42 
	gaddr•a˚
;

43 
	gvnode
;

48 
	s¥oc
 {

49 *
	mp_«me
;

50 
•ölock
 
	mp_lock
;

51 
thªad¨øy
 
	mp_thªads
;

54 
addr•a˚
 *
	mp_addr•a˚
;

57 
vnode
 *
	mp_cwd
;

63 
¥oc
 *
k¥oc
;

66 
¥oc_boŸ°øp
();

69 
¥oc
 *
¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
);

72 
¥oc_de°roy
(
¥oc
 *proc);

75 
¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
);

78 
¥oc_ªmthªad
(
thªad
 *
t
);

81 
addr•a˚
 *
¥oc_gëas
();

84 
addr•a˚
 *
¥oc_£ès
(addrspace *);

	@kern/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

38 
	~<kîn/machöe/£tjmp.h
>

40 
£tjmp
(
jmp_buf
 
jb
);

41 
l⁄gjmp
(
jmp_buf
 
jb
, 
ªtvÆ
);

	@kern/include/sfs.h

30 #i‚de‡
_SFS_H_


31 
	#_SFS_H_


	)

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	~<kîn/sfs.h
>

54 
	ssfs_vnode
 {

55 
vnode
 
	msv_absvn
;

56 
sfs_döode
 
	msv_i
;

57 
uöt32_t
 
	msv_öo
;

58 
boﬁ
 
	msv_dúty
;

64 
	ssfs_fs
 {

65 
fs
 
	msfs_absfs
;

66 
sfs_su≥rblock
 
	msfs_sb
;

67 
boﬁ
 
	msfs_su≥rdúty
;

68 
devi˚
 *
	msfs_devi˚
;

69 
vnodóºay
 *
	msfs_vnodes
;

70 
bôm≠
 *
	msfs_‰ìm≠
;

71 
boﬁ
 
	msfs_‰ìm≠dúty
;

77 
sfs_mou¡
(c⁄° *
devi˚
);

	@kern/include/signal.h

30 #i‚de‡
_SIGNAL_H_


31 
	#_SIGNAL_H_


	)

35 
	~<kîn/machöe/sig«l.h
>

36 
	~<kîn/sig«l.h
>

	@kern/include/spinlock.h

30 #i‚de‡
_SPINLOCK_H_


31 
	#_SPINLOCK_H_


	)

38 
	~<cdefs.h
>

41 #i‚de‡
SPINLOCK_INLINE


42 
	#SPINLOCK_INLINE
 
INLINE


	)

46 
	~<machöe/•ölock.h
>

57 
	s•ölock
 {

58 vﬁ©ûê
•ölock_d©a_t
 
	m•lk_lock
;

59 
˝u
 *
	m•lk_hﬁdî
;

65 
	#SPINLOCK_INITIALIZER
 { 
SPINLOCK_DATA_INITIALIZER
, 
NULL
 }

	)

79 
•ölock_öô
(
•ölock
 *
lk
);

80 
•ölock_˛ónup
(
•ölock
 *
lk
);

82 
•ölock_acquúe
(
•ölock
 *
lk
);

83 
•ölock_ªÀa£
(
•ölock
 *
lk
);

85 
boﬁ
 
•ölock_do_i_hﬁd
(
•ölock
 *
lk
);

	@kern/include/spl.h

30 #i‚de‡
_SPL_H_


31 
	#_SPL_H_


	)

33 
	~<cdefs.h
>

36 #i‚de‡
SPL_INLINE


37 
	#SPL_INLINE
 
INLINE


	)

70 
SPL_INLINE
 
•l0
();

71 
SPL_INLINE
 
•lhigh
();

72 
•lx
();

77 
	#IPL_NONE
 0

	)

78 
	#IPL_HIGH
 1

	)

89 
•Ãai£
(
ﬁdùl
, 
√wùl
);

90 
•Œowî
(
ﬁdùl
, 
√wùl
);

94 
SPL_INLINE


96 
	$•l0
()

98  
	`•lx
(
IPL_NONE
);

99 
	}
}

101 
SPL_INLINE


103 
	$•lhigh
()

105  
	`•lx
(
IPL_HIGH
);

106 
	}
}

	@kern/include/stat.h

30 #i‚de‡
_STAT_H_


31 
	#_STAT_H_


	)

34 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

40 
	#S_IFMT
 
_S_IFMT


	)

41 
	#S_IFREG
 
_S_IFREG


	)

42 
	#S_IFDIR
 
_S_IFDIR


	)

43 
	#S_IFLNK
 
_S_IFLNK


	)

44 
	#S_IFIFO
 
_S_IFIFO


	)

45 
	#S_IFSOCK
 
_S_IFSOCK


	)

46 
	#S_IFCHR
 
_S_IFCHR


	)

47 
	#S_IFBLK
 
_S_IFBLK


	)

	@kern/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

35 
	~<cdefs.h
>

45 #ifde‡
__GNUC__


46 
__va_li°
 
	tva_li°
;

48 #i‡
__GNUC__
 < 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 < 8)

49 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p, fmt)

	)

51 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_va_°¨t
◊p, fmt)

	)

53 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,Å)

	)

54 
	#va_c›y
(
≠1
, 
≠2
Ë
	`__buûtö_va_c›y
◊p1,áp2)

	)

55 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

65 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(1,0);

66 
	$v¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

75 
	`__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

76 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

	@kern/include/synch.h

30 #i‚de‡
_SYNCH_H_


31 
	#_SYNCH_H_


	)

38 
	~<•ölock.h
>

46 
	s£m≠h‹e
 {

47 *
	m£m_«me
;

48 
wch™
 *
	m£m_wch™
;

49 
•ölock
 
	m£m_lock
;

50 vﬁ©ûê
	m£m_cou¡
;

53 
£m≠h‹e
 *
£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
);

54 
£m_de°roy
(
£m≠h‹e
 *);

62 
P
(
£m≠h‹e
 *);

63 
V
(
£m≠h‹e
 *);

75 
	slock
 {

76 *
	mlk_«me
;

81 
lock
 *
lock_¸óã
(c⁄° *
«me
);

82 
lock_de°roy
(
lock
 *);

95 
lock_acquúe
(
lock
 *);

96 
lock_ªÀa£
(
lock
 *);

97 
boﬁ
 
lock_do_i_hﬁd
(
lock
 *);

114 
	scv
 {

115 *
	mcv_«me
;

120 
cv
 *
cv_¸óã
(c⁄° *
«me
);

121 
cv_de°roy
(
cv
 *);

136 
cv_waô
(
cv
 *cv, 
lock
 *lock);

137 
cv_sig«l
(
cv
 *cv, 
lock
 *lock);

138 
cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock);

	@kern/include/syscall.h

30 #i‚de‡
_SYSCALL_H_


31 
	#_SYSCALL_H_


	)

34 
	~<cdefs.h
>

35 
	gå≠‰ame
;

41 
sysˇŒ
(
å≠‰ame
 *
tf
);

48 
íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
);

51 
__DEAD
 
íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, u£Ωå_à
ív
,

52 
vaddr_t
 
°ack±r
, vaddr_à
íåypoöt
);

59 
sys_ªboŸ
(
code
);

60 
sys___time
(
u£Ωå_t
 
u£r_£c⁄ds
, u£Ωå_à
u£r_«no£c⁄ds
);

	@kern/include/test.h

30 #i‚de‡
_TEST_H_


31 
	#_TEST_H_


	)

44 
¨øyã°
(, **);

45 
bôm≠ã°
(, **);

46 
thªadli°ã°
(, **);

49 
thªadã°
(, **);

50 
thªadã°2
(, **);

51 
thªadã°3
(, **);

52 
£mã°
(, **);

53 
lockã°
(, **);

54 
cvã°
(, **);

55 
cvã°2
(, **);

58 
f°e°
(, **);

59 
ªad°ªss
(, **);

60 
wrôe°ªss
(, **);

61 
wrôe°ªss2
(, **);

62 
l⁄g°ªss
(, **);

63 
¸óã°ªss
(, **);

64 
¥ötfûe
(, **);

67 
mÆlo˘e°
(, **);

68 
mÆloc°ªss
(, **);

69 
mÆlo˘e°3
(, **);

70 
mÆlo˘e°4
(, **);

71 
√âe°
(, **);

74 
ru≈rogøm
(*
¥og«me
);

77 
míu
(*
¨g°r
);

80 
kmaö
(*
boŸ°rög
);

	@kern/include/thread.h

30 #i‚de‡
_THREAD_H_


31 
	#_THREAD_H_


	)

39 
	~<¨øy.h
>

40 
	~<•ölock.h
>

41 
	~<thªadli°.h
>

43 
	g˝u
;

46 
	~<machöe/thªad.h
>

50 
	#STACK_SIZE
 4096

	)

53 
	#STACK_MASK
 (~(
vaddr_t
)(
STACK_SIZE
-1))

	)

56 
	#SAME_STACK
(
p1
, 
p2
Ë((’1Ë& 
STACK_MASK
Ë=(’2Ë& STACK_MASK))

	)

61 
	mS_RUN
,

62 
	mS_READY
,

63 
	mS_SLEEP
,

64 
	mS_ZOMBIE
,

65 } 
	tthªad°©e_t
;

68 
	sthªad
 {

73 *
	mt_«me
;

74 c⁄° *
	mt_wch™_«me
;

75 
thªad°©e_t
 
	mt_°©e
;

80 
thªad_machdï
 
	mt_machdï
;

81 
thªadli°node
 
	mt_li°node
;

82 *
	mt_°ack
;

83 
swôch‰ame
 *
	mt_c⁄ãxt
;

84 
˝u
 *
	mt_˝u
;

85 
¥oc
 *
	mt_¥oc
;

100 
boﬁ
 
	mt_ö_öãºu±
;

101 
	mt_cur•l
;

102 
	mt_ùlhigh_cou¡
;

114 #i‚de‡
THREADINLINE


115 
	#THREADINLINE
 
INLINE


	)

118 
DECLARRAY
(
thªad
, 
THREADINLINE
);

119 
DEFARRAY
(
thªad
, 
THREADINLINE
);

122 
thªad_boŸ°øp
();

125 
thªad_°¨t_˝us
();

128 
thªad_∑nic
();

131 
thªad_shutdown
();

143 
thªad_f‹k
(c⁄° *
«me
, 
¥oc
 *proc,

144 (*
func
)(*, ),

145 *
d©a1
, 
d©a2
);

151 
__DEAD
 
	`thªad_exô
();

158 
	`thªad_yõld
();

163 
	`scheduÀ
();

169 
	`thªad_c⁄sidî_migøti⁄
();

	@kern/include/threadlist.h

30 #i‚de‡
_THREADLIST_H_


31 
	#_THREADLIST_H_


	)

34 
	gthªad
;

53 
	sthªadli°node
 {

54 
thªadli°node
 *
	mén_¥ev
;

55 
thªadli°node
 *
	mén_√xt
;

56 
thªad
 *
	mén_£lf
;

59 
	sthªadli°
 {

60 
thªadli°node
 
	mé_hód
;

61 
thªadli°node
 
	mé_èû
;

62 
	mé_cou¡
;

66 
thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
£lf
);

67 
thªadli°node_˛ónup
(
thªadli°node
 *
én
);

70 
thªadli°_öô
(
thªadli°
 *
é
);

71 
thªadli°_˛ónup
(
thªadli°
 *
é
);

74 
boﬁ
 
thªadli°_i£m±y
(
thªadli°
 *
é
);

77 
thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
);

78 
thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
);

79 
thªad
 *
thªadli°_ªmhód
(
thªadli°
 *
é
);

80 
thªad
 *
thªadli°_ªmèû
(
thªadli°
 *
é
);

83 
thªadli°_ö£πa·î
(
thªadli°
 *
é
,

84 
thªad
 *
⁄li°
, thªad *
addì
);

85 
thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

86 
thªad
 *
addì
, thªad *
⁄li°
);

87 
thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
);

90 
	#THREADLIST_FORALL
(
ôîv¨
, 
é
) \

91 (
ôîv¨
Ë(
é
).
é_hód
.
én_√xt
->
én_£lf
; \

92 (
ôîv¨
Ë!
NULL
; \

93 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_√xt
->
én_£lf
)

	)

95 
	#THREADLIST_FORALL_REV
(
ôîv¨
, 
é
) \

96 (
ôîv¨
Ë(
é
).
é_èû
.
én_¥ev
->
én_£lf
; \

97 (
ôîv¨
Ë!
NULL
; \

98 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_¥ev
->
én_£lf
)

	)

	@kern/include/threadprivate.h

30 #i‚de‡
_THREADPRIVATE_H_


31 
	#_THREADPRIVATE_H_


	)

33 
	gthªad
;

34 
	gthªad_machdï
;

35 
	gswôch‰ame
;

55 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

56 *
d©a1
, 
d©a2
);

59 
	`thªad_machdï_öô
(
thªad_machdï
 *
tm
);

60 
	`thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
);

70 
	`swôch‰ame_swôch
(
swôch‰ame
 **
¥ev
, swôch‰amê**
√xt
);

73 
	`swôch‰ame_öô
(
thªad
 *,

74 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

75 *
d©a1
, 
d©a2
);

	@kern/include/types.h

30 #i‚de‡
_TYPES_H_


31 
	#_TYPES_H_


	)

80 
	~<kîn/ty≥s.h
>

83 
	~<machöe/ty≥s.h
>

90 
	s__u£Ωå
 { 
	m_dummy
; };

91 
__u£Ωå
 *
	tu£Ωå_t
;

92 c⁄° 
	t__u£Ωå
 *
	tc⁄°_u£Ωå_t
;

100 
__i8
 
	töt8_t
;

101 
__i16
 
	töt16_t
;

102 
__i32
 
	töt32_t
;

103 
__i64
 
	töt64_t
;

104 
__u8
 
	tuöt8_t
;

105 
__u16
 
	tuöt16_t
;

106 
__u32
 
	tuöt32_t
;

107 
__u64
 
	tuöt64_t
;

108 
__size_t
 
	tsize_t
;

109 
__ssize_t
 
	tssize_t
;

110 
__öçå_t
 
	töçå_t
;

111 
__uöçå_t
 
	tuöçå_t
;

112 
__±rdiff_t
 
	t±rdiff_t
;

115 
__blk˙t_t
 
	tblk˙t_t
;

116 
__blksize_t
 
	tblksize_t
;

117 
__daddr_t
 
	tdaddr_t
;

118 
__dev_t
 
	tdev_t
;

119 
__fsid_t
 
	tfsid_t
;

120 
__gid_t
 
	tgid_t
;

121 
__ö_addr_t
 
	tö_addr_t
;

122 
__ö_p‹t_t
 
	tö_p‹t_t
;

123 
__öo_t
 
	töo_t
;

124 
__mode_t
 
	tmode_t
;

125 
__∆ök_t
 
	t∆ök_t
;

126 
__off_t
 
	toff_t
;

127 
__pid_t
 
	tpid_t
;

128 
__æim_t
 
	tæim_t
;

129 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

130 
__time_t
 
	ttime_t
;

131 
__uid_t
 
	tuid_t
;

133 
__nfds_t
 
	tnfds_t
;

134 
__sockÀn_t
 
	tsockÀn_t
;

140 
	#CHAR_BIT
 
__CHAR_BIT


	)

146 
	#NULL
 ((*)0)

	)

151 
_Boﬁ
 
	tboﬁ
;

152 
	#åue
 1

	)

153 
	#Ál£
 0

	)

	@kern/include/uio.h

30 #i‚de‡
_UIO_H_


31 
	#_UIO_H_


	)

58 
	~<kîn/iovec.h
>

61 
	euio_rw
 {

62 
	mUIO_READ
,

63 
	mUIO_WRITE
,

67 
	euio_£g
 {

68 
	mUIO_USERISPACE
,

69 
	mUIO_USERSPACE
,

70 
	mUIO_SYSSPACE
,

73 
	suio
 {

74 
iovec
 *
	muio_iov
;

75 
	muio_iov˙t
;

76 
off_t
 
	muio_off£t
;

77 
size_t
 
	muio_ªsid
;

78 
uio_£g
 
	muio_£gÊg
;

79 
uio_rw
 
	muio_rw
;

80 
addr•a˚
 *
	muio_•a˚
;

119 
uiomove
(*
kbuf„r
, 
size_t
 
Àn
, 
uio
 *uio);

124 
uiomovezîos
(
size_t
 
Àn
, 
uio
 *uio);

138 
uio_köô
(
iovec
 *, 
uio
 *,

139 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
);

	@kern/include/version.h

30 #i‚de‡
_VERSION_H_


31 
	#_VERSION_H_


	)

37 
	#BASE_VERSION
 "1.99.08"

	)

42 
	#GROUP_VERSION
 "0"

	)

	@kern/include/vfs.h

30 #i‚de‡
_VFS_H_


31 
	#_VFS_H_


	)

34 
	~<¨øy.h
>

44 
	guio
;

45 
	gdevi˚
;

46 
	gfs
;

47 
	gvnode
;

62 
vfs_£tcurdú
(
vnode
 *
dú
);

63 
vfs_˛órcurdú
();

64 
vfs_gëcurdú
(
vnode
 **
ªtdú
);

65 
vfs_sync
();

66 
vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

67 c⁄° *
vfs_gëdev«me
(
fs
 *fs);

80 
vfs_lookup
(*
∑th
, 
vnode
 **
ªsu…
);

81 
vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªsu…
,

82 *
buf
, 
size_t
 
buÊí
);

104 
vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
);

105 
vfs_˛o£
(
vnode
 *
vn
);

106 
vfs_ªadlök
(*
∑th
, 
uio
 *
d©a
);

107 
vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
);

108 
vfs_mkdú
(*
∑th
, 
mode_t
 
mode
);

109 
vfs_lök
(*
ﬁd∑th
, *
√w∑th
);

110 
vfs_ªmove
(*
∑th
);

111 
vfs_rmdú
(*
∑th
);

112 
vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
);

114 
vfs_chdú
(*
∑th
);

115 
vfs_gëcwd
(
uio
 *
buf
);

162 
vfs_boŸ°øp
();

164 
vfs_£tboŸfs
(c⁄° *
f¢ame
);

165 
vfs_˛órboŸfs
();

167 
vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
);

168 
vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs);

170 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

171 (*
mou¡func
)(*
d©a
,

172 
devi˚
 *
dev
,

173 
fs
 **
ªsu…
));

174 
	`vfs_unmou¡
(c⁄° *
dev«me
);

175 
	`vfs_unmou¡Æl
();

180 #i‚de‡
VFSINLINE


181 
	#VFSINLINE
 
INLINE


	)

184 
	`DECLARRAY
(
vnode
, 
VFSINLINE
);

185 
	`DEFARRAY
(
vnode
, 
VFSINLINE
);

191 
	`vfs_biglock_acquúe
();

192 
	`vfs_biglock_ªÀa£
();

193 
boﬁ
 
	`vfs_biglock_do_i_hﬁd
();

	@kern/include/vm.h

30 #i‚de‡
_VM_H_


31 
	#_VM_H_


	)

40 
	~<machöe/vm.h
>

43 
	#VM_FAULT_READ
 0

	)

44 
	#VM_FAULT_WRITE
 1

	)

45 
	#VM_FAULT_READONLY
 2

	)

49 
vm_boŸ°øp
();

52 
vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
);

55 
vaddr_t
 
Æloc_k∑ges
(
≈ages
);

56 
‰ì_k∑ges
(
vaddr_t
 
addr
);

59 
vm_ébshoŸdown_Æl
();

60 
vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *);

	@kern/include/vnode.h

30 #i‚de‡
_VNODE_H_


31 
	#_VNODE_H_


	)

33 
	~<•ölock.h
>

34 
	guio
;

35 
	g°©
;

51 
	svnode
 {

52 
	mvn_ªfcou¡
;

53 
•ölock
 
	mvn_cou¡lock
;

55 
fs
 *
	mvn_fs
;

57 *
	mvn_d©a
;

59 c⁄° 
vnode_›s
 *
	mvn_›s
;

178 
	#VOP_MAGIC
 0xa2b3c4d5

	)

180 
	svnode_›s
 {

181 
	mv›_magic
;

183 (*
	mv›_óch›í
)(
vnode
 *
	mobje˘
, 
	mÊags_‰om_›í
);

184 (*
	mv›_ª˛aim
)(
vnode
 *
	mvnode
);

187 (*
	mv›_ªad
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

188 (*
	mv›_ªadlök
)(
vnode
 *
	mlök
, 
uio
 *
	muio
);

189 (*
	mv›_gëdúíåy
)(
vnode
 *
	mdú
, 
uio
 *
	muio
);

190 (*
	mv›_wrôe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

191 (*
	mv›_io˘l
)(
vnode
 *
	mobje˘
, 
	m›
, 
u£Ωå_t
 
	md©a
);

192 (*
	mv›_°©
)(
vnode
 *
	mobje˘
, 
°©
 *
	m°©buf
);

193 (*
	mv›_gëty≥
)(
vnode
 *
	mobje˘
, 
mode_t
 *
	mªsu…
);

194 
boﬁ
 (*
v›_is£ekabÀ
)(
vnode
 *
	mobje˘
);

195 (*
	mv›_fsync
)(
vnode
 *
	mobje˘
);

196 (*
	mv›_mm≠
)(
vnode
 *
	mfûe
 );

197 (*
	mv›_åunˇã
)(
vnode
 *
	mfûe
, 
off_t
 
	mÀn
);

198 (*
	mv›_«mefûe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

201 (*
	mv›_¸ót
)(
vnode
 *
	mdú
,

202 c⁄° *
	m«me
, 
boﬁ
 
	mex˛
, 
mode_t
 
	mmode
,

203 
vnode
 **
	mªsu…
);

204 (*
	mv›_symlök
)(
vnode
 *
	mdú
,

205 c⁄° *
	mc⁄ã¡s
, c⁄° *
	m«me
);

206 (*
	mv›_mkdú
)(
vnode
 *
	m∑ª¡dú
,

207 c⁄° *
	m«me
, 
mode_t
 
	mmode
);

208 (*
	mv›_lök
)(
vnode
 *
	mdú
,

209 c⁄° *
	m«me
, 
vnode
 *
	mfûe
);

210 (*
	mv›_ªmove
)(
vnode
 *
	mdú
,

211 c⁄° *
	m«me
);

212 (*
	mv›_rmdú
)(
vnode
 *
	mdú
,

213 c⁄° *
	m«me
);

215 (*
	mv›_ª«me
)(
vnode
 *
	mvn1
, c⁄° *
	m«me1
,

216 
vnode
 *
	mvn2
, c⁄° *
	m«me2
);

219 (*
	mv›_lookup
)(
vnode
 *
	mdú
,

220 *
	m∑th«me
, 
vnode
 **
	mªsu…
);

221 (*
	mv›_look∑ª¡
)(
vnode
 *
	mdú
,

222 *
	m∑th«me
, 
vnode
 **
	mªsu…
,

223 *
	mbuf
, 
size_t
 
	mÀn
);

226 
	#__VOP
(
vn
, 
sym
Ë(
	`vnode_check
(vn, #sym), (vn)->
vn_›s
->
v›_
##sym)

	)

228 
	#VOP_EACHOPEN
(
vn
, 
Êags
Ë(
	`__VOP
(vn, 
óch›í
)(vn, fœgs))

	)

229 
	#VOP_RECLAIM
(
vn
Ë(
	`__VOP
(vn, 
ª˛aim
)(vn))

	)

231 
	#VOP_READ
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªad
)(vn, uio))

	)

232 
	#VOP_READLINK
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªadlök
)(vn, uio))

	)

233 
	#VOP_GETDIRENTRY
(
vn
, 
uio
Ë(
	`__VOP
(vn,
gëdúíåy
)(vn, uio))

	)

234 
	#VOP_WRITE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
wrôe
)(vn, uio))

	)

235 
	#VOP_IOCTL
(
vn
, 
code
, 
buf
Ë(
	`__VOP
(vn, 
io˘l
)(vn,code,buf))

	)

236 
	#VOP_STAT
(
vn
, 
±r
Ë(
	`__VOP
(vn, 
°©
)(vn,Öå))

	)

237 
	#VOP_GETTYPE
(
vn
, 
ªsu…
Ë(
	`__VOP
(vn, 
gëty≥
)(vn,Ñesu…))

	)

238 
	#VOP_ISSEEKABLE
(
vn
Ë(
	`__VOP
(vn, 
is£ekabÀ
)(vn))

	)

239 
	#VOP_FSYNC
(
vn
Ë(
	`__VOP
(vn, 
fsync
)(vn))

	)

240 
	#VOP_MMAP
(
vn
 ) (
	`__VOP
(vn, 
mm≠
)(v¿ ))

	)

241 
	#VOP_TRUNCATE
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åunˇã
)(vn,Öos))

	)

242 
	#VOP_NAMEFILE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
«mefûe
)(vn, uio))

	)

244 
	#VOP_CREAT
(
vn
,
nm
,
ex˛
,
mode
,
ªs
Ë(
	`__VOP
(vn, 
¸ót
)(vn,nm,ex˛,mode,ªs))

	)

245 
	#VOP_SYMLINK
(
vn
, 
«me
, 
c⁄ã¡
Ë(
	`__VOP
(vn, 
symlök
)(vn,Çame, c⁄ã¡))

	)

246 
	#VOP_MKDIR
(
vn
, 
«me
, 
mode
Ë(
	`__VOP
(vn, 
mkdú
)(vn,Çame, mode))

	)

247 
	#VOP_LINK
(
vn
, 
«me
, 
vn2
Ë(
	`__VOP
(vn, 
lök
)(vn,Çame, vn2))

	)

248 
	#VOP_REMOVE
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
ªmove
)(vn,Çame))

	)

249 
	#VOP_RMDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
rmdú
)(vn,Çame))

	)

250 
	#VOP_RENAME
(
vn1
,
«me1
,
vn2
,
«me2
)(
	`__VOP
(vn1,
ª«me
)(vn1,«me1,vn2,«me2))

	)

252 
	#VOP_LOOKUP
(
vn
, 
«me
, 
ªs
Ë(
	`__VOP
(vn, 
lookup
)(vn,Çame,Ñes))

	)

253 
	#VOP_LOOKPARENT
(
vn
,
nm
,
ªs
,
bf
,
 
Ë(
	`__VOP
(vn,
look∑ª¡
)(vn,nm,ªs,bf, ))

	)

258 
vnode_check
(
vnode
 *, c⁄° *
›
);

263 
vnode_ö¸ef
(
vnode
 *);

264 
vnode_de¸ef
(
vnode
 *);

266 
	#VOP_INCREF
(
vn
Ë
	`vnode_ö¸ef
(vn)

	)

267 
	#VOP_DECREF
(
vn
Ë
	`vnode_de¸ef
(vn)

	)

273 
vnode_öô
(
vnode
 *, c⁄° 
vnode_›s
 *
›s
,

274 
fs
 *fs, *
fsd©a
);

280 
vnode_˛ónup
(
vnode
 *);

285 
v›Áû_uio_nŸdú
(
vnode
 *
vn
, 
uio
 *uio);

286 
v›Áû_uio_isdú
(
vnode
 *
vn
, 
uio
 *uio);

287 
v›Áû_uio_övÆ
(
vnode
 *
vn
, 
uio
 *uio);

288 
v›Áû_uio_nosys
(
vnode
 *
vn
, 
uio
 *uio);

289 
v›Áû_mm≠_isdú
(
vnode
 *
vn
 );

290 
v›Áû_mm≠_≥rm
(
vnode
 *
vn
 );

291 
v›Áû_mm≠_nosys
(
vnode
 *
vn
 );

292 
v›Áû_åunˇã_isdú
(
vnode
 *
vn
, 
off_t
 
pos
);

293 
v›Áû_¸ót_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
boﬁ
 
ex˛
,

294 
mode_t
 
mode
, 
vnode
 **
ªsu…
);

295 
v›Áû_symlök_nŸdú
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

296 c⁄° *
«me
);

297 
v›Áû_symlök_nosys
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

298 c⁄° *
«me
);

299 
v›Áû_mkdú_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
);

300 
v›Áû_mkdú_nosys
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
);

301 
v›Áû_lök_nŸdú
(
vnode
 *
dú
, c⁄° *
«me
,

302 
vnode
 *
fûe
);

303 
v›Áû_lök_nosys
(
vnode
 *
dú
, c⁄° *
«me
,

304 
vnode
 *
fûe
);

305 
v›Áû_°rög_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
);

306 
v›Áû_°rög_nosys
(
vnode
 *
vn
, c⁄° *
«me
);

307 
v›Áû_ª«me_nŸdú
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

308 
vnode
 *
todú
, c⁄° *
t⁄ame
);

309 
v›Áû_ª«me_nosys
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

310 
vnode
 *
todú
, c⁄° *
t⁄ame
);

311 
v›Áû_lookup_nŸdú
(
vnode
 *
vn
, *
∑th
, vnodê**
ªsu…
);

312 
v›Áû_look∑ª¡_nŸdú
(
vnode
 *
vn
, *
∑th
,

313 
vnode
 **
ªsu…
, *
buf
, 
size_t
 
Àn
);

	@kern/include/wchan.h

30 #i‚de‡
_WCHAN_H_


31 
	#_WCHAN_H_


	)

38 
	g•ölock
;

39 
	gwch™
;

46 
wch™
 *
wch™_¸óã
(c⁄° *
«me
);

51 
wch™_de°roy
(
wch™
 *
wc
);

57 
boﬁ
 
wch™_i£m±y
(
wch™
 *
wc
, 
•ölock
 *
lk
);

67 
wch™_¶ìp
(
wch™
 *
wc
, 
•ölock
 *
lk
);

76 
wch™_wake⁄e
(
wch™
 *
wc
, 
•ölock
 *
lk
);

77 
wch™_wakóŒ
(
wch™
 *
wc
, 
•ölock
 *
lk
);

	@kern/lib/array.c

30 
	#ARRAYINLINE


	)

32 
	~<ty≥s.h
>

33 
	~<kîn/î∫o.h
>

34 
	~<lib.h
>

35 
	~<¨øy.h
>

37 
¨øy
 *

38 
	$¨øy_¸óã
()

40 
¨øy
 *
a
;

42 
a
 = 
	`kmÆloc
((*a));

43 i‡(
a
 !
NULL
) {

44 
	`¨øy_öô
(
a
);

46  
a
;

47 
	}
}

50 
	$¨øy_de°roy
(
¨øy
 *
a
)

52 
	`¨øy_˛ónup
(
a
);

53 
	`k‰ì
(
a
);

54 
	}
}

57 
	$¨øy_öô
(
¨øy
 *
a
)

59 
a
->
num
 =á->
max
 = 0;

60 
a
->
v
 = 
NULL
;

61 
	}
}

64 
	$¨øy_˛ónup
(
¨øy
 *
a
)

71 
	`ARRAYASSERT
(
a
->
num
 == 0);

72 
	`k‰ì
(
a
->
v
);

73 #ifde‡
ARRAYS_CHECKED


74 
a
->
v
 = 
NULL
;

76 
	}
}

79 
	$¨øy_¥óŒoˇã
(
¨øy
 *
a
, 
num
)

81 **
√w±r
;

82 
√wmax
;

84 i‡(
num
 > 
a
->
max
) {

86 
√wmax
 = 
a
->
max
;

87 
num
 > 
√wmax
) {

88 
√wmax
 =Çewmax ?Çewmax*2 : 4;

98 
√w±r
 = 
	`kmÆloc
(
√wmax
*(*
a
->
v
));

99 i‡(
√w±r
 =
NULL
) {

100  
ENOMEM
;

102 
	`mem˝y
(
√w±r
, 
a
->
v
,á->
num
*(*a->v));

103 
	`k‰ì
(
a
->
v
);

104 
a
->
v
 = 
√w±r
;

105 
a
->
max
 = 
√wmax
;

108 
	}
}

111 
	$¨øy_£tsize
(
¨øy
 *
a
, 
num
)

113 
ªsu…
;

115 
ªsu…
 = 
	`¨øy_¥óŒoˇã
(
a
, 
num
);

116 i‡(
ªsu…
) {

117  
ªsu…
;

119 
a
->
num
 =Çum;

122 
	}
}

125 
	$¨øy_ªmove
(
¨øy
 *
a
, 
ödex
)

127 
num_to_move
;

129 
	`ARRAYASSERT
(
a
->
num
 <a->
max
);

130 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

132 
num_to_move
 = 
a
->
num
 - (
ödex
 + 1);

133 
	`memmove
(
a
->
v
 + 
ödex
,á->v + index+1, 
num_to_move
*(*));

134 
a
->
num
--;

135 
	}
}

	@kern/lib/bitmap.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

46 
	#BITS_PER_WORD
 (
CHAR_BIT
)

	)

47 
	#WORD_TYPE
 

	)

48 
	#WORD_ALLBITS
 (0xff)

	)

50 
	sbôm≠
 {

51 
	mnbôs
;

52 
WORD_TYPE
 *
	mv
;

56 
bôm≠
 *

57 
	$bôm≠_¸óã
(
nbôs
)

59 
bôm≠
 *
b
;

60 
w‹ds
;

62 
w‹ds
 = 
	`DIVROUNDUP
(
nbôs
, 
BITS_PER_WORD
);

63 
b
 = 
	`kmÆloc
((
bôm≠
));

64 i‡(
b
 =
NULL
) {

65  
NULL
;

67 
b
->
v
 = 
	`kmÆloc
(
w‹ds
*(
WORD_TYPE
));

68 i‡(
b
->
v
 =
NULL
) {

69 
	`k‰ì
(
b
);

70  
NULL
;

73 
	`bzîo
(
b
->
v
, 
w‹ds
*(
WORD_TYPE
));

74 
b
->
nbôs
 =Çbits;

77 i‡(
w‹ds
 > 
nbôs
 / 
BITS_PER_WORD
) {

78 
j
, 
ix
 = 
w‹ds
-1;

79 
ovîbôs
 = 
nbôs
 - 
ix
*
BITS_PER_WORD
;

81 
	`KASSERT
(
nbôs
 / 
BITS_PER_WORD
 =
w‹ds
-1);

82 
	`KASSERT
(
ovîbôs
 > 0 && ovîbô†< 
BITS_PER_WORD
);

84 
j
=
ovîbôs
; j<
BITS_PER_WORD
; j++) {

85 
b
->
v
[
ix
] |((
WORD_TYPE
)1 << 
j
);

89  
b
;

90 
	}
}

93 
	$bôm≠_gëd©a
(
bôm≠
 *
b
)

95  
b
->
v
;

96 
	}
}

99 
	$bôm≠_Æloc
(
bôm≠
 *
b
, *
ödex
)

101 
ix
;

102 
maxix
 = 
	`DIVROUNDUP
(
b
->
nbôs
, 
BITS_PER_WORD
);

103 
off£t
;

105 
ix
=0; ix<
maxix
; ix++) {

106 i‡(
b
->
v
[
ix
]!=
WORD_ALLBITS
) {

107 
off£t
 = 0; off£à< 
BITS_PER_WORD
; offset++) {

108 
WORD_TYPE
 
mask
 = ((WORD_TYPE)1Ë<< 
off£t
;

110 i‡((
b
->
v
[
ix
] & 
mask
)==0) {

111 
b
->
v
[
ix
] |
mask
;

112 *
ödex
 = (
ix
*
BITS_PER_WORD
)+
off£t
;

113 
	`KASSERT
(*
ödex
 < 
b
->
nbôs
);

117 
	`KASSERT
(0);

120  
ENOSPC
;

121 
	}
}

124 
ölöe


126 
	$bôm≠_å™¶©e
(
bôno
, *
ix
, 
WORD_TYPE
 *
mask
)

128 
off£t
;

129 *
ix
 = 
bôno
 / 
BITS_PER_WORD
;

130 
off£t
 = 
bôno
 % 
BITS_PER_WORD
;

131 *
mask
 = ((
WORD_TYPE
)1Ë<< 
off£t
;

132 
	}
}

135 
	$bôm≠_m¨k
(
bôm≠
 *
b
, 
ödex
)

137 
ix
;

138 
WORD_TYPE
 
mask
;

140 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

141 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

143 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)==0);

144 
b
->
v
[
ix
] |
mask
;

145 
	}
}

148 
	$bôm≠_unm¨k
(
bôm≠
 *
b
, 
ödex
)

150 
ix
;

151 
WORD_TYPE
 
mask
;

153 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

154 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

156 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)!=0);

157 
b
->
v
[
ix
] &~
mask
;

158 
	}
}

162 
	$bôm≠_is£t
(
bôm≠
 *
b
, 
ödex
)

164 
ix
;

165 
WORD_TYPE
 
mask
;

167 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

168  (
b
->
v
[
ix
] & 
mask
);

169 
	}
}

172 
	$bôm≠_de°roy
(
bôm≠
 *
b
)

174 
	`k‰ì
(
b
->
v
);

175 
	`k‰ì
(
b
);

176 
	}
}

	@kern/lib/bswap.c

30 
	~<ty≥s.h
>

31 
	~<ídün.h
>

46 
uöt16_t


47 
	$bsw≠16
(
uöt16_t
 
vÆ
)

49  ((
vÆ
 & 0x00ff) << 8)

50 | ((
vÆ
 & 0xff00) >> 8);

51 
	}
}

53 
uöt32_t


54 
	$bsw≠32
(
uöt32_t
 
vÆ
)

56  ((
vÆ
 & 0x000000ff) << 24)

57 | ((
vÆ
 & 0x0000ff00) << 8)

58 | ((
vÆ
 & 0x00ff0000) >> 8)

59 | ((
vÆ
 & 0xff000000) >> 24);

60 
	}
}

62 
uöt64_t


63 
	$bsw≠64
(
uöt64_t
 
vÆ
)

65  ((
vÆ
 & 0x00000000000000ff) << 56)

66 | ((
vÆ
 & 0x000000000000ff00) << 40)

67 | ((
vÆ
 & 0x0000000000ff0000) << 24)

68 | ((
vÆ
 & 0x00000000ff000000) << 8)

69 | ((
vÆ
 & 0x000000ff00000000) << 8)

70 | ((
vÆ
 & 0x0000ff0000000000) << 24)

71 | ((
vÆ
 & 0x00ff000000000000) >> 40)

72 | ((
vÆ
 & 0xff00000000000000) >> 56);

73 
	}
}

94 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


95 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

96 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(val); } \

97 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(vÆ); }

	)

105 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


106 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

107 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
) {  val; } \

108 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  vÆ; }

	)

111 #i‡
_BYTE_ORDER
 =
_PDP_ENDIAN


115 #i‚de‡
TO


119 
	$TO
(
s
, 16, 
uöt16_t
)

120 
	$TO
(
l
, 32, 
uöt32_t
)

121 
	$TO
(
Œ
, 64, 
uöt64_t
)

138 
	$joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
)

140 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


141 *
y2
 = ((
uöt64_t
)
x1
 << 32Ë| (uöt64_t)
x2
;

142 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


143 *
y2
 = (
uöt64_t
)
x1
 | ((uöt64_t)
x2
 << 32);

147 
	}
}

150 
	$•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
)

152 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


153 *
y1
 = 
x
 >> 32;

154 *
y2
 = 
x
 & 0xffffffff;

155 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


156 *
y1
 = 
x
 & 0xffffffff;

157 *
y2
 = 
x
 >> 32;

161 
	}
}

	@kern/lib/kgets.c

31 
	~<ty≥s.h
>

32 
	~<lib.h
>

41 
	$back•
()

43 
	`putch
('\b');

44 
	`putch
(' ');

45 
	`putch
('\b');

46 
	}
}

54 
	$kgës
(*
buf
, 
size_t
 
maxÀn
)

56 
size_t
 
pos
 = 0;

57 
ch
;

60 
ch
 = 
	`gëch
();

61 i‡(
ch
=='\n' || ch=='\r') {

62 
	`putch
('\n');

67 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
-1) {

68 
	`putch
(
ch
);

69 
buf
[
pos
++] = 
ch
;

71 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

73 
	`back•
();

74 
pos
--;

76 i‡(
ch
==3) {

78 
	`putch
('^');

79 
	`putch
('C');

80 
	`putch
('\n');

81 
pos
 = 0;

84 i‡(
ch
==18) {

86 
buf
[
pos
] = 0;

87 
	`k¥ötf
("^R\n%s", 
buf
);

89 i‡(
ch
==21) {

91 
pos
 > 0) {

92 
	`back•
();

93 
pos
--;

96 i‡(
ch
==23) {

98 
pos
 > 0 && 
buf
[pos-1]==' ') {

99 
	`back•
();

100 
pos
--;

102 
pos
 > 0 && 
buf
[pos-1]!=' ') {

103 
	`back•
();

104 
pos
--;

108 
	`bìp
();

112 
buf
[
pos
] = 0;

113 
	}
}

	@kern/lib/kprintf.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<°d¨g.h
>

33 
	~<lib.h
>

34 
	~<•l.h
>

35 
	~<˝u.h
>

36 
	~<thªad.h
>

37 
	~<cuºít.h
>

38 
	~<synch.h
>

39 
	~<maöbus.h
>

40 
	~<vfs.h
>

44 
uöt32_t
 
	gdbÊags
 = 0;

47 
lock
 *
	gk¥ötf_lock
;

50 
•ölock
 
	gk¥ötf_•ölock
;

64 
	$k¥ötf_boŸ°øp
()

66 
	`KASSERT
(
k¥ötf_lock
 =
NULL
);

68 
k¥ötf_lock
 = 
	`lock_¸óã
("kprintf_lock");

69 i‡(
k¥ötf_lock
 =
NULL
) {

70 
	`∑nic
("CouldÇot create kprintf_lock\n");

72 
	`•ölock_öô
(&
k¥ötf_•ölock
);

73 
	}
}

80 
	$c⁄sﬁe_£nd
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

82 
size_t
 
i
;

84 ()
junk
;

86 
i
=0; i<
Àn
; i++) {

87 
	`putch
(
d©a
[
i
]);

89 
	}
}

95 
	$k¥ötf
(c⁄° *
fmt
, ...)

97 
ch¨s
;

98 
va_li°
 
≠
;

99 
boﬁ
 
dﬁock
;

101 
dﬁock
 = 
k¥ötf_lock
 !
NULL


102 && 
cuπhªad
->
t_ö_öãºu±
 =
Ál£


103 && 
cuπhªad
->
t_cur•l
 == 0

104 && 
cur˝u
->
c_•ölocks
 == 0;

106 i‡(
dﬁock
) {

107 
	`lock_acquúe
(
k¥ötf_lock
);

110 
	`•ölock_acquúe
(&
k¥ötf_•ölock
);

113 
	`va_°¨t
(
≠
, 
fmt
);

114 
ch¨s
 = 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

115 
	`va_íd
(
≠
);

117 i‡(
dﬁock
) {

118 
	`lock_ªÀa£
(
k¥ötf_lock
);

121 
	`•ölock_ªÀa£
(&
k¥ötf_•ölock
);

124  
ch¨s
;

125 
	}
}

133 
	$∑nic
(c⁄° *
fmt
, ...)

135 
va_li°
 
≠
;

148 vﬁ©ûê
evû
;

150 i‡(
evû
 == 0) {

151 
evû
 = 1;

159 
	`•lhigh
();

162 i‡(
evû
 == 1) {

163 
evû
 = 2;

166 
	`thªad_∑nic
();

169 i‡(
evû
 == 2) {

170 
evû
 = 3;

173 
	`k¥ötf
("panic: ");

174 
	`va_°¨t
(
≠
, 
fmt
);

175 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

176 
	`va_íd
(
≠
);

179 i‡(
evû
 == 3) {

180 
evû
 = 4;

183 
	`vfs_sync
();

186 i‡(
evû
 == 4) {

187 
evû
 = 5;

190 
	`maöbus_∑nic
();

198 
	}
}

204 
	$badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
)

206 
	`∑nic
("Assertion failed: %s,át %s:%d (%s)\n",

207 
ex¥
, 
fûe
, 
löe
, 
func
);

208 
	}
}

	@kern/lib/misc.c

30 
	~<ty≥s.h
>

31 
	~<kîn/îrmsg.h
>

32 
	~<lib.h
>

38 
	$k°rdup
(c⁄° *
s
)

40 *
z
;

42 
z
 = 
	`kmÆloc
(
	`°æí
(
s
)+1);

43 i‡(
z
 =
NULL
) {

44  
NULL
;

46 
	`°r˝y
(
z
, 
s
);

47  
z
;

48 
	}
}

55 
	$°ªº‹
(
îrcode
)

57 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

58  
sys_îæi°
[
îrcode
];

60 
	`∑nic
("InvÆidÉº‹ codê%d\n", 
îrcode
);

61  
NULL
;

62 
	}
}

	@kern/lib/time.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

37 
	$time•ec_add
(c⁄° 
time•ec
 *
ts1
,

38 c⁄° 
time•ec
 *
ts2
,

39 
time•ec
 *
ªt
)

41 
ªt
->
tv_n£c
 = 
ts1
->tv_n£¯+ 
ts2
->tv_nsec;

42 
ªt
->
tv_£c
 = 
ts1
->tv_£¯+ 
ts2
->tv_sec;

43 i‡(
ªt
->
tv_n£c
 >= 1000000000) {

44 
ªt
->
tv_n£c
 -= 1000000000;

45 
ªt
->
tv_£c
 += 1;

47 
	}
}

53 
	$time•ec_sub
(c⁄° 
time•ec
 *
ts1
,

54 c⁄° 
time•ec
 *
ts2
,

55 
time•ec
 *
ªt
)

58 
time•ec
 
r
;

60 
r
 = *
ts1
;

61 i‡(
r
.
tv_n£c
 < 
ts2
->tv_nsec) {

62 
r
.
tv_n£c
 += 1000000000;

63 
r
.
tv_£c
--;

66 
r
.
tv_n£c
 -
ts2
->tv_nsec;

67 
r
.
tv_£c
 -
ts2
->tv_sec;

68 *
ªt
 = 
r
;

69 
	}
}

	@kern/lib/uio.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<uio.h
>

33 
	~<¥oc.h
>

34 
	~<cuºít.h
>

35 
	~<c›yöout.h
>

42 
	$uiomove
(*
±r
, 
size_t
 
n
, 
uio
 *uio)

44 
iovec
 *
iov
;

45 
size_t
 
size
;

46 
ªsu…
;

48 i‡(
uio
->
uio_rw
 !
UIO_READ
 && uio->uio_rw !
UIO_WRITE
) {

49 
	`∑nic
("uiomove: InvÆid uio_rw %d\n", (Ë
uio
->
uio_rw
);

51 i‡(
uio
->
uio_£gÊg
==
UIO_SYSSPACE
) {

52 
	`KASSERT
(
uio
->
uio_•a˚
 =
NULL
);

55 
	`KASSERT
(
uio
->
uio_•a˚
 =
	`¥oc_gëas
());

58 
n
 > 0 && 
uio
->
uio_ªsid
 > 0) {

60 
iov
 = 
uio
->
uio_iov
;

61 
size
 = 
iov
->
iov_Àn
;

63 i‡(
size
 > 
n
) {

64 
size
 = 
n
;

67 i‡(
size
 == 0) {

69 
uio
->
uio_iov
++;

70 
uio
->
uio_iov˙t
--;

71 i‡(
uio
->
uio_iov˙t
 == 0) {

78 
	`∑nic
("uiomove:Ñan out of buffers\n");

83 
uio
->
uio_£gÊg
) {

84 
UIO_SYSSPACE
:

85 
ªsu…
 = 0;

86 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

87 
	`memmove
(
iov
->
iov_kba£
, 
±r
, 
size
);

90 
	`memmove
(
±r
, 
iov
->
iov_kba£
, 
size
);

92 
iov
->
iov_kba£
 = ((*)iov->iov_kba£+
size
);

94 
UIO_USERSPACE
:

95 
UIO_USERISPACE
:

96 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

97 
ªsu…
 = 
	`c›yout
(
±r
, 
iov
->
iov_uba£
,
size
);

100 
ªsu…
 = 
	`c›yö
(
iov
->
iov_uba£
, 
±r
, 
size
);

102 i‡(
ªsu…
) {

103  
ªsu…
;

105 
iov
->
iov_uba£
 +
size
;

108 
	`∑nic
("uiomove: Invalid uio_segflg %d\n",

109 ()
uio
->
uio_£gÊg
);

112 
iov
->
iov_Àn
 -
size
;

113 
uio
->
uio_ªsid
 -
size
;

114 
uio
->
uio_off£t
 +
size
;

115 
±r
 = ((*Ìå + 
size
);

116 
n
 -
size
;

120 
	}
}

123 
	$uiomovezîos
(
size_t
 
n
, 
uio
 *uio)

126 
zîos
[16];

127 
size_t
 
amt
;

128 
ªsu…
;

131 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

133 
n
 > 0) {

134 
amt
 = (
zîos
);

135 i‡(
amt
 > 
n
) {

136 
amt
 = 
n
;

138 
ªsu…
 = 
	`uiomove
(
zîos
, 
amt
, 
uio
);

139 i‡(
ªsu…
) {

140  
ªsu…
;

142 
n
 -
amt
;

146 
	}
}

153 
	$uio_köô
(
iovec
 *
iov
, 
uio
 *
u
,

154 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
)

156 
iov
->
iov_kba£
 = 
kbuf
;

157 
iov
->
iov_Àn
 = 
Àn
;

158 
u
->
uio_iov
 = 
iov
;

159 
u
->
uio_iov˙t
 = 1;

160 
u
->
uio_off£t
 = 
pos
;

161 
u
->
uio_ªsid
 = 
Àn
;

162 
u
->
uio_£gÊg
 = 
UIO_SYSSPACE
;

163 
u
->
uio_rw
 = 
rw
;

164 
u
->
uio_•a˚
 = 
NULL
;

165 
	}
}

	@kern/main/main.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/ªboŸ.h
>

37 
	~<kîn/uni°d.h
>

38 
	~<lib.h
>

39 
	~<•l.h
>

40 
	~<˛ock.h
>

41 
	~<thªad.h
>

42 
	~<¥oc.h
>

43 
	~<cuºít.h
>

44 
	~<synch.h
>

45 
	~<vm.h
>

46 
	~<maöbus.h
>

47 
	~<vfs.h
>

48 
	~<devi˚.h
>

49 
	~<sysˇŒ.h
>

50 
	~<ã°.h
>

51 
	~<vîsi⁄.h
>

52 
	~"autoc⁄f.h
"

64 c⁄° 
buûdvîsi⁄
;

65 c⁄° 
buûdc⁄fig
[];

70 c⁄° 
	gh¨v¨d_c›yright
[] =

80 
	$boŸ
()

99 
	`k¥ötf
("\n");

100 
	`k¥ötf
("OS/161 ba£ sy°em vîsi⁄ %s\n", 
BASE_VERSION
);

101 
	`k¥ötf
("%s", 
h¨v¨d_c›yright
);

102 
	`k¥ötf
("\n");

104 
	`k¥ötf
("Put-your-group-name-here's system version %s (%s #%d)\n",

105 
GROUP_VERSION
, 
buûdc⁄fig
, 
buûdvîsi⁄
);

106 
	`k¥ötf
("\n");

109 
	`øm_boŸ°øp
();

110 
	`¥oc_boŸ°øp
();

111 
	`thªad_boŸ°øp
();

112 
	`h¨d˛ock_boŸ°øp
();

113 
	`vfs_boŸ°øp
();

114 
	`khóp_√xtgíî©i⁄
();

117 
	`k¥ötf
("DeviceÖrobe...\n");

118 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

119 
	`maöbus_boŸ°øp
();

120 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

122 
	`p£udoc⁄fig
();

123 
	`k¥ötf
("\n");

124 
	`khóp_√xtgíî©i⁄
();

127 
	`vm_boŸ°øp
();

128 
	`k¥ötf_boŸ°øp
();

129 
	`thªad_°¨t_˝us
();

132 
	`vfs_£tboŸfs
("emu0");

134 
	`khóp_√xtgíî©i⁄
();

139 
	`COMPILE_ASSERT
((
u£Ωå_t
) == (*));

140 
	`COMPILE_ASSERT
((*(
u£Ωå_t
)0) == ());

141 
	}
}

148 
	$shutdown
()

151 
	`k¥ötf
("Shutting down.\n");

153 
	`vfs_˛órboŸfs
();

154 
	`vfs_˛órcurdú
();

155 
	`vfs_unmou¡Æl
();

157 
	`thªad_shutdown
();

159 
	`•lhigh
();

160 
	}
}

172 
	$sys_ªboŸ
(
code
)

174 
code
) {

175 
RB_REBOOT
:

176 
RB_HALT
:

177 
RB_POWEROFF
:

180  
EINVAL
;

183 
	`shutdown
();

185 
code
) {

186 
RB_HALT
:

187 
	`k¥ötf
("The system is halted.\n");

188 
	`maöbus_hÆt
();

190 
RB_REBOOT
:

191 
	`k¥ötf
("Rebooting...\n");

192 
	`maöbus_ªboŸ
();

194 
RB_POWEROFF
:

195 
	`k¥ötf
("The system is halted.\n");

196 
	`maöbus_powîoff
();

200 
	`∑nic
("reboot operation failed\n");

202 
	}
}

209 
	$kmaö
(*
¨gumíts
)

211 
	`boŸ
();

213 
	`míu
(
¨gumíts
);

216 
	}
}

	@kern/main/menu.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/ªboŸ.h
>

33 
	~<kîn/uni°d.h
>

34 
	~<limôs.h
>

35 
	~<lib.h
>

36 
	~<uio.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<¥oc.h
>

40 
	~<vfs.h
>

41 
	~<sfs.h
>

42 
	~<sysˇŒ.h
>

43 
	~<ã°.h
>

44 
	~"›t-sfs.h
"

45 
	~"›t-√t.h
"

51 
	#_PATH_SHELL
 "/bö/sh"

	)

53 
	#MAXMENUARGS
 16

	)

72 
	$cmd_¥ogthªad
(*
±r
, 
«rgs
)

74 **
¨gs
 = 
±r
;

75 
¥og«me
[128];

76 
ªsu…
;

78 
	`KASSERT
(
«rgs
 >= 1);

80 i‡(
«rgs
 > 2) {

81 
	`k¥ötf
("Warning:árgumentÖassing from menuÇot supported\n");

85 
	`KASSERT
(
	`°æí
(
¨gs
[0]Ë< (
¥og«me
));

87 
	`°r˝y
(
¥og«me
, 
¨gs
[0]);

89 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
);

90 i‡(
ªsu…
) {

91 
	`k¥ötf
("Ru¬ögÖrogøm %†Áûed: %s\n", 
¨gs
[0],

92 
	`°ªº‹
(
ªsu…
));

97 
	}
}

113 
	$comm⁄_¥og
(
«rgs
, **
¨gs
)

115 
¥oc
 *proc;

116 
ªsu…
;

119 
¥oc
 = 
	`¥oc_¸óã_ru≈rogøm
(
¨gs
[0] );

120 i‡(
¥oc
 =
NULL
) {

121  
ENOMEM
;

124 
ªsu…
 = 
	`thªad_f‹k
(
¨gs
[0] ,

125 
¥oc
 ,

126 
cmd_¥ogthªad
 ,

127 
¨gs
 , 
«rgs
 );

128 i‡(
ªsu…
) {

129 
	`k¥ötf
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

130 
	`¥oc_de°roy
(
¥oc
);

131  
ªsu…
;

140 
	}
}

147 
	$cmd_¥og
(
«rgs
, **
¨gs
)

149 i‡(
«rgs
 < 2) {

150 
	`k¥ötf
("Usage:ÖÖrogram [arguments]\n");

151  
EINVAL
;

155 
¨gs
++;

156 
«rgs
--;

158  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

159 
	}
}

166 
	$cmd_shñl
(
«rgs
, **
¨gs
)

168 ()
¨gs
;

169 i‡(
«rgs
 != 1) {

170 
	`k¥ötf
("Usage: s\n");

171  
EINVAL
;

174 
¨gs
[0] = (*)
_PATH_SHELL
;

176  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

177 
	}
}

184 
	$cmd_chdú
(
«rgs
, **
¨gs
)

186 i‡(
«rgs
 != 2) {

187 
	`k¥ötf
("Usage: cd directory\n");

188  
EINVAL
;

191  
	`vfs_chdú
(
¨gs
[1]);

192 
	}
}

199 
	$cmd_pwd
(
«rgs
, **
¨gs
)

201 
buf
[
PATH_MAX
+1];

202 
ªsu…
;

203 
iovec
 
iov
;

204 
uio
 
ku
;

206 ()
«rgs
;

207 ()
¨gs
;

209 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-1, 0, 
UIO_READ
);

210 
ªsu…
 = 
	`vfs_gëcwd
(&
ku
);

211 i‡(
ªsu…
) {

212 
	`k¥ötf
("vfs_gëcwd faûed (%s)\n", 
	`°ªº‹
(
ªsu…
));

213  
ªsu…
;

217 
buf
[(buf)-1-
ku
.
uio_ªsid
] = 0;

220 
	`k¥ötf
("%s\n", 
buf
);

223 
	}
}

230 
	$cmd_sync
(
«rgs
, **
¨gs
)

232 ()
«rgs
;

233 ()
¨gs
;

235 
	`vfs_sync
();

238 
	}
}

245 
	$cmd_∑nic
(
«rgs
, **
¨gs
)

247 ()
«rgs
;

248 ()
¨gs
;

250 
	`∑nic
("UserÑequestedÖanic\n");

252 
	}
}

259 
	$cmd_quô
(
«rgs
, **
¨gs
)

261 ()
«rgs
;

262 ()
¨gs
;

264 
	`vfs_sync
();

265 
	`sys_ªboŸ
(
RB_POWEROFF
);

266 
	`thªad_exô
();

268 
	}
}

276 c⁄° *
	m«me
;

277 (*
	mfunc
)(c⁄° *
	mdevi˚
);

278 } 
	gmou¡èbÀ
[] = {

279 #i‡
OPT_SFS


280 { "sfs", 
sfs_mou¡
 },

286 
	$cmd_mou¡
(
«rgs
, **
¨gs
)

288 *
f°y≥
;

289 *
devi˚
;

290 
i
;

292 i‡(
«rgs
 != 3) {

293 
	`k¥ötf
("Usage: mount fstype device:\n");

294  
EINVAL
;

297 
f°y≥
 = 
¨gs
[1];

298 
devi˚
 = 
¨gs
[2];

301 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

302 
devi˚
[
	`°æí
(device)-1] = 0;

305 
i
=0; i<
	`ARRAYCOUNT
(
mou¡èbÀ
); i++) {

306 i‡(!
	`°rcmp
(
mou¡èbÀ
[
i
].
«me
, 
f°y≥
)) {

307  
mou¡èbÀ
[
i
].
	`func
(
devi˚
);

310 
	`k¥ötf
("Unknow¿fûesy°emÅy≥ %s\n", 
f°y≥
);

311  
EINVAL
;

312 
	}
}

316 
	$cmd_unmou¡
(
«rgs
, **
¨gs
)

318 *
devi˚
;

320 i‡(
«rgs
 != 2) {

321 
	`k¥ötf
("Usage: unmount device:\n");

322  
EINVAL
;

325 
devi˚
 = 
¨gs
[1];

328 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

329 
devi˚
[
	`°æí
(device)-1] = 0;

332  
	`vfs_unmou¡
(
devi˚
);

333 
	}
}

345 
	$cmd_boŸfs
(
«rgs
, **
¨gs
)

347 *
devi˚
;

349 i‡(
«rgs
 != 2) {

350 
	`k¥ötf
("Usage: bootfs device\n");

351  
EINVAL
;

354 
devi˚
 = 
¨gs
[1];

357 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

358 
devi˚
[
	`°æí
(device)-1] = 0;

361  
	`vfs_£tboŸfs
(
devi˚
);

362 
	}
}

366 
	$cmd_khóp°©s
(
«rgs
, **
¨gs
)

368 ()
«rgs
;

369 ()
¨gs
;

371 
	`khóp_¥öt°©s
();

374 
	}
}

378 
	$cmd_khópgíî©i⁄
(
«rgs
, **
¨gs
)

380 ()
«rgs
;

381 ()
¨gs
;

383 
	`khóp_√xtgíî©i⁄
();

386 
	}
}

390 
	$cmd_khópdump
(
«rgs
, **
¨gs
)

392 i‡(
«rgs
 == 1) {

393 
	`khóp_dump
();

395 i‡(
«rgs
 =2 && !
	`°rcmp
(
¨gs
[1], "all")) {

396 
	`khóp_dum∑Œ
();

399 
	`k¥ötf
("Usage: khdump [all]\n");

403 
	}
}

411 
	$showmíu
(c⁄° *
«me
, c⁄° *
x
[])

413 
˘
, 
hÆf
, 
i
;

415 
	`k¥ötf
("\n");

416 
	`k¥ötf
("%s\n", 
«me
);

418 
i
=
˘
=0; 
x
[i]; i++) {

419 
˘
++;

421 
hÆf
 = (
˘
+1)/2;

423 
i
=0; i<
hÆf
; i++) {

424 
	`k¥ötf
(" %-36s", 
x
[
i
]);

425 i‡(
i
+
hÆf
 < 
˘
) {

426 
	`k¥ötf
("%s", 
x
[
i
+
hÆf
]);

428 
	`k¥ötf
("\n");

431 
	`k¥ötf
("\n");

432 
	}
}

434 c⁄° *
	g›smíu
[] = {

446 
NULL


451 
	$cmd_›smíu
(
n
, **
a
)

453 ()
n
;

454 ()
a
;

456 
	`showmíu
("OS/161 o≥øti⁄†míu", 
›smíu
);

458 
	}
}

460 c⁄° *
	gã°míu
[] = {

471 #i‡
OPT_NET


484 
NULL


489 
	$cmd_ã°míu
(
n
, **
a
)

491 ()
n
;

492 ()
a
;

494 
	`showmíu
("OS/161Åe°†míu", 
ã°míu
);

495 
	`k¥ötf
(" (1) TheseÅests will fail until you finishÅhe "

497 
	`k¥ötf
("\n");

500 
	}
}

502 c⁄° *
	gmaömíu
[] = {

509 
NULL


514 
	$cmd_maömíu
(
n
, **
a
)

516 ()
n
;

517 ()
a
;

519 
	`showmíu
("OS/161 kî√»míu", 
maömíu
);

521 
	}
}

528 c⁄° *
	m«me
;

529 (*
	mfunc
)(
	m«rgs
, **
	m¨gs
);

530 } 
	gcmdèbÀ
[] = {

532 { "?", 
cmd_maömíu
 },

533 { "h", 
cmd_maömíu
 },

534 { "hñp", 
cmd_maömíu
 },

535 { "?o", 
cmd_›smíu
 },

536 { "?t", 
cmd_ã°míu
 },

539 { "s", 
cmd_shñl
 },

540 { "p", 
cmd_¥og
 },

541 { "mou¡", 
cmd_mou¡
 },

542 { "unmou¡", 
cmd_unmou¡
 },

543 { "boŸfs", 
cmd_boŸfs
 },

544 { "pf", 
¥ötfûe
 },

545 { "cd", 
cmd_chdú
 },

546 { "pwd", 
cmd_pwd
 },

547 { "sync", 
cmd_sync
 },

548 { "∑nic", 
cmd_∑nic
 },

549 { "q", 
cmd_quô
 },

550 { "exô", 
cmd_quô
 },

551 { "hÆt", 
cmd_quô
 },

554 { "kh", 
cmd_khóp°©s
 },

555 { "khgí", 
cmd_khópgíî©i⁄
 },

556 { "khdump", 
cmd_khópdump
 },

559 { "©", 
¨øyã°
 },

560 { "bt", 
bôm≠ã°
 },

561 { "ét", 
thªadli°ã°
 },

562 { "km1", 
mÆlo˘e°
 },

563 { "km2", 
mÆloc°ªss
 },

564 { "km3", 
mÆlo˘e°3
 },

565 { "km4", 
mÆlo˘e°4
 },

566 #i‡
OPT_NET


567 { "√t", 
√âe°
 },

569 { "â1", 
thªadã°
 },

570 { "â2", 
thªadã°2
 },

571 { "â3", 
thªadã°3
 },

572 { "sy1", 
£mã°
 },

575 { "sy2", 
lockã°
 },

576 { "sy3", 
cvã°
 },

577 { "sy4", 
cvã°2
 },

580 { "fs1", 
f°e°
 },

581 { "fs2", 
ªad°ªss
 },

582 { "fs3", 
wrôe°ªss
 },

583 { "fs4", 
wrôe°ªss2
 },

584 { "fs5", 
l⁄g°ªss
 },

585 { "fs6", 
¸óã°ªss
 },

587 { 
NULL
, NULL }

595 
	$cmd_di•©ch
(*
cmd
)

597 
time•ec
 
bef‹e
, 
a·î
, 
duøti⁄
;

598 *
¨gs
[
MAXMENUARGS
];

599 
«rgs
=0;

600 *
w‹d
;

601 *
c⁄ãxt
;

602 
i
, 
ªsu…
;

604 
w‹d
 = 
	`°πok_r
(
cmd
, " \t", &
c⁄ãxt
);

605 
w‹d
 !
NULL
;

606 
w‹d
 = 
	`°πok_r
(
NULL
, " \t", &
c⁄ãxt
)) {

608 i‡(
«rgs
 >
MAXMENUARGS
) {

609 
	`k¥ötf
("CommandÜine hasÅoo many words\n");

610  
E2BIG
;

612 
¨gs
[
«rgs
++] = 
w‹d
;

615 i‡(
«rgs
==0) {

619 
i
=0; 
cmdèbÀ
[i].
«me
; i++) {

620 i‡(*
cmdèbÀ
[
i
].
«me
 && !
	`°rcmp
(
¨gs
[0], cmdtable[i].name)) {

621 
	`KASSERT
(
cmdèbÀ
[
i
].
func
!=
NULL
);

623 
	`gëtime
(&
bef‹e
);

625 
ªsu…
 = 
cmdèbÀ
[
i
].
	`func
(
«rgs
, 
¨gs
);

627 
	`gëtime
(&
a·î
);

628 
	`time•ec_sub
(&
a·î
, &
bef‹e
, &
duøti⁄
);

630 
	`k¥ötf
("OperationÅook %llu.%09lu seconds\n",

631 (Ë
duøti⁄
.
tv_£c
,

632 (Ë
duøti⁄
.
tv_n£c
);

634  
ªsu…
;

638 
	`k¥ötf
("%s: Comm™dÇŸ found\n", 
¨gs
[0]);

639  
EINVAL
;

640 
	}
}

651 
	$míu_execuã
(*
löe
, 
ißrgs
)

653 *
comm™d
;

654 *
c⁄ãxt
;

655 
ªsu…
;

657 
comm™d
 = 
	`°πok_r
(
löe
, ";", &
c⁄ãxt
);

658 
comm™d
 !
NULL
;

659 
comm™d
 = 
	`°πok_r
(
NULL
, ";", &
c⁄ãxt
)) {

661 i‡(
ißrgs
) {

662 
	`k¥ötf
("OS/161 kî√l: %s\n", 
comm™d
);

665 
ªsu…
 = 
	`cmd_di•©ch
(
comm™d
);

666 i‡(
ªsu…
) {

667 
	`k¥ötf
("Míu comm™d faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

668 i‡(
ißrgs
) {

669 
	`∑nic
("FailureÖrocessing kernelárguments\n");

673 
	}
}

693 
	$míu
(*
¨gs
)

695 
buf
[64];

697 
	`míu_execuã
(
¨gs
, 1);

700 
	`k¥ötf
("OS/161 kernel [? for menu]: ");

701 
	`kgës
(
buf
, (buf));

702 
	`míu_execuã
(
buf
, 0);

704 
	}
}

	@kern/proc/proc.c

45 
	~<ty≥s.h
>

46 
	~<•l.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<addr•a˚.h
>

50 
	~<vnode.h
>

55 
¥oc
 *
	gk¥oc
;

61 
¥oc
 *

62 
	$¥oc_¸óã
(c⁄° *
«me
)

64 
¥oc
 *proc;

66 
¥oc
 = 
	`kmÆloc
((*proc));

67 i‡(
¥oc
 =
NULL
) {

68  
NULL
;

70 
¥oc
->
p_«me
 = 
	`k°rdup
(
«me
);

71 i‡(
¥oc
->
p_«me
 =
NULL
) {

72 
	`k‰ì
(
¥oc
);

73  
NULL
;

76 
	`thªad¨øy_öô
(&
¥oc
->
p_thªads
);

77 
	`•ölock_öô
(&
¥oc
->
p_lock
);

80 
¥oc
->
p_addr•a˚
 = 
NULL
;

83 
¥oc
->
p_cwd
 = 
NULL
;

85  
¥oc
;

86 
	}
}

95 
	$¥oc_de°roy
(
¥oc
 *proc)

105 
	`KASSERT
(
¥oc
 !
NULL
);

106 
	`KASSERT
(
¥oc
 !
k¥oc
);

115 i‡(
¥oc
->
p_cwd
) {

116 
	`VOP_DECREF
(
¥oc
->
p_cwd
);

117 
¥oc
->
p_cwd
 = 
NULL
;

121 i‡(
¥oc
->
p_addr•a˚
) {

155 
addr•a˚
 *
as
;

157 i‡(
¥oc
 =
cuΩroc
) {

158 
as
 = 
	`¥oc_£ès
(
NULL
);

159 
	`as_dó˘iv©e
();

162 
as
 = 
¥oc
->
p_addr•a˚
;

163 
¥oc
->
p_addr•a˚
 = 
NULL
;

165 
	`as_de°roy
(
as
);

168 
	`thªad¨øy_˛ónup
(&
¥oc
->
p_thªads
);

169 
	`•ölock_˛ónup
(&
¥oc
->
p_lock
);

171 
	`k‰ì
(
¥oc
->
p_«me
);

172 
	`k‰ì
(
¥oc
);

173 
	}
}

179 
	$¥oc_boŸ°øp
()

181 
k¥oc
 = 
	`¥oc_¸óã
("[kernel]");

182 i‡(
k¥oc
 =
NULL
) {

183 
	`∑nic
("proc_create for kproc failed\n");

185 
	}
}

193 
¥oc
 *

194 
	$¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
)

196 
¥oc
 *
√w¥oc
;

198 
√w¥oc
 = 
	`¥oc_¸óã
(
«me
);

199 i‡(
√w¥oc
 =
NULL
) {

200  
NULL
;

205 
√w¥oc
->
p_addr•a˚
 = 
NULL
;

214 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

215 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

216 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

217 
√w¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

219 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

221  
√w¥oc
;

222 
	}
}

234 
	$¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
)

236 
ªsu…
;

237 
•l
;

239 
	`KASSERT
(
t
->
t_¥oc
 =
NULL
);

241 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

242 
ªsu…
 = 
	`thªad¨øy_add
(&
¥oc
->
p_thªads
, 
t
, 
NULL
);

243 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

244 i‡(
ªsu…
) {

245  
ªsu…
;

247 
•l
 = 
	`•lhigh
();

248 
t
->
t_¥oc
 = 
¥oc
;

249 
	`•lx
(
•l
);

251 
	}
}

263 
	$¥oc_ªmthªad
(
thªad
 *
t
)

265 
¥oc
 *proc;

266 
i
, 
num
;

267 
•l
;

269 
¥oc
 = 
t
->
t_¥oc
;

270 
	`KASSERT
(
¥oc
 !
NULL
);

272 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

274 
num
 = 
	`thªad¨øy_num
(&
¥oc
->
p_thªads
);

275 
i
=0; i<
num
; i++) {

276 i‡(
	`thªad¨øy_gë
(&
¥oc
->
p_thªads
, 
i
Ë=
t
) {

277 
	`thªad¨øy_ªmove
(&
¥oc
->
p_thªads
, 
i
);

278 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

279 
•l
 = 
	`•lhigh
();

280 
t
->
t_¥oc
 = 
NULL
;

281 
	`•lx
(
•l
);

286 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

287 
	`∑nic
("Thªad (%pËha†esˇ≥d from it†¥o˚s†(%p)\n", 
t
, 
¥oc
);

288 
	}
}

298 
addr•a˚
 *

299 
	$¥oc_gëas
()

301 
addr•a˚
 *
as
;

302 
¥oc
 *¥o¯
cuΩroc
;

304 i‡(
¥oc
 =
NULL
) {

305  
NULL
;

308 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

309 
as
 = 
¥oc
->
p_addr•a˚
;

310 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

311  
as
;

312 
	}
}

318 
addr•a˚
 *

319 
	$¥oc_£ès
(
addr•a˚
 *
√was
)

321 
addr•a˚
 *
ﬁdas
;

322 
¥oc
 *¥o¯
cuΩroc
;

324 
	`KASSERT
(
¥oc
 !
NULL
);

326 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

327 
ﬁdas
 = 
¥oc
->
p_addr•a˚
;

328 
¥oc
->
p_addr•a˚
 = 
√was
;

329 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

330  
ﬁdas
;

331 
	}
}

	@kern/syscall/loadelf.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<¥oc.h
>

58 
	~<cuºít.h
>

59 
	~<addr•a˚.h
>

60 
	~<vnode.h
>

61 
	~<ñf.h
>

79 
	$lﬂd_£gmít
(
addr•a˚
 *
as
, 
vnode
 *
v
,

80 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

81 
size_t
 
memsize
, size_à
fûesize
,

82 
is_execuèbÀ
)

84 
iovec
 
iov
;

85 
uio
 
u
;

86 
ªsu…
;

88 i‡(
fûesize
 > 
memsize
) {

89 
	`k¥ötf
("ELF: warning: segment filesize > segment memsize\n");

90 
fûesize
 = 
memsize
;

93 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

94 (Ë
fûesize
, (Ë
vaddr
);

96 
iov
.
iov_uba£
 = (
u£Ωå_t
)
vaddr
;

97 
iov
.
iov_Àn
 = 
memsize
;

98 
u
.
uio_iov
 = &
iov
;

99 
u
.
uio_iov˙t
 = 1;

100 
u
.
uio_ªsid
 = 
fûesize
;

101 
u
.
uio_off£t
 = 
off£t
;

102 
u
.
uio_£gÊg
 = 
is_execuèbÀ
 ? 
UIO_USERISPACE
 : 
UIO_USERSPACE
;

103 
u
.
uio_rw
 = 
UIO_READ
;

104 
u
.
uio_•a˚
 = 
as
;

106 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

107 i‡(
ªsu…
) {

108  
ªsu…
;

111 i‡(
u
.
uio_ªsid
 != 0) {

113 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

114  
ENOEXEC
;

133 
size_t
 
fûœmt
;

135 
fûœmt
 = 
memsize
 - 
fûesize
;

136 i‡(
fûœmt
 > 0) {

137 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

138 (Ë
fûœmt
);

139 
u
.
uio_ªsid
 +
fûœmt
;

140 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

145  
ªsu…
;

146 
	}
}

154 
	$lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
)

156 
Elf_Ehdr
 
eh
;

157 
Elf_Phdr
 
ph
;

158 
ªsu…
, 
i
;

159 
iovec
 
iov
;

160 
uio
 
ku
;

161 
addr•a˚
 *
as
;

163 
as
 = 
	`¥oc_gëas
();

169 
	`uio_köô
(&
iov
, &
ku
, &
eh
, ”h), 0, 
UIO_READ
);

170 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

171 i‡(
ªsu…
) {

172  
ªsu…
;

175 i‡(
ku
.
uio_ªsid
 != 0) {

177 
	`k¥ötf
("ELF: shortÑead on header - fileÅruncated?\n");

178  
ENOEXEC
;

192 i‡(
eh
.
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

193 
eh
.
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

194 
eh
.
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

195 
eh
.
e_idít
[
EI_MAG3
] !
ELFMAG3
 ||

196 
eh
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
 ||

197 
eh
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
 ||

198 
eh
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
 ||

199 
eh
.
e_vîsi⁄
 !
EV_CURRENT
 ||

200 
eh
.
e_ty≥
!=
ET_EXEC
 ||

201 
eh
.
e_machöe
!=
EM_MACHINE
) {

202  
ENOEXEC
;

220 
i
=0; i<
eh
.
e_phnum
; i++) {

221 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

222 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

224 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

225 i‡(
ªsu…
) {

226  
ªsu…
;

229 i‡(
ku
.
uio_ªsid
 != 0) {

231 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

232  
ENOEXEC
;

235 
ph
.
p_ty≥
) {

236 
PT_NULL
: ;

237 
PT_PHDR
: ;

238 
PT_MIPS_REGINFO
: ;

239 
PT_LOAD
: ;

241 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

242 
ph
.
p_ty≥
);

243  
ENOEXEC
;

246 
ªsu…
 = 
	`as_deföe_ªgi⁄
(
as
,

247 
ph
.
p_vaddr
,Öh.
p_memsz
,

248 
ph
.
p_Êags
 & 
PF_R
,

249 
ph
.
p_Êags
 & 
PF_W
,

250 
ph
.
p_Êags
 & 
PF_X
);

251 i‡(
ªsu…
) {

252  
ªsu…
;

256 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
as
);

257 i‡(
ªsu…
) {

258  
ªsu…
;

265 
i
=0; i<
eh
.
e_phnum
; i++) {

266 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

267 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

269 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

274 i‡(
ku
.
uio_ªsid
 != 0) {

276 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

277  
ENOEXEC
;

280 
ph
.
p_ty≥
) {

281 
PT_NULL
: ;

282 
PT_PHDR
: ;

283 
PT_MIPS_REGINFO
: ;

284 
PT_LOAD
: ;

286 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

287 
ph
.
p_ty≥
);

288  
ENOEXEC
;

291 
ªsu…
 = 
	`lﬂd_£gmít
(
as
, 
v
, 
ph
.
p_off£t
,Öh.
p_vaddr
,

292 
ph
.
p_memsz
,Öh.
p_fûesz
,

293 
ph
.
p_Êags
 & 
PF_X
);

294 i‡(
ªsu…
) {

295  
ªsu…
;

299 
ªsu…
 = 
	`as_com∂ëe_lﬂd
(
as
);

300 i‡(
ªsu…
) {

301  
ªsu…
;

304 *
íåypoöt
 = 
eh
.
e_íåy
;

307 
	}
}

	@kern/syscall/runprogram.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<lib.h
>

40 
	~<¥oc.h
>

41 
	~<cuºít.h
>

42 
	~<addr•a˚.h
>

43 
	~<vm.h
>

44 
	~<vfs.h
>

45 
	~<sysˇŒ.h
>

46 
	~<ã°.h
>

55 
	$ru≈rogøm
(*
¥og«me
)

57 
addr•a˚
 *
as
;

58 
vnode
 *
v
;

59 
vaddr_t
 
íåypoöt
, 
°ack±r
;

60 
ªsu…
;

63 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, 0, &
v
);

64 i‡(
ªsu…
) {

65  
ªsu…
;

69 
	`KASSERT
(
	`¥oc_gëas
(Ë=
NULL
);

72 
as
 = 
	`as_¸óã
();

73 i‡(
as
 =
NULL
) {

74 
	`vfs_˛o£
(
v
);

75  
ENOMEM
;

79 
	`¥oc_£ès
(
as
);

80 
	`as_a˘iv©e
();

83 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

84 i‡(
ªsu…
) {

86 
	`vfs_˛o£
(
v
);

87  
ªsu…
;

91 
	`vfs_˛o£
(
v
);

94 
ªsu…
 = 
	`as_deföe_°ack
(
as
, &
°ack±r
);

95 i‡(
ªsu…
) {

97  
ªsu…
;

101 
	`íãr_√w_¥o˚ss
(0 , 
NULL
 ,

102 
NULL
 ,

103 
°ack±r
, 
íåypoöt
);

106 
	`∑nic
("enter_new_processÑeturned\n");

107  
EINVAL
;

108 
	}
}

	@kern/syscall/time_syscalls.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

32 
	~<c›yöout.h
>

33 
	~<sysˇŒ.h
>

39 
	$sys___time
(
u£Ωå_t
 
u£r_£c⁄ds_±r
, u£Ωå_à
u£r_«no£c⁄ds_±r
)

41 
time•ec
 
ts
;

42 
ªsu…
;

44 
	`gëtime
(&
ts
);

46 
ªsu…
 = 
	`c›yout
(&
ts
.
tv_£c
, 
u£r_£c⁄ds_±r
, (ts.tv_sec));

47 i‡(
ªsu…
) {

48  
ªsu…
;

51 
ªsu…
 = 
	`c›yout
(&
ts
.
tv_n£c
, 
u£r_«no£c⁄ds_±r
,

52 (
ts
.
tv_n£c
));

53 i‡(
ªsu…
) {

54  
ªsu…
;

58 
	}
}

	@kern/test/arraytest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<¨øy.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 73

	)

39 
	$ã°a
(
¨øy
 *
a
)

41 
ã°¨øy
[
TESTSIZE
];

42 
i
, 
j
, 
n
, 
r
, *
p
;

44 
i
=0; i<
TESTSIZE
; i++) {

45 
ã°¨øy
[
i
]=i;

48 
n
 = 
	`¨øy_num
(
a
);

49 
	`KASSERT
(
n
==0);

51 
i
=0; i<
TESTSIZE
; i++) {

52 
r
 = 
	`¨øy_add
(
a
, &
ã°¨øy
[
i
], 
NULL
);

53 
	`KASSERT
(
r
==0);

54 
n
 = 
	`¨øy_num
(
a
);

55 
	`KASSERT
(
n
==
i
+1);

57 
n
 = 
	`¨øy_num
(
a
);

58 
	`KASSERT
(
n
==
TESTSIZE
);

60 
i
=0; i<
TESTSIZE
; i++) {

61 
p
 = 
	`¨øy_gë
(
a
, 
i
);

62 
	`KASSERT
(*
p
 =
i
);

64 
n
 = 
	`¨øy_num
(
a
);

65 
	`KASSERT
(
n
==
TESTSIZE
);

67 
j
=0; j<
TESTSIZE
*4; j++) {

68 
i
 = 
	`øndom
()%
TESTSIZE
;

69 
p
 = 
	`¨øy_gë
(
a
, 
i
);

70 
	`KASSERT
(*
p
 =
i
);

72 
n
 = 
	`¨øy_num
(
a
);

73 
	`KASSERT
(
n
==
TESTSIZE
);

75 
i
=0; i<
TESTSIZE
; i++) {

76 
	`¨øy_£t
(
a
, 
i
, &
ã°¨øy
[
TESTSIZE
-i-1]);

79 
i
=0; i<
TESTSIZE
; i++) {

80 
p
 = 
	`¨øy_gë
(
a
, 
i
);

81 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

84 
r
 = 
	`¨øy_£tsize
(
a
, 
TESTSIZE
/2);

85 
	`KASSERT
(
r
==0);

87 
i
=0; i<
TESTSIZE
/2; i++) {

88 
p
 = 
	`¨øy_gë
(
a
, 
i
);

89 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

92 
	`¨øy_ªmove
(
a
, 1);

94 
i
=1; i<
TESTSIZE
/2 - 1; i++) {

95 
p
 = 
	`¨øy_gë
(
a
, 
i
);

96 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-2);

98 
p
 = 
	`¨øy_gë
(
a
, 0);

99 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

101 
	`¨øy_£tsize
(
a
, 2);

102 
p
 = 
	`¨øy_gë
(
a
, 0);

103 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

104 
p
 = 
	`¨øy_gë
(
a
, 1);

105 
	`KASSERT
(*
p
 =
TESTSIZE
-3);

107 
	`¨øy_£t
(
a
, 1, 
NULL
);

108 
	`¨øy_£tsize
(
a
, 2);

109 
p
 = 
	`¨øy_gë
(
a
, 0);

110 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

111 
p
 = 
	`¨øy_gë
(
a
, 1);

112 
	`KASSERT
(
p
==
NULL
);

114 
	`¨øy_£tsize
(
a
, 
TESTSIZE
*10);

115 
p
 = 
	`¨øy_gë
(
a
, 0);

116 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

117 
p
 = 
	`¨øy_gë
(
a
, 1);

118 
	`KASSERT
(
p
==
NULL
);

119 
	}
}

122 
	$¨øyã°
(
«rgs
, **
¨gs
)

124 
¨øy
 *
a
;

126 ()
«rgs
;

127 ()
¨gs
;

129 
	`k¥ötf
("BeginningárrayÅest...\n");

130 
a
 = 
	`¨øy_¸óã
();

131 
	`KASSERT
(
a
 !
NULL
);

133 
	`ã°a
(
a
);

135 
	`¨øy_£tsize
(
a
, 0);

137 
	`ã°a
(
a
);

139 
	`¨øy_£tsize
(
a
, 0);

140 
	`¨øy_de°roy
(
a
);

142 
	`k¥ötf
("ArrayÅest complete\n");

144 
	}
}

	@kern/test/bitmaptest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<bôm≠.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 533

	)

38 
	$bôm≠ã°
(
«rgs
, **
¨gs
)

40 
bôm≠
 *
b
;

41 
d©a
[
TESTSIZE
];

42 
uöt32_t
 
x
;

43 
i
;

45 ()
«rgs
;

46 ()
¨gs
;

48 
	`k¥ötf
("Starting bitmapÅest...\n");

50 
i
=0; i<
TESTSIZE
; i++) {

51 
d©a
[
i
] = 
	`øndom
()%2;

54 
b
 = 
	`bôm≠_¸óã
(
TESTSIZE
);

55 
	`KASSERT
(
b
 !
NULL
);

57 
i
=0; i<
TESTSIZE
; i++) {

58 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

61 
i
=0; i<
TESTSIZE
; i++) {

62 i‡(
d©a
[
i
]) {

63 
	`bôm≠_m¨k
(
b
, 
i
);

66 
i
=0; i<
TESTSIZE
; i++) {

67 i‡(
d©a
[
i
]) {

68 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

71 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

75 
i
=0; i<
TESTSIZE
; i++) {

76 i‡(
d©a
[
i
]) {

77 
	`bôm≠_unm¨k
(
b
, 
i
);

80 
	`bôm≠_m¨k
(
b
, 
i
);

83 
i
=0; i<
TESTSIZE
; i++) {

84 i‡(
d©a
[
i
]) {

85 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

88 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

92 
	`bôm≠_Æloc
(
b
, &
x
)==0) {

93 
	`KASSERT
(
x
 < 
TESTSIZE
);

94 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
x
));

95 
	`KASSERT
(
d©a
[
x
]==1);

96 
d©a
[
x
] = 0;

99 
i
=0; i<
TESTSIZE
; i++) {

100 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

101 
	`KASSERT
(
d©a
[
i
]==0);

104 
	`k¥ötf
("BitmapÅest complete\n");

106 
	}
}

	@kern/test/fstest.c

41 
	~<ty≥s.h
>

42 
	~<kîn/î∫o.h
>

43 
	~<kîn/f˙é.h
>

44 
	~<lib.h
>

45 
	~<uio.h
>

46 
	~<thªad.h
>

47 
	~<synch.h
>

48 
	~<vfs.h
>

49 
	~<fs.h
>

50 
	~<vnode.h
>

51 
	~<ã°.h
>

53 
	#SLOGAN
 "HODIE MIHI - CRAS TIBI\n"

	)

54 
	#FILENAME
 "f°e°.tmp"

	)

55 
	#NCHUNKS
 720

	)

56 
	#NTHREADS
 12

	)

57 
	#NLONG
 32

	)

58 
	#NCREATE
 24

	)

60 
£m≠h‹e
 *
	gthªad£m
 = 
NULL
;

64 
	$öô_thªad£m
()

66 i‡(
thªad£m
==
NULL
) {

67 
thªad£m
 = 
	`£m_¸óã
("fstestsem", 0);

68 i‡(
thªad£m
 =
NULL
) {

69 
	`∑nic
("fstest: sem_create failed\n");

72 
	}
}

80 
	$rŸ©e
(*
°r
, 
amt
)

82 
i
, 
ch
;

84 
amt
 = (amt+2600)%26;

85 
	`KASSERT
(
amt
>=0);

87 
i
=0; 
°r
[i]; i++) {

88 
ch
 = 
°r
[
i
];

89 i‡(
ch
>='A' && ch<='Z') {

90 
ch
 = ch - 'A';

91 
ch
 +
amt
;

92 
ch
 %= 26;

93 
ch
 = ch + 'A';

94 
	`KASSERT
(
ch
>='A' && ch<='Z');

96 
°r
[
i
] = 
ch
;

98 
	}
}

104 
	$f°e°_makíame
(*
buf
, 
size_t
 
buÊí
,

105 c⁄° *
fs
, c⁄° *
«mesuffix
)

107 
	`¢¥ötf
(
buf
, 
buÊí
, "%s:%s%s", 
fs
, 
FILENAME
, 
«mesuffix
);

108 
	`KASSERT
(
	`°æí
(
buf
Ë< 
buÊí
);

109 
	}
}

111 
	#MAKENAME
(Ë
	`f°e°_makíame
(
«me
, “ame), 
fs
, 
«mesuffix
)

	)

115 
	$f°e°_ªmove
(c⁄° *
fs
, c⁄° *
«mesuffix
)

117 
«me
[32];

118 
buf
[32];

119 
îr
;

121 
	`MAKENAME
();

123 
	`°r˝y
(
buf
, 
«me
);

124 
îr
 = 
	`vfs_ªmove
(
buf
);

125 i‡(
îr
) {

126 
	`k¥ötf
("CouldÇŸÑemovê%s: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

131 
	}
}

135 
	$f°e°_wrôe
(c⁄° *
fs
, c⁄° *
«mesuffix
,

136 
°ridesize
, 
°ridïos
)

138 
vnode
 *
vn
;

139 
îr
;

140 
i
;

141 
size_t
 
shouldbyãs
=0;

142 
size_t
 
byãs
=0;

143 
off_t
 
pos
=0;

144 
«me
[32];

145 
buf
[32];

146 
iovec
 
iov
;

147 
uio
 
ku
;

148 
Êags
;

150 
	`KASSERT
((
buf
Ë> 
	`°æí
(
SLOGAN
));

152 
	`MAKENAME
();

154 
Êags
 = 
O_WRONLY
|
O_CREAT
;

155 i‡(
°ridesize
 == 1) {

156 
Êags
 |
O_TRUNC
;

160 
	`°r˝y
(
buf
, 
«me
);

161 
îr
 = 
	`vfs_›í
(
buf
, 
Êags
, 0664, &
vn
);

162 i‡(
îr
) {

163 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

164 
«me
, 
	`°ªº‹
(
îr
));

168 
i
=0; i<
NCHUNKS
; i++) {

169 i‡(
i
 % 
°ridesize
 !
°ridïos
) {

170 
pos
 +
	`°æí
(
SLOGAN
);

173 
	`°r˝y
(
buf
, 
SLOGAN
);

174 
	`rŸ©e
(
buf
, 
i
);

175 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
pos
, 
UIO_WRITE
);

176 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

177 i‡(
îr
) {

178 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

179 
	`vfs_˛o£
(
vn
);

180 
	`vfs_ªmove
(
«me
);

184 i‡(
ku
.
uio_ªsid
 > 0) {

185 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

186 
«me
, (Ë
ku
.
uio_ªsid
);

187 
	`vfs_˛o£
(
vn
);

188 
	`vfs_ªmove
(
«me
);

192 
byãs
 +(
ku
.
uio_off£t
 - 
pos
);

193 
shouldbyãs
 +
	`°æí
(
SLOGAN
);

194 
pos
 = 
ku
.
uio_off£t
;

197 
	`vfs_˛o£
(
vn
);

199 i‡(
byãs
 !
shouldbyãs
) {

200 
	`k¥ötf
("%s: %lu bytes written, should have been %lu!\n",

201 
«me
, (Ë
byãs
,

202 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

203 
	`vfs_ªmove
(
«me
);

206 
	`k¥ötf
("%s: %lu byã†wrôãn\n", 
«me
, (Ë
byãs
);

209 
	}
}

213 
	$f°e°_ªad
(c⁄° *
fs
, c⁄° *
«mesuffix
)

215 
vnode
 *
vn
;

216 
îr
;

217 
i
;

218 
size_t
 
byãs
=0;

219 
«me
[32];

220 
buf
[32];

221 
iovec
 
iov
;

222 
uio
 
ku
;

224 
	`MAKENAME
();

227 
	`°r˝y
(
buf
, 
«me
);

228 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

229 i‡(
îr
) {

230 
	`k¥ötf
("CouldÇot openÅest file forÑead: %s\n",

231 
	`°ªº‹
(
îr
));

235 
i
=0; i<
NCHUNKS
; i++) {

236 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
byãs
, 
UIO_READ
);

237 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

238 i‡(
îr
) {

239 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

240 
	`vfs_˛o£
(
vn
);

244 i‡(
ku
.
uio_ªsid
 > 0) {

245 
	`k¥ötf
("%s: Sh‹àªad: %lu byã†À· ovî\n", 
«me
,

246 (Ë
ku
.
uio_ªsid
);

247 
	`vfs_˛o£
(
vn
);

250 
buf
[
	`°æí
(
SLOGAN
)] = 0;

251 
	`rŸ©e
(
buf
, -
i
);

252 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

253 
	`k¥ötf
("%s: Test failed:Üine %d mismatched: %s\n",

254 
«me
, 
i
+1, 
buf
);

255 
	`vfs_˛o£
(
vn
);

259 
byãs
 = 
ku
.
uio_off£t
;

262 
	`vfs_˛o£
(
vn
);

264 i‡(
byãs
 !
NCHUNKS
*
	`°æí
(
SLOGAN
)) {

265 
	`k¥ötf
("%s: %lu bytesÑead, should have been %lu!\n",

266 
«me
, (Ë
byãs
,

267 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

270 
	`k¥ötf
("%s: %lu byã†ªad\n", 
«me
, (Ë
byãs
);

272 
	}
}

278 
	$dof°e°
(c⁄° *
fûesys
)

280 
	`k¥ötf
("*** Sèπög fûesy°emÅe° o¿%s:\n", 
fûesys
);

282 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

283 
	`k¥ötf
("*** Test failed\n");

287 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

288 
	`k¥ötf
("*** Test failed\n");

292 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

293 
	`k¥ötf
("*** Test failed\n");

297 
	`k¥ötf
("*** FilesystemÅest done\n");

298 
	}
}

304 
	$ªad°ªss_thªad
(*
fs
, 
num
)

306 c⁄° *
fûesys
 = 
fs
;

307 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

308 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

310 
	`V
(
thªad£m
);

311 
	}
}

315 
	$d‹ód°ªss
(c⁄° *
fûesys
)

317 
i
, 
îr
;

319 
	`öô_thªad£m
();

321 
	`k¥ötf
("*** Sèπög f†ªad såes†ã° o¿%s:\n", 
fûesys
);

323 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

324 
	`k¥ötf
("*** Test failed\n");

328 
i
=0; i<
NTHREADS
; i++) {

329 
îr
 = 
	`thªad_f‹k
("ªad°ªss", 
NULL
,

330 
ªad°ªss_thªad
, (*)
fûesys
, 
i
);

331 i‡(
îr
) {

332 
	`∑nic
("readstress:Åhread_fork failed: %s\n",

333 
	`°ªº‹
(
îr
));

337 
i
=0; i<
NTHREADS
; i++) {

338 
	`P
(
thªad£m
);

341 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

342 
	`k¥ötf
("*** Test failed\n");

346 
	`k¥ötf
("*** fsÑead stressÅest done\n");

347 
	}
}

353 
	$wrôe°ªss_thªad
(*
fs
, 
num
)

355 c⁄° *
fûesys
 = 
fs
;

356 
num°r
[8];

357 
	`¢¥ötf
(
num°r
, “um°r), "%lu", 
num
);

359 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

360 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

361 
	`V
(
thªad£m
);

365 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

366 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

367 
	`V
(
thªad£m
);

371 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

372 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

375 
	`k¥ötf
("*** Thªad %lu: d⁄e\n", 
num
);

377 
	`V
(
thªad£m
);

378 
	}
}

382 
	$dowrôe°ªss
(c⁄° *
fûesys
)

384 
i
, 
îr
;

386 
	`öô_thªad£m
();

388 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° o¿%s:\n", 
fûesys
);

390 
i
=0; i<
NTHREADS
; i++) {

391 
îr
 = 
	`thªad_f‹k
("wrôe°ªss", 
NULL
,

392 
wrôe°ªss_thªad
, (*)
fûesys
, 
i
);

393 i‡(
îr
) {

394 
	`∑nic
("thªad_f‹k faûed %s\n", 
	`°ªº‹
(
îr
));

398 
i
=0; i<
NTHREADS
; i++) {

399 
	`P
(
thªad£m
);

402 
	`k¥ötf
("*** fs write stressÅest done\n");

403 
	}
}

409 
	$wrôe°ªss2_thªad
(*
fs
, 
num
)

411 c⁄° *
fûesys
 = 
fs
;

413 i‡(
	`f°e°_wrôe
(
fûesys
, "", 
NTHREADS
, 
num
)) {

414 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

415 
	`V
(
thªad£m
);

419 
	`V
(
thªad£m
);

420 
	}
}

424 
	$dowrôe°ªss2
(c⁄° *
fûesys
)

426 
i
, 
îr
;

427 
«me
[32];

428 
vnode
 *
vn
;

430 
	`öô_thªad£m
();

432 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° 2 o¿%s:\n", 
fûesys
);

435 
	`f°e°_makíame
(
«me
, “ame), 
fûesys
, "");

436 
îr
 = 
	`vfs_›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

437 i‡(
îr
) {

438 
	`k¥ötf
("CouldÇŸ cª©êã° fûe: %s\n", 
	`°ªº‹
(
îr
));

439 
	`k¥ötf
("*** Test failed\n");

442 
	`vfs_˛o£
(
vn
);

444 
i
=0; i<
NTHREADS
; i++) {

445 
îr
 = 
	`thªad_f‹k
("wrôe°ªss2", 
NULL
,

446 
wrôe°ªss2_thªad
, (*)
fûesys
, 
i
);

447 i‡(
îr
) {

448 
	`∑nic
("writestress2:Åhread_fork failed: %s\n",

449 
	`°ªº‹
(
îr
));

453 
i
=0; i<
NTHREADS
; i++) {

454 
	`P
(
thªad£m
);

457 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

458 
	`k¥ötf
("*** Test failed\n");

462 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

463 
	`k¥ötf
("*** Test failed\n");

467 
	`k¥ötf
("*** fs write stressÅest 2 done\n");

468 
	}
}

474 
	$l⁄g°ªss_thªad
(*
fs
, 
num
)

476 c⁄° *
fûesys
 = 
fs
;

477 
i
;

478 
num°r
[16];

480 
i
=0; i<
NLONG
; i++) {

482 
	`¢¥ötf
(
num°r
, “um°r), "%lu-%d", 
num
, 
i
);

484 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

485 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

486 
	`V
(
thªad£m
);

490 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

491 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

492 
	`V
(
thªad£m
);

496 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

497 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

498 
	`V
(
thªad£m
);

504 
	`V
(
thªad£m
);

505 
	}
}

509 
	$dﬁ⁄g°ªss
(c⁄° *
fûesys
)

511 
i
, 
îr
;

513 
	`öô_thªad£m
();

515 
	`k¥ötf
("*** Sèπög f†l⁄g såes†ã° o¿%s:\n", 
fûesys
);

517 
i
=0; i<
NTHREADS
; i++) {

518 
îr
 = 
	`thªad_f‹k
("l⁄g°ªss", 
NULL
,

519 
l⁄g°ªss_thªad
, (*)
fûesys
, 
i
);

520 i‡(
îr
) {

521 
	`∑nic
("longstress:Åhread_fork failed %s\n",

522 
	`°ªº‹
(
îr
));

526 
i
=0; i<
NTHREADS
; i++) {

527 
	`P
(
thªad£m
);

530 
	`k¥ötf
("*** fsÜong stressÅest done\n");

531 
	}
}

537 
	$¸óã°ªss_thªad
(*
fs
, 
num
)

539 c⁄° *
fûesys
 = 
fs
;

540 
i
, 
îr
;

541 
«mesuffix
[16];

542 
«me
[32];

543 
buf
[32];

544 
vnode
 *
vn
;

545 
iovec
 
iov
;

546 
uio
 
ku
;

547 
size_t
 
byãs
;

548 
numwrôãn
 = 0, 
numªad
 = 0, 
numªmoved
 = 0;

550 
i
=0; i<
NCREATE
; i++) {

551 
	`¢¥ötf
(
«mesuffix
, “amesuffix), "%lu-%d", 
num
, 
i
);

552 
	`MAKENAME
();

555 
	`°r˝y
(
buf
, 
«me
);

556 
îr
 = 
	`vfs_›í
(
buf
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

557 i‡(
îr
) {

558 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

559 
«me
, 
	`°ªº‹
(
îr
));

563 
	`°r˝y
(
buf
, 
SLOGAN
);

564 
	`rŸ©e
(
buf
, 
i
);

566 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 0, 
UIO_WRITE
);

567 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

568 
	`vfs_˛o£
(
vn
);

569 i‡(
îr
) {

570 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

573 i‡(
ku
.
uio_ªsid
 > 0) {

574 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

575 
«me
, (Ë
ku
.
uio_ªsid
);

579 
byãs
 = 
ku
.
uio_off£t
;

580 i‡(
byãs
 !
	`°æí
(
SLOGAN
)) {

581 
	`k¥ötf
("%s: %lu bytes written,Éxpected %lu!\n",

582 
«me
, (Ë
byãs
,

583 (Ë
	`°æí
(
SLOGAN
));

586 
numwrôãn
++;

588 
	`k¥ötf
("Thªad %lu: %u fûe†wrôãn\n", 
num
, 
numwrôãn
);

590 
i
=0; i<
NCREATE
; i++) {

591 
	`¢¥ötf
(
«mesuffix
, “amesuffix), "%lu-%d", 
num
, 
i
);

592 
	`MAKENAME
();

595 
	`°r˝y
(
buf
, 
«me
);

596 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

597 i‡(
îr
) {

598 
	`k¥ötf
("CouldÇot open %s forÑead: %s\n",

599 
«me
, 
	`°ªº‹
(
îr
));

603 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 0, 
UIO_READ
);

604 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

605 
	`vfs_˛o£
(
vn
);

606 i‡(
îr
) {

607 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

610 i‡(
ku
.
uio_ªsid
 > 0) {

611 
	`k¥ötf
("%s: ShortÑead: %lu bytesÜeft over\n",

612 
«me
, (Ë
ku
.
uio_ªsid
);

616 
buf
[
	`°æí
(
SLOGAN
)] = 0;

617 
	`rŸ©e
(
buf
, -
i
);

619 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

620 
	`k¥ötf
("%s: Test failed: file mismatched: %s\n",

621 
«me
, 
buf
);

625 
byãs
 = 
ku
.
uio_off£t
;

626 i‡(
byãs
 !
	`°æí
(
SLOGAN
)) {

627 
	`k¥ötf
("%s: %lu bytesÑead,Éxpected %lu!\n",

628 
«me
, (Ë
byãs
,

629 (Ë
	`°æí
(
SLOGAN
));

633 
numªad
++;

635 
	`k¥ötf
("Thªad %lu: %u fûe†ªad\n", 
num
, 
numªad
);

637 
i
=0; i<
NCREATE
; i++) {

638 
	`¢¥ötf
(
«mesuffix
, “amesuffix), "%lu-%d", 
num
, 
i
);

639 i‡(
	`f°e°_ªmove
(
fûesys
, 
«mesuffix
)) {

642 
numªmoved
++;

644 
	`k¥ötf
("Thªad %lu: %u fûe†ªmoved\n", 
num
, 
numªmoved
);

646 
	`V
(
thªad£m
);

647 
	}
}

651 
	$do¸óã°ªss
(c⁄° *
fûesys
)

653 
i
, 
îr
;

655 
	`öô_thªad£m
();

657 
	`k¥ötf
("*** Sèπög f†¸óã såes†ã° o¿%s:\n", 
fûesys
);

659 
i
=0; i<
NTHREADS
; i++) {

660 
îr
 = 
	`thªad_f‹k
("¸óã°ªss", 
NULL
,

661 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
);

662 i‡(
îr
) {

663 
	`∑nic
("createstress:Åhread_fork failed %s\n",

664 
	`°ªº‹
(
îr
));

668 
i
=0; i<
NTHREADS
; i++) {

669 
	`P
(
thªad£m
);

672 
	`k¥ötf
("*** fs create stressÅest done\n");

673 
	}
}

679 
	$checkfûesy°em
(
«rgs
, **
¨gs
)

681 *
devi˚
;

683 i‡(
«rgs
 != 2) {

684 
	`k¥ötf
("Usage: fs[12345] filesystem:\n");

685  
EINVAL
;

688 
devi˚
 = 
¨gs
[1];

691 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

692 
devi˚
[
	`°æí
(device)-1] = 0;

696 
	}
}

698 
	#DEFTEST
(
ã°«me
) \

700 
	`ã°«me
(
«rgs
, **
¨gs
) \

702 
ªsu…
; \

703 
ªsu…
 = 
	`checkfûesy°em
(
«rgs
, 
¨gs
); \

704 i‡(
ªsu…
) { \

705  
ªsu…
; \

707 do##
	`ã°«me
(
¨gs
[1]); \

709 }

	)

711 
DEFTEST
(
f°e°
);

712 
DEFTEST
(
ªad°ªss
);

713 
DEFTEST
(
wrôe°ªss
);

714 
DEFTEST
(
wrôe°ªss2
);

715 
DEFTEST
(
l⁄g°ªss
);

716 
DEFTEST
(
¸óã°ªss
);

721 
	$¥ötfûe
(
«rgs
, **
¨gs
)

723 
vnode
 *
rv
, *
wv
;

724 
iovec
 
iov
;

725 
uio
 
ku
;

726 
off_t
 
Ωos
=0, 
wpos
=0;

727 
buf
[128];

728 
outfûe
[16];

729 
ªsu…
;

730 
d⁄e
=0;

732 i‡(
«rgs
 != 2) {

733 
	`k¥ötf
("Usage:Öf filename\n");

734  
EINVAL
;

738 
	`°r˝y
(
outfûe
, "con:");

740 
ªsu…
 = 
	`vfs_›í
(
¨gs
[1], 
O_RDONLY
, 0664, &
rv
);

741 i‡(
ªsu…
) {

742 
	`k¥ötf
("¥ötfûe: %s\n", 
	`°ªº‹
(
ªsu…
));

743  
ªsu…
;

746 
ªsu…
 = 
	`vfs_›í
(
outfûe
, 
O_WRONLY
, 0664, &
wv
);

747 i‡(
ªsu…
) {

748 
	`k¥ötf
("¥ötfûe: ouçut: %s\n", 
	`°ªº‹
(
ªsu…
));

749 
	`vfs_˛o£
(
rv
);

750  
ªsu…
;

753 !
d⁄e
) {

754 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf), 
Ωos
, 
UIO_READ
);

755 
ªsu…
 = 
	`VOP_READ
(
rv
, &
ku
);

756 i‡(
ªsu…
) {

757 
	`k¥ötf
("RódÉº‹: %s\n", 
	`°ªº‹
(
ªsu…
));

760 
Ωos
 = 
ku
.
uio_off£t
;

762 i‡(
ku
.
uio_ªsid
 > 0) {

763 
d⁄e
 = 1;

766 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-ku.
uio_ªsid
, 
wpos
,

767 
UIO_WRITE
);

768 
ªsu…
 = 
	`VOP_WRITE
(
wv
, &
ku
);

769 i‡(
ªsu…
) {

770 
	`k¥ötf
("Wrôêîr‹: %s\n", 
	`°ªº‹
(
ªsu…
));

773 
wpos
 = 
ku
.
uio_off£t
;

775 i‡(
ku
.
uio_ªsid
 > 0) {

776 
	`k¥ötf
("Warning: short write\n");

780 
	`vfs_˛o£
(
wv
);

781 
	`vfs_˛o£
(
rv
);

784 
	}
}

	@kern/test/kmalloctest.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<vm.h
>

39 
	~<ã°.h
>

41 
	~"›t-dumbvm.h
"

57 
	#NTRIES
 1200

	)

58 
	#ITEMSIZE
 997

	)

59 
	#NTHREADS
 8

	)

63 
	$kmÆlo˘hªad
(*
sm
, 
num
)

65 
£m≠h‹e
 *
£m
 = 
sm
;

66 *
±r
;

67 *
ﬁd±r
=
NULL
;

68 *
ﬁd±r2
=
NULL
;

69 
i
;

71 
i
=0; i<
NTRIES
; i++) {

72 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

73 i‡(
±r
==
NULL
) {

74 i‡(
£m
) {

75 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

76 
num
);

77 
	`V
(
£m
);

80 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

83 i‡(
ﬁd±r2
) {

84 
	`k‰ì
(
ﬁd±r2
);

86 
ﬁd±r2
 = 
ﬁd±r
;

87 
ﬁd±r
 = 
±r
;

89 i‡(
ﬁd±r2
) {

90 
	`k‰ì
(
ﬁd±r2
);

92 i‡(
ﬁd±r
) {

93 
	`k‰ì
(
ﬁd±r
);

95 i‡(
£m
) {

96 
	`V
(
£m
);

98 
	}
}

101 
	$kmÆlo˘e°
(
«rgs
, **
¨gs
)

103 ()
«rgs
;

104 ()
¨gs
;

106 
	`k¥ötf
("Starting kmallocÅest...\n");

107 
	`kmÆlo˘hªad
(
NULL
, 0);

108 
	`k¥ötf
("kmallocÅest done\n");

111 
	}
}

114 
	$kmÆloc°ªss
(
«rgs
, **
¨gs
)

116 
£m≠h‹e
 *
£m
;

117 
i
, 
ªsu…
;

119 ()
«rgs
;

120 ()
¨gs
;

122 
£m
 = 
	`£m_¸óã
("kmallocstress", 0);

123 i‡(
£m
 =
NULL
) {

124 
	`∑nic
("kmallocstress: sem_create failed\n");

127 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

129 
i
=0; i<
NTHREADS
; i++) {

130 
ªsu…
 = 
	`thªad_f‹k
("kmÆloc°ªss", 
NULL
,

131 
kmÆlo˘hªad
, 
£m
, 
i
);

132 i‡(
ªsu…
) {

133 
	`∑nic
("kmallocstress:Åhread_fork failed: %s\n",

134 
	`°ªº‹
(
ªsu…
));

138 
i
=0; i<
NTHREADS
; i++) {

139 
	`P
(
£m
);

142 
	`£m_de°roy
(
£m
);

143 
	`k¥ötf
("kmalloc stressÅest done\n");

146 
	}
}

173 
	$kmÆlo˘e°3
(
«rgs
, **
¨gs
)

175 
	#NUM_KM3_SIZES
 5

	)

176 c⁄° 
sizes
[
NUM_KM3_SIZES
] = { 32, 41, 109, 86, 9 };

177 
num±rs
;

178 
size_t
 
±r•a˚
;

179 
size_t
 
blocksize
;

180 
num±rblocks
;

181 ***
±rblocks
;

182 
curblock
, 
cuΩos
, 
cursizeödex
, 
cursize
;

183 
size_t
 
tŸÆsize
;

184 
i
, 
j
;

185 *
±r
;

187 i‡(
«rgs
 != 2) {

188 
	`k¥ötf
("kmalloctest3: usage: km3Çumobjects\n");

189  
EINVAL
;

193 
num±rs
 = 
	`©oi
(
¨gs
[1]);

194 
±r•a˚
 = 
num±rs
 * (*);

197 
blocksize
 = 
PAGE_SIZE
 / 4;

198 
num±rblocks
 = 
	`DIVROUNDUP
(
±r•a˚
, 
blocksize
);

200 
	`k¥ötf
("kmalloctest3: %u objects, %uÖointer blocks\n",

201 
num±rs
, 
num±rblocks
);

204 
±rblocks
 = 
	`kmÆloc
(
num±rblocks
 * (ptrblocks[0]));

205 i‡(
±rblocks
 =
NULL
) {

206 
	`∑nic
("kmalloctest3: failed onÖointer blockárray\n");

209 
i
=0; i<
num±rblocks
; i++) {

210 
±rblocks
[
i
] = 
	`kmÆloc
(
blocksize
);

211 i‡(
±rblocks
[
i
] =
NULL
) {

212 
	`∑nic
("kmÆlo˘e°3: faûed o¿poöã∏block %u\n", 
i
);

217 
curblock
 = 0;

218 
cuΩos
 = 0;

219 
cursizeödex
 = 0;

220 
tŸÆsize
 = 0;

221 
i
=0; i<
num±rs
; i++) {

222 
cursize
 = 
sizes
[
cursizeödex
];

223 
±r
 = 
	`kmÆloc
(
cursize
);

224 i‡(
±r
 =
NULL
) {

225 
	`k¥ötf
("kmalloctest3: failed on object %u size %u\n",

226 
i
, 
cursize
);

227 
	`k¥ötf
("kmalloctest3:Öos %u inÖointer block %u\n",

228 
cuΩos
, 
curblock
);

229 
	`k¥ötf
("kmÆlo˘e°3:ÅŸÆ sÿÁ∏%zu\n", 
tŸÆsize
);

230 
	`∑nic
("kmalloctest3: failed.\n");

233 
j
=0; j<
cursize
; j++) {

234 
±r
[
j
] = (Ë
i
;

237 
±rblocks
[
curblock
][
cuΩos
] = 
±r
;

238 
cuΩos
++;

239 i‡(
cuΩos
 >
blocksize
 / (*)) {

240 
curblock
++;

241 
cuΩos
 = 0;

244 
tŸÆsize
 +
cursize
;

245 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

248 
	`k¥ötf
("kmÆlo˘e°3: %zu byã†Æloˇãd\n", 
tŸÆsize
);

251 
curblock
 = 0;

252 
cuΩos
 = 0;

253 
cursizeödex
 = 0;

254 
i
=0; i<
num±rs
; i++) {

255 
cursize
 = 
sizes
[
cursizeödex
];

256 
±r
 = 
±rblocks
[
curblock
][
cuΩos
];

257 
	`KASSERT
(
±r
 !
NULL
);

258 
j
=0; j<
cursize
; j++) {

259 i‡(
±r
[
j
] =(Ë
i
) {

262 
	`k¥ötf
("kmalloctest3: failed on object %u size %u\n",

263 
i
, 
cursize
);

264 
	`k¥ötf
("kmalloctest3:Öos %u inÖointer block %u\n",

265 
cuΩos
, 
curblock
);

266 
	`k¥ötf
("kmÆlo˘e°3:áàobje˘ off£à%u\n", 
j
);

267 
	`k¥ötf
("kmalloctest3:Éxpected 0x%x, found 0x%x\n",

268 
±r
[
j
], (Ë
i
);

269 
	`∑nic
("kmalloctest3: failed.\n");

271 
	`k‰ì
(
±r
);

272 
cuΩos
++;

273 i‡(
cuΩos
 >
blocksize
 / (*)) {

274 
curblock
++;

275 
cuΩos
 = 0;

277 
	`KASSERT
(
tŸÆsize
 > 0);

278 
tŸÆsize
 -
cursize
;

279 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

281 
	`KASSERT
(
tŸÆsize
 == 0);

284 
i
=0; i<
num±rblocks
; i++) {

285 
	`KASSERT
(
±rblocks
[
i
] !
NULL
);

286 
	`k‰ì
(
±rblocks
[
i
]);

289 
	`k‰ì
(
±rblocks
);

291 
	`k¥ötf
("kmalloctest3:Öassed\n");

293 
	}
}

300 
	$kmÆlo˘e°4thªad
(*
sm
, 
num
)

302 
	#NUM_KM4_SIZES
 5

	)

303 c⁄° 
sizes
[
NUM_KM4_SIZES
] = { 1, 3, 5, 2, 4 };

305 
£m≠h‹e
 *
£m
 = 
sm
;

306 *
±rs
[
NUM_KM4_SIZES
];

307 
p
, 
q
;

308 
i
;

310 
i
=0; i<
NUM_KM4_SIZES
; i++) {

311 
±rs
[
i
] = 
NULL
;

313 
p
 = 0;

314 
q
 = 
NUM_KM4_SIZES
 / 2;

316 
i
=0; i<
NTRIES
; i++) {

317 i‡(
±rs
[
q
] !
NULL
) {

318 
	`k‰ì
(
±rs
[
q
]);

319 
±rs
[
q
] = 
NULL
;

321 
±rs
[
p
] = 
	`kmÆloc
(
sizes
[p] * 
PAGE_SIZE
);

322 i‡(
±rs
[
p
] =
NULL
) {

323 
	`∑nic
("kmalloctest4:Åhread %lu: "

325 
num
, 
sizes
[
p
]);

327 
p
 = (∞+ 1Ë% 
NUM_KM4_SIZES
;

328 
q
 = (q + 1Ë% 
NUM_KM4_SIZES
;

331 
i
=0; i<
NUM_KM4_SIZES
; i++) {

332 i‡(
±rs
[
i
] !
NULL
) {

333 
	`k‰ì
(
±rs
[
i
]);

337 
	`V
(
£m
);

338 
	}
}

341 
	$kmÆlo˘e°4
(
«rgs
, **
¨gs
)

343 
£m≠h‹e
 *
£m
;

344 
¡hªads
;

345 
i
;

346 
ªsu…
;

348 ()
«rgs
;

349 ()
¨gs
;

351 
	`k¥ötf
("Starting multipage kmallocÅest...\n");

352 #i‡
OPT_DUMBVM


353 
	`k¥ötf
("(ThisÅest willÇot work with dumbvm)\n");

356 
£m
 = 
	`£m_¸óã
("kmalloctest4", 0);

357 i‡(
£m
 =
NULL
) {

358 
	`∑nic
("kmalloctest4: sem_create failed\n");

362 
¡hªads
 = (3*
NTHREADS
)/4;

364 
i
=0; i<
¡hªads
; i++) {

365 
ªsu…
 = 
	`thªad_f‹k
("kmÆlo˘e°4", 
NULL
,

366 
kmÆlo˘e°4thªad
, 
£m
, 
i
);

367 i‡(
ªsu…
) {

368 
	`∑nic
("kmallocstress:Åhread_fork failed: %s\n",

369 
	`°ªº‹
(
ªsu…
));

373 
i
=0; i<
¡hªads
; i++) {

374 
	`P
(
£m
);

377 
	`£m_de°roy
(
£m
);

378 
	`k¥ötf
("Multipage kmallocÅest done\n");

380 
	}
}

	@kern/test/malloctest.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<vm.h
>

39 
	~<ã°.h
>

41 
	~"›t-dumbvm.h
"

57 
	#NTRIES
 1200

	)

58 
	#ITEMSIZE
 997

	)

59 
	#NTHREADS
 8

	)

63 
	$mÆlo˘hªad
(*
sm
, 
num
)

65 
£m≠h‹e
 *
£m
 = 
sm
;

66 *
±r
;

67 *
ﬁd±r
=
NULL
;

68 *
ﬁd±r2
=
NULL
;

69 
i
;

71 
i
=0; i<
NTRIES
; i++) {

72 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

73 i‡(
±r
==
NULL
) {

74 i‡(
£m
) {

75 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

76 
num
);

77 
	`V
(
£m
);

80 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

83 i‡(
ﬁd±r2
) {

84 
	`k‰ì
(
ﬁd±r2
);

86 
ﬁd±r2
 = 
ﬁd±r
;

87 
ﬁd±r
 = 
±r
;

89 i‡(
ﬁd±r2
) {

90 
	`k‰ì
(
ﬁd±r2
);

92 i‡(
ﬁd±r
) {

93 
	`k‰ì
(
ﬁd±r
);

95 i‡(
£m
) {

96 
	`V
(
£m
);

98 
	}
}

101 
	$mÆlo˘e°
(
«rgs
, **
¨gs
)

103 ()
«rgs
;

104 ()
¨gs
;

106 
	`k¥ötf
("Starting kmallocÅest...\n");

107 
	`mÆlo˘hªad
(
NULL
, 0);

108 
	`k¥ötf
("kmallocÅest done\n");

111 
	}
}

114 
	$mÆloc°ªss
(
«rgs
, **
¨gs
)

116 
£m≠h‹e
 *
£m
;

117 
i
, 
ªsu…
;

119 ()
«rgs
;

120 ()
¨gs
;

122 
£m
 = 
	`£m_¸óã
("mallocstress", 0);

123 i‡(
£m
 =
NULL
) {

124 
	`∑nic
("mallocstress: sem_create failed\n");

127 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

129 
i
=0; i<
NTHREADS
; i++) {

130 
ªsu…
 = 
	`thªad_f‹k
("mÆloc°ªss", 
NULL
,

131 
mÆlo˘hªad
, 
£m
, 
i
);

132 i‡(
ªsu…
) {

133 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

134 
	`°ªº‹
(
ªsu…
));

138 
i
=0; i<
NTHREADS
; i++) {

139 
	`P
(
£m
);

142 
	`£m_de°roy
(
£m
);

143 
	`k¥ötf
("kmalloc stressÅest done\n");

146 
	}
}

173 
	$mÆlo˘e°3
(
«rgs
, **
¨gs
)

175 
	#NUM_KM3_SIZES
 5

	)

176 c⁄° 
sizes
[
NUM_KM3_SIZES
] = { 32, 41, 109, 86, 9 };

177 
num±rs
;

178 
size_t
 
±r•a˚
;

179 
size_t
 
blocksize
;

180 
num±rblocks
;

181 ***
±rblocks
;

182 
curblock
, 
cuΩos
, 
cursizeödex
, 
cursize
;

183 
size_t
 
tŸÆsize
;

184 
i
, 
j
;

185 *
±r
;

187 i‡(
«rgs
 != 2) {

188 
	`k¥ötf
("malloctest3: usage: malloctest3Çumobjects\n");

189  
EINVAL
;

193 
num±rs
 = 
	`©oi
(
¨gs
[1]);

194 
±r•a˚
 = 
num±rs
 * (*);

197 
blocksize
 = 
PAGE_SIZE
 / 4;

198 
num±rblocks
 = 
	`DIVROUNDUP
(
±r•a˚
, 
blocksize
);

200 
	`k¥ötf
("malloctest3: %u objects, %uÖointer blocks\n",

201 
num±rs
, 
num±rblocks
);

204 
±rblocks
 = 
	`kmÆloc
(
num±rblocks
 * (ptrblocks[0]));

205 i‡(
±rblocks
 =
NULL
) {

206 
	`∑nic
("malloctest3: failed onÖointer blockárray\n");

209 
i
=0; i<
num±rblocks
; i++) {

210 
±rblocks
[
i
] = 
	`kmÆloc
(
blocksize
);

211 i‡(
±rblocks
[
i
] =
NULL
) {

212 
	`∑nic
("mÆlo˘e°3: faûed o¿poöã∏block %u\n", 
i
);

217 
curblock
 = 0;

218 
cuΩos
 = 0;

219 
cursizeödex
 = 0;

220 
tŸÆsize
 = 0;

221 
i
=0; i<
num±rs
; i++) {

222 
cursize
 = 
sizes
[
cursizeödex
];

223 
±r
 = 
	`kmÆloc
(
cursize
);

224 i‡(
±r
 =
NULL
) {

225 
	`k¥ötf
("malloctest3: failed on object %u size %u\n",

226 
i
, 
cursize
);

227 
	`k¥ötf
("malloctest3:Öos %u inÖointer block %u\n",

228 
cuΩos
, 
curblock
);

229 
	`k¥ötf
("mÆlo˘e°3:ÅŸÆ sÿÁ∏%zu\n", 
tŸÆsize
);

230 
	`∑nic
("malloctest3: failed.\n");

233 
j
=0; j<
cursize
; j++) {

234 
±r
[
j
] = (Ë
i
;

237 
±rblocks
[
curblock
][
cuΩos
] = 
±r
;

238 
cuΩos
++;

239 i‡(
cuΩos
 >
blocksize
 / (*)) {

240 
curblock
++;

241 
cuΩos
 = 0;

244 
tŸÆsize
 +
cursize
;

245 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

248 
	`k¥ötf
("mÆlo˘e°3: %zu byã†Æloˇãd\n", 
tŸÆsize
);

251 
curblock
 = 0;

252 
cuΩos
 = 0;

253 
cursizeödex
 = 0;

254 
i
=0; i<
num±rs
; i++) {

255 
cursize
 = 
sizes
[
cursizeödex
];

256 
±r
 = 
±rblocks
[
curblock
][
cuΩos
];

257 
	`KASSERT
(
±r
 !
NULL
);

258 
j
=0; j<
cursize
; j++) {

259 i‡(
±r
[
j
] =(Ë
i
) {

262 
	`k¥ötf
("malloctest3: failed on object %u size %u\n",

263 
i
, 
cursize
);

264 
	`k¥ötf
("malloctest3:Öos %u inÖointer block %u\n",

265 
cuΩos
, 
curblock
);

266 
	`k¥ötf
("mÆlo˘e°3:áàobje˘ off£à%u\n", 
j
);

267 
	`k¥ötf
("malloctest3:Éxpected 0x%x, found 0x%x\n",

268 
±r
[
j
], (Ë
i
);

269 
	`∑nic
("malloctest3: failed.\n");

271 
	`k‰ì
(
±r
);

272 
cuΩos
++;

273 i‡(
cuΩos
 >
blocksize
 / (*)) {

274 
curblock
++;

275 
cuΩos
 = 0;

277 
	`KASSERT
(
tŸÆsize
 > 0);

278 
tŸÆsize
 -
cursize
;

279 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

281 
	`KASSERT
(
tŸÆsize
 == 0);

284 
i
=0; i<
num±rblocks
; i++) {

285 
	`KASSERT
(
±rblocks
[
i
] !
NULL
);

286 
	`k‰ì
(
±rblocks
[
i
]);

289 
	`k‰ì
(
±rblocks
);

291 
	`k¥ötf
("malloctest3:Öassed\n");

293 
	}
}

300 
	$mÆlo˘e°4thªad
(*
sm
, 
num
)

302 
	#NUM_KM4_SIZES
 5

	)

303 c⁄° 
sizes
[
NUM_KM4_SIZES
] = { 1, 3, 5, 2, 4 };

305 
£m≠h‹e
 *
£m
 = 
sm
;

306 *
±rs
[
NUM_KM4_SIZES
];

307 
p
, 
q
;

308 
i
;

310 
i
=0; i<
NUM_KM4_SIZES
; i++) {

311 
±rs
[
i
] = 
NULL
;

313 
p
 = 0;

314 
q
 = 
NUM_KM4_SIZES
 / 2;

316 
i
=0; i<
NTRIES
; i++) {

317 i‡(
±rs
[
q
] !
NULL
) {

318 
	`k‰ì
(
±rs
[
q
]);

319 
±rs
[
q
] = 
NULL
;

321 
±rs
[
p
] = 
	`kmÆloc
(
sizes
[p] * 
PAGE_SIZE
);

322 i‡(
±rs
[
p
] =
NULL
) {

323 
	`∑nic
("malloctest4:Åhread %lu: "

325 
num
, 
sizes
[
p
]);

327 
p
 = (∞+ 1Ë% 
NUM_KM4_SIZES
;

328 
q
 = (q + 1Ë% 
NUM_KM4_SIZES
;

331 
i
=0; i<
NUM_KM4_SIZES
; i++) {

332 i‡(
±rs
[
i
] !
NULL
) {

333 
	`k‰ì
(
±rs
[
i
]);

337 
	`V
(
£m
);

338 
	}
}

341 
	$mÆlo˘e°4
(
«rgs
, **
¨gs
)

343 
£m≠h‹e
 *
£m
;

344 
¡hªads
;

345 
i
;

346 
ªsu…
;

348 ()
«rgs
;

349 ()
¨gs
;

351 
	`k¥ötf
("Starting multipage kmallocÅest...\n");

352 #i‡
OPT_DUMBVM


353 
	`k¥ötf
("(ThisÅest willÇot work with dumbvm)\n");

356 
£m
 = 
	`£m_¸óã
("malloctest4", 0);

357 i‡(
£m
 =
NULL
) {

358 
	`∑nic
("malloctest4: sem_create failed\n");

362 
¡hªads
 = (3*
NTHREADS
)/4;

364 
i
=0; i<
¡hªads
; i++) {

365 
ªsu…
 = 
	`thªad_f‹k
("mÆlo˘e°4", 
NULL
,

366 
mÆlo˘e°4thªad
, 
£m
, 
i
);

367 i‡(
ªsu…
) {

368 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

369 
	`°ªº‹
(
ªsu…
));

373 
i
=0; i<
¡hªads
; i++) {

374 
	`P
(
£m
);

377 
	`£m_de°roy
(
£m
);

378 
	`k¥ötf
("Multipage kmallocÅest done\n");

380 
	}
}

	@kern/test/nettest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<ã°.h
>

38 
	$√âe°
(
«rgs
, **
¨gs
)

40 ()
«rgs
;

41 ()
¨gs
;

42 
	`k¥ötf
("NoÇetwork supportávailable\n");

44 
	}
}

	@kern/test/synchtest.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<synch.h
>

39 
	~<ã°.h
>

41 
	#NSEMLOOPS
 63

	)

42 
	#NLOCKLOOPS
 120

	)

43 
	#NCVLOOPS
 5

	)

44 
	#NTHREADS
 32

	)

46 vﬁ©ûê
	gã°vÆ1
;

47 vﬁ©ûê
	gã°vÆ2
;

48 vﬁ©ûê
	gã°vÆ3
;

49 
£m≠h‹e
 *
	gã°£m
;

50 
lock
 *
	gã°lock
;

51 
cv
 *
	gã°cv
;

52 
£m≠h‹e
 *
	gd⁄e£m
;

56 
	$öôôems
()

58 i‡(
ã°£m
==
NULL
) {

59 
ã°£m
 = 
	`£m_¸óã
("testsem", 2);

60 i‡(
ã°£m
 =
NULL
) {

61 
	`∑nic
("synchtest: sem_create failed\n");

64 i‡(
ã°lock
==
NULL
) {

65 
ã°lock
 = 
	`lock_¸óã
("testlock");

66 i‡(
ã°lock
 =
NULL
) {

67 
	`∑nic
("synchtest:Üock_create failed\n");

70 i‡(
ã°cv
==
NULL
) {

71 
ã°cv
 = 
	`cv_¸óã
("testlock");

72 i‡(
ã°cv
 =
NULL
) {

73 
	`∑nic
("synchtest: cv_create failed\n");

76 i‡(
d⁄e£m
==
NULL
) {

77 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

78 i‡(
d⁄e£m
 =
NULL
) {

79 
	`∑nic
("synchtest: sem_create failed\n");

82 
	}
}

86 
	$£mã°thªad
(*
junk
, 
num
)

88 
i
;

89 ()
junk
;

94 
	`P
(
ã°£m
);

95 
	`k¥ötf
("Thªad %2lu: ", 
num
);

96 
i
=0; i<
NSEMLOOPS
; i++) {

97 
	`k¥ötf
("%c", ()
num
+64);

99 
	`k¥ötf
("\n");

100 
	`V
(
d⁄e£m
);

101 
	}
}

104 
	$£mã°
(
«rgs
, **
¨gs
)

106 
i
, 
ªsu…
;

108 ()
«rgs
;

109 ()
¨gs
;

111 
	`öôôems
();

112 
	`k¥ötf
("Starting semaphoreÅest...\n");

113 
	`k¥ötf
("IfÅhis hangs, it's broken: ");

114 
	`P
(
ã°£m
);

115 
	`P
(
ã°£m
);

116 
	`k¥ötf
("ok\n");

118 
i
=0; i<
NTHREADS
; i++) {

119 
ªsu…
 = 
	`thªad_f‹k
("£mã°", 
NULL
, 
£mã°thªad
, NULL, 
i
);

120 i‡(
ªsu…
) {

121 
	`∑nic
("semtest:Åhread_fork failed: %s\n",

122 
	`°ªº‹
(
ªsu…
));

126 
i
=0; i<
NTHREADS
; i++) {

127 
	`V
(
ã°£m
);

128 
	`P
(
d⁄e£m
);

132 
	`V
(
ã°£m
);

133 
	`V
(
ã°£m
);

135 
	`k¥ötf
("SemaphoreÅest done.\n");

137 
	}
}

141 
	$Áû
(
num
, c⁄° *
msg
)

143 
	`k¥ötf
("thªad %lu: Mism©ch o¿%s\n", 
num
, 
msg
);

144 
	`k¥ötf
("Test failed\n");

146 
	`lock_ªÀa£
(
ã°lock
);

148 
	`V
(
d⁄e£m
);

149 
	`thªad_exô
();

150 
	}
}

154 
	$lockã°thªad
(*
junk
, 
num
)

156 
i
;

157 ()
junk
;

159 
i
=0; i<
NLOCKLOOPS
; i++) {

160 
	`lock_acquúe
(
ã°lock
);

161 
ã°vÆ1
 = 
num
;

162 
ã°vÆ2
 = 
num
*num;

163 
ã°vÆ3
 = 
num
%3;

165 i‡(
ã°vÆ2
 !
ã°vÆ1
*testval1) {

166 
	`Áû
(
num
, "testval2/testval1");

169 i‡(
ã°vÆ2
%3 !(
ã°vÆ3
*testval3)%3) {

170 
	`Áû
(
num
, "testval2/testval3");

173 i‡(
ã°vÆ3
 !
ã°vÆ1
%3) {

174 
	`Áû
(
num
, "testval3/testval1");

177 i‡(
ã°vÆ1
 !
num
) {

178 
	`Áû
(
num
, "testval1/num");

181 i‡(
ã°vÆ2
 !
num
*num) {

182 
	`Áû
(
num
, "testval2/num");

185 i‡(
ã°vÆ3
 !
num
%3) {

186 
	`Áû
(
num
, "testval3/num");

189 
	`lock_ªÀa£
(
ã°lock
);

191 
	`V
(
d⁄e£m
);

192 
	}
}

196 
	$lockã°
(
«rgs
, **
¨gs
)

198 
i
, 
ªsu…
;

200 ()
«rgs
;

201 ()
¨gs
;

203 
	`öôôems
();

204 
	`k¥ötf
("StartingÜockÅest...\n");

206 
i
=0; i<
NTHREADS
; i++) {

207 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
lockã°thªad
,

208 
NULL
, 
i
);

209 i‡(
ªsu…
) {

210 
	`∑nic
("locktest:Åhread_fork failed: %s\n",

211 
	`°ªº‹
(
ªsu…
));

214 
i
=0; i<
NTHREADS
; i++) {

215 
	`P
(
d⁄e£m
);

218 
	`k¥ötf
("LockÅest done.\n");

221 
	}
}

225 
	$cvã°thªad
(*
junk
, 
num
)

227 
i
;

228 vﬁ©ûê
j
;

229 
time•ec
 
ts1
, 
ts2
;

231 ()
junk
;

233 
i
=0; i<
NCVLOOPS
; i++) {

234 
	`lock_acquúe
(
ã°lock
);

235 
ã°vÆ1
 !
num
) {

236 
	`gëtime
(&
ts1
);

237 
	`cv_waô
(
ã°cv
, 
ã°lock
);

238 
	`gëtime
(&
ts2
);

241 
	`time•ec_sub
(&
ts2
, &
ts1
, &ts2);

244 i‡(
ts2
.
tv_£c
 =0 &&Ås2.
tv_n£c
 < 40*2000) {

245 
	`k¥ötf
("cv_waitÅook only %uÇs\n",

246 
ts2
.
tv_n£c
);

247 
	`k¥ötf
("That'sÅoo fast... you must be "

249 
	`V
(
d⁄e£m
);

250 
	`thªad_exô
();

254 
	`k¥ötf
("Thªad %lu\n", 
num
);

255 
ã°vÆ1
 = (ã°vÆ1 + 
NTHREADS
 - 1)%NTHREADS;

261 
j
=0; j<3000; j++);

263 
	`cv_brﬂdˇ°
(
ã°cv
, 
ã°lock
);

264 
	`lock_ªÀa£
(
ã°lock
);

266 
	`V
(
d⁄e£m
);

267 
	}
}

270 
	$cvã°
(
«rgs
, **
¨gs
)

273 
i
, 
ªsu…
;

275 ()
«rgs
;

276 ()
¨gs
;

278 
	`öôôems
();

279 
	`k¥ötf
("Starting CVÅest...\n");

280 
	`k¥ötf
("Threads shouldÖrint out inÑeverse order.\n");

282 
ã°vÆ1
 = 
NTHREADS
-1;

284 
i
=0; i<
NTHREADS
; i++) {

285 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
cvã°thªad
, NULL, 
i
);

286 i‡(
ªsu…
) {

287 
	`∑nic
("cvtest:Åhread_fork failed: %s\n",

288 
	`°ªº‹
(
ªsu…
));

291 
i
=0; i<
NTHREADS
; i++) {

292 
	`P
(
d⁄e£m
);

295 
	`k¥ötf
("CVÅest done\n");

298 
	}
}

310 
	#NCVS
 250

	)

311 
	#NLOOPS
 40

	)

312 
cv
 *
	gã°cvs
[
NCVS
];

313 
lock
 *
	gã°locks
[
NCVS
];

314 
£m≠h‹e
 *
	gg©e£m
;

315 
£m≠h‹e
 *
	gexô£m
;

319 
	$¶ì±hªad
(*
junk1
, 
junk2
)

321 
i
, 
j
;

323 ()
junk1
;

324 ()
junk2
;

326 
j
=0; j<
NLOOPS
; j++) {

327 
i
=0; i<
NCVS
; i++) {

328 
	`lock_acquúe
(
ã°locks
[
i
]);

329 
	`V
(
g©e£m
);

330 
	`cv_waô
(
ã°cvs
[
i
], 
ã°locks
[i]);

331 
	`lock_ªÀa£
(
ã°locks
[
i
]);

333 
	`k¥ötf
("¶ì±hªad: %u\n", 
j
);

335 
	`V
(
exô£m
);

336 
	}
}

340 
	$wakëhªad
(*
junk1
, 
junk2
)

342 
i
, 
j
;

344 ()
junk1
;

345 ()
junk2
;

347 
j
=0; j<
NLOOPS
; j++) {

348 
i
=0; i<
NCVS
; i++) {

349 
	`P
(
g©e£m
);

350 
	`lock_acquúe
(
ã°locks
[
i
]);

351 
	`cv_sig«l
(
ã°cvs
[
i
], 
ã°locks
[i]);

352 
	`lock_ªÀa£
(
ã°locks
[
i
]);

354 
	`k¥ötf
("wakëhªad: %u\n", 
j
);

356 
	`V
(
exô£m
);

357 
	}
}

360 
	$cvã°2
(
«rgs
, **
¨gs
)

362 
i
;

363 
ªsu…
;

365 ()
«rgs
;

366 ()
¨gs
;

368 
i
=0; i<
NCVS
; i++) {

369 
ã°locks
[
i
] = 
	`lock_¸óã
("cvtest2Üock");

370 
ã°cvs
[
i
] = 
	`cv_¸óã
("cvtest2 cv");

372 
g©e£m
 = 
	`£m_¸óã
("gatesem", 0);

373 
exô£m
 = 
	`£m_¸óã
("exitsem", 0);

375 
	`k¥ötf
("cvtest2...\n");

377 
ªsu…
 = 
	`thªad_f‹k
("cvã°2", 
NULL
, 
¶ì±hªad
, NULL, 0);

378 i‡(
ªsu…
) {

379 
	`∑nic
("cvtest2:Åhread_fork failed\n");

381 
ªsu…
 = 
	`thªad_f‹k
("cvã°2", 
NULL
, 
wakëhªad
, NULL, 0);

382 i‡(
ªsu…
) {

383 
	`∑nic
("cvtest2:Åhread_fork failed\n");

386 
	`P
(
exô£m
);

387 
	`P
(
exô£m
);

389 
	`£m_de°roy
(
exô£m
);

390 
	`£m_de°roy
(
g©e£m
);

391 
exô£m
 = 
g©e£m
 = 
NULL
;

392 
i
=0; i<
NCVS
; i++) {

393 
	`lock_de°roy
(
ã°locks
[
i
]);

394 
	`cv_de°roy
(
ã°cvs
[
i
]);

395 
ã°locks
[
i
] = 
NULL
;

396 
ã°cvs
[
i
] = 
NULL
;

399 
	`k¥ötf
("cvtest2 done\n");

401 
	}
}

	@kern/test/threadlisttest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªadli°.h
>

34 
	~<ã°.h
>

36 
	#NUMNAMES
 7

	)

37 c⁄° *c⁄° 
	g«mes
[
NUMNAMES
] = {

47 
thªad
 *
	gÁkëhªads
[
NUMNAMES
];

52 
	#FAKE_MAGIC
 ((*)0xbØbØ)

	)

58 
thªad
 *

59 
	$Ákëhªad_¸óã
(c⁄° *
«me
)

61 
thªad
 *
t
;

63 
t
 = 
	`kmÆloc
((*t));

64 i‡(
t
 =
NULL
) {

65 
	`∑nic
("threadlisttest: Out of memory\n");

68 
	`bzîo
(
t
, (*t));

69 
t
->
t_«me
 = 
	`k°rdup
(
«me
);

70 i‡(
t
->
t_«me
 =
NULL
) {

71 
	`∑nic
("threadlisttest: Out of memory\n");

73 
t
->
t_°ack
 = 
FAKE_MAGIC
;

74 
	`thªadli°node_öô
(&
t
->
t_li°node
,Å);

75  
t
;

76 
	}
}

83 
	$Ákëhªad_de°roy
(
thªad
 *
t
)

85 
	`KASSERT
(
t
->
t_°ack
 =
FAKE_MAGIC
);

86 
	`thªadli°node_˛ónup
(&
t
->
t_li°node
);

87 
	`k‰ì
(
t
->
t_«me
);

88 
	`k‰ì
(
t
);

89 
	}
}

96 
	$check_‹dî
(
thªadli°
 *
é
, 
boﬁ
 
ªv
)

98 c⁄° 
°rög0
[] = "...";

99 c⁄° 
°rögN
[] = "~~~";

101 
thªad
 *
t
;

102 c⁄° *
fú°
 = 
ªv
 ? 
°rögN
 : 
°rög0
;

103 c⁄° *
œ°
 = 
ªv
 ? 
°rög0
 : 
°rögN
;

104 c⁄° *
¥ev
;

105 
cmp
;

107 
¥ev
 = 
fú°
;

108 
	`THREADLIST_FORALL
(
t
, *
é
) {

109 
cmp
 = 
	`°rcmp
(
¥ev
, 
t
->
t_«me
);

110 
	`KASSERT
(
ªv
 ? (
cmp
 > 0) : (cmp < 0));

111 
¥ev
 = 
t
->
t_«me
;

113 
cmp
 = 
	`°rcmp
(
¥ev
, 
œ°
);

114 
	`KASSERT
(
ªv
 ? (
cmp
 > 0) : (cmp < 0));

115 
	}
}

122 
	$thªadli°ã°_a
()

124 
thªadli°
 
é
;

126 
	`thªadli°_öô
(&
é
);

127 
	`KASSERT
(
	`thªadli°_i£m±y
(&
é
));

128 
	`thªadli°_˛ónup
(&
é
);

129 
	}
}

133 
	$thªadli°ã°_b
()

135 
thªadli°
 
é
;

136 
thªad
 *
t
;

138 
	`thªadli°_öô
(&
é
);

140 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

141 
	`check_‹dî
(&
é
, 
Ál£
);

142 
	`check_‹dî
(&
é
, 
åue
);

143 
	`KASSERT
(
é
.
é_cou¡
 == 1);

144 
t
 = 
	`thªadli°_ªmhód
(&
é
);

145 
	`KASSERT
(
é
.
é_cou¡
 == 0);

146 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

148 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[0]);

149 
	`check_‹dî
(&
é
, 
Ál£
);

150 
	`check_‹dî
(&
é
, 
åue
);

151 
	`KASSERT
(
é
.
é_cou¡
 == 1);

152 
t
 = 
	`thªadli°_ªmèû
(&
é
);

153 
	`KASSERT
(
é
.
é_cou¡
 == 0);

154 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

156 
	`thªadli°_˛ónup
(&
é
);

157 
	}
}

161 
	$thªadli°ã°_c
()

163 
thªadli°
 
é
;

164 
thªad
 *
t
;

166 
	`thªadli°_öô
(&
é
);

168 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

169 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[1]);

170 
	`KASSERT
(
é
.
é_cou¡
 == 2);

172 
	`check_‹dî
(&
é
, 
åue
);

174 
t
 = 
	`thªadli°_ªmhód
(&
é
);

175 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

176 
t
 = 
	`thªadli°_ªmhód
(&
é
);

177 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

178 
	`KASSERT
(
é
.
é_cou¡
 == 0);

180 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[0]);

181 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[1]);

182 
	`KASSERT
(
é
.
é_cou¡
 == 2);

184 
	`check_‹dî
(&
é
, 
Ál£
);

186 
t
 = 
	`thªadli°_ªmèû
(&
é
);

187 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

188 
t
 = 
	`thªadli°_ªmèû
(&
é
);

189 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

190 
	`KASSERT
(
é
.
é_cou¡
 == 0);

192 
	`thªadli°_˛ónup
(&
é
);

193 
	}
}

197 
	$thªadli°ã°_d
()

199 
thªadli°
 
é
;

200 
thªad
 *
t
;

202 
	`thªadli°_öô
(&
é
);

204 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

205 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[1]);

206 
	`KASSERT
(
é
.
é_cou¡
 == 2);

208 
	`check_‹dî
(&
é
, 
Ál£
);

210 
t
 = 
	`thªadli°_ªmhód
(&
é
);

211 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

212 
t
 = 
	`thªadli°_ªmèû
(&
é
);

213 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

214 
	`KASSERT
(
é
.
é_cou¡
 == 0);

216 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

217 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[1]);

218 
	`KASSERT
(
é
.
é_cou¡
 == 2);

220 
	`check_‹dî
(&
é
, 
Ál£
);

222 
t
 = 
	`thªadli°_ªmèû
(&
é
);

223 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

224 
t
 = 
	`thªadli°_ªmèû
(&
é
);

225 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

226 
	`KASSERT
(
é
.
é_cou¡
 == 0);

228 
	`thªadli°_˛ónup
(&
é
);

229 
	}
}

233 
	$thªadli°ã°_e
()

235 
thªadli°
 
é
;

236 
thªad
 *
t
;

237 
i
;

239 
	`thªadli°_öô
(&
é
);

241 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[1]);

242 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[3]);

243 
	`KASSERT
(
é
.
é_cou¡
 == 2);

244 
	`check_‹dî
(&
é
, 
Ál£
);

246 
	`thªadli°_ö£πa·î
(&
é
, 
Ákëhªads
[3], fakethreads[4]);

247 
	`KASSERT
(
é
.
é_cou¡
 == 3);

248 
	`check_‹dî
(&
é
, 
Ál£
);

250 
	`thªadli°_ö£πbef‹e
(&
é
, 
Ákëhªads
[0], fakethreads[1]);

251 
	`KASSERT
(
é
.
é_cou¡
 == 4);

252 
	`check_‹dî
(&
é
, 
Ál£
);

254 
	`thªadli°_ö£πa·î
(&
é
, 
Ákëhªads
[1], fakethreads[2]);

255 
	`KASSERT
(
é
.
é_cou¡
 == 5);

256 
	`check_‹dî
(&
é
, 
Ál£
);

258 
	`KASSERT
(
Ákëhªads
[4]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

259 
Ákëhªads
[3]);

260 
	`KASSERT
(
Ákëhªads
[3]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

261 
Ákëhªads
[2]);

262 
	`KASSERT
(
Ákëhªads
[2]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

263 
Ákëhªads
[1]);

264 
	`KASSERT
(
Ákëhªads
[1]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

265 
Ákëhªads
[0]);

267 
i
=0; i<5; i++) {

268 
t
 = 
	`thªadli°_ªmhód
(&
é
);

269 
	`KASSERT
(
t
 =
Ákëhªads
[
i
]);

271 
	`KASSERT
(
é
.
é_cou¡
 == 0);

273 
	`thªadli°_˛ónup
(&
é
);

274 
	}
}

278 
	$thªadli°ã°_f
()

280 
thªadli°
 
é
;

281 
thªad
 *
t
;

282 
i
;

284 
	`thªadli°_öô
(&
é
);

286 
i
=0; i<
NUMNAMES
; i++) {

287 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[
i
]);

289 
	`KASSERT
(
é
.
é_cou¡
 =
NUMNAMES
);

291 
i
=0;

292 
	`THREADLIST_FORALL
(
t
, 
é
) {

293 
	`KASSERT
(
t
 =
Ákëhªads
[
i
]);

294 
i
++;

296 
	`KASSERT
(
i
 =
NUMNAMES
);

298 
i
=0;

299 
	`THREADLIST_FORALL_REV
(
t
, 
é
) {

300 
	`KASSERT
(
t
 =
Ákëhªads
[
NUMNAMES
 - 
i
 - 1]);

301 
i
++;

303 
	`KASSERT
(
i
 =
NUMNAMES
);

305 
i
=0; i<
NUMNAMES
; i++) {

306 
t
 = 
	`thªadli°_ªmhód
(&
é
);

307 
	`KASSERT
(
t
 =
Ákëhªads
[
i
]);

309 
	`KASSERT
(
é
.
é_cou¡
 == 0);

310 
	}
}

316 
	$thªadli°ã°
(
«rgs
, **
¨gs
)

318 
i
;

320 ()
«rgs
;

321 ()
¨gs
;

323 
	`k¥ötf
("TestingÅhreadlists...\n");

325 
i
=0; i<
NUMNAMES
; i++) {

326 
Ákëhªads
[
i
] = 
	`Ákëhªad_¸óã
(
«mes
[i]);

329 
	`thªadli°ã°_a
();

330 
	`thªadli°ã°_b
();

331 
	`thªadli°ã°_c
();

332 
	`thªadli°ã°_d
();

333 
	`thªadli°ã°_e
();

334 
	`thªadli°ã°_f
();

336 
i
=0; i<
NUMNAMES
; i++) {

337 
	`Ákëhªad_de°roy
(
Ákëhªads
[
i
]);

338 
Ákëhªads
[
i
] = 
NULL
;

341 
	`k¥ötf
("Done.\n");

343 
	}
}

	@kern/test/threadtest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

39 
	#NTHREADS
 8

	)

41 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

45 
	$öô_£m
()

47 i‡(
t£m
==
NULL
) {

48 
t£m
 = 
	`£m_¸óã
("tsem", 0);

49 i‡(
t£m
 =
NULL
) {

50 
	`∑nic
("threadtest: sem_create failed\n");

53 
	}
}

57 
	$loudthªad
(*
junk
, 
num
)

59 
ch
 = '0' + 
num
;

60 
i
;

62 ()
junk
;

64 
i
=0; i<120; i++) {

65 
	`putch
(
ch
);

67 
	`V
(
t£m
);

68 
	}
}

82 
	$quõâhªad
(*
junk
, 
num
)

84 
ch
 = '0' + 
num
;

85 vﬁ©ûê
i
;

87 ()
junk
;

89 
	`putch
(
ch
);

90 
i
=0; i<200000; i++);

91 
	`putch
(
ch
);

93 
	`V
(
t£m
);

94 
	}
}

98 
	$ru¡hªads
(
dﬁoud
)

100 
«me
[16];

101 
i
, 
ªsu…
;

103 
i
=0; i<
NTHREADS
; i++) {

104 
	`¢¥ötf
(
«me
, “ame), "thªadã°%d", 
i
);

105 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
,

106 
dﬁoud
 ? 
loudthªad
 : 
quõâhªad
,

107 
NULL
, 
i
);

108 i‡(
ªsu…
) {

109 
	`∑nic
("threadtest:Åhread_fork failed %s)\n",

110 
	`°ªº‹
(
ªsu…
));

114 
i
=0; i<
NTHREADS
; i++) {

115 
	`P
(
t£m
);

117 
	}
}

121 
	$thªadã°
(
«rgs
, **
¨gs
)

123 ()
«rgs
;

124 ()
¨gs
;

126 
	`öô_£m
();

127 
	`k¥ötf
("StartingÅhreadÅest...\n");

128 
	`ru¡hªads
(1);

129 
	`k¥ötf
("\nThreadÅest done.\n");

132 
	}
}

135 
	$thªadã°2
(
«rgs
, **
¨gs
)

137 ()
«rgs
;

138 ()
¨gs
;

140 
	`öô_£m
();

141 
	`k¥ötf
("StartingÅhreadÅest 2...\n");

142 
	`ru¡hªads
(0);

143 
	`k¥ötf
("\nThreadÅest 2 done.\n");

146 
	}
}

	@kern/test/tt3.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<wch™.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<ã°.h
>

42 
	#DIM
 70

	)

45 
	#SLEEPALOT_PRINTS
 20

	)

46 
	#SLEEPALOT_ITERS
 4

	)

48 
	#WAKER_WAKES
 100

	)

50 
	#COMPUTE_ITERS
 10

	)

53 
	#NWAITCHANS
 12

	)

54 
•ölock
 
	g•ölocks
[
NWAITCHANS
];

55 
wch™
 *
	gwaôch™s
[
NWAITCHANS
];

57 vﬁ©ûê
	gwakîd⁄e
;

58 
£m≠h‹e
 *
	gwakî£m
;

59 
£m≠h‹e
 *
	gd⁄e£m
;

63 
	$£tup
()

65 
tmp
[16];

66 
i
;

68 i‡(
wakî£m
 =
NULL
) {

69 
wakî£m
 = 
	`£m_¸óã
("wakersem", 1);

70 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

71 
i
=0; i<
NWAITCHANS
; i++) {

72 
	`•ölock_öô
(&
•ölocks
[
i
]);

73 
	`¢¥ötf
(
tmp
, —mp), "wc%d", 
i
);

74 
waôch™s
[
i
] = 
	`wch™_¸óã
(
	`k°rdup
(
tmp
));

77 
wakîd⁄e
 = 0;

78 
	}
}

82 
	$¶ì∑lŸ_thªad
(*
junk
, 
num
)

84 
i
, 
j
;

86 ()
junk
;

88 
i
=0; i<
SLEEPALOT_PRINTS
; i++) {

89 
j
=0; j<
SLEEPALOT_ITERS
; j++) {

90 
n
;

91 
•ölock
 *
lk
;

92 
wch™
 *
wc
;

94 
n
 = 
	`øndom
(Ë% 
NWAITCHANS
;

95 
lk
 = &
•ölocks
[
n
];

96 
wc
 = 
waôch™s
[
n
];

97 
	`•ölock_acquúe
(
lk
);

98 
	`wch™_¶ìp
(
wc
, 
lk
);

99 
	`•ölock_ªÀa£
(
lk
);

101 
	`k¥ötf
("[%lu]", 
num
);

103 
	`V
(
d⁄e£m
);

104 
	}
}

108 
	$wakî_thªad
(*
junk1
, 
junk2
)

110 
i
, 
d⁄e
;

112 ()
junk1
;

113 ()
junk2
;

116 
	`P
(
wakî£m
);

117 
d⁄e
 = 
wakîd⁄e
;

118 
	`V
(
wakî£m
);

119 i‡(
d⁄e
) {

123 
i
=0; i<
WAKER_WAKES
; i++) {

124 
n
;

125 
•ölock
 *
lk
;

126 
wch™
 *
wc
;

128 
n
 = 
	`øndom
(Ë% 
NWAITCHANS
;

129 
lk
 = &
•ölocks
[
n
];

130 
wc
 = 
waôch™s
[
n
];

131 
	`•ölock_acquúe
(
lk
);

132 
	`wch™_wakóŒ
(
wc
, 
lk
);

133 
	`•ölock_ªÀa£
(
lk
);

135 
	`thªad_yõld
();

138 
	`V
(
d⁄e£m
);

139 
	}
}

143 
	$make_¶ì∑lŸs
(
howm™y
)

145 
«me
[16];

146 
i
, 
ªsu…
;

148 
i
=0; i<
howm™y
; i++) {

149 
	`¢¥ötf
(
«me
, “ame), "¶ì∑lŸ%d", 
i
);

150 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
¶ì∑lŸ_thªad
, NULL, 
i
);

151 i‡(
ªsu…
) {

152 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

155 
ªsu…
 = 
	`thªad_f‹k
("wakî", 
NULL
, 
wakî_thªad
, NULL, 0);

156 i‡(
ªsu…
) {

157 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

159 
	}
}

163 
	$compuã_thªad
(*
junk1
, 
num
)

165 
	sm©rix
 {

166 
m
[
DIM
][DIM];

168 
m©rix
 *
m1
, *
m2
, *
m3
;

169 
tŸ
;

170 
i
, 
j
, 
k
, 
m
;

171 
uöt32_t
 
ønd
;

173 ()
junk1
;

175 
m1
 = 
	`kmÆloc
((
m©rix
));

176 
	`KASSERT
(
m1
 !
NULL
);

177 
m2
 = 
	`kmÆloc
((
m©rix
));

178 
	`KASSERT
(
m2
 !
NULL
);

179 
m3
 = 
	`kmÆloc
((
m©rix
));

180 
	`KASSERT
(
m3
 !
NULL
);

182 
m
=0; m<
COMPUTE_ITERS
; m++) {

184 
i
=0; i<
DIM
; i++) {

185 
j
=0; j<
DIM
; j++) {

186 
ønd
 = 
	`øndom
();

187 
m1
->
m
[
i
][
j
] = 
ønd
 >> 16;

188 
m2
->
m
[
i
][
j
] = 
ønd
 & 0xffff;

192 
i
=0; i<
DIM
; i++) {

193 
j
=0; j<
DIM
; j++) {

194 
tŸ
 = 0;

195 
k
=0; k<
DIM
; k++) {

196 
tŸ
 +
m1
->
m
[
i
][
k
] * 
m2
->m[k][
j
];

198 
m3
->
m
[
i
][
j
] = 
tŸ
;

202 
tŸ
 = 0;

203 
i
=0; i<
DIM
; i++) {

204 
tŸ
 +
m3
->
m
[
i
][i];

207 
	`k¥ötf
("{%lu: %u}", 
num
, (Ë
tŸ
);

208 
	`thªad_yõld
();

211 
	`k‰ì
(
m1
);

212 
	`k‰ì
(
m2
);

213 
	`k‰ì
(
m3
);

215 
	`V
(
d⁄e£m
);

216 
	}
}

220 
	$make_compuãs
(
howm™y
)

222 
«me
[16];

223 
i
, 
ªsu…
;

225 
i
=0; i<
howm™y
; i++) {

226 
	`¢¥ötf
(
«me
, “ame), "compuã%d", 
i
);

227 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
compuã_thªad
, NULL, 
i
);

228 i‡(
ªsu…
) {

229 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

232 
	}
}

236 
	$föish
(
howm™ytŸÆ
)

238 
i
;

239 
i
=0; i<
howm™ytŸÆ
; i++) {

240 
	`P
(
d⁄e£m
);

242 
	`P
(
wakî£m
);

243 
wakîd⁄e
 = 1;

244 
	`V
(
wakî£m
);

245 
	`P
(
d⁄e£m
);

246 
	}
}

250 
	$ru¡e°3
(
n¶ìps
, 
ncompuãs
)

252 
	`£tup
();

253 
	`k¥ötf
("StartingÅhreadÅest 3 (%d [sleepalots], %d {computes}, "

255 
n¶ìps
, 
ncompuãs
);

256 
	`make_¶ì∑lŸs
(
n¶ìps
);

257 
	`make_compuãs
(
ncompuãs
);

258 
	`föish
(
n¶ìps
+
ncompuãs
);

259 
	`k¥ötf
("\nThreadÅest 3 done\n");

260 
	}
}

263 
	$thªadã°3
(
«rgs
, **
¨gs
)

265 i‡(
«rgs
==1) {

266 
	`ru¡e°3
(5, 2);

268 i‡(
«rgs
==3) {

269 
	`ru¡e°3
(
	`©oi
(
¨gs
[1]),átoi(args[2]));

272 
	`k¥ötf
("Usage:Åt3 [sleepthreads computethreads]\n");

276 
	}
}

	@kern/thread/clock.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<˝u.h
>

33 
	~<wch™.h
>

34 
	~<˛ock.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

53 
	#SCHEDULE_HARDCLOCKS
 4

	)

54 
	#MIGRATE_HARDCLOCKS
 16

	)

59 
wch™
 *
	glbﬁt
;

60 
•ölock
 
	glbﬁt_lock
;

66 
	$h¨d˛ock_boŸ°øp
()

68 
	`•ölock_öô
(&
lbﬁt_lock
);

69 
lbﬁt
 = 
	`wch™_¸óã
("lbolt");

70 i‡(
lbﬁt
 =
NULL
) {

71 
	`∑nic
("Couldn't createÜbolt\n");

73 
	}
}

80 
	$timî˛ock
()

83 
	`•ölock_acquúe
(&
lbﬁt_lock
);

84 
	`wch™_wakóŒ
(
lbﬁt
, &
lbﬁt_lock
);

85 
	`•ölock_ªÀa£
(&
lbﬁt_lock
);

86 
	}
}

93 
	$h¨d˛ock
()

99 
cur˝u
->
c_h¨d˛ocks
++;

100 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
MIGRATE_HARDCLOCKS
) == 0) {

101 
	`thªad_c⁄sidî_migøti⁄
();

103 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
SCHEDULE_HARDCLOCKS
) == 0) {

104 
	`scheduÀ
();

106 
	`thªad_yõld
();

107 
	}
}

113 
	$˛ock¶ìp
(
num_£cs
)

115 
	`•ölock_acquúe
(&
lbﬁt_lock
);

116 
num_£cs
 > 0) {

117 
	`wch™_¶ìp
(
lbﬁt
, &
lbﬁt_lock
);

118 
num_£cs
--;

120 
	`•ölock_ªÀa£
(&
lbﬁt_lock
);

121 
	}
}

	@kern/thread/spinlock.c

31 
	#SPINLOCK_INLINE


	)

32 
	#MEMBAR_INLINE


	)

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<•l.h
>

38 
	~<•ölock.h
>

39 
	~<memb¨.h
>

40 
	~<cuºít.h
>

51 
	$•ölock_öô
(
•ölock
 *
•lk
)

53 
	`•ölock_d©a_£t
(&
•lk
->
•lk_lock
, 0);

54 
•lk
->
•lk_hﬁdî
 = 
NULL
;

55 
	}
}

61 
	$•ölock_˛ónup
(
•ölock
 *
•lk
)

63 
	`KASSERT
(
•lk
->
•lk_hﬁdî
 =
NULL
);

64 
	`KASSERT
(
	`•ölock_d©a_gë
(&
•lk
->
•lk_lock
) == 0);

65 
	}
}

75 
	$•ölock_acquúe
(
•ölock
 *
•lk
)

77 
˝u
 *
my˝u
;

79 
	`•Ãai£
(
IPL_NONE
, 
IPL_HIGH
);

82 i‡(
	`CURCPU_EXISTS
()) {

83 
my˝u
 = 
cur˝u
->
c_£lf
;

84 i‡(
•lk
->
•lk_hﬁdî
 =
my˝u
) {

85 
	`∑nic
("Dódlock o¿•ölock %p\n", 
•lk
);

87 
my˝u
->
c_•ölocks
++;

90 
my˝u
 = 
NULL
;

104 i‡(
	`•ölock_d©a_gë
(&
•lk
->
•lk_lock
) != 0) {

107 i‡(
	`•ölock_d©a_ã°™d£t
(&
•lk
->
•lk_lock
) != 0) {

113 
	`memb¨_°‹e_™y
();

114 
•lk
->
•lk_hﬁdî
 = 
my˝u
;

115 
	}
}

121 
	$•ölock_ªÀa£
(
•ölock
 *
•lk
)

124 i‡(
	`CURCPU_EXISTS
()) {

125 
	`KASSERT
(
•lk
->
•lk_hﬁdî
 =
cur˝u
->
c_£lf
);

126 
	`KASSERT
(
cur˝u
->
c_•ölocks
 > 0);

127 
cur˝u
->
c_•ölocks
--;

130 
•lk
->
•lk_hﬁdî
 = 
NULL
;

131 
	`memb¨_™y_°‹e
();

132 
	`•ölock_d©a_£t
(&
•lk
->
•lk_lock
, 0);

133 
	`•Œowî
(
IPL_HIGH
, 
IPL_NONE
);

134 
	}
}

139 
boﬁ


140 
	$•ölock_do_i_hﬁd
(
•ölock
 *
•lk
)

142 i‡(!
	`CURCPU_EXISTS
()) {

143  
åue
;

147  (
•lk
->
•lk_hﬁdî
 =
cur˝u
->
c_£lf
);

148 
	}
}

	@kern/thread/spl.c

31 
	#SPL_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

87 
	$•Ãai£
(
ﬁd•l
, 
√w•l
)

89 
thªad
 *
cur
 = 
cuπhªad
;

92 
	`KASSERT
(
ﬁd•l
 =
IPL_NONE
);

93 
	`KASSERT
(
√w•l
 =
IPL_HIGH
);

95 i‡(!
	`CURCPU_EXISTS
()) {

100 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

101 
	`˝u_úqoff
();

103 
cur
->
t_ùlhigh_cou¡
++;

104 
	}
}

107 
	$•Œowî
(
ﬁd•l
, 
√w•l
)

109 
thªad
 *
cur
 = 
cuπhªad
;

112 
	`KASSERT
(
ﬁd•l
 =
IPL_HIGH
);

113 
	`KASSERT
(
√w•l
 =
IPL_NONE
);

115 i‡(!
	`CURCPU_EXISTS
()) {

120 
cur
->
t_ùlhigh_cou¡
--;

121 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

122 
	`˝u_úq⁄
();

124 
	}
}

132 
	$•lx
(
•l
)

134 
thªad
 *
cur
 = 
cuπhªad
;

135 
ªt
;

137 i‡(!
	`CURCPU_EXISTS
()) {

139  
•l
;

142 i‡(
cur
->
t_cur•l
 < 
•l
) {

144 
	`•Ãai£
(
cur
->
t_cur•l
, 
•l
);

145 
ªt
 = 
cur
->
t_cur•l
;

146 
cur
->
t_cur•l
 = 
•l
;

148 i‡(
cur
->
t_cur•l
 > 
•l
) {

150 
ªt
 = 
cur
->
t_cur•l
;

151 
cur
->
t_cur•l
 = 
•l
;

152 
	`•Œowî
(
ªt
, 
•l
);

156 
ªt
 = 
•l
;

159  
ªt
;

160 
	}
}

	@kern/thread/synch.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<•ölock.h
>

38 
	~<wch™.h
>

39 
	~<thªad.h
>

40 
	~<cuºít.h
>

41 
	~<synch.h
>

47 
£m≠h‹e
 *

48 
	$£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
)

50 
£m≠h‹e
 *
£m
;

52 
£m
 = 
	`kmÆloc
((
£m≠h‹e
));

53 i‡(
£m
 =
NULL
) {

54  
NULL
;

57 
£m
->
£m_«me
 = 
	`k°rdup
(
«me
);

58 i‡(
£m
->
£m_«me
 =
NULL
) {

59 
	`k‰ì
(
£m
);

60  
NULL
;

63 
£m
->
£m_wch™
 = 
	`wch™_¸óã
(£m->
£m_«me
);

64 i‡(
£m
->
£m_wch™
 =
NULL
) {

65 
	`k‰ì
(
£m
->
£m_«me
);

66 
	`k‰ì
(
£m
);

67  
NULL
;

70 
	`•ölock_öô
(&
£m
->
£m_lock
);

71 
£m
->
£m_cou¡
 = 
öôül_cou¡
;

73  
£m
;

74 
	}
}

77 
	$£m_de°roy
(
£m≠h‹e
 *
£m
)

79 
	`KASSERT
(
£m
 !
NULL
);

82 
	`•ölock_˛ónup
(&
£m
->
£m_lock
);

83 
	`wch™_de°roy
(
£m
->
£m_wch™
);

84 
	`k‰ì
(
£m
->
£m_«me
);

85 
	`k‰ì
(
£m
);

86 
	}
}

89 
	$P
(
£m≠h‹e
 *
£m
)

91 
	`KASSERT
(
£m
 !
NULL
);

99 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

102 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

103 
£m
->
£m_cou¡
 == 0) {

116 
	`wch™_¶ìp
(
£m
->
£m_wch™
, &£m->
£m_lock
);

118 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

119 
£m
->
£m_cou¡
--;

120 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

121 
	}
}

124 
	$V
(
£m≠h‹e
 *
£m
)

126 
	`KASSERT
(
£m
 !
NULL
);

128 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

130 
£m
->
£m_cou¡
++;

131 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

132 
	`wch™_wake⁄e
(
£m
->
£m_wch™
, &£m->
£m_lock
);

134 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

135 
	}
}

141 
lock
 *

142 
	$lock_¸óã
(c⁄° *
«me
)

144 
lock
 *lock;

146 
lock
 = 
	`kmÆloc
((lock));

147 i‡(
lock
 =
NULL
) {

148  
NULL
;

151 
lock
->
lk_«me
 = 
	`k°rdup
(
«me
);

152 i‡(
lock
->
lk_«me
 =
NULL
) {

153 
	`k‰ì
(
lock
);

154  
NULL
;

159  
lock
;

160 
	}
}

163 
	$lock_de°roy
(
lock
 *lock)

165 
	`KASSERT
(
lock
 !
NULL
);

169 
	`k‰ì
(
lock
->
lk_«me
);

170 
	`k‰ì
(
lock
);

171 
	}
}

174 
	$lock_acquúe
(
lock
 *lock)

178 ()
lock
;

179 
	}
}

182 
	$lock_ªÀa£
(
lock
 *lock)

186 ()
lock
;

187 
	}
}

189 
boﬁ


190 
	$lock_do_i_hﬁd
(
lock
 *lock)

194 ()
lock
;

196  
åue
;

197 
	}
}

204 
cv
 *

205 
	$cv_¸óã
(c⁄° *
«me
)

207 
cv
 *cv;

209 
cv
 = 
	`kmÆloc
((cv));

210 i‡(
cv
 =
NULL
) {

211  
NULL
;

214 
cv
->
cv_«me
 = 
	`k°rdup
(
«me
);

215 i‡(
cv
->
cv_«me
==
NULL
) {

216 
	`k‰ì
(
cv
);

217  
NULL
;

222  
cv
;

223 
	}
}

226 
	$cv_de°roy
(
cv
 *cv)

228 
	`KASSERT
(
cv
 !
NULL
);

232 
	`k‰ì
(
cv
->
cv_«me
);

233 
	`k‰ì
(
cv
);

234 
	}
}

237 
	$cv_waô
(
cv
 *cv, 
lock
 *lock)

240 ()
cv
;

241 ()
lock
;

242 
	}
}

245 
	$cv_sig«l
(
cv
 *cv, 
lock
 *lock)

248 ()
cv
;

249 ()
lock
;

250 
	}
}

253 
	$cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock)

256 ()
cv
;

257 ()
lock
;

258 
	}
}

	@kern/thread/thread.c

34 
	#THREADINLINE


	)

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<˝u.h
>

41 
	~<•l.h
>

42 
	~<•ölock.h
>

43 
	~<wch™.h
>

44 
	~<thªad.h
>

45 
	~<thªadli°.h
>

46 
	~<thªad¥iv©e.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<synch.h
>

50 
	~<addr•a˚.h
>

51 
	~<maöbus.h
>

52 
	~<vnode.h
>

56 
	#THREAD_STACK_MAGIC
 0xbØdf00d

	)

59 
	swch™
 {

60 c⁄° *
	mwc_«me
;

61 
thªadli°
 
	mwc_thªads
;

62 
	mwc_ödex
;

66 
DECLARRAY
(
˝u
, 
__UNUSED
 
ölöe
);

67 
DEFARRAY
(
˝u
, 
__UNUSED
 
ölöe
);

68 
˝u¨øy
 
	gÆl˝us
;

71 
DECLARRAY
(
wch™
, 
__UNUSED
 
ölöe
);

72 
DEFARRAY
(
wch™
, 
__UNUSED
 
ölöe
);

73 
•ölock
 
	gÆlwch™s_lock
;

74 
wch™¨øy
 
	gÆlwch™s
;

77 
£m≠h‹e
 *
	g˝u_°¨tup_£m
;

88 
	$thªad_check°ack_öô
(
thªad
 *thread)

90 ((
uöt32_t
 *)
thªad
->
t_°ack
)[0] = 
THREAD_STACK_MAGIC
;

91 ((
uöt32_t
 *)
thªad
->
t_°ack
)[1] = 
THREAD_STACK_MAGIC
;

92 ((
uöt32_t
 *)
thªad
->
t_°ack
)[2] = 
THREAD_STACK_MAGIC
;

93 ((
uöt32_t
 *)
thªad
->
t_°ack
)[3] = 
THREAD_STACK_MAGIC
;

94 
	}
}

108 
	$thªad_check°ack
(
thªad
 *thread)

110 i‡(
thªad
->
t_°ack
 !
NULL
) {

111 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[0] =
THREAD_STACK_MAGIC
);

112 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[1] =
THREAD_STACK_MAGIC
);

113 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[2] =
THREAD_STACK_MAGIC
);

114 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[3] =
THREAD_STACK_MAGIC
);

116 
	}
}

123 
thªad
 *

124 
	$thªad_¸óã
(c⁄° *
«me
)

126 
thªad
 *thread;

128 
	`DEBUGASSERT
(
«me
 !
NULL
);

130 
thªad
 = 
	`kmÆloc
((*thread));

131 i‡(
thªad
 =
NULL
) {

132  
NULL
;

135 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

136 i‡(
thªad
->
t_«me
 =
NULL
) {

137 
	`k‰ì
(
thªad
);

138  
NULL
;

140 
thªad
->
t_wch™_«me
 = "NEW";

141 
thªad
->
t_°©e
 = 
S_READY
;

144 
	`thªad_machdï_öô
(&
thªad
->
t_machdï
);

145 
	`thªadli°node_öô
(&
thªad
->
t_li°node
,Åhread);

146 
thªad
->
t_°ack
 = 
NULL
;

147 
thªad
->
t_c⁄ãxt
 = 
NULL
;

148 
thªad
->
t_˝u
 = 
NULL
;

149 
thªad
->
t_¥oc
 = 
NULL
;

152 
thªad
->
t_ö_öãºu±
 = 
Ál£
;

153 
thªad
->
t_cur•l
 = 
IPL_HIGH
;

154 
thªad
->
t_ùlhigh_cou¡
 = 1;

158  
thªad
;

159 
	}
}

169 
˝u
 *

170 
	$˝u_¸óã
(
h¨dw¨e_numbî
)

172 
˝u
 *
c
;

173 
ªsu…
;

174 
«mebuf
[16];

176 
c
 = 
	`kmÆloc
((*c));

177 i‡(
c
 =
NULL
) {

178 
	`∑nic
("cpu_create: Out of memory\n");

181 
c
->
c_£lf
 = c;

182 
c
->
c_h¨dw¨e_numbî
 = 
h¨dw¨e_numbî
;

184 
c
->
c_cuπhªad
 = 
NULL
;

185 
	`thªadli°_öô
(&
c
->
c_zombõs
);

186 
c
->
c_h¨d˛ocks
 = 0;

187 
c
->
c_•ölocks
 = 0;

189 
c
->
c_isidÀ
 = 
Ál£
;

190 
	`thªadli°_öô
(&
c
->
c_runqueue
);

191 
	`•ölock_öô
(&
c
->
c_runqueue_lock
);

193 
c
->
c_ùi_≥ndög
 = 0;

194 
c
->
c_numshoŸdown
 = 0;

195 
	`•ölock_öô
(&
c
->
c_ùi_lock
);

197 
ªsu…
 = 
	`˝u¨øy_add
(&
Æl˝us
, 
c
, &c->
c_numbî
);

198 i‡(
ªsu…
 != 0) {

199 
	`∑nic
("˝u_¸óã:áºay_add: %s\n", 
	`°ªº‹
(
ªsu…
));

202 
	`¢¥ötf
(
«mebuf
, “amebuf), "<boŸ #%d>", 
c
->
c_numbî
);

203 
c
->
c_cuπhªad
 = 
	`thªad_¸óã
(
«mebuf
);

204 i‡(
c
->
c_cuπhªad
 =
NULL
) {

205 
	`∑nic
("cpu_create:Åhread_create failed\n");

207 
ªsu…
 = 
	`¥oc_addthªad
(
k¥oc
, 
c
->
c_cuπhªad
);

208 i‡(
ªsu…
) {

209 
	`∑nic
("˝u_¸óã:Öroc_addthªad:: %s\n", 
	`°ªº‹
(
ªsu…
));

212 i‡(
c
->
c_numbî
 == 0) {

222 
c
->
c_cuπhªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

223 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

224 
	`∑nic
("cpu_create: couldn'tállocate stack");

226 
	`thªad_check°ack_öô
(
c
->
c_cuπhªad
);

228 
c
->
c_cuπhªad
->
t_˝u
 = c;

230 
	`˝u_machdï_öô
(
c
);

232  
c
;

233 
	}
}

245 
	$thªad_de°roy
(
thªad
 *thread)

247 
	`KASSERT
(
thªad
 !
cuπhªad
);

248 
	`KASSERT
(
thªad
->
t_°©e
 !
S_RUN
);

256 
	`KASSERT
(
thªad
->
t_¥oc
 =
NULL
);

257 i‡(
thªad
->
t_°ack
 !
NULL
) {

258 
	`k‰ì
(
thªad
->
t_°ack
);

260 
	`thªadli°node_˛ónup
(&
thªad
->
t_li°node
);

261 
	`thªad_machdï_˛ónup
(&
thªad
->
t_machdï
);

264 
thªad
->
t_wch™_«me
 = "DESTROYED";

266 
	`k‰ì
(
thªad
->
t_«me
);

267 
	`k‰ì
(
thªad
);

268 
	}
}

278 
	$ex‹ci£
()

280 
thªad
 *
z
;

282 (
z
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_zombõs
)Ë!
NULL
) {

283 
	`KASSERT
(
z
 !
cuπhªad
);

284 
	`KASSERT
(
z
->
t_°©e
 =
S_ZOMBIE
);

285 
	`thªad_de°roy
(
z
);

287 
	}
}

295 
	$thªad_∑nic
()

302 
	`ùi_brﬂdˇ°
(
IPI_PANIC
);

311 
cur˝u
->
c_runqueue
.
é_cou¡
 = 0;

312 
cur˝u
->
c_runqueue
.
é_hód
.
én_√xt
 = &cur˝u->c_runqueue.
é_èû
;

313 
cur˝u
->
c_runqueue
.
é_èû
.
én_¥ev
 = &cur˝u->c_runqueue.
é_hód
;

331 
	}
}

337 
	$thªad_shutdown
()

345 
	`ùi_brﬂdˇ°
(
IPI_OFFLINE
);

346 
	}
}

352 
	$thªad_boŸ°øp
()

354 
˝u
 *
boŸ˝u
;

355 
thªad
 *
boŸthªad
;

357 
	`˝u¨øy_öô
(&
Æl˝us
);

367 
boŸ˝u
 = 
	`˝u_¸óã
(0);

368 
boŸthªad
 = 
boŸ˝u
->
c_cuπhªad
;

375 
	`INIT_CURCPU
(
boŸ˝u
, 
boŸthªad
);

382 
cuπhªad
->
t_˝u
 = 
cur˝u
;

383 
cur˝u
->
c_cuπhªad
 = 
cuπhªad
;

386 
	`KASSERT
(
cuπhªad
->
t_¥oc
 !
NULL
);

389 
	`•ölock_öô
(&
Ælwch™s_lock
);

390 
	`wch™¨øy_öô
(&
Ælwch™s
);

393 
	}
}

404 
	$˝u_h©ch
(
so·w¨e_numbî
)

406 
buf
[64];

408 
	`KASSERT
(
cur˝u
 !
NULL
);

409 
	`KASSERT
(
cuπhªad
 !
NULL
);

410 
	`KASSERT
(
cur˝u
->
c_numbî
 =
so·w¨e_numbî
);

412 
	`•l0
();

413 
	`˝u_idítify
(
buf
, (buf));

415 
	`k¥ötf
("˝u%u: %s\n", 
so·w¨e_numbî
, 
buf
);

417 
	`V
(
˝u_°¨tup_£m
);

418 
	`thªad_exô
();

419 
	}
}

425 
	$thªad_°¨t_˝us
()

427 
buf
[64];

428 
i
;

430 
	`˝u_idítify
(
buf
, (buf));

431 
	`k¥ötf
("˝u0: %s\n", 
buf
);

433 
˝u_°¨tup_£m
 = 
	`£m_¸óã
("cpu_hatch", 0);

434 
	`maöbus_°¨t_˝us
();

436 
i
=0; i<
	`˝u¨øy_num
(&
Æl˝us
) - 1; i++) {

437 
	`P
(
˝u_°¨tup_£m
);

439 
	`£m_de°roy
(
˝u_°¨tup_£m
);

440 
˝u_°¨tup_£m
 = 
NULL
;

441 
	}
}

450 
	$thªad_make_ru¬abÀ
(
thªad
 *
èrgë
, 
boﬁ
 
Æªady_have_lock
)

452 
˝u
 *
èrgë˝u
;

455 
èrgë˝u
 = 
èrgë
->
t_˝u
;

457 i‡(
Æªady_have_lock
) {

459 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
èrgë˝u
->
c_runqueue_lock
));

462 
	`•ölock_acquúe
(&
èrgë˝u
->
c_runqueue_lock
);

466 
èrgë
->
t_°©e
 = 
S_READY
;

467 
	`thªadli°_addèû
(&
èrgë˝u
->
c_runqueue
, 
èrgë
);

469 i‡(
èrgë˝u
->
c_isidÀ
) {

474 
	`ùi_£nd
(
èrgë˝u
, 
IPI_UNIDLE
);

477 i‡(!
Æªady_have_lock
) {

478 
	`•ölock_ªÀa£
(&
èrgë˝u
->
c_runqueue_lock
);

480 
	}
}

493 
thªad_f‹k
(c⁄° *
«me
,

494 
¥oc
 *proc,

495 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

496 *
d©a1
, 
d©a2
)

498 
thªad
 *
√wthªad
;

499 
ªsu…
;

501 
√wthªad
 = 
	`thªad_¸óã
(
«me
);

502 i‡(
√wthªad
 =
NULL
) {

503  
ENOMEM
;

507 
√wthªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

508 i‡(
√wthªad
->
t_°ack
 =
NULL
) {

509 
	`thªad_de°roy
(
√wthªad
);

510  
ENOMEM
;

512 
	`thªad_check°ack_öô
(
√wthªad
);

519 
√wthªad
->
t_˝u
 = 
cuπhªad
->t_cpu;

522 i‡(
¥oc
 =
NULL
) {

523 
¥oc
 = 
cuπhªad
->
t_¥oc
;

525 
ªsu…
 = 
	`¥oc_addthªad
(
¥oc
, 
√wthªad
);

526 i‡(
ªsu…
) {

528 
	`thªad_de°roy
(
√wthªad
);

529  
ªsu…
;

537 
√wthªad
->
t_ùlhigh_cou¡
++;

540 
	`swôch‰ame_öô
(
√wthªad
, 
íåypoöt
, 
d©a1
, 
d©a2
);

543 
	`thªad_make_ru¬abÀ
(
√wthªad
, 
Ál£
);

546 
	}
}

560 
	$thªad_swôch
(
thªad°©e_t
 
√w°©e
, 
wch™
 *
wc
, 
•ölock
 *
lk
)

562 
thªad
 *
cur
, *
√xt
;

563 
•l
;

565 
	`DEBUGASSERT
(
cur˝u
->
c_cuπhªad
 =
cuπhªad
);

566 
	`DEBUGASSERT
(
cuπhªad
->
t_˝u
 =
cur˝u
->
c_£lf
);

569 
•l
 = 
	`•lhigh
();

571 
cur
 = 
cuπhªad
;

577 i‡(
cur˝u
->
c_isidÀ
) {

578 
	`•lx
(
•l
);

583 
	`thªad_check°ack
(
cur
);

586 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

589 i‡(
√w°©e
 =
S_READY
 && 
	`thªadli°_i£m±y
(&
cur˝u
->
c_runqueue
)) {

590 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

591 
	`•lx
(
•l
);

596 
√w°©e
) {

597 
S_RUN
:

598 
	`∑nic
("Illegal S_RUN inÅhread_switch\n");

599 
S_READY
:

600 
	`thªad_make_ru¬abÀ
(
cur
, 
åue
 );

602 
S_SLEEP
:

603 
cur
->
t_wch™_«me
 = 
wc
->
wc_«me
;

612 
	`thªadli°_addèû
(&
wc
->
wc_thªads
, 
cur
);

613 
	`•ölock_ªÀa£
(
lk
);

615 
S_ZOMBIE
:

616 
cur
->
t_wch™_«me
 = "ZOMBIE";

617 
	`thªadli°_addèû
(&
cur˝u
->
c_zombõs
, 
cur
);

620 
cur
->
t_°©e
 = 
√w°©e
;

640 
cur˝u
->
c_isidÀ
 = 
åue
;

642 
√xt
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_runqueue
);

643 i‡(
√xt
 =
NULL
) {

644 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

645 
	`˝u_idÀ
();

646 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

648 } 
√xt
 =
NULL
);

649 
cur˝u
->
c_isidÀ
 = 
Ál£
;

658 
cur˝u
->
c_cuπhªad
 = 
√xt
;

659 
cuπhªad
 = 
√xt
;

662 
	`swôch‰ame_swôch
(&
cur
->
t_c⁄ãxt
, &
√xt
->t_context);

712 
cur
->
t_wch™_«me
 = 
NULL
;

713 
cur
->
t_°©e
 = 
S_RUN
;

716 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

719 
	`as_a˘iv©e
();

722 
	`ex‹ci£
();

725 
	`•lx
(
•l
);

726 
	}
}

737 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

738 *
d©a1
, 
d©a2
)

740 
thªad
 *
cur
;

742 
cur
 = 
cuπhªad
;

745 
cur
->
t_wch™_«me
 = 
NULL
;

746 
cur
->
t_°©e
 = 
S_RUN
;

749 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

752 
	`as_a˘iv©e
();

755 
	`ex‹ci£
();

758 
	`•l0
();

761 
	`íåypoöt
(
d©a1
, 
d©a2
);

764 
	`thªad_exô
();

765 
	}
}

777 
	$thªad_exô
()

779 
thªad
 *
cur
;

781 
cur
 = 
cuπhªad
;

787 
	`¥oc_ªmthªad
(
cur
);

790 
	`KASSERT
(
cur
->
t_¥oc
 =
NULL
);

793 
	`thªad_check°ack
(
cur
);

796 
	`•lhigh
();

797 
	`thªad_swôch
(
S_ZOMBIE
, 
NULL
, NULL);

798 
	`∑nic
("braaaaaaaiiiiiiiiiiinssssss\n");

799 
	}
}

805 
	$thªad_yõld
()

807 
	`thªad_swôch
(
S_READY
, 
NULL
, NULL);

808 
	}
}

820 
	$scheduÀ
()

826 
	}
}

846 
	$thªad_c⁄sidî_migøti⁄
()

848 
my_cou¡
, 
tŸÆ_cou¡
, 
⁄e_sh¨e
, 
to_£nd
;

849 
i
, 
num˝us
;

850 
˝u
 *
c
;

851 
thªadli°
 
vi˘ims
;

852 
thªad
 *
t
;

854 
my_cou¡
 = 
tŸÆ_cou¡
 = 0;

855 
num˝us
 = 
	`˝u¨øy_num
(&
Æl˝us
);

856 
i
=0; i<
num˝us
; i++) {

857 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

858 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

859 
tŸÆ_cou¡
 +
c
->
c_runqueue
.
é_cou¡
;

860 i‡(
c
 =
cur˝u
->
c_£lf
) {

861 
my_cou¡
 = 
c
->
c_runqueue
.
é_cou¡
;

863 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

866 
⁄e_sh¨e
 = 
	`DIVROUNDUP
(
tŸÆ_cou¡
, 
num˝us
);

867 i‡(
my_cou¡
 < 
⁄e_sh¨e
) {

871 
to_£nd
 = 
my_cou¡
 - 
⁄e_sh¨e
;

872 
	`thªadli°_öô
(&
vi˘ims
);

873 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

874 
i
=0; i<
to_£nd
; i++) {

875 
t
 = 
	`thªadli°_ªmèû
(&
cur˝u
->
c_runqueue
);

876 
	`thªadli°_addhód
(&
vi˘ims
, 
t
);

878 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

880 
i
=0; i < 
num˝us
 && 
to_£nd
 > 0; i++) {

881 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

882 i‡(
c
 =
cur˝u
->
c_£lf
) {

885 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

886 
c
->
c_runqueue
.
é_cou¡
 < 
⁄e_sh¨e
 && 
to_£nd
 > 0) {

887 
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
);

910 i‡(
t
 =
cuπhªad
) {

911 
	`thªadli°_addèû
(&
vi˘ims
, 
t
);

912 
to_£nd
--;

916 
t
->
t_˝u
 = 
c
;

917 
	`thªadli°_addèû
(&
c
->
c_runqueue
, 
t
);

918 
	`DEBUG
(
DB_THREADS
,

920 
t
->
t_«me
, 
cur˝u
->
c_numbî
, 
c
->c_number);

921 
to_£nd
--;

922 i‡(
c
->
c_isidÀ
) {

927 
	`ùi_£nd
(
c
, 
IPI_UNIDLE
);

930 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

938 i‡(!
	`thªadli°_i£m±y
(&
vi˘ims
)) {

939 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

940 (
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
)Ë!
NULL
) {

941 
	`thªadli°_addèû
(&
cur˝u
->
c_runqueue
, 
t
);

943 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

946 
	`KASSERT
(
	`thªadli°_i£m±y
(&
vi˘ims
));

947 
	`thªadli°_˛ónup
(&
vi˘ims
);

948 
	}
}

964 
wch™
 *

965 
	$wch™_¸óã
(c⁄° *
«me
)

967 
wch™
 *
wc
;

968 
ªsu…
;

970 
wc
 = 
	`kmÆloc
((*wc));

971 i‡(
wc
 =
NULL
) {

972  
NULL
;

974 
	`thªadli°_öô
(&
wc
->
wc_thªads
);

975 
wc
->
wc_«me
 = 
«me
;

978 
	`•ölock_acquúe
(&
Ælwch™s_lock
);

979 
ªsu…
 = 
	`wch™¨øy_add
(&
Ælwch™s
, 
wc
, &wc->
wc_ödex
);

980 
	`•ölock_ªÀa£
(&
Ælwch™s_lock
);

981 i‡(
ªsu…
) {

982 
	`KASSERT
(
ªsu…
 =
ENOMEM
);

983 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

984 
	`k‰ì
(
wc
);

985  
NULL
;

988  
wc
;

989 
	}
}

996 
	$wch™_de°roy
(
wch™
 *
wc
)

998 
num
;

999 
wch™
 *
wc2
;

1002 
	`•ölock_acquúe
(&
Ælwch™s_lock
);

1003 
num
 = 
	`wch™¨øy_num
(&
Ælwch™s
);

1004 
	`KASSERT
(
	`wch™¨øy_gë
(&
Ælwch™s
, 
wc
->
wc_ödex
) == wc);

1005 i‡(
wc
->
wc_ödex
 < 
num
 - 1) {

1007 
wc2
 = 
	`wch™¨øy_gë
(&
Ælwch™s
, 
num
 - 1);

1008 
	`wch™¨øy_£t
(&
Ælwch™s
, 
wc
->
wc_ödex
, 
wc2
);

1009 
wc2
->
wc_ödex
 = 
wc
->wc_index;

1011 
	`wch™¨øy_£tsize
(&
Ælwch™s
, 
num
 - 1);

1012 
	`•ölock_ªÀa£
(&
Ælwch™s_lock
);

1014 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

1015 
	`k‰ì
(
wc
);

1016 
	}
}

1026 
	$wch™_¶ìp
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1029 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
);

1032 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1035 
	`KASSERT
(
cur˝u
->
c_•ölocks
 == 1);

1037 
	`thªad_swôch
(
S_SLEEP
, 
wc
, 
lk
);

1038 
	`•ölock_acquúe
(
lk
);

1039 
	}
}

1045 
	$wch™_wake⁄e
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1047 
thªad
 *
èrgë
;

1049 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1052 
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
);

1054 i‡(
èrgë
 =
NULL
) {

1067 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1068 
	}
}

1074 
	$wch™_wakóŒ
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1076 
thªad
 *
èrgë
;

1077 
thªadli°
 
li°
;

1079 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1081 
	`thªadli°_öô
(&
li°
);

1087 (
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
)Ë!
NULL
) {

1088 
	`thªadli°_addèû
(&
li°
, 
èrgë
);

1096 (
èrgë
 = 
	`thªadli°_ªmhód
(&
li°
)Ë!
NULL
) {

1097 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1100 
	`thªadli°_˛ónup
(&
li°
);

1101 
	}
}

1107 
boﬁ


1108 
	$wch™_i£m±y
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1110 
boﬁ
 
ªt
;

1112 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1113 
ªt
 = 
	`thªadli°_i£m±y
(&
wc
->
wc_thªads
);

1115  
ªt
;

1116 
	}
}

1128 
	$ùi_£nd
(
˝u
 *
èrgë
, 
code
)

1130 
	`KASSERT
(
code
 >= 0 && code < 32);

1132 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1133 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
code
;

1134 
	`maöbus_£nd_ùi
(
èrgë
);

1135 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1136 
	}
}

1139 
	$ùi_brﬂdˇ°
(
code
)

1141 
i
;

1142 
˝u
 *
c
;

1144 
i
=0; i < 
	`˝u¨øy_num
(&
Æl˝us
); i++) {

1145 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

1146 i‡(
c
 !
cur˝u
->
c_£lf
) {

1147 
	`ùi_£nd
(
c
, 
code
);

1150 
	}
}

1153 
	$ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
)

1155 
n
;

1157 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1159 
n
 = 
èrgë
->
c_numshoŸdown
;

1160 i‡(
n
 =
TLBSHOOTDOWN_MAX
) {

1161 
èrgë
->
c_numshoŸdown
 = 
TLBSHOOTDOWN_ALL
;

1164 
èrgë
->
c_shoŸdown
[
n
] = *
m≠pög
;

1165 
èrgë
->
c_numshoŸdown
 = 
n
+1;

1168 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
IPI_TLBSHOOTDOWN
;

1169 
	`maöbus_£nd_ùi
(
èrgë
);

1171 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1172 
	}
}

1175 
	$öãΩro˚ss‹_öãºu±
()

1177 
uöt32_t
 
bôs
;

1178 
i
;

1180 
	`•ölock_acquúe
(&
cur˝u
->
c_ùi_lock
);

1181 
bôs
 = 
cur˝u
->
c_ùi_≥ndög
;

1183 i‡(
bôs
 & (1U << 
IPI_PANIC
)) {

1185 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1186 
	`˝u_hÆt
();

1188 i‡(
bôs
 & (1U << 
IPI_OFFLINE
)) {

1190 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1191 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

1192 i‡(!
cur˝u
->
c_isidÀ
) {

1193 
	`k¥ötf
("cpu%d: offline: warning:Çot idle\n",

1194 
cur˝u
->
c_numbî
);

1196 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

1197 
	`k¥ötf
("˝u%d: ofÊöe.\n", 
cur˝u
->
c_numbî
);

1198 
	`˝u_hÆt
();

1200 i‡(
bôs
 & (1U << 
IPI_UNIDLE
)) {

1206 i‡(
bôs
 & (1U << 
IPI_TLBSHOOTDOWN
)) {

1207 i‡(
cur˝u
->
c_numshoŸdown
 =
TLBSHOOTDOWN_ALL
) {

1208 
	`vm_ébshoŸdown_Æl
();

1211 
i
=0; i<
cur˝u
->
c_numshoŸdown
; i++) {

1212 
	`vm_ébshoŸdown
(&
cur˝u
->
c_shoŸdown
[
i
]);

1215 
cur˝u
->
c_numshoŸdown
 = 0;

1218 
cur˝u
->
c_ùi_≥ndög
 = 0;

1219 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1220 
	}
}

	@kern/thread/threadlist.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªadli°.h
>

40 
	$thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
t
)

42 
	`DEBUGASSERT
(
én
 !
NULL
);

43 
	`KASSERT
(
t
 !
NULL
);

45 
én
->
én_√xt
 = 
NULL
;

46 
én
->
én_¥ev
 = 
NULL
;

47 
én
->
én_£lf
 = 
t
;

48 
	}
}

51 
	$thªadli°node_˛ónup
(
thªadli°node
 *
én
)

53 
	`DEBUGASSERT
(
én
 !
NULL
);

55 
	`KASSERT
(
én
->
én_√xt
 =
NULL
);

56 
	`KASSERT
(
én
->
én_¥ev
 =
NULL
);

57 
	`KASSERT
(
én
->
én_£lf
 !
NULL
);

58 
	}
}

61 
	$thªadli°_öô
(
thªadli°
 *
é
)

63 
	`DEBUGASSERT
(
é
 !
NULL
);

65 
é
->
é_hód
.
én_√xt
 = &é->
é_èû
;

66 
é
->
é_hód
.
én_¥ev
 = 
NULL
;

67 
é
->
é_èû
.
én_√xt
 = 
NULL
;

68 
é
->
é_èû
.
én_¥ev
 = &é->
é_hód
;

69 
é
->
é_hód
.
én_£lf
 = 
NULL
;

70 
é
->
é_èû
.
én_£lf
 = 
NULL
;

71 
é
->
é_cou¡
 = 0;

72 
	}
}

75 
	$thªadli°_˛ónup
(
thªadli°
 *
é
)

77 
	`DEBUGASSERT
(
é
 !
NULL
);

78 
	`DEBUGASSERT
(
é
->
é_hód
.
én_√xt
 =&é->
é_èû
);

79 
	`DEBUGASSERT
(
é
->
é_hód
.
én_¥ev
 =
NULL
);

80 
	`DEBUGASSERT
(
é
->
é_èû
.
én_√xt
 =
NULL
);

81 
	`DEBUGASSERT
(
é
->
é_èû
.
én_¥ev
 =&é->
é_hód
);

82 
	`DEBUGASSERT
(
é
->
é_hód
.
én_£lf
 =
NULL
);

83 
	`DEBUGASSERT
(
é
->
é_èû
.
én_£lf
 =
NULL
);

85 
	`KASSERT
(
	`thªadli°_i£m±y
(
é
));

86 
	`KASSERT
(
é
->
é_cou¡
 == 0);

89 
	}
}

91 
boﬁ


92 
	$thªadli°_i£m±y
(
thªadli°
 *
é
)

94 
	`DEBUGASSERT
(
é
 !
NULL
);

96  (
é
->
é_cou¡
 == 0);

97 
	}
}

107 
	$thªadli°_ö£πa·înode
(
thªadli°node
 *
⁄li°
, 
thªad
 *
t
)

109 
thªadli°node
 *
addì
;

111 
addì
 = &
t
->
t_li°node
;

113 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

114 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

116 
addì
->
én_¥ev
 = 
⁄li°
;

117 
addì
->
én_√xt
 = 
⁄li°
->tln_next;

118 
addì
->
én_¥ev
->
én_√xt
 =áddee;

119 
addì
->
én_√xt
->
én_¥ev
 =áddee;

120 
	}
}

127 
	$thªadli°_ö£πbef‹íode
(
thªad
 *
t
, 
thªadli°node
 *
⁄li°
)

129 
thªadli°node
 *
addì
;

131 
addì
 = &
t
->
t_li°node
;

133 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

134 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

136 
addì
->
én_¥ev
 = 
⁄li°
->tln_prev;

137 
addì
->
én_√xt
 = 
⁄li°
;

138 
addì
->
én_¥ev
->
én_√xt
 =áddee;

139 
addì
->
én_√xt
->
én_¥ev
 =áddee;

140 
	}
}

147 
	$thªadli°_ªmovíode
(
thªadli°node
 *
én
)

149 
	`DEBUGASSERT
(
én
 !
NULL
);

150 
	`DEBUGASSERT
(
én
->
én_¥ev
 !
NULL
);

151 
	`DEBUGASSERT
(
én
->
én_√xt
 !
NULL
);

153 
én
->
én_¥ev
->
én_√xt
 =Åln->tln_next;

154 
én
->
én_√xt
->
én_¥ev
 =Åln->tln_prev;

155 
én
->
én_¥ev
 = 
NULL
;

156 
én
->
én_√xt
 = 
NULL
;

157 
	}
}

163 
	$thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
)

165 
	`DEBUGASSERT
(
é
 !
NULL
);

166 
	`DEBUGASSERT
(
t
 !
NULL
);

168 
	`thªadli°_ö£πa·înode
(&
é
->
é_hód
, 
t
);

169 
é
->
é_cou¡
++;

170 
	}
}

173 
	$thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
)

175 
	`DEBUGASSERT
(
é
 !
NULL
);

176 
	`DEBUGASSERT
(
t
 !
NULL
);

178 
	`thªadli°_ö£πbef‹íode
(
t
, &
é
->
é_èû
);

179 
é
->
é_cou¡
++;

180 
	}
}

182 
thªad
 *

183 
	$thªadli°_ªmhód
(
thªadli°
 *
é
)

185 
thªadli°node
 *
én
;

187 
	`DEBUGASSERT
(
é
 !
NULL
);

189 
én
 = 
é
->
é_hód
.
én_√xt
;

190 i‡(
én
->
én_√xt
 =
NULL
) {

192  
NULL
;

194 
	`thªadli°_ªmovíode
(
én
);

195 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

196 
é
->
é_cou¡
--;

197  
én
->
én_£lf
;

198 
	}
}

200 
thªad
 *

201 
	$thªadli°_ªmèû
(
thªadli°
 *
é
)

203 
thªadli°node
 *
én
;

205 
	`DEBUGASSERT
(
é
 !
NULL
);

207 
én
 = 
é
->
é_èû
.
én_¥ev
;

208 i‡(
én
->
én_¥ev
 =
NULL
) {

210  
NULL
;

212 
	`thªadli°_ªmovíode
(
én
);

213 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

214 
é
->
é_cou¡
--;

215  
én
->
én_£lf
;

216 
	}
}

219 
	$thªadli°_ö£πa·î
(
thªadli°
 *
é
,

220 
thªad
 *
⁄li°
, thªad *
addì
)

222 
	`thªadli°_ö£πa·înode
(&
⁄li°
->
t_li°node
, 
addì
);

223 
é
->
é_cou¡
++;

224 
	}
}

227 
	$thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

228 
thªad
 *
addì
, thªad *
⁄li°
)

230 
	`thªadli°_ö£πbef‹íode
(
addì
, &
⁄li°
->
t_li°node
);

231 
é
->
é_cou¡
++;

232 
	}
}

235 
	$thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
)

237 
	`thªadli°_ªmovíode
(&
t
->
t_li°node
);

238 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

239 
é
->
é_cou¡
--;

240 
	}
}

	@kern/vfs/device.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<°©.h
>

40 
	~<lib.h
>

41 
	~<uio.h
>

42 
	~<synch.h
>

43 
	~<vnode.h
>

44 
	~<devi˚.h
>

53 
	$dev_óch›í
(
vnode
 *
v
, 
Êags
)

55 
devi˚
 *
d
 = 
v
->
vn_d©a
;

57 i‡(
Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

58  
EINVAL
;

61  
	`DEVOP_EACHOPEN
(
d
, 
Êags
);

62 
	}
}

70 
	$dev_ª˛aim
(
vnode
 *
v
)

72 ()
v
;

75 
	}
}

86 
	$dev_åy£ek
(
devi˚
 *
d
, 
off_t
 
pos
)

88 i‡(
d
->
d_blocks
 > 0) {

89 i‡((
pos
 % 
d
->
d_blocksize
)!=0) {

91  
EINVAL
;

93 i‡(
pos
 / 
d
->
d_blocksize
 >d->
d_blocks
) {

95  
EINVAL
;

102 
	}
}

109 
	$dev_ªad
(
vnode
 *
v
, 
uio
 *uio)

111 
devi˚
 *
d
 = 
v
->
vn_d©a
;

112 
ªsu…
;

114 
ªsu…
 = 
	`dev_åy£ek
(
d
, 
uio
->
uio_off£t
);

115 i‡(
ªsu…
) {

116  
ªsu…
;

119 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

120  
	`DEVOP_IO
(
d
, 
uio
);

121 
	}
}

128 
	$dev_wrôe
(
vnode
 *
v
, 
uio
 *uio)

130 
devi˚
 *
d
 = 
v
->
vn_d©a
;

131 
ªsu…
;

133 
ªsu…
 = 
	`dev_åy£ek
(
d
, 
uio
->
uio_off£t
);

134 i‡(
ªsu…
) {

135  
ªsu…
;

138 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

139  
	`DEVOP_IO
(
d
, 
uio
);

140 
	}
}

147 
	$dev_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

149 
devi˚
 *
d
 = 
v
->
vn_d©a
;

150  
	`DEVOP_IOCTL
(
d
, 
›
, 
d©a
);

151 
	}
}

160 
	$dev_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

162 
devi˚
 *
d
 = 
v
->
vn_d©a
;

163 
ªsu…
;

165 
	`bzîo
(
°©buf
, (
°©
));

167 i‡(
d
->
d_blocks
 > 0) {

168 
°©buf
->
°_size
 = 
d
->
d_blocks
 * d->
d_blocksize
;

169 
°©buf
->
°_blksize
 = 
d
->
d_blocksize
;

172 
°©buf
->
°_size
 = 0;

175 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

176 i‡(
ªsu…
) {

177  
ªsu…
;

180 
°©buf
->
°_mode
 |= 0600;

182 
°©buf
->
°_∆ök
 = 1;

183 
°©buf
->
°_blocks
 = 
d
->
d_blocks
;

186 
°©buf
->
°_dev
 = 0;

189 
°©buf
->
°_rdev
 = 
d
->
d_devnumbî
;

192 
	}
}

201 
	$dev_gëty≥
(
vnode
 *
v
, 
mode_t
 *
ªt
)

203 
devi˚
 *
d
 = 
v
->
vn_d©a
;

204 i‡(
d
->
d_blocks
 > 0) {

205 *
ªt
 = 
S_IFBLK
;

208 *
ªt
 = 
S_IFCHR
;

211 
	}
}

217 
boﬁ


218 
	$dev_is£ekabÀ
(
vnode
 *
v
)

220 
devi˚
 *
d
 = 
v
->
vn_d©a
;

222 i‡(
d
->
d_blocks
 == 0) {

223  
Ál£
;

225  
åue
;

226 
	}
}

233 
	$nuŒ_fsync
(
vnode
 *
v
)

235 ()
v
;

237 
	}
}

245 
	$dev_mm≠
(
vnode
 *
v
 )

247 ()
v
;

248  
ENOSYS
;

249 
	}
}

256 
	$dev_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

258 
devi˚
 *
d
 = 
v
->
vn_d©a
;

263 i‡(
d
->
d_blocks
 > 0 && (
off_t
)(d->d_blocks*d->
d_blocksize
Ë=
Àn
) {

267  
EINVAL
;

268 
	}
}

278 
	$dev_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

286 ()
v
;

287 ()
uio
;

290 
	}
}

306 
	$dev_lookup
(
vnode
 *
dú
,

307 *
∑th«me
, 
vnode
 **
ªsu…
)

314 i‡(
	`°æí
(
∑th«me
)>0) {

315  
ENOENT
;

317 
	`VOP_INCREF
(
dú
);

318 *
ªsu…
 = 
dú
;

320 
	}
}

325 c⁄° 
vnode_›s
 
	gdev_vnode_›s
 = {

326 .
v›_magic
 = 
VOP_MAGIC
,

328 .
	gv›_óch›í
 = 
dev_óch›í
,

329 .
	gv›_ª˛aim
 = 
dev_ª˛aim
,

330 .
	gv›_ªad
 = 
dev_ªad
,

331 .
	gv›_ªadlök
 = 
v›Áû_uio_övÆ
,

332 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nŸdú
,

333 .
	gv›_wrôe
 = 
dev_wrôe
,

334 .
	gv›_io˘l
 = 
dev_io˘l
,

335 .
	gv›_°©
 = 
dev_°©
,

336 .
	gv›_gëty≥
 = 
dev_gëty≥
,

337 .
	gv›_is£ekabÀ
 = 
dev_is£ekabÀ
,

338 .
	gv›_fsync
 = 
nuŒ_fsync
,

339 .
	gv›_mm≠
 = 
dev_mm≠
,

340 .
	gv›_åunˇã
 = 
dev_åunˇã
,

341 .
	gv›_«mefûe
 = 
dev_«mefûe
,

342 .
	gv›_¸ót
 = 
v›Áû_¸ót_nŸdú
,

343 .
	gv›_symlök
 = 
v›Áû_symlök_nŸdú
,

344 .
	gv›_mkdú
 = 
v›Áû_mkdú_nŸdú
,

345 .
	gv›_lök
 = 
v›Áû_lök_nŸdú
,

346 .
	gv›_ªmove
 = 
v›Áû_°rög_nŸdú
,

347 .
	gv›_rmdú
 = 
v›Áû_°rög_nŸdú
,

348 .
	gv›_ª«me
 = 
v›Áû_ª«me_nŸdú
,

349 .
	gv›_lookup
 = 
dev_lookup
,

350 .
	gv›_look∑ª¡
 = 
v›Áû_look∑ª¡_nŸdú
,

356 
vnode
 *

357 
	$dev_¸óã_vnode
(
devi˚
 *
dev
)

359 
ªsu…
;

360 
vnode
 *
v
;

362 
v
 = 
	`kmÆloc
((
vnode
));

363 i‡(
v
==
NULL
) {

364  
NULL
;

367 
ªsu…
 = 
	`vnode_öô
(
v
, &
dev_vnode_›s
, 
NULL
, 
dev
);

368 i‡(
ªsu…
 != 0) {

369 
	`∑nic
("While creating vnode for device: vnode_init: %s\n",

370 
	`°ªº‹
(
ªsu…
));

373  
v
;

374 
	}
}

	@kern/vfs/devnull.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<vfs.h
>

39 
	~<devi˚.h
>

44 
	$nuŒ›í
(
devi˚
 *
dev
, 
›íÊags
)

46 ()
dev
;

47 ()
›íÊags
;

50 
	}
}

55 
	$nuŒio
(
devi˚
 *
dev
, 
uio
 *uio)

66 ()
dev
;

68 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

69 
uio
->
uio_ªsid
 = 0;

73 
	}
}

78 
	$nuŒio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

84 ()
dev
;

85 ()
›
;

86 ()
d©a
;

88  
EINVAL
;

89 
	}
}

91 c⁄° 
devi˚_›s
 
	gnuŒ_dev›s
 = {

92 .
dev›_óch›í
 = 
nuŒ›í
,

93 .
	gdev›_io
 = 
nuŒio
,

94 .
	gdev›_io˘l
 = 
nuŒio˘l
,

101 
	$devnuŒ_¸óã
()

103 
ªsu…
;

104 
devi˚
 *
dev
;

106 
dev
 = 
	`kmÆloc
((*dev));

107 i‡(
dev
==
NULL
) {

108 
	`∑nic
("CouldÇotáddÇull device: out of memory\n");

111 
dev
->
d_›s
 = &
nuŒ_dev›s
;

113 
dev
->
d_blocks
 = 0;

114 
dev
->
d_blocksize
 = 1;

116 
dev
->
d_devnumbî
 = 0;

118 
dev
->
d_d©a
 = 
NULL
;

120 
ªsu…
 = 
	`vfs_adddev
("nuŒ", 
dev
, 0);

121 i‡(
ªsu…
) {

122 
	`∑nic
("CouldÇŸáddÇuŒ devi˚: %s\n", 
	`°ªº‹
(
ªsu…
));

124 
	}
}

	@kern/vfs/vfscwd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<°©.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<¥oc.h
>

40 
	~<cuºít.h
>

41 
	~<vfs.h
>

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	$vfs_gëcurdú
(
vnode
 **
ªt
)

51 
rv
 = 0;

53 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

54 i‡(
cuΩroc
->
p_cwd
!=
NULL
) {

55 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

56 *
ªt
 = 
cuΩroc
->
p_cwd
;

59 
rv
 = 
ENOENT
;

61 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

63  
rv
;

64 
	}
}

71 
	$vfs_£tcurdú
(
vnode
 *
dú
)

73 
vnode
 *
ﬁd
;

74 
mode_t
 
vty≥
;

75 
ªsu…
;

77 
ªsu…
 = 
	`VOP_GETTYPE
(
dú
, &
vty≥
);

78 i‡(
ªsu…
) {

79  
ªsu…
;

81 i‡(
vty≥
 !
S_IFDIR
) {

82  
ENOTDIR
;

85 
	`VOP_INCREF
(
dú
);

87 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

88 
ﬁd
 = 
cuΩroc
->
p_cwd
;

89 
cuΩroc
->
p_cwd
 = 
dú
;

90 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

92 i‡(
ﬁd
!=
NULL
) {

93 
	`VOP_DECREF
(
ﬁd
);

97 
	}
}

103 
	$vfs_˛órcurdú
()

105 
vnode
 *
ﬁd
;

107 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

108 
ﬁd
 = 
cuΩroc
->
p_cwd
;

109 
cuΩroc
->
p_cwd
 = 
NULL
;

110 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

112 i‡(
ﬁd
!=
NULL
) {

113 
	`VOP_DECREF
(
ﬁd
);

117 
	}
}

124 
	$vfs_chdú
(*
∑th
)

126 
vnode
 *
vn
;

127 
ªsu…
;

129 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

130 i‡(
ªsu…
) {

131  
ªsu…
;

133 
ªsu…
 = 
	`vfs_£tcurdú
(
vn
);

134 
	`VOP_DECREF
(
vn
);

135  
ªsu…
;

136 
	}
}

144 
	$vfs_gëcwd
(
uio
 *uio)

146 
vnode
 *
cwd
;

147 
ªsu…
;

148 c⁄° *
«me
;

149 
cﬁ⁄
=':';

151 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

153 
ªsu…
 = 
	`vfs_gëcurdú
(&
cwd
);

154 i‡(
ªsu…
) {

155  
ªsu…
;

159 
	`KASSERT
(
cwd
->
vn_fs
 !
NULL
);

161 
«me
 = 
	`FSOP_GETVOLNAME
(
cwd
->
vn_fs
);

162 i‡(
«me
==
NULL
) {

163 
	`vfs_biglock_acquúe
();

164 
«me
 = 
	`vfs_gëdev«me
(
cwd
->
vn_fs
);

165 
	`vfs_biglock_ªÀa£
();

167 
	`KASSERT
(
«me
 !
NULL
);

169 
ªsu…
 = 
	`uiomove
((*)
«me
, 
	`°æí
“ame), 
uio
);

170 i‡(
ªsu…
) {

171 
out
;

173 
ªsu…
 = 
	`uiomove
(&
cﬁ⁄
, 1, 
uio
);

174 i‡(
ªsu…
) {

175 
out
;

178 
ªsu…
 = 
	`VOP_NAMEFILE
(
cwd
, 
uio
);

180 
out
:

182 
	`VOP_DECREF
(
cwd
);

183  
ªsu…
;

184 
	}
}

	@kern/vfs/vfsfail.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<vnode.h
>

51 
	$v›Áû_uio_nŸdú
(
vnode
 *
vn
, 
uio
 *uio)

53 ()
vn
;

54 ()
uio
;

55  
ENOTDIR
;

56 
	}
}

59 
	$v›Áû_uio_isdú
(
vnode
 *
vn
, 
uio
 *uio)

61 ()
vn
;

62 ()
uio
;

63  
EISDIR
;

64 
	}
}

67 
	$v›Áû_uio_övÆ
(
vnode
 *
vn
, 
uio
 *uio)

69 ()
vn
;

70 ()
uio
;

71  
EINVAL
;

72 
	}
}

75 
	$v›Áû_uio_nosys
(
vnode
 *
vn
, 
uio
 *uio)

77 ()
vn
;

78 ()
uio
;

79  
ENOSYS
;

80 
	}
}

86 
	$v›Áû_mm≠_isdú
(
vnode
 *
vn
 )

88 ()
vn
;

89  
EISDIR
;

90 
	}
}

93 
	$v›Áû_mm≠_≥rm
(
vnode
 *
vn
 )

95 ()
vn
;

96  
EPERM
;

97 
	}
}

100 
	$v›Áû_mm≠_nosys
(
vnode
 *
vn
 )

102 ()
vn
;

103  
ENOSYS
;

104 
	}
}

110 
	$v›Áû_åunˇã_isdú
(
vnode
 *
vn
, 
off_t
 
pos
)

112 ()
vn
;

113 ()
pos
;

114  
EISDIR
;

115 
	}
}

121 
	$v›Áû_¸ót_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
boﬁ
 
ex˛
,

122 
mode_t
 
mode
, 
vnode
 **
ªsu…
)

124 ()
vn
;

125 ()
«me
;

126 ()
ex˛
;

127 ()
mode
;

128 ()
ªsu…
;

129  
ENOTDIR
;

130 
	}
}

136 
	$v›Áû_symlök_nŸdú
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

137 c⁄° *
«me
)

139 ()
vn
;

140 ()
c⁄ã¡s
;

141 ()
«me
;

142  
ENOTDIR
;

143 
	}
}

146 
	$v›Áû_symlök_nosys
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

147 c⁄° *
«me
)

149 ()
vn
;

150 ()
c⁄ã¡s
;

151 ()
«me
;

152  
ENOSYS
;

153 
	}
}

159 
	$v›Áû_mkdú_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
)

161 ()
vn
;

162 ()
«me
;

163 ()
mode
;

164  
ENOTDIR
;

165 
	}
}

168 
	$v›Áû_mkdú_nosys
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
)

170 ()
vn
;

171 ()
«me
;

172 ()
mode
;

173  
ENOSYS
;

174 
	}
}

180 
	$v›Áû_lök_nŸdú
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

182 ()
dú
;

183 ()
«me
;

184 ()
fûe
;

185  
ENOTDIR
;

186 
	}
}

189 
	$v›Áû_lök_nosys
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

191 ()
dú
;

192 ()
«me
;

193 ()
fûe
;

194  
ENOSYS
;

195 
	}
}

201 
	$v›Áû_°rög_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
)

203 ()
vn
;

204 ()
«me
;

205  
ENOTDIR
;

206 
	}
}

209 
	$v›Áû_°rög_nosys
(
vnode
 *
vn
, c⁄° *
«me
)

211 ()
vn
;

212 ()
«me
;

213  
ENOSYS
;

214 
	}
}

220 
	$v›Áû_ª«me_nŸdú
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

221 
vnode
 *
todú
, c⁄° *
t⁄ame
)

223 ()
‰omdú
;

224 ()
‰om«me
;

225 ()
todú
;

226 ()
t⁄ame
;

227  
ENOTDIR
;

228 
	}
}

231 
	$v›Áû_ª«me_nosys
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

232 
vnode
 *
todú
, c⁄° *
t⁄ame
)

234 ()
‰omdú
;

235 ()
‰om«me
;

236 ()
todú
;

237 ()
t⁄ame
;

238  
ENOSYS
;

239 
	}
}

245 
	$v›Áû_lookup_nŸdú
(
vnode
 *
vn
, *
∑th
, vnodê**
ªsu…
)

247 ()
vn
;

248 ()
∑th
;

249 ()
ªsu…
;

250  
ENOTDIR
;

251 
	}
}

254 
	$v›Áû_look∑ª¡_nŸdú
(
vnode
 *
vn
, *
∑th
, vnodê**
ªsu…
,

255 *
buf
, 
size_t
 
Àn
)

257 ()
vn
;

258 ()
∑th
;

259 ()
ªsu…
;

260 ()
buf
;

261 ()
Àn
;

262  
ENOTDIR
;

263 
	}
}

	@kern/vfs/vfslist.c

35 
	#VFSINLINE


	)

37 
	~<ty≥s.h
>

38 
	~<kîn/î∫o.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<synch.h
>

42 
	~<vfs.h
>

43 
	~<fs.h
>

44 
	~<vnode.h
>

45 
	~<devi˚.h
>

77 
	sknowndev
 {

78 *
	mkd_«me
;

79 *
	mkd_øw«me
;

80 
devi˚
 *
	mkd_devi˚
;

81 
vnode
 *
	mkd_vnode
;

82 
fs
 *
	mkd_fs
;

85 
DECLARRAY
(
knowndev
, 
__UNUSED
 
ölöe
);

86 
DEFARRAY
(
knowndev
, 
__UNUSED
 
ölöe
);

88 
knowndev¨øy
 *
	gknowndevs
;

91 
lock
 *
	gvfs_biglock
;

92 
	gvfs_biglock_dïth
;

99 
	$vfs_boŸ°øp
()

101 
knowndevs
 = 
	`knowndev¨øy_¸óã
();

102 i‡(
knowndevs
==
NULL
) {

103 
	`∑nic
("vfs: CouldÇot create knowndevsárray\n");

106 
vfs_biglock
 = 
	`lock_¸óã
("vfs_biglock");

107 i‡(
vfs_biglock
==
NULL
) {

108 
	`∑nic
("vfs: CouldÇot create vfs bigÜock\n");

110 
vfs_biglock_dïth
 = 0;

112 
	`devnuŒ_¸óã
();

113 
	`£mfs_boŸ°øp
();

114 
	}
}

124 
	$vfs_biglock_acquúe
()

126 i‡(!
	`lock_do_i_hﬁd
(
vfs_biglock
)) {

127 
	`lock_acquúe
(
vfs_biglock
);

129 
vfs_biglock_dïth
++;

130 
	}
}

133 
	$vfs_biglock_ªÀa£
()

135 
	`KASSERT
(
	`lock_do_i_hﬁd
(
vfs_biglock
));

136 
	`KASSERT
(
vfs_biglock_dïth
 > 0);

137 
vfs_biglock_dïth
--;

138 i‡(
vfs_biglock_dïth
 == 0) {

139 
	`lock_ªÀa£
(
vfs_biglock
);

141 
	}
}

143 
boﬁ


144 
	$vfs_biglock_do_i_hﬁd
()

146  
	`lock_do_i_hﬁd
(
vfs_biglock
);

147 
	}
}

153 
	$vfs_sync
()

155 
knowndev
 *
dev
;

156 
i
, 
num
;

158 
	`vfs_biglock_acquúe
();

160 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

161 
i
=0; i<
num
; i++) {

162 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

163 i‡(
dev
->
kd_fs
 !
NULL
) {

164  
	`FSOP_SYNC
(
dev
->
kd_fs
);

168 
	`vfs_biglock_ªÀa£
();

171 
	}
}

178 
	$vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
)

180 
knowndev
 *
kd
;

181 
i
, 
num
;

183 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

185 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

186 
i
=0; i<
num
; i++) {

187 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

198 i‡(
kd
->
kd_fs
!=
NULL
) {

199 c⁄° *
vﬁ«me
;

200 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

202 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
) ||

203 (
vﬁ«me
!=
NULL
 && !
	`°rcmp
(vﬁ«me, 
dev«me
))) {

204 *
ªsu…
 = 
	`FSOP_GETROOT
(
kd
->
kd_fs
);

209 i‡(
kd
->
kd_øw«me
!=
NULL
 &&

210 !
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

211  
ENXIO
;

220 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

221 
	`KASSERT
(
kd
->
kd_fs
==
NULL
);

222 
	`KASSERT
(
kd
->
kd_øw«me
==
NULL
);

223 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

224 
	`VOP_INCREF
(
kd
->
kd_vnode
);

225 *
ªsu…
 = 
kd
->
kd_vnode
;

233 i‡(
kd
->
kd_øw«me
!=
NULL
 && !
	`°rcmp
(kd->kd_øw«me, 
dev«me
)) {

234 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

235 
	`VOP_INCREF
(
kd
->
kd_vnode
);

236 *
ªsu…
 = 
kd
->
kd_vnode
;

251  
ENODEV
;

252 
	}
}

258 
	$vfs_gëdev«me
(
fs
 *fs)

260 
knowndev
 *
kd
;

261 
i
, 
num
;

263 
	`KASSERT
(
fs
 !
NULL
);

265 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

267 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

268 
i
=0; i<
num
; i++) {

269 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

271 i‡(
kd
->
kd_fs
 =
fs
) {

278  
kd
->
kd_«me
;

282  
NULL
;

283 
	}
}

290 
	$mkøw«me
(c⁄° *
«me
)

292 *
s
 = 
	`kmÆloc
(
	`°æí
(
«me
)+3+1);

293 i‡(!
s
) {

294  
NULL
;

296 
	`°r˝y
(
s
, 
«me
);

297 
	`°rˇt
(
s
, "raw");

298  
s
;

299 
	}
}

307 
ölöe


309 
	$ßme°rög
(c⁄° *
a
, c⁄° *
b
)

311 i‡(
a
==
NULL
 || 
b
==NULL) {

314  !
	`°rcmp
(
a
, 
b
);

315 
	}
}

322 
ölöe


324 
	$ßme°rög3
(c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
)

326  
	`ßme°rög
(
a
,
b
Ë|| same°rög◊,
c
Ë|| same°rög◊,
d
);

327 
	}
}

336 
	$bad«mes
(c⁄° *
n1
, c⁄° *
n2
, c⁄° *
n3
)

338 c⁄° *
vﬁ«me
;

339 
i
, 
num
;

340 
knowndev
 *
kd
;

342 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

344 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

345 
i
=0; i<
num
; i++) {

346 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

348 i‡(
kd
->
kd_fs
) {

349 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

350 i‡(
	`ßme°rög3
(
vﬁ«me
, 
n1
, 
n2
, 
n3
)) {

355 i‡(
	`ßme°rög3
(
kd
->
kd_øw«me
, 
n1
, 
n2
, 
n3
) ||

356 
	`ßme°rög3
(
kd
->
kd_«me
, 
n1
, 
n2
, 
n3
)) {

362 
	}
}

373 
	$vfs_dﬂdd
(c⁄° *
d«me
, 
mou¡abÀ
, 
devi˚
 *
dev
, 
fs
 *fs)

375 *
«me
=
NULL
, *
øw«me
=NULL;

376 
knowndev
 *
kd
=
NULL
;

377 
vnode
 *vnode=
NULL
;

378 c⁄° *
vﬁ«me
=
NULL
;

379 
ödex
;

380 
ªsu…
;

382 
	`vfs_biglock_acquúe
();

384 
«me
 = 
	`k°rdup
(
d«me
);

385 i‡(
«me
==
NULL
) {

386 
nomem
;

388 i‡(
mou¡abÀ
) {

389 
øw«me
 = 
	`mkøw«me
(
«me
);

390 i‡(
øw«me
==
NULL
) {

391 
nomem
;

395 
vnode
 = 
	`dev_¸óã_vnode
(
dev
);

396 i‡(
vnode
==
NULL
) {

397 
nomem
;

400 
kd
 = 
	`kmÆloc
((
knowndev
));

401 i‡(
kd
==
NULL
) {

402 
nomem
;

405 
kd
->
kd_«me
 = 
«me
;

406 
kd
->
kd_øw«me
 = 
øw«me
;

407 
kd
->
kd_devi˚
 = 
dev
;

408 
kd
->
kd_vnode
 = 
vnode
;

409 
kd
->
kd_fs
 = 
fs
;

411 i‡(
fs
!=
NULL
) {

412 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

415 i‡(
	`bad«mes
(
«me
, 
øw«me
, 
vﬁ«me
)) {

416 
	`vfs_biglock_ªÀa£
();

417  
EEXIST
;

420 
ªsu…
 = 
	`knowndev¨øy_add
(
knowndevs
, 
kd
, &
ödex
);

422 i‡(
ªsu…
 =0 && 
dev
 !
NULL
) {

424 
dev
->
d_devnumbî
 = 
ödex
+1;

427 
	`vfs_biglock_ªÀa£
();

428  
ªsu…
;

430 
nomem
:

432 i‡(
«me
) {

433 
	`k‰ì
(
«me
);

435 i‡(
øw«me
) {

436 
	`k‰ì
(
øw«me
);

438 i‡(
vnode
) {

439 
	`k‰ì
(
vnode
);

441 i‡(
kd
) {

442 
	`k‰ì
(
kd
);

445 
	`vfs_biglock_ªÀa£
();

446  
ENOMEM
;

447 
	}
}

454 
	$vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
)

456  
	`vfs_dﬂdd
(
dev«me
, 
mou¡abÀ
, 
dev
, 
NULL
);

457 
	}
}

465 
	$vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs)

467  
	`vfs_dﬂdd
(
dev«me
, 0, 
NULL
, 
fs
);

468 
	}
}

478 
	$födmou¡
(c⁄° *
dev«me
, 
knowndev
 **
ªsu…
)

480 
knowndev
 *
dev
;

481 
i
, 
num
;

482 
boﬁ
 
found
 = 
Ál£
;

484 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

486 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

487 
i
=0; !
found
 && i<
num
; i++) {

488 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

489 i‡(
dev
->
kd_øw«me
==
NULL
) {

494 i‡(!
	`°rcmp
(
dev«me
, 
dev
->
kd_«me
)) {

495 *
ªsu…
 = 
dev
;

496 
found
 = 
åue
;

500  
found
 ? 0 : 
ENODEV
;

501 
	}
}

510 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

511 (*
mou¡func
)(*
d©a
, 
devi˚
 *, 
fs
 **
ªt
))

513 c⁄° *
vﬁ«me
;

514 
knowndev
 *
kd
;

515 
fs
 *fs;

516 
ªsu…
;

518 
	`vfs_biglock_acquúe
();

520 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

521 i‡(
ªsu…
) {

522 
	`vfs_biglock_ªÀa£
();

523  
ªsu…
;

526 i‡(
kd
->
kd_fs
 !
NULL
) {

527 
	`vfs_biglock_ªÀa£
();

528  
EBUSY
;

530 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

531 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

533 
ªsu…
 = 
	`mou¡func
(
d©a
, 
kd
->
kd_devi˚
, &
fs
);

534 i‡(
ªsu…
) {

535 
	`vfs_biglock_ªÀa£
();

536  
ªsu…
;

539 
	`KASSERT
(
fs
 !
NULL
);

541 
kd
->
kd_fs
 = 
fs
;

543 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

544 
	`k¥ötf
("vfs: Mounted %s: on %s\n",

545 
vﬁ«me
 ? vﬁ«mê: 
kd
->
kd_«me
, kd->kd_name);

547 
	`vfs_biglock_ªÀa£
();

549 
	}
}

556 
	$vfs_unmou¡
(c⁄° *
dev«me
)

558 
knowndev
 *
kd
;

559 
ªsu…
;

561 
	`vfs_biglock_acquúe
();

563 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

564 i‡(
ªsu…
) {

565 
Áû
;

568 i‡(
kd
->
kd_fs
 =
NULL
) {

569 
ªsu…
 = 
EINVAL
;

570 
Áû
;

572 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

573 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

576 
ªsu…
 = 
	`FSOP_SYNC
(
kd
->
kd_fs
);

577 i‡(
ªsu…
) {

578 
Áû
;

581 
ªsu…
 = 
	`FSOP_UNMOUNT
(
kd
->
kd_fs
);

582 i‡(
ªsu…
) {

583 
Áû
;

586 
	`k¥ötf
("vfs: Unmou¡ed %s:\n", 
kd
->
kd_«me
);

589 
kd
->
kd_fs
 = 
NULL
;

591 
	`KASSERT
(
ªsu…
==0);

593 
Áû
:

594 
	`vfs_biglock_ªÀa£
();

595  
ªsu…
;

596 
	}
}

602 
	$vfs_unmou¡Æl
()

604 
knowndev
 *
dev
;

605 
i
, 
num
;

606 
ªsu…
;

608 
	`vfs_biglock_acquúe
();

610 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

611 
i
=0; i<
num
; i++) {

612 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

613 i‡(
dev
->
kd_øw«me
 =
NULL
) {

617 i‡(
dev
->
kd_fs
 =
NULL
) {

622 
	`k¥ötf
("vfs: Unmou¡ög %s:\n", 
dev
->
kd_«me
);

624 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

625 i‡(
ªsu…
) {

626 
	`k¥ötf
("vfs: Warning: sync failed for %s: %s,Årying "

627 "agaö\n", 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

629 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

630 i‡(
ªsu…
) {

631 
	`k¥ötf
("vfs: Warning: sync failed secondÅime"

633 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

642 
ªsu…
 = 
	`FSOP_UNMOUNT
(
dev
->
kd_fs
);

643 i‡(
ªsu…
 =
EBUSY
) {

644 
	`k¥ötf
("vfs: Cannot unmount %s: (busy)\n",

645 
dev
->
kd_«me
);

648 i‡(
ªsu…
) {

649 
	`k¥ötf
("vfs: Warning: unmount failed for %s:"

651 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

656 
dev
->
kd_fs
 = 
NULL
;

659 
	`vfs_biglock_ªÀa£
();

662 
	}
}

	@kern/vfs/vfslookup.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<limôs.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<vfs.h
>

40 
	~<fs.h
>

41 
	~<vnode.h
>

43 
vnode
 *
	gboŸfs_vnode
 = 
NULL
;

50 
	$ch™ge_boŸfs
(
vnode
 *
√wvn
)

52 
vnode
 *
ﬁdvn
;

54 
ﬁdvn
 = 
boŸfs_vnode
;

55 
boŸfs_vnode
 = 
√wvn
;

57 i‡(
ﬁdvn
 !
NULL
) {

58 
	`VOP_DECREF
(
ﬁdvn
);

60 
	}
}

71 
	$vfs_£tboŸfs
(c⁄° *
f¢ame
)

73 
tmp
[
NAME_MAX
+1];

74 *
s
;

75 
ªsu…
;

76 
vnode
 *
√wguy
;

78 
	`vfs_biglock_acquúe
();

80 
	`¢¥ötf
(
tmp
, —mp)-1, "%s", 
f¢ame
);

81 
s
 = 
	`°rchr
(
tmp
, ':');

82 i‡(
s
) {

84 i‡(
	`°æí
(
s
)>0) {

85 
	`vfs_biglock_ªÀa£
();

86  
EINVAL
;

90 
	`°rˇt
(
tmp
, ":");

93 
ªsu…
 = 
	`vfs_chdú
(
tmp
);

94 i‡(
ªsu…
) {

95 
	`vfs_biglock_ªÀa£
();

96  
ªsu…
;

99 
ªsu…
 = 
	`vfs_gëcurdú
(&
√wguy
);

100 i‡(
ªsu…
) {

101 
	`vfs_biglock_ªÀa£
();

102  
ªsu…
;

105 
	`ch™ge_boŸfs
(
√wguy
);

107 
	`vfs_biglock_ªÀa£
();

109 
	}
}

115 
	$vfs_˛órboŸfs
()

117 
	`vfs_biglock_acquúe
();

118 
	`ch™ge_boŸfs
(
NULL
);

119 
	`vfs_biglock_ªÀa£
();

120 
	}
}

130 
	$gëdevi˚
(*
∑th
, **
sub∑th
, 
vnode
 **
°¨tvn
)

132 
¶ash
=-1, 
cﬁ⁄
=-1, 
i
;

133 
vnode
 *
vn
;

134 
ªsu…
;

136 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

142 
i
=0; 
∑th
[i]; i++) {

143 i‡(
∑th
[
i
]==':') {

144 
cﬁ⁄
 = 
i
;

147 i‡(
∑th
[
i
]=='/') {

148 
¶ash
 = 
i
;

153 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

161 *
sub∑th
 = 
∑th
;

162  
	`vfs_gëcurdú
(
°¨tvn
);

165 i‡(
cﬁ⁄
>0) {

167 
∑th
[
cﬁ⁄
]=0;

168 
∑th
[
cﬁ⁄
+1]=='/') {

170 
cﬁ⁄
++;

172 *
sub∑th
 = &
∑th
[
cﬁ⁄
+1];

174 
ªsu…
 = 
	`vfs_gëroŸ
(
∑th
, 
°¨tvn
);

175 i‡(
ªsu…
) {

176  
ªsu…
;

188 
	`KASSERT
(
cﬁ⁄
==0 || 
¶ash
==0);

190 i‡(
∑th
[0]=='/') {

191 i‡(
boŸfs_vnode
==
NULL
) {

192  
ENOENT
;

194 
	`VOP_INCREF
(
boŸfs_vnode
);

195 *
°¨tvn
 = 
boŸfs_vnode
;

198 
	`KASSERT
(
∑th
[0]==':');

200 
ªsu…
 = 
	`vfs_gëcurdú
(&
vn
);

201 i‡(
ªsu…
) {

202  
ªsu…
;

209 
	`KASSERT
(
vn
->
vn_fs
!=
NULL
);

211 *
°¨tvn
 = 
	`FSOP_GETROOT
(
vn
->
vn_fs
);

213 
	`VOP_DECREF
(
vn
);

216 
∑th
[1]=='/') {

218 
∑th
++;

221 *
sub∑th
 = 
∑th
+1;

224 
	}
}

232 
	$vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªtvÆ
,

233 *
buf
, 
size_t
 
buÊí
)

235 
vnode
 *
°¨tvn
;

236 
ªsu…
;

238 
	`vfs_biglock_acquúe
();

240 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

241 i‡(
ªsu…
) {

242 
	`vfs_biglock_ªÀa£
();

243  
ªsu…
;

246 i‡(
	`°æí
(
∑th
)==0) {

252 
ªsu…
 = 
EINVAL
;

255 
ªsu…
 = 
	`VOP_LOOKPARENT
(
°¨tvn
, 
∑th
, 
ªtvÆ
, 
buf
, 
buÊí
);

258 
	`VOP_DECREF
(
°¨tvn
);

260 
	`vfs_biglock_ªÀa£
();

261  
ªsu…
;

262 
	}
}

265 
	$vfs_lookup
(*
∑th
, 
vnode
 **
ªtvÆ
)

267 
vnode
 *
°¨tvn
;

268 
ªsu…
;

270 
	`vfs_biglock_acquúe
();

272 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

273 i‡(
ªsu…
) {

274 
	`vfs_biglock_ªÀa£
();

275  
ªsu…
;

278 i‡(
	`°æí
(
∑th
)==0) {

279 *
ªtvÆ
 = 
°¨tvn
;

280 
	`vfs_biglock_ªÀa£
();

284 
ªsu…
 = 
	`VOP_LOOKUP
(
°¨tvn
, 
∑th
, 
ªtvÆ
);

286 
	`VOP_DECREF
(
°¨tvn
);

287 
	`vfs_biglock_ªÀa£
();

288  
ªsu…
;

289 
	}
}

	@kern/vfs/vfspath.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/f˙é.h
>

37 
	~<limôs.h
>

38 
	~<lib.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

45 
	$vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
)

47 
how
;

48 
ªsu…
;

49 
ˇnwrôe
;

50 
vnode
 *
vn
 = 
NULL
;

52 
how
 = 
›íÊags
 & 
O_ACCMODE
;

54 
how
) {

55 
O_RDONLY
:

56 
ˇnwrôe
=0;

58 
O_WRONLY
:

59 
O_RDWR
:

60 
ˇnwrôe
=1;

63  
EINVAL
;

66 i‡(
›íÊags
 & 
O_CREAT
) {

67 
«me
[
NAME_MAX
+1];

68 
vnode
 *
dú
;

69 
ex˛
 = (
›íÊags
 & 
O_EXCL
)!=0;

71 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

72 i‡(
ªsu…
) {

73  
ªsu…
;

76 
ªsu…
 = 
	`VOP_CREAT
(
dú
, 
«me
, 
ex˛
, 
mode
, &
vn
);

78 
	`VOP_DECREF
(
dú
);

81 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

84 i‡(
ªsu…
) {

85  
ªsu…
;

88 
	`KASSERT
(
vn
 !
NULL
);

90 
ªsu…
 = 
	`VOP_EACHOPEN
(
vn
, 
›íÊags
);

91 i‡(
ªsu…
) {

92 
	`VOP_DECREF
(
vn
);

93  
ªsu…
;

96 i‡(
›íÊags
 & 
O_TRUNC
) {

97 i‡(
ˇnwrôe
==0) {

98 
ªsu…
 = 
EINVAL
;

101 
ªsu…
 = 
	`VOP_TRUNCATE
(
vn
, 0);

103 i‡(
ªsu…
) {

104 
	`VOP_DECREF
(
vn
);

105  
ªsu…
;

109 *
ªt
 = 
vn
;

112 
	}
}

116 
	$vfs_˛o£
(
vnode
 *
vn
)

132 
	`VOP_DECREF
(
vn
);

133 
	}
}

137 
	$vfs_ªmove
(*
∑th
)

139 
vnode
 *
dú
;

140 
«me
[
NAME_MAX
+1];

141 
ªsu…
;

143 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

144 i‡(
ªsu…
) {

145  
ªsu…
;

148 
ªsu…
 = 
	`VOP_REMOVE
(
dú
, 
«me
);

149 
	`VOP_DECREF
(
dú
);

151  
ªsu…
;

152 
	}
}

156 
	$vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
)

158 
vnode
 *
ﬁddú
;

159 
ﬁd«me
[
NAME_MAX
+1];

160 
vnode
 *
√wdú
;

161 
√w«me
[
NAME_MAX
+1];

162 
ªsu…
;

164 
ªsu…
 = 
	`vfs_look∑ª¡
(
ﬁd∑th
, &
ﬁddú
, 
ﬁd«me
, (oldname));

165 i‡(
ªsu…
) {

166  
ªsu…
;

168 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

169 i‡(
ªsu…
) {

170 
	`VOP_DECREF
(
ﬁddú
);

171  
ªsu…
;

174 i‡(
ﬁddú
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

175 
ﬁddú
->
vn_fs
 !
√wdú
->vn_fs) {

176 
	`VOP_DECREF
(
√wdú
);

177 
	`VOP_DECREF
(
ﬁddú
);

178  
EXDEV
;

181 
ªsu…
 = 
	`VOP_RENAME
(
ﬁddú
, 
ﬁd«me
, 
√wdú
, 
√w«me
);

183 
	`VOP_DECREF
(
√wdú
);

184 
	`VOP_DECREF
(
ﬁddú
);

186  
ªsu…
;

187 
	}
}

191 
	$vfs_lök
(*
ﬁd∑th
, *
√w∑th
)

193 
vnode
 *
ﬁdfûe
;

194 
vnode
 *
√wdú
;

195 
√w«me
[
NAME_MAX
+1];

196 
ªsu…
;

198 
ªsu…
 = 
	`vfs_lookup
(
ﬁd∑th
, &
ﬁdfûe
);

199 i‡(
ªsu…
) {

200  
ªsu…
;

202 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

203 i‡(
ªsu…
) {

204 
	`VOP_DECREF
(
ﬁdfûe
);

205  
ªsu…
;

208 i‡(
ﬁdfûe
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

209 
ﬁdfûe
->
vn_fs
 !
√wdú
->vn_fs) {

210 
	`VOP_DECREF
(
√wdú
);

211 
	`VOP_DECREF
(
ﬁdfûe
);

212  
EXDEV
;

215 
ªsu…
 = 
	`VOP_LINK
(
√wdú
, 
√w«me
, 
ﬁdfûe
);

217 
	`VOP_DECREF
(
√wdú
);

218 
	`VOP_DECREF
(
ﬁdfûe
);

220  
ªsu…
;

221 
	}
}

231 
	$vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
)

233 
vnode
 *
√wdú
;

234 
√w«me
[
NAME_MAX
+1];

235 
ªsu…
;

237 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
√wdú
, 
√w«me
, (newname));

238 i‡(
ªsu…
) {

239  
ªsu…
;

242 
ªsu…
 = 
	`VOP_SYMLINK
(
√wdú
, 
√w«me
, 
c⁄ã¡s
);

243 
	`VOP_DECREF
(
√wdú
);

245  
ªsu…
;

246 
	}
}

256 
	$vfs_ªadlök
(*
∑th
, 
uio
 *uio)

258 
vnode
 *
vn
;

259 
ªsu…
;

261 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

262 i‡(
ªsu…
) {

263  
ªsu…
;

266 
ªsu…
 = 
	`VOP_READLINK
(
vn
, 
uio
);

268 
	`VOP_DECREF
(
vn
);

270  
ªsu…
;

271 
	}
}

277 
	$vfs_mkdú
(*
∑th
, 
mode_t
 
mode
)

279 
vnode
 *
∑ª¡
;

280 
«me
[
NAME_MAX
+1];

281 
ªsu…
;

283 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

284 i‡(
ªsu…
) {

285  
ªsu…
;

288 
ªsu…
 = 
	`VOP_MKDIR
(
∑ª¡
, 
«me
, 
mode
);

290 
	`VOP_DECREF
(
∑ª¡
);

292  
ªsu…
;

293 
	}
}

299 
	$vfs_rmdú
(*
∑th
)

301 
vnode
 *
∑ª¡
;

302 
«me
[
NAME_MAX
+1];

303 
ªsu…
;

305 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

306 i‡(
ªsu…
) {

307  
ªsu…
;

310 
ªsu…
 = 
	`VOP_RMDIR
(
∑ª¡
, 
«me
);

312 
	`VOP_DECREF
(
∑ª¡
);

314  
ªsu…
;

315 
	}
}

	@kern/vfs/vnode.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<synch.h
>

37 
	~<vfs.h
>

38 
	~<vnode.h
>

44 
	$vnode_öô
(
vnode
 *
vn
, c⁄° 
vnode_›s
 *
›s
,

45 
fs
 *fs, *
fsd©a
)

47 
	`KASSERT
(
vn
 !
NULL
);

48 
	`KASSERT
(
›s
 !
NULL
);

50 
vn
->
vn_›s
 = 
›s
;

51 
vn
->
vn_ªfcou¡
 = 1;

52 
	`•ölock_öô
(&
vn
->
vn_cou¡lock
);

53 
vn
->
vn_fs
 = 
fs
;

54 
vn
->
vn_d©a
 = 
fsd©a
;

56 
	}
}

62 
	$vnode_˛ónup
(
vnode
 *
vn
)

64 
	`KASSERT
(
vn
->
vn_ªfcou¡
 == 1);

66 
	`•ölock_˛ónup
(&
vn
->
vn_cou¡lock
);

68 
vn
->
vn_›s
 = 
NULL
;

69 
vn
->
vn_ªfcou¡
 = 0;

70 
vn
->
vn_fs
 = 
NULL
;

71 
vn
->
vn_d©a
 = 
NULL
;

72 
	}
}

80 
	$vnode_ö¸ef
(
vnode
 *
vn
)

82 
	`KASSERT
(
vn
 !
NULL
);

84 
	`•ölock_acquúe
(&
vn
->
vn_cou¡lock
);

85 
vn
->
vn_ªfcou¡
++;

86 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

87 
	}
}

95 
	$vnode_de¸ef
(
vnode
 *
vn
)

97 
boﬁ
 
de°roy
;

98 
ªsu…
;

100 
	`KASSERT
(
vn
 !
NULL
);

102 
	`•ölock_acquúe
(&
vn
->
vn_cou¡lock
);

104 
	`KASSERT
(
vn
->
vn_ªfcou¡
 > 0);

105 i‡(
vn
->
vn_ªfcou¡
 > 1) {

106 
vn
->
vn_ªfcou¡
--;

107 
de°roy
 = 
Ál£
;

111 
de°roy
 = 
åue
;

113 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

115 i‡(
de°roy
) {

116 
ªsu…
 = 
	`VOP_RECLAIM
(
vn
);

117 i‡(
ªsu…
 !0 &&Ñesu… !
EBUSY
) {

119 
	`k¥ötf
("vfs: Warning: VOP_RECLAIM: %s\n",

120 
	`°ªº‹
(
ªsu…
));

123 
	}
}

130 
	$vnode_check
(
vnode
 *
v
, c⁄° *
›°r
)

132 
	`vfs_biglock_acquúe
();

134 i‡(
v
 =
NULL
) {

135 
	`∑nic
("vnode_check: v›_%s:ÇuŒ vnode\n", 
›°r
);

137 i‡(
v
 == (*)0xdeadbeef) {

138 
	`∑nic
("vnode_check: v›_%s: dódbì‡vnode\n", 
›°r
);

141 i‡(
v
->
vn_›s
 =
NULL
) {

142 
	`∑nic
("vnode_check: v›_%s:ÇuŒ op†poöãr\n", 
›°r
);

144 i‡(
v
->
vn_›s
 == (*)0xdeadbeef) {

145 
	`∑nic
("vnode_check: v›_%s: dódbì‡›†poöãr\n", 
›°r
);

148 i‡(
v
->
vn_›s
->
v›_magic
 !
VOP_MAGIC
) {

149 
	`∑nic
("vnode_check: vop_%s: ops with bad magicÇumber %lx\n",

150 
›°r
, 
v
->
vn_›s
->
v›_magic
);

157 i‡(
v
->
vn_fs
 == (*)0xdeadbeef) {

158 
	`∑nic
("vnode_check: v›_%s: dódbì‡f†poöãr\n", 
›°r
);

161 
	`•ölock_acquúe
(&
v
->
vn_cou¡lock
);

163 i‡(
v
->
vn_ªfcou¡
 < 0) {

164 
	`∑nic
("vnode_check: v›_%s:Çeg©ivêªfcou¡ %d\n", 
›°r
,

165 
v
->
vn_ªfcou¡
);

167 i‡(
v
->
vn_ªfcou¡
 == 0) {

168 
	`∑nic
("vnode_check: v›_%s: zîÿªfcou¡\n", 
›°r
);

170 i‡(
v
->
vn_ªfcou¡
 > 0x100000) {

171 
	`k¥ötf
("vnode_check: vop_%s: warning:ÜargeÑefcount %d\n",

172 
›°r
, 
v
->
vn_ªfcou¡
);

175 
	`•ölock_ªÀa£
(&
v
->
vn_cou¡lock
);

176 
	`vfs_biglock_ªÀa£
();

177 
	}
}

	@kern/vm/addrspace.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<addr•a˚.h
>

34 
	~<vm.h
>

42 
addr•a˚
 *

43 
	$as_¸óã
()

45 
addr•a˚
 *
as
;

47 
as
 = 
	`kmÆloc
((
addr•a˚
));

48 i‡(
as
 =
NULL
) {

49  
NULL
;

56  
as
;

57 
	}
}

60 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

62 
addr•a˚
 *
√was
;

64 
√was
 = 
	`as_¸óã
();

65 i‡(
√was
==
NULL
) {

66  
ENOMEM
;

73 ()
ﬁd
;

75 *
ªt
 = 
√was
;

77 
	}
}

80 
	$as_de°roy
(
addr•a˚
 *
as
)

86 
	`k‰ì
(
as
);

87 
	}
}

90 
	$as_a˘iv©e
()

92 
addr•a˚
 *
as
;

94 
as
 = 
	`cuΩroc_gëas
();

95 i‡(
as
 =
NULL
) {

106 
	}
}

109 
	$as_dó˘iv©e
()

116 
	}
}

129 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

130 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

136 ()
as
;

137 ()
vaddr
;

138 ()
sz
;

139 ()
ªadabÀ
;

140 ()
wrôóbÀ
;

141 ()
execuèbÀ
;

142  
EUNIMP
;

143 
	}
}

146 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

152 ()
as
;

154 
	}
}

157 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

163 ()
as
;

165 
	}
}

168 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

174 ()
as
;

177 *
°ack±r
 = 
USERSTACK
;

180 
	}
}

	@kern/vm/copyinout.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<£tjmp.h
>

34 
	~<thªad.h
>

35 
	~<cuºít.h
>

36 
	~<vm.h
>

37 
	~<c›yöout.h
>

100 
	$c›yÁû
()

102 
	`l⁄gjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
, 1);

103 
	}
}

118 
	$c›ycheck
(
c⁄°_u£Ωå_t
 
u£Ωå
, 
size_t
 
Àn
, size_à*
°›Àn
)

120 
vaddr_t
 
bŸ
, 
t›
;

122 *
°›Àn
 = 
Àn
;

124 
bŸ
 = (
vaddr_t
Ë
u£Ωå
;

125 
t›
 = 
bŸ
+
Àn
-1;

127 i‡(
t›
 < 
bŸ
) {

129  
EFAULT
;

132 i‡(
bŸ
 >
USERSPACETOP
) {

134  
EFAULT
;

137 i‡(
t›
 >
USERSPACETOP
) {

139 *
°›Àn
 = 
USERSPACETOP
 - 
bŸ
;

143 
	}
}

153 
	$c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
)

155 
ªsu…
;

156 
size_t
 
°›Àn
;

158 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

159 i‡(
ªsu…
) {

160  
ªsu…
;

162 i‡(
°›Àn
 !
Àn
) {

164  
EFAULT
;

167 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

169 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

170 i‡(
ªsu…
) {

171 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

172  
EFAULT
;

175 
	`mem˝y
(
de°
, (c⁄° *)
u£r§c
, 
Àn
);

177 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

179 
	}
}

189 
	$c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
)

191 
ªsu…
;

192 
size_t
 
°›Àn
;

194 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

195 i‡(
ªsu…
) {

196  
ªsu…
;

198 i‡(
°›Àn
 !
Àn
) {

200  
EFAULT
;

203 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

205 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

206 i‡(
ªsu…
) {

207 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

208  
EFAULT
;

211 
	`mem˝y
((*)
u£rde°
, 
§c
, 
Àn
);

213 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

215 
	}
}

235 
	$c›y°r
(*
de°
, c⁄° *
§c
, 
size_t
 
maxÀn
, size_à
°›Àn
,

236 
size_t
 *
gŸÀn
)

238 
size_t
 
i
;

240 
i
=0; i<
maxÀn
 && i<
°›Àn
; i++) {

241 
de°
[
i
] = 
§c
[i];

242 i‡(
§c
[
i
] == 0) {

243 i‡(
gŸÀn
 !
NULL
) {

244 *
gŸÀn
 = 
i
+1;

249 i‡(
°›Àn
 < 
maxÀn
) {

251  
EFAULT
;

254  
ENAMETOOLONG
;

255 
	}
}

266 
	$c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

268 
ªsu…
;

269 
size_t
 
°›Àn
;

271 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

272 i‡(
ªsu…
) {

273  
ªsu…
;

276 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

278 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

279 i‡(
ªsu…
) {

280 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

281  
EFAULT
;

284 
ªsu…
 = 
	`c›y°r
(
de°
, (c⁄° *)
u£r§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

286 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

287  
ªsu…
;

288 
	}
}

299 
	$c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

301 
ªsu…
;

302 
size_t
 
°›Àn
;

304 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

305 i‡(
ªsu…
) {

306  
ªsu…
;

309 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

311 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

312 i‡(
ªsu…
) {

313 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

314  
EFAULT
;

317 
ªsu…
 = 
	`c›y°r
((*)
u£rde°
, 
§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

319 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

320  
ªsu…
;

321 
	}
}

	@kern/vm/kmalloc.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<vm.h
>

45 
	$fûl_dódbìf
(*
v±r
, 
size_t
 
Àn
)

47 
uöt32_t
 *
±r
 = 
v±r
;

48 
size_t
 
i
;

50 
i
=0; i<
Àn
/(
uöt32_t
); i++) {

51 
±r
[
i
] = 0xdeadbeef;

53 
	}
}

116 #unde‡
SLOW


117 #unde‡
SLOWER


118 #unde‡
GUARDS


119 #unde‡
LABELS


121 #unde‡
CHECKBEEF


122 #unde‡
CHECKGUARDS


126 #i‡
PAGE_SIZE
 == 4096

128 
	#NSIZES
 8

	)

129 c⁄° 
size_t
 
	gsizes
[
NSIZES
] = { 16, 32, 64, 128, 256, 512, 1024, 2048 };

131 
	#SMALLEST_SUBPAGE_SIZE
 16

	)

132 
	#LARGEST_SUBPAGE_SIZE
 2048

	)

134 #ñi‡
PAGE_SIZE
 == 8192

142 
	s‰ìli°
 {

143 
‰ìli°
 *
	m√xt
;

146 
	s∑gîef
 {

147 
∑gîef
 *
	m√xt_ßmesize
;

148 
∑gîef
 *
	m√xt_Æl
;

149 
vaddr_t
 
	m∑góddr_™d_blockty≥
;

150 
uöt16_t
 
	m‰ìli°_off£t
;

151 
uöt16_t
 
	mn‰ì
;

154 
	#INVALID_OFFSET
 (0xffff)

	)

156 
	#PR_PAGEADDR
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & 
PAGE_FRAME
)

	)

157 
	#PR_BLOCKTYPE
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & ~
PAGE_FRAME
)

	)

158 
	#MKPAB
(
∑
, 
blk
Ë((’a)&
PAGE_FRAME
Ë| ((blkË& ~PAGE_FRAME))

	)

169 
•ölock
 
	gkmÆloc_•ölock
 = 
SPINLOCK_INITIALIZER
;

181 
	#NPAGEREFS_PER_PAGE
 (
PAGE_SIZE
 / (
∑gîef
))

	)

183 
	s∑gîeÂage
 {

184 
∑gîef
 
	mªfs
[
NPAGEREFS_PER_PAGE
];

192 
	#INUSE_WORDS
 (
NPAGEREFS_PER_PAGE
 / 32)

	)

194 
	skhóp_roŸ
 {

195 
∑gîeÂage
 *
	m∑ge
;

196 
uöt32_t
 
	m∑gîefs_öu£
[
INUSE_WORDS
];

197 
	mnumöu£
;

210 
	#NUM_PAGEREFPAGES
 16

	)

211 
	#TOTAL_PAGEREFS
 (
NUM_PAGEREFPAGES
 * 
NPAGEREFS_PER_PAGE
)

	)

213 
khóp_roŸ
 
	gkhó¥oŸs
[
NUM_PAGEREFPAGES
];

220 
	$Ælo˝agîeÂage
(
khóp_roŸ
 *
roŸ
)

222 
vaddr_t
 
va
;

224 
	`KASSERT
(
roŸ
->
∑ge
 =
NULL
);

231 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

232 
va
 = 
	`Æloc_k∑ges
(1);

233 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

234 i‡(
va
 == 0) {

235 
	`k¥ötf
("kmalloc: Couldn't getáÖagerefÖage\n");

238 
	`KASSERT
(
va
 % 
PAGE_SIZE
 == 0);

240 i‡(
roŸ
->
∑ge
 !
NULL
) {

242 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

243 
	`‰ì_k∑ges
(
va
);

244 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

246 
	`KASSERT
(
roŸ
->
∑ge
 !
NULL
);

250 
roŸ
->
∑ge
 = (
∑gîeÂage
 *)
va
;

251 
	}
}

257 
∑gîef
 *

258 
	$Ælo˝agîef
()

260 
i
,
j
;

261 
uöt32_t
 
k
;

262 
whichroŸ
;

263 
khóp_roŸ
 *
roŸ
;

265 
whichroŸ
=0; whichroŸ < 
NUM_PAGEREFPAGES
; whichroot++) {

266 
roŸ
 = &
khó¥oŸs
[
whichroŸ
];

267 i‡(
roŸ
->
numöu£
 >
NPAGEREFS_PER_PAGE
) {

274 
i
=0; i<
INUSE_WORDS
; i++) {

275 i‡(
roŸ
->
∑gîefs_öu£
[
i
]==0xffffffff) {

279 
k
=1,
j
=0; k!=0; k<<=1,j++) {

280 i‡((
roŸ
->
∑gîefs_öu£
[
i
] & 
k
)==0) {

281 
roŸ
->
∑gîefs_öu£
[
i
] |
k
;

282 
roŸ
->
numöu£
++;

283 i‡(
roŸ
->
∑ge
 =
NULL
) {

284 
	`Ælo˝agîeÂage
(
roŸ
);

286 i‡(
roŸ
->
∑ge
 =
NULL
) {

287  
NULL
;

289  &
roŸ
->
∑ge
->
ªfs
[
i
*32 + 
j
];

292 
	`KASSERT
(0);

297  
NULL
;

298 
	}
}

305 
	$‰ì∑gîef
(
∑gîef
 *
p
)

307 
size_t
 
i
, 
j
;

308 
uöt32_t
 
k
;

309 
whichroŸ
;

310 
khóp_roŸ
 *
roŸ
;

311 
∑gîeÂage
 *
∑ge
;

313 
whichroŸ
=0; whichroŸ < 
NUM_PAGEREFPAGES
; whichroot++) {

314 
roŸ
 = &
khó¥oŸs
[
whichroŸ
];

316 
∑ge
 = 
roŸ
->page;

317 i‡(
∑ge
 =
NULL
) {

318 
	`KASSERT
(
roŸ
->
numöu£
 == 0);

322 
j
 = 
p
-
∑ge
->
ªfs
;

324 i‡(
j
 < 
NPAGEREFS_PER_PAGE
) {

326 
i
 = 
j
/32;

327 
k
 = ((
uöt32_t
)1Ë<< (
j
%32);

328 
	`KASSERT
((
roŸ
->
∑gîefs_öu£
[
i
] & 
k
) != 0);

329 
roŸ
->
∑gîefs_öu£
[
i
] &~
k
;

330 
	`KASSERT
(
roŸ
->
numöu£
 > 0);

331 
roŸ
->
numöu£
--;

336 
	`KASSERT
(0);

337 
	}
}

345 
∑gîef
 *
	gsizeba£s
[
NSIZES
];

346 
∑gîef
 *
	gÆlba£
;

350 #ifde‡
GUARDS


353 
	#GUARD_RETBYTE
 0xa9

	)

355 
	#GUARD_FILLBYTE
 0xba

	)

357 
	#GUARD_HALFWORD
 0xb0b0

	)

360 
	#GUARD_OVERHEAD
 8

	)

363 
	#GUARD_PTROFFSET
 4

	)

370 
	$e°ablishgu¨db™d
(*
block
, 
size_t
 
˛õ¡size
, size_à
blocksize
)

372 
vaddr_t
 
lowgu¨d
, 
lowsize
, 
d©a
, 
ídd©a
, 
highgu¨d
, 
highsize
, 
i
;

374 
	`KASSERT
(
˛õ¡size
 + 
GUARD_OVERHEAD
 <
blocksize
);

375 
	`KASSERT
(
˛õ¡size
 < 65536U);

377 
lowgu¨d
 = (
vaddr_t
)
block
;

378 
lowsize
 = 
lowgu¨d
 + 2;

379 
d©a
 = 
lowsize
 + 2;

380 
ídd©a
 = 
d©a
 + 
˛õ¡size
;

381 
highgu¨d
 = 
lowgu¨d
 + 
blocksize
 - 4;

382 
highsize
 = 
highgu¨d
 + 2;

384 *(
uöt16_t
 *)
lowgu¨d
 = 
GUARD_HALFWORD
;

385 *(
uöt16_t
 *)
lowsize
 = 
˛õ¡size
;

386 
i
=
d©a
; i<
ídd©a
; i++) {

387 *(
uöt8_t
 *)
i
 = 
GUARD_RETBYTE
;

389 
i
=
ídd©a
; i<
highgu¨d
; i++) {

390 *(
uöt8_t
 *)
i
 = 
GUARD_FILLBYTE
;

392 *(
uöt16_t
 *)
highgu¨d
 = 
GUARD_HALFWORD
;

393 *(
uöt16_t
 *)
highsize
 = 
˛õ¡size
;

395  (*)
d©a
;

396 
	}
}

403 
	$checkgu¨db™d
(
vaddr_t
 
blockaddr
, 
size_t
 
smÆÀrblocksize
, size_à
blocksize
)

417 
vaddr_t
 
lowgu¨d
, 
lowsize
, 
d©a
, 
ídd©a
, 
highgu¨d
, 
highsize
, 
i
;

418 
˛õ¡size
;

420 
lowgu¨d
 = 
blockaddr
;

421 
lowsize
 = 
lowgu¨d
 + 2;

422 
d©a
 = 
lowsize
 + 2;

423 
highgu¨d
 = 
blockaddr
 + 
blocksize
 - 4;

424 
highsize
 = 
highgu¨d
 + 2;

426 
	`KASSERT
(*(
uöt16_t
 *)
lowgu¨d
 =
GUARD_HALFWORD
);

427 
	`KASSERT
(*(
uöt16_t
 *)
highgu¨d
 =
GUARD_HALFWORD
);

428 
˛õ¡size
 = *(
uöt16_t
 *)
lowsize
;

429 
	`KASSERT
(
˛õ¡size
 =*(
uöt16_t
 *)
highsize
);

430 
	`KASSERT
(
˛õ¡size
 + 
GUARD_OVERHEAD
 > 
smÆÀrblocksize
);

431 
	`KASSERT
(
˛õ¡size
 + 
GUARD_OVERHEAD
 <
blocksize
);

432 
ídd©a
 = 
d©a
 + 
˛õ¡size
;

433 
i
=
ídd©a
; i<
highgu¨d
; i++) {

434 
	`KASSERT
(*(
uöt8_t
 *)
i
 =
GUARD_FILLBYTE
);

436 
	}
}

440 
	#GUARD_OVERHEAD
 0

	)

447 #ifde‡
SLOWER


448 #i‚de‡
SLOW


449 
	#SLOW


	)

453 #ifde‡
CHECKBEEF


462 
	$checkdódbìf
(*
block
, 
size_t
 
blocksize
)

464 
uöt32_t
 *
±r
 = 
block
;

465 
size_t
 
i
;

467 
i
=1; i < 
blocksize
/(
uöt32_t
); i++) {

468 
	`KASSERT
(
±r
[
i
] == 0xdeadbeef);

470 
	}
}

473 #ifde‡
SLOW


495 
	$checksub∑ge
(
∑gîef
 *
¥
)

497 
vaddr_t
 
¥∑ge
, 
Êa
;

498 
‰ìli°
 *
Ê
;

499 
blkty≥
;

500 
n‰ì
=0;

501 
size_t
 
blocksize
;

502 #ifde‡
CHECKGUARDS


503 c⁄° 
maxblocks
 = 
PAGE_SIZE
 / 
SMALLEST_SUBPAGE_SIZE
;

504 c⁄° 
num‰ìw‹ds
 = 
	`DIVROUNDUP
(
maxblocks
, 32);

505 
uöt32_t
 
is‰ì
[
num‰ìw‹ds
], 
mask
;

506 
numblocks
, 
blocknum
, 
i
;

507 
size_t
 
smÆÀrblocksize
;

510 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

512 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

513 
	`KASSERT
(
¥
->
n‰ì
==0);

517 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

518 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

519 
	`KASSERT
(
blkty≥
 >0 && blkty≥ < 
NSIZES
);

520 
blocksize
 = 
sizes
[
blkty≥
];

522 #ifde‡
CHECKGUARDS


523 
smÆÀrblocksize
 = 
blkty≥
 > 0 ? 
sizes
[blktype - 1] : 0;

524 
i
=0; i<
num‰ìw‹ds
; i++) {

525 
is‰ì
[
i
] = 0;

529 #ifde‡
__mùs__


530 
	`KASSERT
(
¥∑ge
 >
MIPS_KSEG0
);

531 
	`KASSERT
(
¥∑ge
 < 
MIPS_KSEG1
);

534 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

535 
	`KASSERT
(
¥
->
‰ìli°_off£t
 % 
blocksize
 == 0);

537 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

538 
Ê
 = (
‰ìli°
 *)
Êa
;

540 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

541 
Êa
 = (
vaddr_t
)
Ê
;

542 
	`KASSERT
(
Êa
 >
¥∑ge
 && fœ <ÖΩagê+ 
PAGE_SIZE
);

543 
	`KASSERT
((
Êa
-
¥∑ge
Ë% 
blocksize
 == 0);

544 #ifde‡
CHECKBEEF


545 
	`checkdódbìf
(
Ê
, 
blocksize
);

547 #ifde‡
CHECKGUARDS


548 
blocknum
 = (
Êa
-
¥∑ge
Ë/ 
blocksize
;

549 
mask
 = 1U << (
blocknum
 % 32);

550 
	`KASSERT
((
is‰ì
[
blocknum
 / 32] & 
mask
) == 0);

551 
is‰ì
[
blocknum
 / 32] |
mask
;

553 
	`KASSERT
(
Ê
->
√xt
 != fl);

554 
n‰ì
++;

556 
	`KASSERT
(
n‰ì
==
¥
->nfree);

558 #ifde‡
CHECKGUARDS


559 
numblocks
 = 
PAGE_SIZE
 / 
blocksize
;

560 
i
=0; i<
numblocks
; i++) {

561 
mask
 = 1U << (
i
 % 32);

562 i‡((
is‰ì
[
i
 / 32] & 
mask
) == 0) {

563 
	`checkgu¨db™d
(
¥∑ge
 + 
i
 * 
blocksize
,

564 
smÆÀrblocksize
, 
blocksize
);

568 
	}
}

570 
	#checksub∑ge
(
¥
Ë(()’r))

	)

573 #ifde‡
SLOWER


580 
	$checksub∑ges
()

582 
∑gîef
 *
¥
;

583 
i
;

584 
sc
=0, 
ac
=0;

586 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

588 
i
=0; i<
NSIZES
; i++) {

589 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

590 
	`checksub∑ge
(
¥
);

591 
	`KASSERT
(
sc
 < 
TOTAL_PAGEREFS
);

592 
sc
++;

596 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

597 
	`checksub∑ge
(
¥
);

598 
	`KASSERT
(
ac
 < 
TOTAL_PAGEREFS
);

599 
ac
++;

602 
	`KASSERT
(
sc
==
ac
);

603 
	}
}

605 
	#checksub∑ges
()

	)

610 #ifde‡
LABELS


612 
	#LABEL_PTROFFSET
 (
mÆlo˛abñ
)

	)

613 
	#LABEL_OVERHEAD
 
LABEL_PTROFFSET


	)

615 
	smÆlo˛abñ
 {

616 
vaddr_t
 
	mœbñ
;

617 
	mgíî©i⁄
;

620 
	gmÆlocgíî©i⁄
;

627 
	$e°ablishœbñ
(*
block
, 
vaddr_t
 
œbñ
)

629 
mÆlo˛abñ
 *
ml
;

631 
ml
 = 
block
;

632 
ml
->
œbñ
 =Üabel;

633 
ml
->
gíî©i⁄
 = 
mÆlocgíî©i⁄
;

634 
ml
++;

635  
ml
;

636 
	}
}

640 
	$dump_sub∑ge
(
∑gîef
 *
¥
, 
gíî©i⁄
)

642 
blocksize
 = 
sizes
[
	`PR_BLOCKTYPE
(
¥
)];

643 
numblocks
 = 
PAGE_SIZE
 / 
blocksize
;

644 
num‰ìw‹ds
 = 
	`DIVROUNDUP
(
numblocks
, 32);

645 
uöt32_t
 
is‰ì
[
num‰ìw‹ds
], 
mask
;

646 
vaddr_t
 
¥∑ge
;

647 
‰ìli°
 *
Ê
;

648 
vaddr_t
 
blockaddr
;

649 
mÆlo˛abñ
 *
ml
;

650 
i
;

652 
i
=0; i<
num‰ìw‹ds
; i++) {

653 
is‰ì
[
i
] = 0;

656 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

657 
Ê
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

658 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

659 
i
 = ((
vaddr_t
)
Ê
 - 
¥∑ge
Ë/ 
blocksize
;

660 
mask
 = 1U << (
i
 % 32);

661 
is‰ì
[
i
 / 32] |
mask
;

664 
i
=0; i<
numblocks
; i++) {

665 
mask
 = 1U << (
i
 % 32);

666 i‡(
is‰ì
[
i
 / 32] & 
mask
) {

669 
blockaddr
 = 
¥∑ge
 + 
i
 * 
blocksize
;

670 
ml
 = (
mÆlo˛abñ
 *)
blockaddr
;

671 i‡(
ml
->
gíî©i⁄
 != generation) {

674 
	`k¥ötf
("%5zu bytesát %p,állocatedát %p\n",

675 
blocksize
, (*)
blockaddr
, (*)
ml
->
œbñ
);

677 
	}
}

681 
	$dump_sub∑ges
(
gíî©i⁄
)

683 
∑gîef
 *
¥
;

684 
i
;

686 
	`k¥ötf
("RemaöögáŒoˇti⁄†‰om gíî©i⁄ %u:\n", 
gíî©i⁄
);

687 
i
=0; i<
NSIZES
; i++) {

688 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

689 
	`dump_sub∑ge
(
¥
, 
gíî©i⁄
);

692 
	}
}

696 
	#LABEL_OVERHEAD
 0

	)

701 
	$khóp_√xtgíî©i⁄
()

703 #ifde‡
LABELS


704 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

705 
mÆlocgíî©i⁄
++;

706 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

708 
	}
}

711 
	$khóp_dump
()

713 #ifde‡
LABELS


715 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

716 
	`dump_sub∑ges
(
mÆlocgíî©i⁄
);

717 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

719 
	`k¥ötf
("Enable LABELS in kmalloc.cÅo useÅhis functionality.\n");

721 
	}
}

724 
	$khóp_dum∑Œ
()

726 #ifde‡
LABELS


727 
i
;

730 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

731 
i
=0; i<=
mÆlocgíî©i⁄
; i++) {

732 
	`dump_sub∑ges
(
i
);

734 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

736 
	`k¥ötf
("Enable LABELS in kmalloc.cÅo useÅhis functionality.\n");

738 
	}
}

747 
	$sub∑ge_°©s
(
∑gîef
 *
¥
)

749 
vaddr_t
 
¥∑ge
, 
Êa
;

750 
‰ìli°
 *
Ê
;

751 
blkty≥
;

752 
i
, 
n
, 
ödex
;

753 
uöt32_t
 
‰ìm≠
[
PAGE_SIZE
 / (
SMALLEST_SUBPAGE_SIZE
*32)];

755 
	`checksub∑ge
(
¥
);

756 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

759 
i
=0; i<
	`ARRAYCOUNT
(
‰ìm≠
); i++) {

760 
‰ìm≠
[
i
] = 0;

763 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

764 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

765 
	`KASSERT
(
blkty≥
 >0 && blkty≥ < 
NSIZES
);

768 
n
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

769 
	`KASSERT
(
n
 <32 * 
	`ARRAYCOUNT
(
‰ìm≠
));

771 i‡(
¥
->
‰ìli°_off£t
 !
INVALID_OFFSET
) {

772 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

773 
Ê
 = (
‰ìli°
 *)
Êa
;

775 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

776 
Êa
 = (
vaddr_t
)
Ê
;

777 
ödex
 = (
Êa
-
¥∑ge
Ë/ 
sizes
[
blkty≥
];

778 
	`KASSERT
(
ödex
<
n
);

779 
‰ìm≠
[
ödex
/32] |= (1<<(index%32));

783 
	`k¥ötf
("at 0x%08lx: size %-4lu %u/%u free\n",

784 ()
¥∑ge
, (Ë
sizes
[
blkty≥
],

785 (Ë
¥
->
n‰ì
, 
n
);

786 
	`k¥ötf
(" ");

787 
i
=0; i<
n
; i++) {

788 
vÆ
 = (
‰ìm≠
[
i
/32] & (1<<(i%32)))!=0;

789 
	`k¥ötf
("%c", 
vÆ
 ? '.' : '*');

790 i‡(
i
%64==63 && i<
n
-1) {

791 
	`k¥ötf
("\n ");

794 
	`k¥ötf
("\n");

795 
	}
}

801 
	$khóp_¥öt°©s
()

803 
∑gîef
 *
¥
;

806 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

808 
	`k¥ötf
("Subpageállocator status:\n");

810 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

811 
	`sub∑ge_°©s
(
¥
);

814 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

815 
	}
}

824 
	$ªmove_li°s
(
∑gîef
 *
¥
, 
blkty≥
)

826 
∑gîef
 **
guy
;

828 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

830 
guy
 = &
sizeba£s
[
blkty≥
]; *guy; guy = &(*guy)->
√xt_ßmesize
) {

831 
	`checksub∑ge
(*
guy
);

832 i‡(*
guy
 =
¥
) {

833 *
guy
 = 
¥
->
√xt_ßmesize
;

838 
guy
 = &
Ælba£
; *guy; guy = &(*guy)->
√xt_Æl
) {

839 
	`checksub∑ge
(*
guy
);

840 i‡(*
guy
 =
¥
) {

841 *
guy
 = 
¥
->
√xt_Æl
;

845 
	}
}

852 
ölöe


853 
	$blockty≥
(
size_t
 
˛õ¡sz
)

855 
i
;

856 
i
=0; i<
NSIZES
; i++) {

857 i‡(
˛õ¡sz
 <
sizes
[
i
]) {

858  
i
;

862 
	`∑nic
("Subpageállocator cannot handleállocation of size %zu\n",

863 
˛õ¡sz
);

867 
	}
}

875 
sub∑ge_kmÆloc
(
size_t
 
sz


876 #ifde‡
LABELS


877 , 
vaddr_t
 
œbñ


881 
	gblkty≥
;

882 
∑gîef
 *
	g¥
;

883 
vaddr_t
 
	g¥∑ge
;

884 
vaddr_t
 
	gÊa
;

885 
‰ìli°
 *vﬁ©ûê
	gÊ
;

886 *
	gªçå
;

888 vﬁ©ûê
	gi
;

890 #ifde‡
GUARDS


891 
size_t
 
	g˛õ¡sz
;

894 #ifde‡
GUARDS


895 
	g˛õ¡sz
 = 
sz
;

896 
	gsz
 +
GUARD_OVERHEAD
;

898 #ifde‡
LABELS


899 #ifde‡
GUARDS


901 
	g˛õ¡sz
 +
LABEL_PTROFFSET
;

903 
	gsz
 +
LABEL_PTROFFSET
;

905 
	gblkty≥
 = 
blockty≥
(
sz
);

906 
	gsz
 = 
sizes
[
blkty≥
];

908 
•ölock_acquúe
(&
kmÆloc_•ölock
);

910 
checksub∑ges
();

912 
	g¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏
¥
->
√xt_ßmesize
) {

915 
KASSERT
(
PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

916 
checksub∑ge
(
¥
);

918 i‡(
	g¥
->
	gn‰ì
 > 0) {

920 
	gdﬂŒoc
:

922 
KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

923 
	g¥∑ge
 = 
PR_PAGEADDR
(
¥
);

924 
	gÊa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

925 
	gÊ
 = (
‰ìli°
 *)
Êa
;

927 
	gªçå
 = 
Ê
;

928 
	gÊ
 = 
Ê
->
√xt
;

929 
	g¥
->
	gn‰ì
--;

931 i‡(
	gÊ
 !
NULL
) {

932 
KASSERT
(
¥
->
n‰ì
 > 0);

933 
	gÊa
 = (
vaddr_t
)
Ê
;

934 
KASSERT
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

935 
	g¥
->
	g‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

938 
KASSERT
(
¥
->
n‰ì
 == 0);

939 
	g¥
->
	g‰ìli°_off£t
 = 
INVALID_OFFSET
;

941 #ifde‡
GUARDS


942 
	gªçå
 = 
e°ablishgu¨db™d
(
ªçå
, 
˛õ¡sz
, 
sz
);

944 #ifde‡
LABELS


945 
	gªçå
 = 
e°ablishœbñ
(
ªçå
, 
œbñ
);

948 
checksub∑ges
();

950 
•ölock_ªÀa£
(&
kmÆloc_•ölock
);

951  
	gªçå
;

964 
•ölock_ªÀa£
(&
kmÆloc_•ölock
);

965 
	g¥∑ge
 = 
Æloc_k∑ges
(1);

966 i‡(
	g¥∑ge
==0) {

968 
k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

969  
	gNULL
;

971 
KASSERT
(
¥∑ge
 % 
PAGE_SIZE
 == 0);

972 #ifde‡
CHECKBEEF


974 
fûl_dódbìf
((*)
¥∑ge
, 
PAGE_SIZE
);

976 
•ölock_acquúe
(&
kmÆloc_•ölock
);

978 
	g¥
 = 
Ælo˝agîef
();

979 i‡(
	g¥
==
NULL
) {

981 
•ölock_ªÀa£
(&
kmÆloc_•ölock
);

982 
‰ì_k∑ges
(
¥∑ge
);

983 
k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

984  
	gNULL
;

987 
	g¥
->
	g∑góddr_™d_blockty≥
 = 
MKPAB
(
¥∑ge
, 
blkty≥
);

988 
	g¥
->
	gn‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

996 
	gÊa
 = 
¥∑ge
;

997 
	gÊ
 = (
‰ìli°
 *)
Êa
;

998 
	gÊ
->
	g√xt
 = 
NULL
;

999 
	gi
=1; i<
	g¥
->
	gn‰ì
; i++) {

1000 
	gÊ
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

1001 
	gÊ
->
	g√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

1002 
KASSERT
(
Ê
 !Ê->
√xt
);

1004 
	gÊa
 = (
vaddr_t
Ë
Ê
;

1005 
	g¥
->
	g‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

1006 
KASSERT
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

1008 
	g¥
->
	g√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

1009 
	gsizeba£s
[
blkty≥
] = 
¥
;

1011 
	g¥
->
	g√xt_Æl
 = 
Ælba£
;

1012 
	gÆlba£
 = 
¥
;

1015 
	gdﬂŒoc
;

1024 
	$sub∑ge_k‰ì
(*
±r
)

1026 
blkty≥
;

1027 
vaddr_t
 
±øddr
;

1028 
∑gîef
 *
¥
;

1029 
vaddr_t
 
¥∑ge
;

1030 
vaddr_t
 
Êa
;

1031 
‰ìli°
 *
Ê
;

1032 
vaddr_t
 
off£t
;

1033 #ifde‡
GUARDS


1034 
size_t
 
blocksize
, 
smÆÀrblocksize
;

1037 
±øddr
 = (
vaddr_t
)
±r
;

1038 #ifde‡
GUARDS


1039 i‡(
±øddr
 % 
PAGE_SIZE
 == 0) {

1052 
±øddr
 -
GUARD_PTROFFSET
;

1054 #ifde‡
LABELS


1055 i‡(
±øddr
 % 
PAGE_SIZE
 == 0) {

1059 
±øddr
 -
LABEL_PTROFFSET
;

1062 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

1064 
	`checksub∑ges
();

1066 
¥
 = 
Ælba£
;Ör;Ö∏¥->
√xt_Æl
) {

1067 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

1068 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

1069 
	`KASSERT
(
blkty≥
 >0 && blkty≥ < 
NSIZES
);

1072 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

1073 
	`checksub∑ge
(
¥
);

1075 i‡(
±øddr
 >
¥∑ge
 &&Öåadd∏<ÖΩagê+ 
PAGE_SIZE
) {

1080 i‡(
¥
==
NULL
) {

1082 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1086 
off£t
 = 
±øddr
 - 
¥∑ge
;

1089 i‡(
off£t
 >
PAGE_SIZE
 || off£à% 
sizes
[
blkty≥
] != 0) {

1090 
	`∑nic
("k‰ì: sub∑gê‰ì o‡övÆidádd∏%p\n", 
±r
);

1093 #ifde‡
GUARDS


1094 
blocksize
 = 
sizes
[
blkty≥
];

1095 
smÆÀrblocksize
 = 
blkty≥
 > 0 ? 
sizes
[blktype - 1] : 0;

1096 
	`checkgu¨db™d
(
±øddr
, 
smÆÀrblocksize
, 
blocksize
);

1103 
	`fûl_dódbìf
((*)
±øddr
, 
sizes
[
blkty≥
]);

1110 
Êa
 = 
¥∑ge
 + 
off£t
;

1111 
Ê
 = (
‰ìli°
 *)
Êa
;

1112 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

1113 
Ê
->
√xt
 = 
NULL
;

1115 
Ê
->
√xt
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

1118 #ifde‡
SLOW


1120 
‰ìli°
 *
Ê2
;

1122 
Ê2
 = 
Ê
->
√xt
; fl2 !
NULL
; fl2 = fl2->next) {

1123 
	`KASSERT
(
Ê2
 !
Ê
);

1128 
	`KASSERT
(
Ê
 !Ê->
√xt
);

1131 
¥
->
‰ìli°_off£t
 = 
off£t
;

1132 
¥
->
n‰ì
++;

1134 
	`KASSERT
(
¥
->
n‰ì
 <
PAGE_SIZE
 / 
sizes
[
blkty≥
]);

1135 i‡(
¥
->
n‰ì
 =
PAGE_SIZE
 / 
sizes
[
blkty≥
]) {

1137 
	`ªmove_li°s
(
¥
, 
blkty≥
);

1138 
	`‰ì∑gîef
(
¥
);

1140 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1141 
	`‰ì_k∑ges
(
¥∑ge
);

1144 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1147 #ifde‡
SLOWER


1148 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

1149 
	`checksub∑ges
();

1150 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1154 
	}
}

1164 
	$kmÆloc
(
size_t
 
sz
)

1166 
size_t
 
checksz
;

1167 #ifde‡
LABELS


1168 
vaddr_t
 
œbñ
;

1171 #ifde‡
LABELS


1172 #ifde‡
__GNUC__


1173 
œbñ
 = (
vaddr_t
)
	`__buûtö_ªtu∫_addªss
(0);

1179 
checksz
 = 
sz
 + 
GUARD_OVERHEAD
 + 
LABEL_OVERHEAD
;

1180 i‡(
checksz
 >
LARGEST_SUBPAGE_SIZE
) {

1181 
≈ages
;

1182 
vaddr_t
 
addªss
;

1185 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

1186 
addªss
 = 
	`Æloc_k∑ges
(
≈ages
);

1187 i‡(
addªss
==0) {

1188  
NULL
;

1190 
	`KASSERT
(
addªss
 % 
PAGE_SIZE
 == 0);

1192  (*)
addªss
;

1195 #ifde‡
LABELS


1196  
	`sub∑ge_kmÆloc
(
sz
, 
œbñ
);

1198  
	`sub∑ge_kmÆloc
(
sz
);

1200 
	}
}

1206 
	$k‰ì
(*
±r
)

1211 i‡(
±r
 =
NULL
) {

1213 } i‡(
	`sub∑ge_k‰ì
(
±r
)) {

1214 
	`KASSERT
((
vaddr_t
)
±r
%
PAGE_SIZE
==0);

1215 
	`‰ì_k∑ges
((
vaddr_t
)
±r
);

1217 
	}
}

	@userland/bin/cat/cat.c

30 
	~<uni°d.h
>

31 
	~<°rög.h
>

32 
	~<îr.h
>

44 
	$doˇt
(c⁄° *
«me
, 
fd
)

46 
buf
[1024];

47 
Àn
, 
wr
, 
wπŸ
;

55 (
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf)))>0) {

60 
wπŸ
 = 0;

61 
wπŸ
 < 
Àn
) {

62 
wr
 = 
	`wrôe
(
STDOUT_FILENO
, 
buf
+
wπŸ
, 
Àn
-wrtot);

63 i‡(
wr
<0) {

64 
	`îr
(1, "stdout");

66 
wπŸ
 +
wr
;

72 i‡(
Àn
<0) {

73 
	`îr
(1, "%s", 
«me
);

75 
	}
}

80 
	$ˇt
(c⁄° *
fûe
)

82 
fd
;

87 i‡(!
	`°rcmp
(
fûe
, "-")) {

88 
	`doˇt
("°dö", 
STDIN_FILENO
);

96 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

97 i‡(
fd
<0) {

98 
	`îr
(1, "%s", 
fûe
);

100 
	`doˇt
(
fûe
, 
fd
);

101 
	`˛o£
(
fd
);

102 
	}
}

106 
	$maö
(
¨gc
, *
¨gv
[])

108 i‡(
¨gc
==1) {

110 
	`doˇt
("°dö", 
STDIN_FILENO
);

114 
i
;

115 
i
=1; i<
¨gc
; i++) {

116 
	`ˇt
(
¨gv
[
i
]);

120 
	}
}

	@userland/bin/cp/cp.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

42 
	$c›y
(c⁄° *
‰om
, c⁄° *
to
)

44 
‰omfd
;

45 
tofd
;

46 
buf
[1024];

47 
Àn
, 
wr
, 
wπŸ
;

52 
‰omfd
 = 
	`›í
(
‰om
, 
O_RDONLY
);

53 i‡(
‰omfd
<0) {

54 
	`îr
(1, "%s", 
‰om
);

56 
tofd
 = 
	`›í
(
to
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

57 i‡(
tofd
<0) {

58 
	`îr
(1, "%s", 
to
);

67 (
Àn
 = 
	`ªad
(
‰omfd
, 
buf
, (buf)))>0) {

72 
wπŸ
 = 0;

73 
wπŸ
 < 
Àn
) {

74 
wr
 = 
	`wrôe
(
tofd
, 
buf
+
wπŸ
, 
Àn
-wrtot);

75 i‡(
wr
<0) {

76 
	`îr
(1, "%s", 
to
);

78 
wπŸ
 +
wr
;

84 i‡(
Àn
<0) {

85 
	`îr
(1, "%s", 
‰om
);

88 i‡(
	`˛o£
(
‰omfd
) < 0) {

89 
	`îr
(1, "%s: clo£", 
‰om
);

92 i‡(
	`˛o£
(
tofd
) < 0) {

93 
	`îr
(1, "%s: clo£", 
to
);

95 
	}
}

98 
	$maö
(
¨gc
, *
¨gv
[])

108 i‡(
¨gc
!=3) {

109 
	`îrx
(1, "Usage: cp OLDFILE NEWFILE");

111 
	`c›y
(
¨gv
[1],árgv[2]);

113 
	}
}

	@userland/bin/false/false.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

41 
	$maö
()

44 
	`exô
(1);

45 
	}
}

	@userland/bin/ln/ln.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<îr.h
>

51 
	$dosymlök
(c⁄° *
ãxt
, c⁄° *
∑th
)

53 i‡(
	`symlök
(
ãxt
, 
∑th
)) {

54 
	`îr
(1, "%s", 
∑th
);

56 
	}
}

65 
	$doh¨dlök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
)

67 i‡(
	`lök
(
ﬁdfûe
, 
√wfûe
)) {

68 
	`îr
(1, "%†‹ %s", 
ﬁdfûe
, 
√wfûe
);

69 
	`exô
(1);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

82 i‡(
¨gc
==4 && !
	`°rcmp
(
¨gv
[1], "-s")) {

83 
	`dosymlök
(
¨gv
[2],árgv[3]);

85 i‡(
¨gc
==3) {

86 
	`doh¨dlök
(
¨gv
[1],árgv[2]);

89 
	`w¨nx
("Usage:Ün oldfileÇewfile");

90 
	`îrx
(1, "Ün -s symlinkcontents symlinkfile\n");

93 
	}
}

	@userland/bin/ls/ls.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<°dio.h
>

33 
	~<uni°d.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

49 
	ga›t
=0;

50 
	gd›t
=0;

51 
	gl›t
=0;

52 
	gR›t
=0;

53 
	gs›t
=0;

58 
	$›ti⁄
(
ch
)

60 
ch
) {

61 'a': 
a›t
=1; ;

62 'd': 
d›t
=1; ;

63 'l': 
l›t
=1; ;

64 'R': 
R›t
=1; ;

65 's': 
s›t
=1; ;

67 
	`îrx
(1, "Unknow¿›ti⁄ -%c", 
ch
);

69 
	}
}

76 
	$ba£«me
(c⁄° *
∑th
)

78 c⁄° *
s
;

80 
s
 = 
	`°ºchr
(
∑th
, '/');

81 i‡(
s
) {

82  
s
+1;

84  
∑th
;

85 
	}
}

92 
	$isdú
(c⁄° *
∑th
)

94 
°©
 
buf
;

95 
fd
;

98 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

99 i‡(
fd
<0) {

100 
	`îr
(1, "%s", 
∑th
);

102 i‡(
	`f°©
(
fd
, &
buf
)<0) {

103 
	`îr
(1, "%s: f°©", 
∑th
);

105 
	`˛o£
(
fd
);

107  
	`S_ISDIR
(
buf
.
°_mode
);

108 
	}
}

116 
	$¥öthódî
(c⁄° *
fûe
)

119 
fú°
=1;

120 i‡(
fú°
) {

121 
fú°
 = 0;

124 
	`¥ötf
("\n");

126 
	`¥ötf
("%s:\n", 
fûe
);

127 
	}
}

135 
	$¥öt
(c⁄° *
∑th
)

137 
°©
 
°©buf
;

138 c⁄° *
fûe
;

139 
ty≥ch
;

141 i‡(
l›t
 || 
s›t
) {

142 
fd
;

144 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

145 i‡(
fd
<0) {

146 
	`îr
(1, "%s", 
∑th
);

148 i‡(
	`f°©
(
fd
, &
°©buf
)<0) {

149 
	`îr
(1, "%s: f°©", 
∑th
);

151 
	`˛o£
(
fd
);

154 
fûe
 = 
	`ba£«me
(
∑th
);

156 i‡(
s›t
) {

157 
	`¥ötf
("%3d ", 
°©buf
.
°_blocks
);

160 i‡(
l›t
) {

161 i‡(
	`S_ISREG
(
°©buf
.
°_mode
)) {

162 
ty≥ch
 = '-';

164 i‡(
	`S_ISDIR
(
°©buf
.
°_mode
)) {

165 
ty≥ch
 = 'd';

167 i‡(
	`S_ISLNK
(
°©buf
.
°_mode
)) {

168 
ty≥ch
 = 'l';

170 i‡(
	`S_ISCHR
(
°©buf
.
°_mode
)) {

171 
ty≥ch
 = 'c';

173 i‡(
	`S_ISBLK
(
°©buf
.
°_mode
)) {

174 
ty≥ch
 = 'b';

177 
ty≥ch
 = '?';

180 
	`¥ötf
("%crwx------ %2dÑoot %-8llu",

181 
ty≥ch
,

182 
°©buf
.
°_∆ök
,

183 
°©buf
.
°_size
);

185 
	`¥ötf
("%s\n", 
fûe
);

186 
	}
}

193 
	$li°dú
(c⁄° *
∑th
, 
showhódî
)

195 
fd
;

196 
buf
[1024];

197 
√w∑th
[1024];

198 
ssize_t
 
Àn
;

200 i‡(
showhódî
) {

201 
	`¥öthódî
(
∑th
);

207 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

208 i‡(
fd
<0) {

209 
	`îr
(1, "%s", 
∑th
);

215 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1)) > 0) {

216 
buf
[
Àn
] = 0;

219 
	`¢¥ötf
(
√w∑th
, “ew∑th), "%s/%s", 
∑th
, 
buf
);

221 i‡(
a›t
 || 
buf
[0]!='.') {

223 
	`¥öt
(
√w∑th
);

226 i‡(
Àn
<0) {

227 
	`îr
(1, "%s: gëdúíåy", 
∑th
);

231 
	`˛o£
(
fd
);

232 
	}
}

236 
	$ªcur£dú
(c⁄° *
∑th
)

238 
fd
;

239 
buf
[1024];

240 
√w∑th
[1024];

241 
Àn
;

246 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

247 i‡(
fd
<0) {

248 
	`îr
(1, "%s", 
∑th
);

254 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1)) > 0) {

255 
buf
[
Àn
] = 0;

258 
	`¢¥ötf
(
√w∑th
, “ew∑th), "%s/%s", 
∑th
, 
buf
);

260 i‡(!
a›t
 && 
buf
[0]=='.') {

265 i‡(!
	`°rcmp
(
buf
, ".") || !strcmp(buf, "..")) {

270 i‡(!
	`isdú
(
√w∑th
)) {

274 
	`li°dú
(
√w∑th
, 1 );

275 i‡(
R›t
) {

276 
	`ªcur£dú
(
√w∑th
);

279 i‡(
Àn
<0) {

280 
	`îr
(1, "%s", 
∑th
);

283 
	`˛o£
(
fd
);

284 
	}
}

288 
	$li°ôem
(c⁄° *
∑th
, 
showhódî
)

290 i‡(!
d›t
 && 
	`isdú
(
∑th
)) {

291 
	`li°dú
(
∑th
, 
showhódî
 || 
R›t
);

292 i‡(
R›t
) {

293 
	`ªcur£dú
(
∑th
);

297 
	`¥öt
(
∑th
);

299 
	}
}

302 
	$maö
(
¨gc
, *
¨gv
[])

304 
i
,
j
, 
ôems
=0;

309 
i
=1; i<
¨gc
; i++) {

310 i‡(
¨gv
[
i
][0]!='-') {

311 
ôems
++;

318 
i
=1; i<
¨gc
; i++) {

319 i‡(
¨gv
[
i
][0]=='-') {

324 
j
=1; 
¨gv
[
i
][j]; j++) {

325 
	`›ti⁄
(
¨gv
[
i
][
j
]);

332 
	`li°ôem
(
¨gv
[
i
], 
ôems
>1);

340 i‡(
ôems
==0) {

341 
	`li°ôem
(".", 0);

345 
	}
}

	@userland/bin/mkdir/mkdir.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<uni°d.h
>

33 
	~<îr.h
>

43 
	$maö
(
¨gc
, *
¨gv
[])

45 i‡(
¨gc
!=2) {

46 
	`îrx
(1, "Usage: mkdir DIRECTORY");

49 i‡(
	`mkdú
(
¨gv
[1], 0775)) {

50 
	`îr
(1, "%s", 
¨gv
[1]);

53 
	}
}

	@userland/bin/mv/mv.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

49 
	$d‹íame
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
)

51 i‡(
	`ª«me
(
ﬁdfûe
, 
√wfûe
)) {

52 
	`îr
(1, "%†‹ %s", 
ﬁdfûe
, 
√wfûe
);

54 
	}
}

57 
	$maö
(
¨gc
, *
¨gv
[])

59 i‡(
¨gc
!=3) {

60 
	`îrx
(1, "Usage: mv oldfileÇewfile");

62 
	`d‹íame
(
¨gv
[1],árgv[2]);

64 
	}
}

	@userland/bin/pwd/pwd.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

32 
	~<°rög.h
>

33 
	~<îr.h
>

34 
	~<limôs.h
>

45 
	$maö
()

47 
buf
[
PATH_MAX
+1], *
p
;

49 
p
 = 
	`gëcwd
(
buf
, (buf));

50 i‡(
p
 =
NULL
) {

51 
	`îr
(1, ".");

53 
	`¥ötf
("%s\n", 
buf
);

55 
	}
}

	@userland/bin/rm/rm.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

41 
	$d‹emove
(c⁄° *
fûe
)

43 i‡(
	`ªmove
(
fûe
)) {

44 
	`îr
(1, "%s", 
fûe
);

46 
	}
}

49 
	$maö
(
¨gc
, *
¨gv
[])

51 
i
;

53 i‡(
¨gc
<2) {

55 
	`îrx
(1, "Usage:Ñm FILES");

59 
i
=1; i<
¨gc
; i++) {

60 
	`d‹emove
(
¨gv
[
i
]);

64 
	}
}

	@userland/bin/rmdir/rmdir.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

41 
	$maö
(
¨gc
, *
¨gv
[])

43 i‡(
¨gc
!=2) {

44 
	`îrx
(1, "Usage:Ñmdir DIRECTORY");

47 i‡(
	`rmdú
(
¨gv
[1])) {

48 
	`îr
(1, "%s", 
¨gv
[1]);

51 
	}
}

	@userland/bin/sh/sh.c

38 
	~<sys/ty≥s.h
>

39 
	~<sys/waô.h
>

40 
	~<as£π.h
>

41 
	~<uni°d.h
>

42 
	~<°dlib.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<limôs.h
>

46 
	~<î∫o.h
>

47 
	~<îr.h
>

49 #ifde‡
HOST


50 
	~"ho°com∑t.h
"

53 #i‚de‡
NARG_MAX


55 
	#NARG_MAX
 1024

	)

59 
	#CMDLINE_MAX
 4096

	)

62 
	sexôöfo
 {

63 
	mvÆ
:8,

64 
	msig«Àd
:1,

65 
	m°›≥d
:1,

66 
	mc‹edump
:1;

70 
	gtimög
 = 0;

73 
	#MAXBG
 128

	)

74 
pid_t
 
	gbgpids
[
MAXBG
];

82 
	$ˇn_bg
()

84 
i
;

86 
i
 = 0; i < 
MAXBG
; i++) {

87 i‡(
bgpids
[
i
] == 0) {

93 
	}
}

102 
	$ªmembî_bg
(
pid_t
 
pid
)

104 
i
;

105 
i
 = 0; i < 
MAXBG
; i++) {

106 i‡(
bgpids
[
i
] == 0) {

107 
bgpids
[
i
] = 
pid
;

111 
	`as£π
(0);

112 
	}
}

119 
	$exôöfo_exô
(
exôöfo
 *
ei
, 
code
)

121 
ei
->
vÆ
 = 
code
;

122 
ei
->
sig«Àd
 = 0;

123 
ei
->
°›≥d
 = 0;

124 
ei
->
c‹edump
 = 0;

125 
	}
}

133 
	$ªad°©us
(
°©us
, 
exôöfo
 *
ei
)

135 i‡(
	`WIFEXITED
(
°©us
)) {

136 
ei
->
vÆ
 = 
	`WEXITSTATUS
(
°©us
);

137 
ei
->
sig«Àd
 = 0;

138 
ei
->
°›≥d
 = 0;

139 
ei
->
c‹edump
 = 0;

141 i‡(
	`WIFSIGNALED
(
°©us
Ë&& 
	`WCOREDUMP
(status)) {

142 
ei
->
vÆ
 = 
	`WTERMSIG
(
°©us
);

143 
ei
->
sig«Àd
 = 1;

144 
ei
->
°›≥d
 = 0;

145 
ei
->
c‹edump
 = 1;

147 i‡(
	`WIFSIGNALED
(
°©us
)) {

148 
ei
->
vÆ
 = 
	`WTERMSIG
(
°©us
);

149 
ei
->
sig«Àd
 = 1;

150 
ei
->
°›≥d
 = 0;

151 
ei
->
c‹edump
 = 0;

153 i‡(
	`WIFSTOPPED
(
°©us
)) {

154 
ei
->
vÆ
 = 
	`WSTOPSIG
(
°©us
);

155 
ei
->
sig«Àd
 = 0;

156 
ei
->
°›≥d
 = 1;

157 
ei
->
c‹edump
 = 0;

160 
	`¥ötf
("InvÆid sètu†codê%d", 
°©us
);

161 
ei
->
vÆ
 = 
°©us
;

162 
ei
->
sig«Àd
 = 0;

163 
ei
->
°›≥d
 = 0;

164 
ei
->
c‹edump
 = 0;

167 
	}
}

175 
	$¥öt°©us
(c⁄° 
exôöfo
 *
ei
, 
¥öãxôzîo
)

177 i‡(
ei
->
sig«Àd
 &&Éi->
c‹edump
) {

178 
	`¥ötf
("Sig«»%d (c‹êdum≥d)\n", 
ei
->
vÆ
);

180 i‡(
ei
->
sig«Àd
) {

181 
	`¥ötf
("Sig«»%d\n", 
ei
->
vÆ
);

183 i‡(
ei
->
°›≥d
) {

184 
	`¥ötf
("St›≥d o¿sig«»%d\n", 
ei
->
vÆ
);

186 i‡(
¥öãxôzîo
 || 
ei
->
vÆ
 != 0) {

187 
	`¥ötf
("Exô %d\n", 
ei
->
vÆ
);

189 
	}
}

197 
	$dowaô
(
pid_t
 
pid
)

199 
exôöfo
 
ei
;

200 
°©us
;

202 i‡(
	`waôpid
(
pid
, &
°©us
, 0) < 0) {

203 
	`w¨n
("pid %d", 
pid
);

206 
	`¥ötf
("pid %d: ", 
pid
);

207 
	`ªad°©us
(
°©us
, &
ei
);

208 
	`¥öt°©us
(&
ei
, 1);

210 
	}
}

212 #ifde‡
WNOHANG


219 
	$dowaôpﬁl
(
pid_t
 
pid
)

221 
exôöfo
 
ei
;

222 
pid_t
 
foundpid
;

223 
°©us
;

225 
foundpid
 = 
	`waôpid
(
pid
, &
°©us
, 
WNOHANG
);

226 i‡(
foundpid
 < 0) {

227 
	`w¨n
("pid %d", 
pid
);

229 i‡(
foundpid
 != 0) {

230 
	`¥ötf
("pid %d: ", 
pid
);

231 
	`ªad°©us
(
°©us
, &
ei
);

232 
	`¥öt°©us
(&
ei
, 1);

236 
	}
}

244 
	$waôpﬁl
()

246 
i
;

247 
i
=0; i < 
MAXBG
; i++) {

248 i‡(
bgpids
[
i
] != 0) {

249 i‡(
	`dowaôpﬁl
(
bgpids
[
i
])) {

250 
bgpids
[
i
] = 0;

254 
	}
}

265 
	$cmd_waô
(
ac
, *
av
[], 
exôöfo
 *
ei
)

267 
i
;

268 
pid_t
 
pid
;

270 i‡(
ac
 == 2) {

271 
pid
 = 
	`©oi
(
av
[1]);

272 
	`dowaô
(
pid
);

273 
i
 = 0; i < 
MAXBG
; i++) {

274 i‡(
bgpids
[
i
]==
pid
) {

275 
bgpids
[
i
] = 0;

278 
	`exôöfo_exô
(
ei
, 0);

281 i‡(
ac
 == 1) {

282 
i
=0; i < 
MAXBG
; i++) {

283 i‡(
bgpids
[
i
] != 0) {

284 
	`dowaô
(
bgpids
[
i
]);

285 
bgpids
[
i
] = 0;

288 
	`exôöfo_exô
(
ei
, 0);

291 
	`¥ötf
("Usage: wait [pid]\n");

292 
	`exôöfo_exô
(
ei
, 1);

293 
	}
}

302 
	$cmd_chdú
(
ac
, *
av
[], 
exôöfo
 *
ei
)

304 i‡(
ac
 == 2) {

305 i‡(
	`chdú
(
av
[1])) {

306 
	`w¨n
("chdú: %s", 
av
[1]);

307 
	`exôöfo_exô
(
ei
, 1);

310 
	`exôöfo_exô
(
ei
, 0);

313 
	`¥ötf
("Usage: chdir dir\n");

314 
	`exôöfo_exô
(
ei
, 1);

315 
	}
}

324 
	$cmd_exô
(
ac
, *
av
[], 
exôöfo
 *
ei
)

326 
code
;

328 i‡(
ac
 == 1) {

329 
code
 = 0;

331 i‡(
ac
 == 2) {

332 
code
 = 
	`©oi
(
av
[1]);

335 
	`¥ötf
("Usage:Éxit [code]\n");

336 
	`exôöfo_exô
(
ei
, 1);

340 
	`exô
(
code
);

341 
	}
}

348 c⁄° *
	m«me
;

349 (*
	mfunc
)(, **, 
	mexôöfo
 *);

350 } 
	gbuûtös
[] = {

351 { "cd", 
cmd_chdú
 },

352 { "chdú", 
cmd_chdú
 },

353 { "exô", 
cmd_exô
 },

354 { "waô", 
cmd_waô
 },

355 { 
NULL
, NULL }

367 
	$docomm™d
(*
buf
, 
exôöfo
 *
ei
)

369 *
¨gs
[
NARG_MAX
 + 1];

370 
«rgs
, 
i
;

371 *
s
;

372 
pid_t
 
pid
;

373 
°©us
;

374 
bg
=0;

375 
time_t
 
°¨t£cs
, 
íd£cs
;

376 
°¨ä£cs
, 
ídn£cs
;

378 
«rgs
 = 0;

379 
s
 = 
	`°πok
(
buf
, " \t\r\n"); s; s = såtok(
NULL
, " \t\r\n")) {

380 i‡(
«rgs
 >
NARG_MAX
) {

381 
	`¥ötf
("%s: Too manyárguments "

383 
¨gs
[0]);

384 
	`exôöfo_exô
(
ei
, 1);

387 
¨gs
[
«rgs
++] = 
s
;

389 
¨gs
[
«rgs
] = 
NULL
;

391 i‡(
«rgs
==0) {

393 
	`exôöfo_exô
(
ei
, 0);

397 
i
=0; 
buûtös
[i].
«me
; i++) {

398 i‡(!
	`°rcmp
(
buûtös
[
i
].
«me
, 
¨gs
[0])) {

399 
buûtös
[
i
].
	`func
(
«rgs
, 
¨gs
, 
ei
);

406 i‡(
«rgs
 > 0 && !
	`°rcmp
(
¨gs
[nargs-1], "&")) {

408 i‡(!
	`ˇn_bg
()) {

409 
	`¥ötf
("%s: Too many background jobs; wait for "

411 
¨gs
[0]);

412 
	`exôöfo_exô
(
ei
, 1);

415 
«rgs
--;

416 
¨gs
[
«rgs
] = 
NULL
;

417 
bg
 = 1;

420 i‡(
timög
) {

421 
	`__time
(&
°¨t£cs
, &
°¨ä£cs
);

424 
pid
 = 
	`f‹k
();

425 
pid
) {

428 
	`w¨n
("fork");

429 
	`exôöfo_exô
(
ei
, 255);

433 
	`execvp
(
¨gs
[0],árgs);

434 
	`w¨n
("%s", 
¨gs
[0]);

442 
	`_exô
(1);

448 i‡(
bg
) {

450 
	`ªmembî_bg
(
pid
);

451 
	`¥ötf
("[%d] %†... &\n", 
pid
, 
¨gs
[0]);

452 
	`exôöfo_exô
(
ei
, 0);

456 i‡(
	`waôpid
(
pid
, &
°©us
, 0) < 0) {

457 
	`w¨n
("waitpid");

458 
	`exôöfo_exô
(
ei
, 255);

461 
	`ªad°©us
(
°©us
, 
ei
);

464 i‡(
timög
) {

465 
	`__time
(&
íd£cs
, &
ídn£cs
);

466 i‡(
ídn£cs
 < 
°¨ä£cs
) {

467 
ídn£cs
 += 1000000000;

468 
íd£cs
--;

470 
ídn£cs
 -
°¨ä£cs
;

471 
íd£cs
 -
°¨t£cs
;

472 
	`w¨nx
("subprocessÅime: %lu.%09lu seconds",

473 (Ë
íd£cs
, (Ë
ídn£cs
);

475 
	}
}

489 
	$gëcmd
(*
buf
, 
size_t
 
Àn
)

491 
size_t
 
pos
 = 0;

492 
d⁄e
=0, 
ch
;

498 !
d⁄e
) {

499 
ch
 = 
	`gëch¨
();

500 i‡((
ch
 ='\b' || ch =127Ë&& 
pos
 > 0) {

501 
	`putch¨
('\b');

502 
	`putch¨
(' ');

503 
	`putch¨
('\b');

504 
pos
--;

506 i‡(
ch
 == '\r' || ch == '\n') {

507 
	`putch¨
('\r');

508 
	`putch¨
('\n');

509 
d⁄e
 = 1;

511 i‡(
ch
 >32 && ch < 127 && 
pos
 < 
Àn
-1) {

512 
buf
[
pos
++] = 
ch
;

513 
	`putch¨
(
ch
);

517 
	`putch¨
('\a');

520 
buf
[
pos
] = 0;

521 
	}
}

531 
	$öãø˘ive
()

533 
buf
[
CMDLINE_MAX
];

534 
exôöfo
 
ei
;

537 
	`¥ötf
("OS/161$ ");

538 
	`gëcmd
(
buf
, (buf));

539 
	`docomm™d
(
buf
, &
ei
);

540 
	`¥öt°©us
(&
ei
, 0);

541 #ifde‡
WNOHANG


542 
	`waôpﬁl
();

545 
	}
}

549 
	$check_timög
()

551 
time_t
 
£cs
;

552 
n£cs
;

553 i‡(
	`__time
(&
£cs
, &
n£cs
) != -1) {

554 
timög
 = 1;

555 
	`w¨nx
("TimingÉnabled.");

557 
	}
}

565 
	$maö
(
¨gc
, *
¨gv
[])

567 #ifde‡
HOST


568 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

570 
	`check_timög
();

576 i‡(
¨gc
 == 0 ||árgc == 1) {

577 
	`öãø˘ive
();

579 i‡(
¨gc
 =3 && !
	`°rcmp
(
¨gv
[1], "-c")) {

580 
exôöfo
 
ei
;

581 
	`docomm™d
(
¨gv
[2], &
ei
);

582 
	`¥öt°©us
(&
ei
, 0);

583 i‡(
ei
.
sig«Àd
 ||Éi.
°›≥d
 ||Éi.
vÆ
 != 0) {

584 
	`exô
(1);

588 
	`îrx
(1, "Usage: sh [-c command]");

591 
	}
}

	@userland/bin/sync/sync.c

30 
	~<uni°d.h
>

39 
	$maö
()

41 
	`sync
();

43 
	}
}

	@userland/bin/tac/tac.c

48 
	~<°dio.h
>

49 
	~<°rög.h
>

50 
	~<uni°d.h
>

51 
	~<f˙é.h
>

52 
	~<as£π.h
>

53 
	~<î∫o.h
>

54 
	~<îr.h
>

56 
	södexíåy
 {

57 
off_t
 
	mpos
;

58 
off_t
 
	mÀn
;

61 
	gd©afd
 = -1, 
	gödexfd
 = -1;

62 
	gd©™ame
[64], 
	gödex«me
[64];

64 
	gbuf
[4096];

72 
	$memchr
(c⁄° *
buf
, 
ch
, 
size_t
 
buÊí
)

74 c⁄° *
ubuf
 = 
buf
;

75 
size_t
 
i
;

77 
i
=0; i<
buÊí
; i++) {

78 i‡(
ubuf
[
i
] =
ch
) {

80  (*)(
ubuf
 + 
i
);

83  
NULL
;

84 
	}
}

90 
size_t


91 
	$d‹ód
(
fd
, c⁄° *
«me
, *
buf
, 
size_t
 
Àn
)

93 
ssize_t
 
r
;

95 
r
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

96 i‡(
r
 == -1) {

97 
	`îr
(1, "%s:Ñód", 
«me
);

99  (
size_t
)
r
;

100 
	}
}

104 
	$dowrôe
(
fd
, c⁄° *
«me
, c⁄° *
buf
, 
size_t
 
Àn
)

106 
ssize_t
 
r
;

108 
r
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

109 i‡(
r
 == -1) {

110 
	`îr
(1, "%s: wrôe", 
«me
);

112 i‡((
size_t
)
r
 !
Àn
) {

113 
	`îrx
(1, "%s: write: Unexpected short count %zd of %zu",

114 
r
, 
Àn
);

116 
	}
}

119 
off_t


120 
	$dﬁ£ek
(
fd
, c⁄° *
«me
, 
off_t
 
pos
, 
whí˚
)

122 
off_t
 
ªt
;

124 
ªt
 = 
	`l£ek
(
fd
, 
pos
, 
whí˚
);

125 i‡(
ªt
 == -1) {

126 
	`îr
(1, "%s:Ü£ek", 
«me
);

128  
ªt
;

129 
	}
}

136 
	$ªadfûe
(c⁄° *
«me
)

138 
fd
, 
˛o£fd
;

139 
ödexíåy
 
x
;

140 
size_t
 
Àn
, 
ªmaöög
, 
hîe
;

141 c⁄° *
s
, *
t
;

143 i‡(
«me
 =
NULL
 || !
	`°rcmp
(name, "-")) {

144 
fd
 = 
STDIN_FILENO
;

145 
˛o£fd
 = -1;

148 
fd
 = 
	`›í
(
«me
, 
O_RDONLY
);

149 i‡(
fd
 < 0) {

150 
	`îr
(1, "%s", 
«me
);

152 
˛o£fd
 = 
fd
;

155 
x
.
pos
 = 0;

156 
x
.
Àn
 = 0;

158 
Àn
 = 
	`d‹ód
(
fd
, 
«me
, 
buf
, (buf));

159 i‡(
Àn
 == 0) {

163 
ªmaöög
 = 
Àn
;

164 
s
 = 
buf
; s !
NULL
; s = 
t
) {

165 
t
 = 
	`memchr
(
s
, '\n', 
ªmaöög
);

166 i‡(
t
 !
NULL
) {

167 
t
++;

168 
hîe
 = (
t
 - 
s
);

169 
x
.
Àn
 +
hîe
;

170 
ªmaöög
 -
hîe
;

171 
	`dowrôe
(
ödexfd
, 
ödex«me
, &
x
, (x));

172 
x
.
pos
 +x.
Àn
;

173 
x
.
Àn
 = 0;

176 
x
.
Àn
 +
ªmaöög
;

179 
	`dowrôe
(
d©afd
, 
d©™ame
, 
buf
, 
Àn
);

181 i‡(
x
.
Àn
 > 0) {

182 
	`dowrôe
(
ödexfd
, 
ödex«me
, &
x
, (x));

185 i‡(
˛o£fd
 != -1) {

186 
	`˛o£
(
˛o£fd
);

188 
	}
}

192 
	$dumpd©a
()

194 
ödexíåy
 
x
;

195 
off_t
 
ödexsize
, 
pos
, 
d⁄e
;

196 
size_t
 
amou¡
, 
Àn
;

198 
ödexsize
 = 
	`dﬁ£ek
(
ödexfd
, 
ödex«me
, 0, 
SEEK_CUR
);

199 
pos
 = 
ödexsize
;

201 
pos
 -(
x
);

202 i‡(
pos
 == 0) {

205 
	`as£π
(
pos
 >= 0);

206 
	`dﬁ£ek
(
ödexfd
, 
ödex«me
, 
pos
, 
SEEK_SET
);

208 
Àn
 = 
	`d‹ód
(
ödexfd
, 
ödex«me
, &
x
, (x));

209 i‡(
Àn
 !(
x
)) {

210 
	`îrx
(1, "%s:Ñód: U√x≥˘ed EOF", 
ödex«me
);

212 
	`dﬁ£ek
(
d©afd
, 
d©™ame
, 
x
.
pos
, 
SEEK_SET
);

214 
d⁄e
 = 0; d⁄ê< 
x
.
Àn
; d⁄ê+
amou¡
) {

215 
amou¡
 = (
buf
);

216 i‡((
off_t
)
amou¡
 > 
x
.
Àn
 - 
d⁄e
) {

217 
amou¡
 = 
x
.
Àn
 - 
d⁄e
;

219 
Àn
 = 
	`d‹ód
(
d©afd
, 
d©™ame
, 
buf
, 
amou¡
);

220 i‡(
Àn
 !
amou¡
) {

221 
	`îrx
(1, "%s:Ñead: Unexpected short count"

222 " %zu o‡%zu", 
d©™ame
, 
Àn
, 
amou¡
);

224 
	`dowrôe
(
STDOUT_FILENO
, "°dout", 
buf
, 
Àn
);

227 
	}
}

234 
	$›ís¸©ch
(c⁄° *
«me
, 
Êags
, 
mode_t
 
mode
)

236 
fd
;

238 
fd
 = 
	`›í
(
«me
, 
Êags
, 
mode
);

239 i‡(
fd
 < 0) {

240 
	`îr
(1, "%s", 
«me
);

242 i‡(
	`ªmove
(
«me
) < 0) {

243 i‡(
î∫o
 !
ENOSYS
) {

244 
	`îr
(1, "%s:Ñemove", 
«me
);

247  
fd
;

248 
	}
}

252 
	$›ífûes
()

254 
pid_t
 
pid
;

256 
pid
 = 
	`gëpid
();

258 
	`¢¥ötf
(
d©™ame
, (d©™ame), ".tmp.ècd©a.%d", ()
pid
);

259 
d©afd
 = 
	`›ís¸©ch
(
d©™ame
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0664);

261 
	`¢¥ötf
(
ödex«me
, (ödex«me), ".tmp.ècödex.%d", ()
pid
);

262 
ödexfd
 = 
	`›ís¸©ch
(
ödex«me
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0664);

263 
	}
}

267 
	$˛o£fûes
()

269 
	`˛o£
(
d©afd
);

270 
	`˛o£
(
ödexfd
);

271 
ödexfd
 = 
d©afd
 = -1;

272 
	}
}

275 
	$maö
(
¨gc
, *
¨gv
[])

277 
i
;

279 
	`›ífûes
();

281 i‡(
¨gc
 > 1) {

282 
i
=1; i<
¨gc
; i++) {

283 
	`ªadfûe
(
¨gv
[
i
]);

287 
	`ªadfûe
(
NULL
);

290 
	`dumpd©a
();

292 
	`˛o£fûes
();

294 
	}
}

	@userland/bin/true/true.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

38 
	$maö
()

41 
	`exô
(0);

42 
	}
}

	@userland/include/assert.h

30 #i‚de‡
_ASSERT_H_


31 
	#_ASSERT_H_


	)

36 #unde‡
as£π


41 
__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
msg
);

47 #ifde‡
NDEBUG


50 
	#as£π
(
x
Ë(()(x)Ë

	)

52 
	#as£π
(
x
Ë(()0Ë

	)

56 
	#as£π
(
x
Ë((xË? ()0 : 
	`__bad_as£π
(
__FILE__
, 
__LINE__
, #x))

	)

	@userland/include/err.h

30 #i‚de‡
_ERR_H_


31 
	#_ERR_H_


	)

33 
	~<sys/cdefs.h
>

34 
	~<kîn/ty≥s.h
>

48 
w¨n
(c⁄° *
fmt
, ...);

49 
w¨nx
(c⁄° *
fmt
, ...);

50 
__DEAD
 
îr
(
exôcode
, c⁄° *
fmt
, ...);

51 
__DEAD
 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

53 
vw¨n
(c⁄° *
fmt
, 
__va_li°
);

54 
vw¨nx
(c⁄° *
fmt
, 
__va_li°
);

55 
__DEAD
 
vîr
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

56 
__DEAD
 
vîrx
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

	@userland/include/errno.h

30 #i‚de‡
_ERRNO_H_


31 
	#_ERRNO_H_


	)

34 
	~<kîn/î∫o.h
>

37 
î∫o
;

	@userland/include/fcntl.h

31 
	~<uni°d.h
>

	@userland/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@userland/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

34 
	~<machöe/£tjmp.h
>

49 
£tjmp
(
jmp_buf
 
jb
);

50 
l⁄gjmp
(
jmp_buf
 
jb
, 
code
);

	@userland/include/signal.h

30 
	~<kîn/sig«l.h
>

	@userland/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

33 
	~<kîn/ty≥s.h
>

43 
__va_li°
 
	tva_li°
;

45 #i‡
__GNUC__
 < 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 < 8)

46 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p, fmt)

	)

48 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_va_°¨t
◊p, fmt)

	)

50 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

51 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

52 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@userland/include/stdbool.h

30 #i‚de‡
_STDBOOL_H_


31 
	#_STDBOOL_H_


	)

33 
_Boﬁ
 
	tboﬁ
;

34 
	#åue
 1

	)

35 
	#Ál£
 0

	)

	@userland/include/stdint.h

30 #i‚de‡
_STDINT_H_


31 
	#_STDINT_H_


	)

37 
	~<kîn/ty≥s.h
>

39 
__i8
 
	töt8_t
;

40 
__i16
 
	töt16_t
;

41 
__i32
 
	töt32_t
;

42 
__i64
 
	töt64_t
;

43 
__u8
 
	tuöt8_t
;

44 
__u16
 
	tuöt16_t
;

45 
__u32
 
	tuöt32_t
;

46 
__u64
 
	tuöt64_t
;

48 
__öçå_t
 
	töçå_t
;

49 
__uöçå_t
 
	tuöçå_t
;

	@userland/include/stdio.h

30 #i‚de‡
_STDIO_H_


31 
	#_STDIO_H_


	)

37 
	~<kîn/ty≥s.h
>

38 
	~<ty≥s/size_t.h
>

39 
	~<sys/nuŒ.h
>

42 
	#EOF
 (-1)

	)

48 
__v¥ötf
((*
£ndfunc
)(*
˛õ¡d©a
, c⁄° *, 
size_t
 
Àn
),

49 *
˛õ¡d©a
,

50 c⁄° *
fmt
,

51 
__va_li°
 
≠
);

54 
	`¥ötf
(c⁄° *
fmt
, ...);

55 
	`v¥ötf
(c⁄° *
fmt
, 
__va_li°
 
≠
);

56 
	`¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...);

57 
	`v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
__va_li°
 
≠
);

60 
	`puts
(const *);

64 
	`__puts
(const *);

67 
	`putch¨
();

70 
	`gëch¨
();

	@userland/include/stdlib.h

30 #i‚de‡
_STDLIB_H_


31 
	#_STDLIB_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 
©oi
(const *);

45 
ab‹t
();

51 
exô
(
code
);

57 *
gëív
(c⁄° *
v¨
);

62 
sy°em
(c⁄° *
comm™d
);

67 
	#RAND_MAX
 0x7fffffff

	)

68 
øndom
();

69 
§™dom
(
£ed
);

70 *
öô°©e
(, *, 
size_t
);

71 *
£t°©e
(*);

76 *
mÆloc
(
size_t
 
size
);

77 
‰ì
(*
±r
);

82 
qs‹t
(*
d©a
, 
num
, 
size_t
 
size
,

83 (*
f
)(const *, const *));

	@userland/include/string.h

30 #i‚de‡
_STRING_H_


31 
	#_STRING_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 *
°rˇt
(*, const *);

41 *
°r˝y
(*, const *);

42 *
°rchr
(const *, );

43 *
°ºchr
(const *, );

44 
°rcmp
(const *, const *);

45 
size_t
 
°æí
(const *);

46 *
°πok_r
(*, const *, **);

47 *
°πok
(*, const *);

49 *
mem£t
(*, 
c
, 
size_t
);

50 *
mem˝y
(*, c⁄° *, 
size_t
);

51 *
memmove
(*, c⁄° *, 
size_t
);

52 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

57 c⁄° *
°ªº‹
(
îrcode
);

62 
bzîo
(*, 
size_t
);

	@userland/include/sys/cdefs.h

36 #i‚de‡
_SYS_CDEFS_H_


37 
	#_SYS_CDEFS_H_


	)

39 #ifde‡
__GNUC__


40 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

42 
	#__DEAD


	)

	@userland/include/sys/endian.h

30 #i‚de‡
_SYS_ENDIAN_H_


31 
	#_SYS_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

	@userland/include/sys/ioctl.h

31 
	~<uni°d.h
>

	@userland/include/sys/null.h

30 #i‚de‡
_SYS_NULL_H_


31 
	#_SYS_NULL_H_


	)

37 
	#NULL
 ((*)0)

	)

	@userland/include/sys/reboot.h

31 
	~<uni°d.h
>

	@userland/include/sys/stat.h

30 #i‚de‡
_SYS_STAT_H_


31 
	#_SYS_STAT_H_


	)

36 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

42 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

43 
	#S_ISREG
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFREG
)

	)

44 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

45 
	#S_ISLNK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFLNK
)

	)

46 
	#S_ISIFO
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFIFO
)

	)

47 
	#S_ISSOCK
(
mode
Ë((modê& 
_S_IFMT
Ë==
_S_IFSOCK
)

	)

48 
	#S_ISCHR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFCHR
)

	)

49 
	#S_ISBLK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFBLK
)

	)

55 
	#S_IFMT
 
_S_IFMT


	)

56 
	#S_IFREG
 
_S_IFREG


	)

57 
	#S_IFDIR
 
_S_IFDIR


	)

58 
	#S_IFLNK
 
_S_IFLNK


	)

59 
	#S_IFIFO
 
_S_IFIFO


	)

60 
	#S_IFSOCK
 
_S_IFSOCK


	)

61 
	#S_IFCHR
 
_S_IFCHR


	)

62 
	#S_IFBLK
 
_S_IFBLK


	)

71 
f°©
(
fûeh™dÀ
, 
°©
 *
buf
);

72 
°©
(c⁄° *
∑th
, °© *
buf
);

73 
l°©
(c⁄° *
∑th
, 
°©
 *
buf
);

80 
mkdú
(c⁄° *
dú«me
, 
ign‹e
);

	@userland/include/sys/types.h

30 #i‚de‡
_SYS_TYPES_H_


31 
	#_SYS_TYPES_H_


	)

42 
	~<kîn/ty≥s.h
>

45 
	~<ty≥s/size_t.h
>

46 
	~<sys/nuŒ.h
>

55 
__ssize_t
 
	tssize_t
;

56 
__±rdiff_t
 
	t±rdiff_t
;

59 
__blk˙t_t
 
	tblk˙t_t
;

60 
__blksize_t
 
	tblksize_t
;

61 
__daddr_t
 
	tdaddr_t
;

62 
__dev_t
 
	tdev_t
;

63 
__fsid_t
 
	tfsid_t
;

64 
__gid_t
 
	tgid_t
;

65 
__ö_addr_t
 
	tö_addr_t
;

66 
__ö_p‹t_t
 
	tö_p‹t_t
;

67 
__öo_t
 
	töo_t
;

68 
__mode_t
 
	tmode_t
;

69 
__∆ök_t
 
	t∆ök_t
;

70 
__off_t
 
	toff_t
;

71 
__pid_t
 
	tpid_t
;

72 
__æim_t
 
	tæim_t
;

73 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

74 
__time_t
 
	ttime_t
;

75 
__uid_t
 
	tuid_t
;

77 
__nfds_t
 
	tnfds_t
;

78 
__sockÀn_t
 
	tsockÀn_t
;

84 
	#CHAR_BIT
 
__CHAR_BIT


	)

	@userland/include/sys/wait.h

31 
	~<uni°d.h
>

	@userland/include/test/quint.h

30 
quöt
(c⁄° *
¥og
);

	@userland/include/test/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@userland/include/time.h

31 
	~<uni°d.h
>

	@userland/include/types/size_t.h

30 #i‚de‡
_TYPES_SIZE_T_H_


31 
	#_TYPES_SIZE_T_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
__size_t
 
	tsize_t
;

	@userland/include/unistd.h

30 #i‚de‡
_UNISTD_H_


31 
	#_UNISTD_H_


	)

33 
	~<sys/cdefs.h
>

34 
	~<sys/ty≥s.h
>

41 
	~<kîn/f˙é.h
>

42 
	~<kîn/io˘l.h
>

43 
	~<kîn/ªboŸ.h
>

44 
	~<kîn/£ek.h
>

45 
	~<kîn/time.h
>

46 
	~<kîn/uni°d.h
>

47 
	~<kîn/waô.h
>

112 
__DEAD
 
_exô
(
code
);

113 
execv
(c⁄° *
¥og
, *c⁄° *
¨gs
);

114 
pid_t
 
f‹k
();

115 
pid_t
 
waôpid
’id_à
pid
, *
ªtu∫code
, 
Êags
);

121 
›í
(c⁄° *
fûíame
, 
Êags
, ...);

122 
ssize_t
 
ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
);

123 
ssize_t
 
wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

124 
˛o£
(
fûeh™dÀ
);

125 
ªboŸ
(
code
);

126 
sync
();

128 
rmdú
(c⁄° *
dú«me
);

131 
pid_t
 
gëpid
();

132 
io˘l
(
fûeh™dÀ
, 
code
, *
buf
);

133 
off_t
 
l£ek
(
fûeh™dÀ
, off_à
pos
, 
code
);

134 
fsync
(
fûeh™dÀ
);

135 
·runˇã
(
fûeh™dÀ
, 
off_t
 
size
);

136 
ªmove
(c⁄° *
fûíame
);

137 
ª«me
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

138 
lök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

140 
chdú
(c⁄° *
∑th
);

143 *
sbrk
(
__öçå_t
 
ch™ge
);

144 
ssize_t
 
gëdúíåy
(
fûeh™dÀ
, *
buf
, 
size_t
 
buÊí
);

145 
symlök
(c⁄° *
èrgë
, c⁄° *
lök«me
);

146 
ssize_t
 
ªadlök
(c⁄° *
∑th
, *
buf
, 
size_t
 
buÊí
);

147 
dup2
(
fûeh™dÀ
, 
√wh™dÀ
);

148 
pùe
(
fûeh™dÀs
[2]);

149 
__time
(
time_t
 *
£c⁄ds
, *
«no£c⁄ds
);

150 
ssize_t
 
__gëcwd
(*
buf
, 
size_t
 
buÊí
);

158 
execvp
(c⁄° *
¥og
, *c⁄° *
¨gs
);

159 *
gëcwd
(*
buf
, 
size_t
 
buÊí
);

160 
time_t
 
time
—ime_à*
£c⁄ds
);

	@userland/lib/hostcompat/err.c

34 
	~<uni°d.h
>

35 
	~<°dio.h
>

36 
	~<î∫o.h
>

37 
	~<°rög.h
>

39 
	~"ho°-îr.h
"

41 #ifde‡
NEED_ERR


46 c⁄° *
ho°com∑t_¥og«me
;

53 
	$ho°com∑t_¥öãº
(
u£_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

55 c⁄° *
îrmsg
;

62 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

71 i‡(
ho°com∑t_¥og«me
 !
NULL
) {

72 
	`Ârötf
(
°dîr
, "%s: ", 
ho°com∑t_¥og«me
);

75 
	`Ârötf
(
°dîr
, "libhostcompat: hostcompat_initÇot called\n");

76 
	`Ârötf
(
°dîr
, "libhostcompat-program: ");

80 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

82 i‡(
u£_î∫o
) {

84 
	`Ârötf
(
°dîr
, ": %s\n", 
îrmsg
);

88 
	`Ârötf
(
°dîr
, "\n");

90 
	}
}

98 
	$vw¨n
(c⁄° *
fmt
, 
va_li°
 
≠
)

100 
	`ho°com∑t_¥öãº
(1, 
fmt
, 
≠
);

101 
	}
}

105 
	$vw¨nx
(c⁄° *
fmt
, 
va_li°
 
≠
)

107 
	`ho°com∑t_¥öãº
(0, 
fmt
, 
≠
);

108 
	}
}

112 
	$vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

114 
	`ho°com∑t_¥öãº
(1, 
fmt
, 
≠
);

115 
	`exô
(
exôcode
);

116 
	}
}

120 
	$vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

122 
	`ho°com∑t_¥öãº
(0, 
fmt
, 
≠
);

123 
	`exô
(
exôcode
);

124 
	}
}

132 
	$w¨n
(c⁄° *
fmt
, ...)

134 
va_li°
 
≠
;

135 
	`va_°¨t
(
≠
, 
fmt
);

136 
	`vw¨n
(
fmt
, 
≠
);

137 
	`va_íd
(
≠
);

138 
	}
}

141 
	$w¨nx
(c⁄° *
fmt
, ...)

143 
va_li°
 
≠
;

144 
	`va_°¨t
(
≠
, 
fmt
);

145 
	`vw¨nx
(
fmt
, 
≠
);

146 
	`va_íd
(
≠
);

147 
	}
}

150 
	$îr
(
exôcode
, c⁄° *
fmt
, ...)

152 
va_li°
 
≠
;

153 
	`va_°¨t
(
≠
, 
fmt
);

154 
	`vîr
(
exôcode
, 
fmt
, 
≠
);

155 
	`va_íd
(
≠
);

156 
	}
}

159 
	$îrx
(
exôcode
, c⁄° *
fmt
, ...)

161 
va_li°
 
≠
;

162 
	`va_°¨t
(
≠
, 
fmt
);

163 
	`vîrx
(
exôcode
, 
fmt
, 
≠
);

164 
	`va_íd
(
≠
);

165 
	}
}

	@userland/lib/hostcompat/host-err.h

31 #i‚de‡
HOSTCOMPAT_ERR_H


32 
	#HOSTCOMPAT_ERR_H


	)

34 
	~<°d¨g.h
>

48 
w¨n
(c⁄° *
fmt
, ...);

49 
w¨nx
(c⁄° *
fmt
, ...);

50 
îr
(
exôcode
, c⁄° *
fmt
, ...);

51 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

53 
vw¨n
(c⁄° *
fmt
, 
va_li°
);

54 
vw¨nx
(c⁄° *
fmt
, 
va_li°
);

55 
vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
);

56 
vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
);

	@userland/lib/hostcompat/hostcompat.c

30 
	~<uni°d.h
>

31 
	~<ãrmios.h
>

32 
	~<sig«l.h
>

33 
	~<°dlib.h
>

34 
	~<°dio.h
>

36 
	~"ho°com∑t.h
"

42 c⁄° *
	gho°com∑t_¥og«me
 = 
NULL
;

48 
ãrmios
 
	gho°com∑t_ru¡ios
;

49 
ãrmios
 
	gho°com∑t_ßvëios
;

56 
	$ho°com∑t_âyª£t
()

58 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
ho°com∑t_ßvëios
);

59 
	}
}

66 
	$ho°com∑t_âyªsume
()

68 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
ho°com∑t_ru¡ios
);

69 
	}
}

76 
	$ho°com∑t_ây£tup
()

78 
ãrmios
 
tios
;

81 i‡(
	`tcgë©å
(
STDIN_FILENO
, &
tios
) < 0) {

86 
ho°com∑t_ßvëios
 = 
tios
;

89 
tios
.
c_lÊag
 &~
ICANON
;

95 
tios
.
c_cc
[
VMIN
] = 1;

98 
tios
.
c_cc
[
VTIME
] = 0;

101 
tios
.
c_lÊag
 &~(
ECHO
|
ECHONL
|
ECHOCTL
);

104 
tios
.
c_iÊag
 &~(
IXON
|
IXOFF
);

107 
tios
.
c_iÊag
 &~(
INLCR
|
IGNCR
|
ICRNL
);

110 #ifde‡
OCRNL


111 
tios
.
c_oÊag
 &~(
OCRNL
);

113 
tios
.
c_oÊag
 |
OPOST
|
ONLCR
;

116 
tios
.
c_lÊag
 |
ISIG
;

119 
ho°com∑t_ru¡ios
 = 
tios
;

120 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
tios
);

123 
	}
}

130 
	$ho°com∑t_dõ
(
sig
)

133 
	`ho°com∑t_âyª£t
();

136 
	`sig«l
(
sig
, 
SIG_DFL
);

139 
	`kûl
(
	`gëpid
(), 
sig
);

142 
	`_exô
(255);

143 
	}
}

150 
	$ho°com∑t_°›
(
sig
)

153 
	`ho°com∑t_âyª£t
();

156 
	`sig«l
(
sig
, 
SIG_DFL
);

159 
	`kûl
(
	`gëpid
(), 
sig
);

160 
	}
}

167 
	$ho°com∑t_c⁄t
(
sig
)

169 ()
sig
;

172 
	`ho°com∑t_âyªsume
();

178 
	`sig«l
(
SIGTTIN
, 
ho°com∑t_°›
);

179 
	`sig«l
(
SIGTTOU
, 
ho°com∑t_°›
);

180 
	`sig«l
(
SIGTSTP
, 
ho°com∑t_°›
);

181 
	`sig«l
(
SIGCONT
, 
ho°com∑t_c⁄t
);

182 
	}
}

188 
	$ho°com∑t_öô
(
¨gc
, *
¨gv
[])

191 i‡(
¨gc
 > 0 && 
¨gv
[0] !
NULL
) {

192 
ho°com∑t_¥og«me
 = 
¨gv
[0];

196 i‡(
	`ho°com∑t_ây£tup
() < 0) {

201 
	`©exô
(
ho°com∑t_âyª£t
);

204 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

205 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

208 
	`sig«l
(
SIGHUP
, 
ho°com∑t_dõ
);

209 
	`sig«l
(
SIGINT
, 
ho°com∑t_dõ
);

210 
	`sig«l
(
SIGQUIT
, 
ho°com∑t_dõ
);

211 
	`sig«l
(
SIGILL
, 
ho°com∑t_dõ
);

212 
	`sig«l
(
SIGTRAP
, 
ho°com∑t_dõ
);

213 
	`sig«l
(
SIGABRT
, 
ho°com∑t_dõ
);

214 #ifde‡
SIGEMT


215 
	`sig«l
(
SIGEMT
, 
ho°com∑t_dõ
);

217 
	`sig«l
(
SIGFPE
, 
ho°com∑t_dõ
);

218 
	`sig«l
(
SIGBUS
, 
ho°com∑t_dõ
);

219 
	`sig«l
(
SIGSEGV
, 
ho°com∑t_dõ
);

220 
	`sig«l
(
SIGSYS
, 
ho°com∑t_dõ
);

221 
	`sig«l
(
SIGPIPE
, 
ho°com∑t_dõ
);

222 
	`sig«l
(
SIGALRM
, 
ho°com∑t_dõ
);

223 
	`sig«l
(
SIGTERM
, 
ho°com∑t_dõ
);

224 
	`sig«l
(
SIGXCPU
, 
ho°com∑t_dõ
);

225 
	`sig«l
(
SIGXFSZ
, 
ho°com∑t_dõ
);

226 
	`sig«l
(
SIGVTALRM
, 
ho°com∑t_dõ
);

227 
	`sig«l
(
SIGPROF
, 
ho°com∑t_dõ
);

228 
	`sig«l
(
SIGUSR1
, 
ho°com∑t_dõ
);

229 
	`sig«l
(
SIGUSR2
, 
ho°com∑t_dõ
);

232 
	`sig«l
(
SIGTTIN
, 
ho°com∑t_°›
);

233 
	`sig«l
(
SIGTTOU
, 
ho°com∑t_°›
);

234 
	`sig«l
(
SIGTSTP
, 
ho°com∑t_°›
);

237 
	`sig«l
(
SIGCONT
, 
ho°com∑t_c⁄t
);

238 
	}
}

	@userland/lib/hostcompat/hostcompat.h

31 
	~<sys/ty≥s.h
>

32 
	~<°döt.h
>

34 
ho°com∑t_öô
(
¨gc
, **
¨gv
);

36 
time_t
 
__time
—ime_à*
£cs
, *
n£cs
);

38 #ifde‡
DECLARE_NTOHLL


39 
uöt64_t
 
¡ohŒ
(uint64_t);

40 
	#ht⁄Œ
(
x
Ë(
	`¡ohŒ
(x))

	)

	@userland/lib/hostcompat/ntohll.c

30 
	~<sys/ty≥s.h
>

31 
	~<¨∑/öë.h
>

33 
	~"ho°com∑t.h
"

35 #ifde‡
NEED_NTOHLL


37 
uöt64_t


38 
	$¡ohŒ
(
uöt64_t
 
x
)

40 
uöt32_t
 
x0
, 
x1
, 
y0
, 
y1
;

42 i‡(
	`¡ohl
(1) == 1) {

43  
x
;

46 
x0
 = 
x
 & 0xffffffff;

47 
y0
 = 
	`¡ohl
(
x0
);

48 
x1
 = 
x
 >> 32;

49 
y1
 = 
	`¡ohl
(
x1
);

50  ((
uöt64_t
)
y0
 << 32Ë| 
y1
;

51 
	}
}

	@userland/lib/hostcompat/time.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/time.h
>

36 
	~<°rög.h
>

38 
	~"ho°com∑t.h
"

40 
time_t


41 
	$__time
(
time_t
 *
£cs
, *
n£cs
)

43 
timevÆ
 
tv
;

44 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0) {

47 i‡(
£cs
) {

48 *
£cs
 = 
tv
.
tv_£c
;

50 i‡(
n£cs
) {

51 *
n£cs
 = 
tv
.
tv_u£c
 * 1000;

53  
tv
.
tv_£c
;

54 
	}
}

	@userland/lib/libc/stdio/__puts.c

30 
	~<°dio.h
>

40 
	$__puts
(c⁄° *
°r
)

42 
cou¡
=0;

43 *
°r
) {

44 
	`putch¨
(*
°r
);

45 
°r
++;

46 
cou¡
++;

48  
cou¡
;

49 
	}
}

	@userland/lib/libc/stdio/getchar.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

39 
	$gëch¨
()

41 
ch
;

42 
Àn
;

44 
Àn
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

45 i‡(
Àn
<=0) {

47  
EOF
;

55  ()()
ch
;

56 
	}
}

	@userland/lib/libc/stdio/printf.c

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

43 
	$__¥ötf_£nd
(*
myd©a
, c⁄° *
d©a
, 
size_t
 
Àn
)

45 
i
;

46 ()
myd©a
;

48 
i
=0; i<
Àn
; i++) {

49 
	`putch¨
(
d©a
[
i
]);

51 
	}
}

55 
	$¥ötf
(c⁄° *
fmt
, ...)

57 
ch¨s
;

58 
va_li°
 
≠
;

59 
	`va_°¨t
(
≠
, 
fmt
);

60 
ch¨s
 = 
	`v¥ötf
(
fmt
, 
≠
);

61 
	`va_íd
(
≠
);

62  
ch¨s
;

63 
	}
}

67 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

69  
	`__v¥ötf
(
__¥ötf_£nd
, 
NULL
, 
fmt
, 
≠
);

70 
	}
}

	@userland/lib/libc/stdio/putchar.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

41 
	$putch¨
(
ch
)

43 
c
 = 
ch
;

44 
Àn
;

45 
Àn
 = 
	`wrôe
(
STDOUT_FILENO
, &
c
, 1);

46 i‡(
Àn
<=0) {

47  
EOF
;

49  
ch
;

50 
	}
}

	@userland/lib/libc/stdio/puts.c

30 
	~<°dio.h
>

37 
	$puts
(c⁄° *
s
)

39 
	`__puts
(
s
);

40 
	`putch¨
('\n');

42 
	}
}

	@userland/lib/libc/stdlib/abort.c

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

42 
	$ab‹t
()

44 
	`_exô
(255);

45 
	}
}

	@userland/lib/libc/stdlib/exit.c

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

38 
	$exô
(
code
)

45 #ifde‡
__mùs__


62 
__asm
 volatile("jal _exit;"

65 : "r" (
code
));

72 
__asm
 volatile("li $2, 0xeeeee00f;"

76 
	`_exô
(
code
);

83 
	}
}

	@userland/lib/libc/stdlib/getenv.c

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

42 **
__ívú⁄
;

48 c⁄° *
	g__deÁu…_ívú⁄
[] = {

52 
NULL


56 
	$gëív
(c⁄° *
v¨
)

58 
size_t
 
v¨Àn
, 
thi¶í
;

59 *
s
;

60 
i
;

62 i‡(
__ívú⁄
 =
NULL
) {

63 
__ívú⁄
 = (**)
__deÁu…_ívú⁄
;

65 
v¨Àn
 = 
	`°æí
(
v¨
);

66 
i
=0; 
__ívú⁄
[i] !
NULL
; i++) {

67 
s
 = 
	`°rchr
(
__ívú⁄
[
i
], '=');

68 i‡(
s
 =
NULL
) {

72 
thi¶í
 = 
s
 - 
__ívú⁄
[
i
];

73 i‡(
thi¶í
 =
v¨Àn
 && !
	`memcmp
(
__ívú⁄
[
i
], 
v¨
,Åhislen)) {

74  
s
 + 1;

77  
NULL
;

78 
	}
}

	@userland/lib/libc/stdlib/malloc.c

39 
	~<°dlib.h
>

40 
	~<°döt.h
>

41 
	~<uni°d.h
>

42 
	~<îr.h
>

43 
	~<as£π.h
>

45 #unde‡
MALLOCDEBUG


47 #i‡
deföed
(
__mùs__
Ë|| deföed(
__i386__
)

48 
	#MALLOC32


	)

49 #ñi‡
deföed
(
__Æpha__
Ë|| deföed(
__x86_64__
)

50 
	#MALLOC64


	)

71 
	smhódî
 {

73 #i‡
deföed
(
MALLOC32
)

74 
	#MBLOCKSIZE
 8

	)

75 
	#MBLOCKSHIFT
 3

	)

76 
	#MMAGIC
 2

	)

81 
	mmh_¥evblock
:29;

82 
	mmh_∑d
:1;

83 
	mmh_magic1
:2;

85 
	mmh_√xtblock
:29;

86 
	mmh_öu£
:1;

87 
	mmh_magic2
:2;

89 #ñi‡
deföed
(
MALLOC64
)

90 
	#MBLOCKSIZE
 16

	)

91 
	#MBLOCKSHIFT
 4

	)

92 
	#MMAGIC
 6

	)

97 
	mmh_¥evblock
:60;

98 
	mmh_∑d
:1;

99 
	mmh_magic1
:3;

101 
	mmh_√xtblock
:60;

102 
	mmh_öu£
:1;

103 
	mmh_magic2
:3;

125 
	#M_NEXTOFF
(
mh
Ë((
size_t
)(((size_t)((mh)->
mh_√xtblock
))<<
MBLOCKSHIFT
))

	)

126 
	#M_PREVOFF
(
mh
Ë((
size_t
)(((size_t)((mh)->
mh_¥evblock
))<<
MBLOCKSHIFT
))

	)

127 
	#M_NEXT
(
mh
Ë((
mhódî
 *)(((*)(mh))+
	`M_NEXTOFF
(mh)))

	)

128 
	#M_PREV
(
mh
Ë((
mhódî
 *)(((*)(mh))-
	`M_PREVOFF
(mh)))

	)

130 
	#M_DATA
(
mh
Ë((*)((mh)+1))

	)

131 
	#M_SIZE
(
mh
Ë(
	`M_NEXTOFF
(mh)-
MBLOCKSIZE
)

	)

133 
	#M_OK
(
mh
Ë((mh)->
mh_magic1
==
MMAGIC
 && (mh)->
mh_magic2
==MMAGIC)

	)

135 
	#M_MKFIELD
(
off
Ë((off)>>
MBLOCKSHIFT
)

	)

143 #ifde‡
_SC_PAGESIZE


144 
size_t
 
	g__mÆloc_∑gesize
;

145 
	#PAGE_SIZE
 
__mÆloc_∑gesize


	)

147 
	#PAGE_SIZE
 4096

	)

155 
uöçå_t
 
	g__hópba£
, 
	g__hó±›
;

162 
	$__mÆloc_öô
()

164 *
x
;

169 i‡((
mhódî
Ë!
MBLOCKSIZE
) {

170 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSIZE wrong");

172 i‡((
MBLOCKSIZE
 & (MBLOCKSIZE-1))!=0) {

173 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSIZEÇotÖower of 2");

175 i‡(1<<
MBLOCKSHIFT
 !
MBLOCKSIZE
) {

176 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSHIFT wrong");

180 i‡(
__hópba£
!=0 || 
__hó±›
!=0) {

181 
	`îrx
(1, "malloc: InternalÉrror - bad init call");

185 #ifde‡
_SC_PAGESIZE


186 
__mÆloc_∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

190 
x
 = 
	`sbrk
(0);

191 i‡(
x
==(*)-1) {

192 
	`îr
(1, "malloc: initial sbrk failed");

194 i‡(
x
==(*) 0) {

195 
	`îrx
(1, "malloc: InternalÉrror - heap beganát 0");

197 
__hópba£
 = 
__hó±›
 = (
uöçå_t
)
x
;

206 i‡(
__hópba£
 % 
MBLOCKSIZE
 != 0) {

207 
size_t
 
adju°
 = 
MBLOCKSIZE
 - (
__hópba£
 % MBLOCKSIZE);

208 
x
 = 
	`sbrk
(
adju°
);

209 i‡(
x
==(*)-1) {

210 
	`îr
(1, "malloc: sbrk failedáligning heap base");

212 i‡((
uöçå_t
)
x
 !
__hópba£
) {

213 
	`îr
(1, "malloc: heap base moved during init");

215 #ifde‡
MALLOCDEBUG


216 
	`w¨nx
("malloc:ádjusted heap base upwards by %lu bytes",

217 (Ë
adju°
);

219 
__hópba£
 +
adju°
;

220 
__hó±›
 = 
__hópba£
;

222 
	}
}

226 #ifde‡
MALLOCDEBUG


233 
	$__mÆloc_dump
()

235 
mhódî
 *
mh
;

236 
uöçå_t
 
i
;

237 
size_t
 
righçªvblock
;

239 
	`w¨nx
("heap: ************************************************");

241 
righçªvblock
 = 0;

242 
i
=
__hópba£
; i<
__hó±›
; i +
	`M_NEXTOFF
(
mh
)) {

243 
mh
 = (
mhódî
 *Ë
i
;

244 i‡(!
	`M_OK
(
mh
)) {

245 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

247 (Ë
i
);

249 i‡(
mh
->
mh_¥evblock
 !
righçªvblock
) {

250 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

253 (Ë
i
,

254 (Ë
mh
->
mh_¥evblock
 << 
MBLOCKSHIFT
,

255 (Ë
righçªvblock
 << 
MBLOCKSHIFT
);

257 
righçªvblock
 = 
mh
->
mh_√xtblock
;

259 
	`w¨nx
("heap: 0x%lx 0x%-6lx (next: 0x%lx) %s",

260 (Ë
i
 + 
MBLOCKSIZE
,

261 (Ë
	`M_SIZE
(
mh
),

262 (Ë(
i
+
	`M_NEXTOFF
(
mh
)),

263 
mh
->
mh_öu£
 ? "INUSE" : "FREE");

265 i‡(
i
!=
__hó±›
) {

266 
	`îrx
(1, "malloc: Heap corrupt;Ñan offÉnd");

269 
	`w¨nx
("heap: ************************************************");

270 
	}
}

282 
	$__mÆloc_sbrk
(
size_t
 
size
)

284 *
x
;

286 
x
 = 
	`sbrk
(
size
);

287 i‡(
x
 == (*)-1) {

288  
NULL
;

291 i‡((
uöçå_t
)
x
 !
__hó±›
) {

292 
	`îrx
(1, "malloc: InternalÉrror - "

294 (Ë
__hó±›
,

295 (Ë(
uöçå_t
Ë
x
);

297 
__hó±›
 +
size
;

298  
x
;

299 
	}
}

311 
	$__mÆloc_•lô
(
mhódî
 *
mh
, 
size_t
 
size
)

313 
mhódî
 *
mh√xt
, *
mh√w
;

314 
size_t
 
ﬁdsize
;

316 i‡(
size
 % 
MBLOCKSIZE
 != 0) {

317 
	`îrx
(1, "malloc: InternalÉrror (size %luÖassedÅo split)",

318 (Ë
size
);

321 i‡(
	`M_SIZE
(
mh
Ë- 
size
 < 2*
MBLOCKSIZE
) {

326 
mh√xt
 = 
	`M_NEXT
(
mh
);

328 
ﬁdsize
 = 
	`M_SIZE
(
mh
);

329 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

331 
mh√w
 = 
	`M_NEXT
(
mh
);

332 i‡(
mh√w
==
mh√xt
) {

333 
	`îrx
(1, "malloc: InternalÉrror (split screwed up?)");

336 
mh√w
->
mh_¥evblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

337 
mh√w
->
mh_∑d
 = 0;

338 
mh√w
->
mh_magic1
 = 
MMAGIC
;

339 
mh√w
->
mh_√xtblock
 = 
	`M_MKFIELD
(
ﬁdsize
 - 
size
);

340 
mh√w
->
mh_öu£
 = 0;

341 
mh√w
->
mh_magic2
 = 
MMAGIC
;

343 i‡(
mh√xt
 !(
mhódî
 *Ë
__hó±›
) {

344 
mh√xt
->
mh_¥evblock
 = 
mh√w
->
mh_√xtblock
;

346 
	}
}

352 
	$mÆloc
(
size_t
 
size
)

354 
mhódî
 *
mh
;

355 
uöçå_t
 
i
;

356 
size_t
 
righçªvblock
;

357 
size_t
 
m‹e•a˚
;

358 *
p
;

360 i‡(
__hópba£
==0) {

361 
	`__mÆloc_öô
();

363 i‡(
__hópba£
==0 || 
__hó±›
==0 || __heapbase > __heaptop) {

364 
	`w¨nx
("malloc: InternalÉrror -Üocal data corrupt");

365 
	`îrx
(1, "malloc: heapbase 0x%lx; heaptop 0x%lx",

366 (Ë
__hópba£
, (Ë
__hó±›
);

369 #ifde‡
MALLOCDEBUG


370 
	`w¨nx
("malloc:áboutÅoállocate %lu (0x%lx) bytes",

371 (Ë
size
, () size);

372 
	`__mÆloc_dump
();

376 
size
 = ((sizê+ 
MBLOCKSIZE
 - 1Ë& ~(
size_t
)(MBLOCKSIZE-1));

382 
righçªvblock
 = 0;

383 
mh
 = 
NULL
;

384 
i
=
__hópba£
; i<
__hó±›
; i +
	`M_NEXTOFF
(
mh
)) {

385 
mh
 = (
mhódî
 *Ë
i
;

386 i‡(!
	`M_OK
(
mh
)) {

387 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

389 (Ë
i
);

391 i‡(
mh
->
mh_¥evblock
 !
righçªvblock
) {

392 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

395 (Ë
i
,

396 (Ë
mh
->
mh_¥evblock
 << 
MBLOCKSHIFT
,

397 (Ë
righçªvblock
 << 
MBLOCKSHIFT
);

399 
righçªvblock
 = 
mh
->
mh_√xtblock
;

402 i‡(
mh
->
mh_öu£
) {

407 i‡(
	`M_SIZE
(
mh
Ë< 
size
) {

412 
	`__mÆloc_•lô
(
mh
, 
size
);

417 
mh
->
mh_öu£
 = 1;

419 #ifde‡
MALLOCDEBUG


420 
	`w¨nx
("mÆloc:áŒoˇtögáà%p", 
	`M_DATA
(
mh
));

421 
	`__mÆloc_dump
();

423  
	`M_DATA
(
mh
);

425 i‡(
i
!=
__hó±›
) {

426 
	`îrx
(1, "malloc: Heap corrupt;Ñan offÉnd");

436 i‡(
mh
 !
NULL
 && !mh->
mh_öu£
) {

437 
	`as£π
(
size
 > 
	`M_SIZE
(
mh
));

438 
m‹e•a˚
 = 
size
 - 
	`M_SIZE
(
mh
);

441 
m‹e•a˚
 = 
MBLOCKSIZE
 + 
size
;

445 
m‹e•a˚
 = 
PAGE_SIZE
 * ((morespace + PAGE_SIZE - 1) / PAGE_SIZE);

447 
p
 = 
	`__mÆloc_sbrk
(
m‹e•a˚
);

448 i‡(
p
 =
NULL
) {

449  
NULL
;

452 i‡(
mh
 !
NULL
 && !mh->
mh_öu£
) {

454 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
	`M_NEXTOFF
(mhË+ 
m‹e•a˚
);

455 
mh
->
mh_öu£
 = 1;

459 
mh
 = 
p
;

460 
mh
->
mh_¥evblock
 = 
righçªvblock
;

461 
mh
->
mh_magic1
 = 
MMAGIC
;

462 
mh
->
mh_magic2
 = 
MMAGIC
;

463 
mh
->
mh_∑d
 = 0;

464 
mh
->
mh_öu£
 = 1;

465 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
m‹e•a˚
);

473 
	`__mÆloc_•lô
(
mh
, 
size
);

475 #ifde‡
MALLOCDEBUG


476 
	`w¨nx
("mÆloc:áŒoˇtögáà%p", 
	`M_DATA
(
mh
));

477 
	`__mÆloc_dump
();

479  
	`M_DATA
(
mh
);

480 
	}
}

490 
	$__mÆloc_dódbìf
(*
±r
, 
size_t
 
size
)

492 
uöt32_t
 *
x
 = 
±r
;

493 
size_t
 
i
, 
n
 = 
size
/(
uöt32_t
);

494 
i
=0; i<
n
; i++) {

495 
x
[
i
] = 0xdeadbeef;

497 
	}
}

504 
	$__mÆloc_åymîge
(
mhódî
 *
mh
, mhódî *
mh√xt
)

506 
mhódî
 *
mh√xäext
;

508 i‡(
mh
->
mh_√xtblock
 !
mh√xt
->
mh_¥evblock
) {

509 
	`îrx
(1, "free: Heap corrupt (%pánd %p inconsistent)",

510 
mh
, 
mh√xt
);

512 i‡(
mh
->
mh_öu£
 || 
mh√xt
->mh_inuse) {

517 
mh√xäext
 = 
	`M_NEXT
(
mh√xt
);

519 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
MBLOCKSIZE
 + 
	`M_SIZE
(mh) +

520 
MBLOCKSIZE
 + 
	`M_SIZE
(
mh√xt
));

522 i‡(
mh√xäext
 !(
mhódî
 *)
__hó±›
) {

523 
mh√xäext
->
mh_¥evblock
 = 
mh
->
mh_√xtblock
;

527 
	`__mÆloc_dódbìf
(
mh√xt
, (
mhódî
));

528 
	}
}

534 
	$‰ì
(*
x
)

536 
mhódî
 *
mh
, *
mh√xt
, *
mh¥ev
;

538 i‡(
x
==
NULL
) {

544 i‡(
__hópba£
==0 || 
__hó±›
==0 || __heapbase > __heaptop) {

545 
	`w¨nx
("free: InternalÉrror -Üocal data corrupt");

546 
	`îrx
(1, "free: heapbase 0x%lx; heaptop 0x%lx",

547 (Ë
__hópba£
, (Ë
__hó±›
);

551 i‡((
uöçå_t
)
x
 < 
__hópba£
 || (uöçå_t)x >
__hó±›
) {

552 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (ouào‡ønge)", 
x
);

555 #ifde‡
MALLOCDEBUG


556 
	`w¨nx
("‰ì:ábouàtÿ‰ì %p", 
x
);

557 
	`__mÆloc_dump
();

560 
mh
 = ((
mhódî
 *)
x
)-1;

561 i‡(!
	`M_OK
(
mh
)) {

562 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (c‹ru± hódî)", 
x
);

565 i‡(!
mh
->
mh_öu£
) {

566 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (Æªady fªe)", 
x
);

570 
mh
->
mh_öu£
 = 0;

573 
	`__mÆloc_dódbìf
(
	`M_DATA
(
mh
), 
	`M_SIZE
(mh));

576 
mh√xt
 = 
	`M_NEXT
(
mh
);

577 i‡(
mh√xt
 !(
mhódî
 *)
__hó±›
) {

578 
	`__mÆloc_åymîge
(
mh
, 
mh√xt
);

582 i‡(
mh
 !(
mhódî
 *)
__hópba£
) {

583 
mh¥ev
 = 
	`M_PREV
(
mh
);

584 
	`__mÆloc_åymîge
(
mh¥ev
, 
mh
);

587 #ifde‡
MALLOCDEBUG


588 
	`w¨nx
("‰ì: fªed %p", 
x
);

589 
	`__mÆloc_dump
();

591 
	}
}

	@userland/lib/libc/stdlib/qsort.c

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<as£π.h
>

38 
qs‹t
(*
vd©a
, 
num
, 
size_t
 
size
,

39 (*
f
)(const *, const *))

41 
pivŸ
, 
hód
, 
èû
;

42 *
d©a
 = 
vd©a
;

43 
tmp
[
size
];

45 
	#COMPARE
(
Ø
, 
bb
) \

46 ((
Ø
Ë=(
bb
Ë? 0 : 
	`f
(
d©a
 + (ØË* 
size
, d©®+ (bbË* size))

	)

47 
	#EXCHANGE
(
Ø
, 
bb
) \

48 
	`mem˝y
(
tmp
, 
d©a
 + (
Ø
Ë* 
size
, size); \

49 
	`mem˝y
(
d©a
 + (
Ø
Ë* 
size
, d©®+ (
bb
) * size, size); \

50 
	`mem˝y
(
d©a
 + (
bb
Ë* 
size
, 
tmp
, size)

	)

53 i‡(
num
 <= 1) {

56 i‡(
num
 == 2) {

57 i‡(
	`COMPARE
(0, 1) > 0) {

58 
	`EXCHANGE
(0, 1);

67 
pivŸ
 = 
num
 / 2;

73 
hód
 = 0;

74 
èû
 = 
num
 - 1;

76 
hód
 < 
èû
) {

77 i‡(
	`COMPARE
(
hód
, 
pivŸ
) <= 0) {

78 
hód
++;

80 i‡(
	`COMPARE
(
èû
, 
pivŸ
) > 0) {

81 
èû
--;

84 
	`EXCHANGE
(
hód
, 
èû
);

85 i‡(
pivŸ
 =
hód
) {

86 
pivŸ
 = 
èû
;

88 i‡(
pivŸ
 =
èû
) {

89 
pivŸ
 = 
hód
;

91 
hód
++;

92 
èû
--;

109 i‡(
hód
 > 
èû
 || 
	`COMPARE
(hód, 
pivŸ
) <= 0) {

110 
èû
++;

123 i‡(
èû
 =
num
) {

124 i‡(
pivŸ
 < 
num
 - 1) {

125 i‡(
	`COMPARE
(
pivŸ
, 
num
 - 1) > 0) {

126 
	`EXCHANGE
(
pivŸ
, 
num
 - 1);

129 
èû
 = 
num
 - 1;

130 
èû
 > 0 && 
	`COMPARE
(tail - 1,Åail) == 0) {

131 
èû
--;

133 i‡(
èû
 > 0) {

134 
	`qs‹t
(
vd©a
, 
èû
, 
size
, 
f
);

138 
	`as£π
(
èû
 > 0 &&Åaû < 
num
);

143 
	`qs‹t
(
vd©a
, 
èû
, 
size
, 
f
);

144 
	`qs‹t
((*)
vd©a
 + 
èû
 * 
size
, 
num
 -Åaû, size, 
f
);

145 
	}
}

	@userland/lib/libc/stdlib/random.c

41 
	~<as£π.h
>

42 
	~<î∫o.h
>

43 
	~<°dlib.h
>

49 
	#LOCKME
()

	)

50 
	#UNLOCKME
()

	)

52 
§™dom_u∆ocked
();

53 
øndom_u∆ocked
();

122 
	#TYPE_0
 0

	)

123 
	#BREAK_0
 8

	)

124 
	#DEG_0
 0

	)

125 
	#SEP_0
 0

	)

127 
	#TYPE_1
 1

	)

128 
	#BREAK_1
 32

	)

129 
	#DEG_1
 7

	)

130 
	#SEP_1
 3

	)

132 
	#TYPE_2
 2

	)

133 
	#BREAK_2
 64

	)

134 
	#DEG_2
 15

	)

135 
	#SEP_2
 1

	)

137 
	#TYPE_3
 3

	)

138 
	#BREAK_3
 128

	)

139 
	#DEG_3
 31

	)

140 
	#SEP_3
 3

	)

142 
	#TYPE_4
 4

	)

143 
	#BREAK_4
 256

	)

144 
	#DEG_4
 63

	)

145 
	#SEP_4
 1

	)

151 
	#MAX_TYPES
 5

	)

153 c⁄° 
	gdegªes
[
MAX_TYPES
] = { 
DEG_0
, 
DEG_1
, 
DEG_2
, 
DEG_3
, 
DEG_4
 };

154 c⁄° 
	g£ps
[
MAX_TYPES
] = { 
SEP_0
, 
SEP_1
, 
SEP_2
, 
SEP_3
, 
SEP_4
 };

170 
	gøndtbl
[
DEG_3
 + 1] = {

171 
TYPE_3
,

199 *
	gÂå
 = &
øndtbl
[
SEP_3
 + 1];

200 *
	gΩå
 = &
øndtbl
[1];

212 *
	g°©e
 = &
øndtbl
[1];

213 
	gønd_ty≥
 = 
TYPE_3
;

214 
	gønd_deg
 = 
DEG_3
;

215 
	gønd_£p
 = 
SEP_3
;

216 *
	gíd_±r
 = &
øndtbl
[
DEG_3
 + 1];

232 
	$§™dom_u∆ocked
(
x
)

234 
i
;

236 i‡(
ønd_ty≥
 =
TYPE_0
)

237 
°©e
[0] = 
x
;

239 
°©e
[0] = 
x
;

240 
i
 = 1; i < 
ønd_deg
; i++)

241 
°©e
[
i
] = 1103515245L * state[i - 1] + 12345L;

242 
Âå
 = &
°©e
[
ønd_£p
];

243 
Ωå
 = &
°©e
[0];

244 
i
 = 0; i < 10 * 
ønd_deg
; i++)

245 ()
	`øndom_u∆ocked
();

247 
	}
}

250 
	$§™dom
(
x
)

253 
	`LOCKME
();

254 
	`§™dom_u∆ocked
(
x
);

255 
	`UNLOCKME
();

256 
	}
}

282 
	$öô°©e
(

283 
£ed
,

284 *
¨g_°©e
,

285 
size_t
 
n
)

287 *
o°©e
 = (*)(&
°©e
[-1]);

288 *
l⁄g_¨g_°©e
;

290 
	`as£π
(
¨g_°©e
 !
NULL
);

292 
l⁄g_¨g_°©e
 = (*)(*)
¨g_°©e
;

294 
	`LOCKME
();

295 i‡(
ønd_ty≥
 =
TYPE_0
)

296 
°©e
[-1] = 
ønd_ty≥
;

298 
°©e
[-1] = 
MAX_TYPES
 * (
Ωå
 - sèãË+ 
ønd_ty≥
;

299 i‡(
n
 < 
BREAK_0
) {

300 
	`UNLOCKME
();

301  (
NULL
);

302 } i‡(
n
 < 
BREAK_1
) {

303 
ønd_ty≥
 = 
TYPE_0
;

304 
ønd_deg
 = 
DEG_0
;

305 
ønd_£p
 = 
SEP_0
;

306 } i‡(
n
 < 
BREAK_2
) {

307 
ønd_ty≥
 = 
TYPE_1
;

308 
ønd_deg
 = 
DEG_1
;

309 
ønd_£p
 = 
SEP_1
;

310 } i‡(
n
 < 
BREAK_3
) {

311 
ønd_ty≥
 = 
TYPE_2
;

312 
ønd_deg
 = 
DEG_2
;

313 
ønd_£p
 = 
SEP_2
;

314 } i‡(
n
 < 
BREAK_4
) {

315 
ønd_ty≥
 = 
TYPE_3
;

316 
ønd_deg
 = 
DEG_3
;

317 
ønd_£p
 = 
SEP_3
;

319 
ønd_ty≥
 = 
TYPE_4
;

320 
ønd_deg
 = 
DEG_4
;

321 
ønd_£p
 = 
SEP_4
;

323 
°©e
 = (*Ë(
l⁄g_¨g_°©e
 + 1);

324 
íd_±r
 = &
°©e
[
ønd_deg
];

325 
	`§™dom_u∆ocked
(
£ed
);

326 i‡(
ønd_ty≥
 =
TYPE_0
)

327 
l⁄g_¨g_°©e
[0] = 
ønd_ty≥
;

329 
l⁄g_¨g_°©e
[0] = 
MAX_TYPES
 * (
Ωå
 - 
°©e
Ë+ 
ønd_ty≥
;

330 
	`UNLOCKME
();

331 ((*)
o°©e
);

332 
	}
}

354 
	$£t°©e
(*
¨g_°©e
)

356 *
√w_°©e
;

357 
ty≥
;

358 
ª¨
;

359 *
o°©e
 = (*)(&
°©e
[-1]);

361 
	`as£π
(
¨g_°©e
 !
NULL
);

363 
√w_°©e
 = (*)(*)
¨g_°©e
;

364 
ty≥
 = ()(
√w_°©e
[0] % 
MAX_TYPES
);

365 
ª¨
 = ()(
√w_°©e
[0] / 
MAX_TYPES
);

367 
	`LOCKME
();

368 i‡(
ønd_ty≥
 =
TYPE_0
)

369 
°©e
[-1] = 
ønd_ty≥
;

371 
°©e
[-1] = 
MAX_TYPES
 * (
Ωå
 - sèãË+ 
ønd_ty≥
;

372 
ty≥
) {

373 
TYPE_0
:

374 
TYPE_1
:

375 
TYPE_2
:

376 
TYPE_3
:

377 
TYPE_4
:

378 
ønd_ty≥
 = 
ty≥
;

379 
ønd_deg
 = 
degªes
[
ty≥
];

380 
ønd_£p
 = 
£ps
[
ty≥
];

383 
	`UNLOCKME
();

384  (
NULL
);

386 
°©e
 = (*Ë(
√w_°©e
 + 1);

387 i‡(
ønd_ty≥
 !
TYPE_0
) {

388 
Ωå
 = &
°©e
[
ª¨
];

389 
Âå
 = &
°©e
[(
ª¨
 + 
ønd_£p
Ë% 
ønd_deg
];

391 
íd_±r
 = &
°©e
[
ønd_deg
];

392 
	`UNLOCKME
();

393 ((*)
o°©e
);

394 
	}
}

415 
	$øndom_u∆ocked
()

417 
i
;

418 *
f
, *
r
;

420 i‡(
ønd_ty≥
 =
TYPE_0
) {

421 
i
 = 
°©e
[0];

422 
°©e
[0] = 
i
 = (i * 1103515245L + 12345L) & 0x7fffffff;

427 
f
 = 
Âå
; 
r
 = 
Ωå
;

428 *
f
 +*
r
;

430 
i
 = (()*
f
 >> 1) & 0x7fffffff;

431 i‡(++
f
 >
íd_±r
) {

432 
f
 = 
°©e
;

433 ++
r
;

435 i‡(++
r
 >
íd_±r
) {

436 
r
 = 
°©e
;

439 
Âå
 = 
f
; 
Ωå
 = 
r
;

441 (
i
);

442 
	}
}

445 
	$øndom
()

447 
r
;

449 
	`LOCKME
();

450 
r
 = 
	`øndom_u∆ocked
();

451 
	`UNLOCKME
();

452  (
r
);

453 
	}
}

	@userland/lib/libc/stdlib/system.c

30 
	~<î∫o.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

33 
	~<°rög.h
>

41 
	#MAXCMDSIZE
 2048

	)

42 
	#MAXARGS
 128

	)

45 
	$sy°em
(c⁄° *
cmd
)

53 
tmp
[
MAXCMDSIZE
];

54 *
¨gv
[
MAXARGS
+1];

55 
«rgs
=0;

56 *
s
;

57 
pid
, 
°©us
;

59 i‡(
	`°æí
(
cmd
Ë>(
tmp
)) {

60 
î∫o
 = 
E2BIG
;

63 
	`°r˝y
(
tmp
, 
cmd
);

65 
s
 = 
	`°πok
(
tmp
, " \t"); s; s = såtok(
NULL
, " \t")) {

66 i‡(
«rgs
 < 
MAXARGS
) {

67 
¨gv
[
«rgs
++] = 
s
;

70 
î∫o
 = 
E2BIG
;

75 
¨gv
[
«rgs
] = 
NULL
;

77 
pid
 = 
	`f‹k
();

78 
pid
) {

83 
	`execv
(
¨gv
[0],árgv);

85 
	`_exô
(255);

88 
	`waôpid
(
pid
, &
°©us
, 0);

89  
°©us
;

91 
	}
}

	@userland/lib/libc/string/memcmp.c

30 
	~<°rög.h
>

38 
	$memcmp
(c⁄° *
av
, c⁄° *
bv
, 
size_t
 
Àn
)

40 c⁄° *
a
 = 
av
;

41 c⁄° *
b
 = 
bv
;

42 
size_t
 
i
;

44 
i
=0; i<
Àn
; i++) {

45 i‡(
a
[
i
] !
b
[i]) {

46  ()(
a
[
i
] - 
b
[i]);

50 
	}
}

	@userland/lib/libc/string/strerror.c

30 
	~<°rög.h
>

31 
	~<kîn/îrmsg.h
>

37 
	$°ªº‹
(
îrcode
)

39 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

40  
sys_îæi°
[
îrcode
];

43 
	}
}

	@userland/lib/libc/string/strtok.c

30 
	~<°rög.h
>

32 *
	g__°πok_c⁄ãxt
;

35 
	$°πok
(*
°r
, c⁄° *
£ps
)

37  
	`°πok_r
(
°r
, 
£ps
, &
__°πok_c⁄ãxt
);

38 
	}
}

	@userland/lib/libc/time/time.c

30 
	~<uni°d.h
>

38 
time_t


39 
	$time
(
time_t
 *
t
)

41  
	`__time
(
t
, 
NULL
);

42 
	}
}

	@userland/lib/libc/unix/__assert.c

30 
	~<as£π.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<uni°d.h
>

34 
	~<°rög.h
>

42 
	$__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
ex¥
)

44 
buf
[256];

45 
	`¢¥ötf
(
buf
, (buf), "Assertion failed: %s (%sÜine %d)\n",

46 
ex¥
, 
fûe
, 
löe
);

48 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

49 
	`ab‹t
();

50 
	}
}

	@userland/lib/libc/unix/err.c

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<uni°d.h
>

35 
	~<îr.h
>

36 
	~<î∫o.h
>

45 **
__¨gv
;

52 
	$__£ndîr
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

54 ()
junk
;

56 
	`wrôe
(
STDERR_FILENO
, 
d©a
, 
Àn
);

57 
	}
}

65 
	$__£ndîr°r
(c⁄° *
°r
)

67 
	`__£ndîr
(
NULL
, 
°r
, 
	`°æí
(str));

68 
	}
}

75 
	$__¥öãº
(
u£_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

77 c⁄° *
îrmsg
;

78 c⁄° *
¥og
;

85 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

94 i‡(
__¨gv
!=
NULL
 && __argv[0]!=NULL) {

95 
¥og
 = 
__¨gv
[0];

98 
¥og
 = "(programÇame unknown)";

102 
	`__£ndîr°r
(
¥og
);

103 
	`__£ndîr°r
(": ");

106 
	`__v¥ötf
(
__£ndîr
, 
NULL
, 
fmt
, 
≠
);

109 i‡(
u£_î∫o
) {

110 
	`__£ndîr°r
(": ");

111 
	`__£ndîr°r
(
îrmsg
);

115 
	`__£ndîr°r
("\n");

116 
	}
}

124 
	$vw¨n
(c⁄° *
fmt
, 
va_li°
 
≠
)

126 
	`__¥öãº
(1, 
fmt
, 
≠
);

127 
	}
}

131 
	$vw¨nx
(c⁄° *
fmt
, 
va_li°
 
≠
)

133 
	`__¥öãº
(0, 
fmt
, 
≠
);

134 
	}
}

138 
	$vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

140 
	`__¥öãº
(1, 
fmt
, 
≠
);

141 
	`exô
(
exôcode
);

142 
	}
}

146 
	$vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

148 
	`__¥öãº
(0, 
fmt
, 
≠
);

149 
	`exô
(
exôcode
);

150 
	}
}

158 
	$w¨n
(c⁄° *
fmt
, ...)

160 
va_li°
 
≠
;

161 
	`va_°¨t
(
≠
, 
fmt
);

162 
	`vw¨n
(
fmt
, 
≠
);

163 
	`va_íd
(
≠
);

164 
	}
}

167 
	$w¨nx
(c⁄° *
fmt
, ...)

169 
va_li°
 
≠
;

170 
	`va_°¨t
(
≠
, 
fmt
);

171 
	`vw¨nx
(
fmt
, 
≠
);

172 
	`va_íd
(
≠
);

173 
	}
}

176 
	$îr
(
exôcode
, c⁄° *
fmt
, ...)

178 
va_li°
 
≠
;

179 
	`va_°¨t
(
≠
, 
fmt
);

180 
	`vîr
(
exôcode
, 
fmt
, 
≠
);

181 
	`va_íd
(
≠
);

182 
	}
}

185 
	$îrx
(
exôcode
, c⁄° *
fmt
, ...)

187 
va_li°
 
≠
;

188 
	`va_°¨t
(
≠
, 
fmt
);

189 
	`vîrx
(
exôcode
, 
fmt
, 
≠
);

190 
	`va_íd
(
≠
);

191 
	}
}

	@userland/lib/libc/unix/errno.c

30 
	~<î∫o.h
>

42 **
	g__¨gv
;

43 **
	g__ívú⁄
;

45 
	gî∫o
;

	@userland/lib/libc/unix/execvp.c

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

34 
	~<î∫o.h
>

35 
	~<limôs.h
>

42 
	$execvp
(c⁄° *
¥og
, *c⁄° *
¨gs
)

44 c⁄° *
£¨ch∑th
, *
s
, *
t
;

45 
¥og∑th
[
PATH_MAX
];

46 
size_t
 
Àn
;

48 i‡(
	`°rchr
(
¥og
, '/'Ë!
NULL
) {

49 
	`execv
(
¥og
, 
¨gs
);

53 
£¨ch∑th
 = 
	`gëív
("PATH");

54 i‡(
£¨ch∑th
 =
NULL
) {

55 
î∫o
 = 
ENOENT
;

59 
s
 = 
£¨ch∑th
; s !
NULL
; s = 
t
) {

60 
t
 = 
	`°rchr
(
s
, ':');

61 i‡(
t
 !
NULL
) {

62 
Àn
 = 
t
 - 
s
;

64 
t
++;

67 
Àn
 = 
	`°æí
(
s
);

69 i‡(
Àn
 == 0) {

72 i‡(
Àn
 >(
¥og∑th
)) {

75 
	`mem˝y
(
¥og∑th
, 
s
, 
Àn
);

76 
	`¢¥ötf
(
¥og∑th
 + 
Àn
, ’rog∑thË-Üí, "/%s", 
¥og
);

77 
	`execv
(
¥og∑th
, 
¨gs
);

78 
î∫o
) {

79 
ENOENT
:

80 
ENOTDIR
:

81 
ENOEXEC
:

89 
î∫o
 = 
ENOENT
;

91 
	}
}

	@userland/lib/libc/unix/getcwd.c

30 
	~<uni°d.h
>

31 
	~<î∫o.h
>

40 
	$gëcwd
(*
buf
, 
size_t
 
buÊí
)

42 
r
;

44 i‡(
buÊí
 < 1) {

45 
î∫o
 = 
EINVAL
;

46  
NULL
;

49 
r
 = 
	`__gëcwd
(
buf
, 
buÊí
-1);

50 i‡(
r
 < 0) {

51  
NULL
;

54 
buf
[
r
] = 0;

55  
buf
;

56 
	}
}

	@userland/lib/libtest/quint.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~<ã°/quöt.h
>

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$quöt
(c⁄° *
¥og
)

86 
pid_t
 
pids
[5];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ög fivêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<5; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<5; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@userland/lib/libtest/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~<ã°/åùÀ.h
>

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@userland/sbin/dumpsfs/dumpsfs.c

30 
	~<sys/ty≥s.h
>

31 
	~<°döt.h
>

32 
	~<°dboﬁ.h
>

33 
	~<°rög.h
>

34 
	~<°dio.h
>

35 
	~<°d¨g.h
>

36 
	~<°dlib.h
>

37 
	~<as£π.h
>

38 
	~<limôs.h
>

39 
	~<îr.h
>

41 
	~"suµ‹t.h
"

42 
	~"kîn/sfs.h
"

45 #ifde‡
HOST


50 
	~<√töë/ö.h
>

51 
	~<¨∑/öë.h
>

52 
	~"ho°com∑t.h
"

53 
	#SWAP64
(
x
Ë
	`¡ohŒ
(x)

	)

54 
	#SWAP32
(
x
Ë
	`¡ohl
(x)

	)

55 
	#SWAP16
(
x
Ë
	`¡ohs
(x)

	)

57 c⁄° *
ho°com∑t_¥og«me
;

61 
	#SWAP64
(
x
Ë(x)

	)

62 
	#SWAP32
(
x
Ë(x)

	)

63 
	#SWAP16
(
x
Ë(x)

	)

67 
	~"disk.h
"

69 
	#ARRAYCOUNT
(
a
Ë(◊Ë/ (◊)[0]))

	)

70 
	#DIVROUNDUP
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

72 
boﬁ
 
	gdofûes
, 
	gdodús
;

73 
boﬁ
 
	gdoödúe˘
;

74 
boﬁ
 
	gªcur£
;

79 
	gdumµos
;

83 
	$dumpvÆ
(c⁄° *
desc
, c⁄° *
vÆ
)

85 
size_t
 
dÀn
, 
vÀn
, 
u£d
;

87 
dÀn
 = 
	`°æí
(
desc
);

88 
vÀn
 = 
	`°æí
(
vÆ
);

90 
	`¥ötf
(" ");

92 
	`¥ötf
("%s: %s", 
desc
, 
vÆ
);

94 
u£d
 = 
dÀn
 + 2 + 
vÀn
;

95 ; 
u£d
 < 36; used++) {

96 
	`putch¨
(' ');

99 i‡(
dumµos
 % 2 == 1) {

100 
	`¥ötf
("\n");

102 
dumµos
++;

103 
	}
}

107 
	$dumpvÆf
(c⁄° *
desc
, c⁄° *
vÆf
, ...)

109 
va_li°
 
≠
;

110 
buf
[128];

112 
	`va_°¨t
(
≠
, 
vÆf
);

113 
	`v¢¥ötf
(
buf
, (buf), 
vÆf
, 
≠
);

114 
	`va_íd
(
≠
);

115 
	`dumpvÆ
(
desc
, 
buf
);

116 
	}
}

120 
	$dum∂vÆ
(c⁄° *
desc
, c⁄° *
lvÆ
)

122 i‡(
dumµos
 % 2 == 1) {

123 
	`¥ötf
("\n");

124 
dumµos
++;

126 
	`¥ötf
(" %s: %s\n", 
desc
, 
lvÆ
);

127 
dumµos
 += 2;

128 
	}
}

133 
dumpöode
(
uöt32_t
 
öo
, c⁄° *
«me
);

136 
uöt32_t


137 
	$ªadsb
()

139 
sfs_su≥rblock
 
sb
;

141 
	`diskªad
(&
sb
, 
SFS_SUPER_BLOCK
);

142 i‡(
	`SWAP32
(
sb
.
sb_magic
Ë!
SFS_MAGIC
) {

143 
	`îrx
(1, "Notán sfs filesystem");

145  
	`SWAP32
(
sb
.
sb_nblocks
);

146 
	}
}

150 
	$dumpsb
()

152 
sfs_su≥rblock
 
sb
;

153 
i
;

155 
	`diskªad
(&
sb
, 
SFS_SUPER_BLOCK
);

156 
sb
.
sb_vﬁ«me
[(sb.sb_volname)-1] = 0;

158 
	`¥ötf
("Superblock\n");

159 
	`¥ötf
("----------\n");

160 
	`dumpvÆf
("Magic", "0x%8x", 
	`SWAP32
(
sb
.
sb_magic
));

161 
	`dumpvÆf
("Size", "%u blocks", 
	`SWAP32
(
sb
.
sb_nblocks
));

162 
	`dumpvÆf
("Freemap size", "%u blocks",

163 
	`SFS_FREEMAPBLOCKS
(
	`SWAP32
(
sb
.
sb_nblocks
)));

164 
	`dumpvÆf
("Block size", "%u byãs", 
SFS_BLOCKSIZE
);

165 
	`dum∂vÆ
("Vﬁumê«me", 
sb
.
sb_vﬁ«me
);

167 
i
=0; i<
	`ARRAYCOUNT
(
sb
.
ª£rved
); i++) {

168 i‡(
sb
.
ª£rved
[
i
] != 0) {

169 
	`¥ötf
(" Word %u inÑeservedárea: 0x%x\n",

170 
i
, 
	`SWAP32
(
sb
.
ª£rved
[i]));

173 
	`¥ötf
("\n");

174 
	}
}

178 
	$dump‰ìm≠
(
uöt32_t
 
fsblocks
)

180 
uöt32_t
 
‰ìm≠blocks
 = 
	`SFS_FREEMAPBLOCKS
(
fsblocks
);

181 
uöt32_t
 
i
, 
j
, 
k
, 
bn
;

182 
uöt8_t
 
d©a
[
SFS_BLOCKSIZE
], 
mask
;

183 
tmp
[16];

185 
	`¥ötf
("Free block bitmap\n");

186 
	`¥ötf
("-----------------\n");

187 
i
=0; i<
‰ìm≠blocks
; i++) {

188 
	`diskªad
(
d©a
, 
SFS_FREEMAP_START
+
i
);

189 
	`¥ötf
(" Freemap block #%u in disk block %u: blocks %u - %u"

191 
i
, 
SFS_FREEMAP_START
+i,

192 
i
*
SFS_BITSPERBLOCK
, (i+1)*SFS_BITSPERBLOCK - 1,

193 
i
*
SFS_BITSPERBLOCK
, (i+1)*SFS_BITSPERBLOCK - 1);

194 
j
=0; j<
SFS_BLOCKSIZE
; j++) {

195 i‡(
j
 % 8 == 0) {

196 
	`¢¥ötf
(
tmp
, (tmp), "0x%x",

197 
i
*
SFS_BITSPERBLOCK
 + 
j
*8);

198 
	`¥ötf
("%-7†", 
tmp
);

200 
k
=0; k<8; k++) {

201 
bn
 = 
i
*
SFS_BITSPERBLOCK
 + 
j
*8 + 
k
;

202 
mask
 = 1U << 
k
;

203 i‡(
bn
 >
fsblocks
) {

204 i‡(
d©a
[
j
] & 
mask
) {

205 
	`putch¨
('x');

208 
	`putch¨
('!');

212 i‡(
d©a
[
j
] & 
mask
) {

213 
	`putch¨
('*');

216 
	`putch¨
('.');

220 i‡(
j
 % 8 == 7) {

221 
	`¥ötf
("\n");

224 
	`¥ötf
(" ");

228 
	`¥ötf
("\n");

229 
	}
}

233 
	$dumpödúe˘
(
uöt32_t
 
block
)

235 
uöt32_t
 
ib
[
SFS_BLOCKSIZE
/(uint32_t)];

236 
tmp
[128];

237 
i
;

239 i‡(
block
 == 0) {

242 
	`¥ötf
("Indúe˘ block %u\n", 
block
);

244 
	`diskªad
(
ib
, 
block
);

245 
i
=0; i<
	`ARRAYCOUNT
(
ib
); i++) {

246 i‡(
i
 % 4 == 0) {

247 
	`¥ötf
("@%-3u ", 
i
);

249 
	`¢¥ötf
(
tmp
, (tmp), "%u (0x%x)",

250 
	`SWAP32
(
ib
[
i
]), SWAP32(ib[i]));

251 
	`¥ötf
(" %-16s", 
tmp
);

252 i‡(
i
 % 4 == 3) {

253 
	`¥ötf
("\n");

256 
	}
}

259 
uöt32_t


260 
åavî£_ib
(
uöt32_t
 
fûeblock
, uöt32_à
numblocks
, uöt32_à
block
,

261 (*
doblock
)(
uöt32_t
, uint32_t))

263 
uöt32_t
 
ib
[
SFS_BLOCKSIZE
/(uint32_t)];

264 
i
;

266 i‡(
block
 == 0) {

267 
	`mem£t
(
ib
, 0, (ib));

270 
	`diskªad
(
ib
, 
block
);

272 
i
=0; i<
	`ARRAYCOUNT
(
ib
Ë&& 
fûeblock
 < 
numblocks
; i++) {

273 
	`doblock
(
fûeblock
++, 
	`SWAP32
(
ib
[
i
]));

275  
fûeblock
;

276 
	}
}

280 
åavî£
(c⁄° 
sfs_döode
 *
sfi
, (*
doblock
)(
uöt32_t
, uint32_t))

282 
uöt32_t
 
fûeblock
;

283 
uöt32_t
 
numblocks
;

284 
i
;

286 
numblocks
 = 
	`DIVROUNDUP
(
	`SWAP32
(
sfi
->
sfi_size
), 
SFS_BLOCKSIZE
);

288 
fûeblock
 = 0;

289 
i
=0; i<
SFS_NDIRECT
 && 
fûeblock
 < 
numblocks
; i++) {

290 
	`doblock
(
fûeblock
++, 
	`SWAP32
(
sfi
->
sfi_dúe˘
[
i
]));

292 i‡(
fûeblock
 < 
numblocks
) {

293 
fûeblock
 = 
	`åavî£_ib
(fûeblock, 
numblocks
,

294 
	`SWAP32
(
sfi
->
sfi_ödúe˘
), 
doblock
);

296 
	`as£π
(
fûeblock
 =
numblocks
);

297 
	}
}

301 
	$dumpdúblock
(
uöt32_t
 
fûeblock
, uöt32_à
diskblock
)

303 
sfs_dúíåy
 
sds
[
SFS_BLOCKSIZE
/(sfs_direntry)];

304 
nsds
 = 
SFS_BLOCKSIZE
/(
sfs_dúíåy
);

305 
i
;

307 ()
fûeblock
;

308 i‡(
diskblock
 == 0) {

309 
	`¥ötf
(" [block %u -Ém±y]\n", 
diskblock
);

312 
	`diskªad
(&
sds
, 
diskblock
);

314 
	`¥ötf
(" [block %u]\n", 
diskblock
);

315 
i
=0; i<
nsds
; i++) {

316 
uöt32_t
 
öo
 = 
	`SWAP32
(
sds
[
i
].
sfd_öo
);

317 i‡(
öo
==
SFS_NOINO
) {

318 
	`¥ötf
(" [freeÉntry]\n");

321 
sds
[
i
].
sfd_«me
[
SFS_NAMELEN
-1] = 0;

322 
	`¥ötf
(" %u %s\n", 
öo
, 
sds
[
i
].
sfd_«me
);

325 
	}
}

329 
	$dumpdú
(
uöt32_t
 
öo
, c⁄° 
sfs_döode
 *
sfi
)

331 
√¡rõs
;

333 
√¡rõs
 = 
	`SWAP32
(
sfi
->
sfi_size
Ë/ (
sfs_dúíåy
);

334 i‡(
	`SWAP32
(
sfi
->
sfi_size
Ë% (
sfs_dúíåy
) != 0) {

335 
	`w¨nx
("Warning: dir size isÇotá multiple of dirÉntry size");

337 
	`¥ötf
("Dúe˘‹y c⁄ã¡†f‹ inodê%u: %dÉ¡rõs\n", 
öo
, 
√¡rõs
);

338 
	`åavî£
(
sfi
, 
dumpdúblock
);

339 
	}
}

343 
	$ªcur£dúblock
(
uöt32_t
 
fûeblock
, uöt32_à
diskblock
)

345 
sfs_dúíåy
 
sds
[
SFS_BLOCKSIZE
/(sfs_direntry)];

346 
nsds
 = 
SFS_BLOCKSIZE
/(
sfs_dúíåy
);

347 
i
;

349 ()
fûeblock
;

350 i‡(
diskblock
 == 0) {

353 
	`diskªad
(&
sds
, 
diskblock
);

355 
i
=0; i<
nsds
; i++) {

356 
uöt32_t
 
öo
 = 
	`SWAP32
(
sds
[
i
].
sfd_öo
);

357 i‡(
öo
==
SFS_NOINO
) {

360 
sds
[
i
].
sfd_«me
[
SFS_NAMELEN
-1] = 0;

361 
	`dumpöode
(
öo
, 
sds
[
i
].
sfd_«me
);

363 
	}
}

367 
	$ªcur£dú
(
uöt32_t
 
öo
, c⁄° 
sfs_döode
 *
sfi
)

369 
√¡rõs
;

371 
√¡rõs
 = 
	`SWAP32
(
sfi
->
sfi_size
Ë/ (
sfs_dúíåy
);

372 
	`¥ötf
("Ródög fûe†ö dúe˘‹y %u: %dÉ¡rõs\n", 
öo
, 
√¡rõs
);

373 
	`åavî£
(
sfi
, 
ªcur£dúblock
);

374 
	`¥ötf
("D⁄êwôh dúe˘‹y %u\n", 
öo
);

375 
	}
}

378 
	$dumpfûeblock
(
uöt32_t
 
fûeblock
, uöt32_à
diskblock
)

380 
uöt8_t
 
d©a
[
SFS_BLOCKSIZE
];

381 
i
, 
j
;

382 
tmp
[128];

384 i‡(
diskblock
 == 0) {

385 
	`¥ötf
(" 0x%6x [•¨£]\n", 
fûeblock
 * 
SFS_BLOCKSIZE
);

389 
	`diskªad
(
d©a
, 
diskblock
);

390 
i
=0; i<
SFS_BLOCKSIZE
; i++) {

391 i‡(
i
 % 16 == 0) {

392 
	`¢¥ötf
(
tmp
, (tmp), "0x%x",

393 
fûeblock
 * 
SFS_BLOCKSIZE
 + 
i
);

394 
	`¥ötf
("%8s", 
tmp
);

396 i‡(
i
 % 8 == 0) {

397 
	`¥ötf
(" ");

400 
	`¥ötf
(" ");

402 
	`¥ötf
("%02x", 
d©a
[
i
]);

403 i‡(
i
 % 16 == 15) {

404 
	`¥ötf
(" ");

405 
j
 = 
i
-15; j<=i; j++) {

406 i‡(
d©a
[
j
] < 32 || data[j] > 126) {

407 
	`putch¨
('.');

410 
	`putch¨
(
d©a
[
j
]);

413 
	`¥ötf
("\n");

416 
	}
}

420 
	$dumpfûe
(
uöt32_t
 
öo
, c⁄° 
sfs_döode
 *
sfi
)

422 
	`¥ötf
("Fûêc⁄ã¡†f‹ inodê%u:\n", 
öo
);

423 
	`åavî£
(
sfi
, 
dumpfûeblock
);

424 
	}
}

428 
	$dumpöode
(
uöt32_t
 
öo
, c⁄° *
«me
)

430 
sfs_döode
 
sfi
;

431 c⁄° *
ty≥«me
;

432 
tmp
[128];

433 
i
;

435 
	`diskªad
(&
sfi
, 
öo
);

437 
	`¥ötf
("Inodê%u", 
öo
);

438 i‡(
«me
 !
NULL
) {

439 
	`¥ötf
(" (%s)", 
«me
);

441 
	`¥ötf
("\n");

442 
	`¥ötf
("--------------\n");

444 
	`SWAP16
(
sfi
.
sfi_ty≥
)) {

445 
SFS_TYPE_FILE
: 
ty≥«me
 = "regular file"; ;

446 
SFS_TYPE_DIR
: 
ty≥«me
 = "directory"; ;

447 : 
ty≥«me
 = "invalid"; ;

449 
	`dumpvÆf
("Ty≥", "%u (%s)", 
	`SWAP16
(
sfi
.
sfi_ty≥
), 
ty≥«me
);

450 
	`dumpvÆf
("Size", "%u", 
	`SWAP32
(
sfi
.
sfi_size
));

451 
	`dumpvÆf
("Lök cou¡", "%u", 
	`SWAP16
(
sfi
.
sfi_lökcou¡
));

452 
	`¥ötf
("\n");

454 
	`¥ötf
(" Direct blocks:\n");

455 
i
=0; i<
SFS_NDIRECT
; i++) {

456 i‡(
i
 % 4 == 0) {

457 
	`¥ötf
("@%-2u ", 
i
);

467 
	`¢¥ötf
(
tmp
, (tmp), "%u (0x%x)",

468 
	`SWAP32
(
sfi
.
sfi_dúe˘
[
i
]), SWAP32(sfi.sfi_direct[i]));

469 
	`¥ötf
(" %-16s", 
tmp
);

470 i‡(
i
 % 4 == 3) {

471 
	`¥ötf
("\n");

474 i‡(
i
 % 4 != 0) {

475 
	`¥ötf
("\n");

477 
	`¥ötf
(" Indirect block: %u (0x%x)\n",

478 
	`SWAP32
(
sfi
.
sfi_ödúe˘
), SWAP32(sfi.sfi_indirect));

479 
i
=0; i<
	`ARRAYCOUNT
(
sfi
.
sfi_wa°e
); i++) {

480 i‡(
sfi
.
sfi_wa°e
[
i
] != 0) {

481 
	`¥ötf
(" Word %u in wasteárea: 0x%x\n",

482 
i
, 
	`SWAP32
(
sfi
.
sfi_wa°e
[i]));

486 i‡(
doödúe˘
) {

487 
	`dumpödúe˘
(
	`SWAP32
(
sfi
.
sfi_ödúe˘
));

490 i‡(
	`SWAP16
(
sfi
.
sfi_ty≥
Ë=
SFS_TYPE_DIR
 && 
dodús
) {

491 
	`dumpdú
(
öo
, &
sfi
);

493 i‡(
	`SWAP16
(
sfi
.
sfi_ty≥
Ë=
SFS_TYPE_FILE
 && 
dofûes
) {

494 
	`dumpfûe
(
öo
, &
sfi
);

496 i‡(
	`SWAP16
(
sfi
.
sfi_ty≥
Ë=
SFS_TYPE_DIR
 && 
ªcur£
) {

497 
	`ªcur£dú
(
öo
, &
sfi
);

499 
	}
}

506 
	$ußge
()

508 
	`w¨nx
("Usage: dumpsfs [options] device/diskfile");

509 
	`w¨nx
(" -s: dump superblock");

510 
	`w¨nx
(" -b: dump free block bitmap");

511 
	`w¨nx
(" -i ino: dump specified inode");

512 
	`w¨nx
(" -I: dump indirect blocks");

513 
	`w¨nx
(" -f: dump file contents");

514 
	`w¨nx
(" -d: dump directory contents");

515 
	`w¨nx
(" -r:Ñecurse into directory contents");

516 
	`w¨nx
(" -a:ÉquivalentÅo -sbdfr -i 1");

517 
	`îrx
(1, " Default is -i 1");

518 
	}
}

521 
	$maö
(
¨gc
, **
¨gv
)

523 
boﬁ
 
dosb
 = 
Ál£
;

524 
boﬁ
 
do‰ìm≠
 = 
Ál£
;

525 
uöt32_t
 
dumpöo
 = 0;

526 c⁄° *
dumpdisk
 = 
NULL
;

528 
i
, 
j
;

529 
uöt32_t
 
nblocks
;

531 #ifde‡
HOST


534 
ho°com∑t_¥og«me
 = 
¨gv
[0];

537 
i
=1; i<
¨gc
; i++) {

538 i‡(
¨gv
[
i
][0] == '-') {

539 
j
=1; 
¨gv
[
i
][j]; j++) {

540 
¨gv
[
i
][
j
]) {

541 's': 
dosb
 = 
åue
; ;

542 'b': 
do‰ìm≠
 = 
åue
; ;

544 i‡(
¨gv
[
i
][
j
+1] == 0) {

545 
dumpöo
 = 
	`©oi
(
¨gv
[++
i
]);

548 
dumpöo
 = 
	`©oi
(
¨gv
[
i
]+
j
+1);

549 
j
 = 
	`°æí
(
¨gv
[
i
]);

552 
√xèrg
;

553 'I': 
doödúe˘
 = 
åue
; ;

554 'f': 
dofûes
 = 
åue
; ;

555 'd': 
dodús
 = 
åue
; ;

556 'r': 
ªcur£
 = 
åue
; ;

558 
dosb
 = 
åue
;

559 
do‰ìm≠
 = 
åue
;

560 
dumpöo
 = 
SFS_ROOTDIR_INO
;

561 
doödúe˘
 = 
åue
;

562 
dofûes
 = 
åue
;

563 
dodús
 = 
åue
;

564 
ªcur£
 = 
åue
;

567 
	`ußge
();

573 i‡(
dumpdisk
 !
NULL
) {

574 
	`ußge
();

576 
dumpdisk
 = 
¨gv
[
i
];

578 
√xèrg
:

581 i‡(
dumpdisk
 =
NULL
) {

582 
	`ußge
();

585 i‡(!
dosb
 && !
do‰ìm≠
 && 
dumpöo
 == 0) {

586 
dumpöo
 = 
SFS_ROOTDIR_INO
;

589 
	`›ídisk
(
dumpdisk
);

590 
nblocks
 = 
	`ªadsb
();

592 i‡(
dosb
) {

593 
	`dumpsb
();

595 i‡(
do‰ìm≠
) {

596 
	`dump‰ìm≠
(
nblocks
);

598 i‡(
dumpöo
 != 0) {

599 
	`dumpöode
(
dumpöo
, 
NULL
);

602 
	`˛o£disk
();

605 
	}
}

	@userland/sbin/halt/halt.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_HALT
);

44 
	}
}

	@userland/sbin/mksfs/disk.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<uni°d.h
>

33 
	~<as£π.h
>

34 
	~<°döt.h
>

35 
	~<°rög.h
>

36 
	~<î∫o.h
>

37 
	~<f˙é.h
>

38 
	~<îr.h
>

40 
	~"suµ‹t.h
"

41 
	~"disk.h
"

43 
	#HOSTSTRING
 "Sy°em/161 Disk Image"

	)

44 
	#BLOCKSIZE
 512

	)

46 #i‚de‡
EINTR


47 
	#EINTR
 0

	)

50 
	gfd
=-1;

51 
uöt32_t
 
	gnblocks
;

58 
	$›ídisk
(c⁄° *
∑th
)

60 
°©
 
°©buf
;

62 
	`as£π
(
fd
<0);

63 
fd
 = 
	`›í
(
∑th
, 
O_RDWR
);

64 i‡(
fd
<0) {

65 
	`îr
(1, "%s", 
∑th
);

67 i‡(
	`f°©
(
fd
, &
°©buf
)) {

68 
	`îr
(1, "%s: f°©", 
∑th
);

71 
nblocks
 = 
°©buf
.
°_size
 / 
BLOCKSIZE
;

73 #ifde‡
HOST


74 
nblocks
--;

77 
buf
[64];

78 
Àn
;

81 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf)-1);

82 i‡(
Àn
 < 0 && (
î∫o
==
EINTR
 ||Éºno==
EAGAIN
)) {

87 
buf
[
Àn
] = 0;

88 
buf
[
	`°æí
(
HOSTSTRING
)] = 0;

90 i‡(
	`°rcmp
(
buf
, 
HOSTSTRING
)) {

91 
	`îrx
(1, "%s: NŸá Sy°em/161 disk image", 
∑th
);

95 
	}
}

100 
uöt32_t


101 
	$diskblocksize
()

103 
	`as£π
(
fd
>=0);

104  
BLOCKSIZE
;

105 
	}
}

110 
uöt32_t


111 
	$diskblocks
()

113 
	`as£π
(
fd
>=0);

114  
nblocks
;

115 
	}
}

121 
	$diskwrôe
(c⁄° *
d©a
, 
uöt32_t
 
block
)

123 c⁄° *
cd©a
 = 
d©a
;

124 
uöt32_t
 
tŸ
=0;

125 
Àn
;

127 
	`as£π
(
fd
>=0);

129 #ifde‡
HOST


131 
block
++;

134 i‡(
	`l£ek
(
fd
, 
block
*
BLOCKSIZE
, 
SEEK_SET
)<0) {

135 
	`îr
(1, "lseek");

138 
tŸ
 < 
BLOCKSIZE
) {

139 
Àn
 = 
	`wrôe
(
fd
, 
cd©a
 + 
tŸ
, 
BLOCKSIZE
 -Åot);

140 i‡(
Àn
 < 0) {

141 i‡(
î∫o
==
EINTR
 ||Éºno==
EAGAIN
) {

144 
	`îr
(1, "write");

146 i‡(
Àn
==0) {

147 
	`îr
(1, "writeÑeturned 0?");

149 
tŸ
 +
Àn
;

151 
	}
}

157 
	$diskªad
(*
d©a
, 
uöt32_t
 
block
)

159 *
cd©a
 = 
d©a
;

160 
uöt32_t
 
tŸ
=0;

161 
Àn
;

163 
	`as£π
(
fd
>=0);

165 #ifde‡
HOST


167 
block
++;

170 i‡(
	`l£ek
(
fd
, 
block
*
BLOCKSIZE
, 
SEEK_SET
)<0) {

171 
	`îr
(1, "lseek");

174 
tŸ
 < 
BLOCKSIZE
) {

175 
Àn
 = 
	`ªad
(
fd
, 
cd©a
 + 
tŸ
, 
BLOCKSIZE
 -Åot);

176 i‡(
Àn
 < 0) {

177 i‡(
î∫o
==
EINTR
 ||Éºno==
EAGAIN
) {

180 
	`îr
(1, "read");

182 i‡(
Àn
==0) {

183 
	`îr
(1, "unexpected EOF in mid-sector");

185 
tŸ
 +
Àn
;

187 
	}
}

193 
	$˛o£disk
()

195 
	`as£π
(
fd
>=0);

196 i‡(
	`˛o£
(
fd
)) {

197 
	`îr
(1, "close");

199 
fd
 = -1;

200 
	}
}

	@userland/sbin/mksfs/disk.h

30 
›ídisk
(c⁄° *
∑th
);

32 
uöt32_t
 
diskblocksize
();

33 
uöt32_t
 
diskblocks
();

35 
diskwrôe
(c⁄° *
d©a
, 
uöt32_t
 
block
);

36 
diskªad
(*
d©a
, 
uöt32_t
 
block
);

38 
˛o£disk
();

	@userland/sbin/mksfs/mksfs.c

30 
	~<sys/ty≥s.h
>

31 
	~<°döt.h
>

32 
	~<°rög.h
>

33 
	~<as£π.h
>

34 
	~<limôs.h
>

35 
	~<îr.h
>

37 
	~"suµ‹t.h
"

38 
	~"kîn/sfs.h
"

41 #ifde‡
HOST


43 
	~<√töë/ö.h
>

44 
	~<¨∑/öë.h
>

45 
	~"ho°com∑t.h
"

46 
	#SWAP64
(
x
Ë
	`¡ohŒ
(x)

	)

47 
	#SWAP32
(
x
Ë
	`¡ohl
(x)

	)

48 
	#SWAP16
(
x
Ë
	`¡ohs
(x)

	)

52 
	#SWAP64
(
x
Ë(x)

	)

53 
	#SWAP32
(
x
Ë(x)

	)

54 
	#SWAP16
(
x
Ë(x)

	)

58 
	~"disk.h
"

61 
	#MAXFREEMAPBLOCKS
 32

	)

64 
	g‰ìm≠buf
[
MAXFREEMAPBLOCKS
 * 
SFS_BLOCKSIZE
];

71 
	$check
()

73 
	`as£π
((
sfs_su≥rblock
)==
SFS_BLOCKSIZE
);

74 
	`as£π
((
sfs_döode
)==
SFS_BLOCKSIZE
);

75 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dúíåy
) == 0);

76 
	}
}

83 
	$Ælocblock
(
uöt32_t
 
block
)

85 
uöt32_t
 
m≠byã
 = 
block
/
CHAR_BIT
;

86 
mask
 = (1<<(
block
 % 
CHAR_BIT
));

88 
	`as£π
((
‰ìm≠buf
[
m≠byã
] & 
mask
) == 0);

89 
‰ìm≠buf
[
m≠byã
] |
mask
;

90 
	}
}

97 
	$öô‰ìm≠
(
uöt32_t
 
fsblocks
)

99 
uöt32_t
 
‰ìm≠bôs
 = 
	`SFS_FREEMAPBITS
(
fsblocks
);

100 
uöt32_t
 
‰ìm≠blocks
 = 
	`SFS_FREEMAPBLOCKS
(
fsblocks
);

101 
uöt32_t
 
i
;

103 i‡(
‰ìm≠blocks
 > 
MAXFREEMAPBLOCKS
) {

104 
	`îrx
(1, "FilesystemÅooÜarge -- "

109 
	`Ælocblock
(
SFS_SUPER_BLOCK
);

110 
	`Ælocblock
(
SFS_ROOTDIR_INO
);

113 
i
=0; i<
‰ìm≠blocks
; i++) {

114 
	`Ælocblock
(
SFS_FREEMAP_START
 + 
i
);

118 
i
=
fsblocks
; i<
‰ìm≠bôs
; i++) {

119 
	`Ælocblock
(
i
);

121 
	}
}

128 
	$wrôesu≥r
(c⁄° *
vﬁ«me
, 
uöt32_t
 
nblocks
)

130 
sfs_su≥rblock
 
sb
;

133 
	`bzîo
((*)&
sb
, (sb));

135 i‡(
	`°æí
(
vﬁ«me
Ë>
SFS_VOLNAME_SIZE
) {

136 
	`îrx
(1, "Vﬁumê«mê%†toÿl⁄g", 
vﬁ«me
);

140 
sb
.
sb_magic
 = 
	`SWAP32
(
SFS_MAGIC
);

141 
sb
.
sb_nblocks
 = 
	`SWAP32
(
nblocks
);

142 
	`°r˝y
(
sb
.
sb_vﬁ«me
, 
vﬁ«me
);

145 
	`diskwrôe
(&
sb
, 
SFS_SUPER_BLOCK
);

146 
	}
}

153 
	$wrôe‰ìm≠
(
uöt32_t
 
fsblocks
)

155 
uöt32_t
 
‰ìm≠blocks
;

156 *
±r
;

157 
uöt32_t
 
i
;

160 
‰ìm≠blocks
 = 
	`SFS_FREEMAPBLOCKS
(
fsblocks
);

161 
i
=0; i<
‰ìm≠blocks
; i++) {

162 
±r
 = 
‰ìm≠buf
 + 
i
*
SFS_BLOCKSIZE
;

163 
	`diskwrôe
(
±r
, 
SFS_FREEMAP_START
+
i
);

165 
	}
}

172 
	$wrôîoŸdú
()

174 
sfs_döode
 
sfi
;

177 
	`bzîo
((*)&
sfi
, (sfi));

178 
sfi
.
sfi_size
 = 
	`SWAP32
(0);

179 
sfi
.
sfi_ty≥
 = 
	`SWAP16
(
SFS_TYPE_DIR
);

180 
sfi
.
sfi_lökcou¡
 = 
	`SWAP16
(1);

183 
	`diskwrôe
(&
sfi
, 
SFS_ROOTDIR_INO
);

184 
	}
}

190 
	$maö
(
¨gc
, **
¨gv
)

192 
uöt32_t
 
size
, 
blocksize
;

193 *
vﬁ«me
, *
s
;

195 #ifde‡
HOST


196 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

199 i‡(
¨gc
!=3) {

200 
	`îrx
(1, "Usage: mksfs device/diskfile volume-name");

203 
	`check
();

205 
vﬁ«me
 = 
¨gv
[2];

208 
s
 = 
	`°rchr
(
vﬁ«me
, ':');

209 i‡(
s
 !
NULL
) {

210 i‡(
	`°æí
(
s
)!=1) {

211 
	`îrx
(1, "IŒegÆ vﬁumê«mê%s", 
vﬁ«me
);

213 *
s
 = 0;

217 
s
 = 
	`°rchr
(
vﬁ«me
, '/');

218 i‡(
s
 !
NULL
) {

219 
	`îrx
(1, "IŒegÆ vﬁumê«mê%s", 
vﬁ«me
);

222 
	`›ídisk
(
¨gv
[1]);

223 
blocksize
 = 
	`diskblocksize
();

225 i‡(
blocksize
!=
SFS_BLOCKSIZE
) {

226 
	`îrx
(1, "Device has wrong blocksize %u (should be %u)\n",

227 
blocksize
, 
SFS_BLOCKSIZE
);

229 
size
 = 
	`diskblocks
();

232 
	`öô‰ìm≠
(
size
);

233 
	`wrôesu≥r
(
vﬁ«me
, 
size
);

234 
	`wrôe‰ìm≠
(
size
);

235 
	`wrôîoŸdú
();

237 
	`˛o£disk
();

240 
	}
}

	@userland/sbin/mksfs/support.c

	@userland/sbin/mksfs/support.h

31 #ifde‡
__osf__


33 
	#HAS_NO_SIZED_TYPES


	)

36 #i‡
deföed
(
__sun__
Ë&& deföed(
__svr4__
)

38 
	#HAS_NO_SIZED_TYPES


	)

46 #ifde‡
HAS_NO_SIZED_TYPES


48 #i‡
deföed
(
__Æpha__
Ë|| deföed(
__Æpha
)

50 
	tuöt32_t
;

51 
	tuöt16_t
;

52 
	tuöt8_t
;

54 #ñi‡
deföed
(
__•¨c__
)

56 
	tuöt32_t
;

57 
	tuöt16_t
;

58 
	tuöt8_t
;

	@userland/sbin/poweroff/poweroff.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_POWEROFF
);

44 
	}
}

	@userland/sbin/reboot/reboot.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_REBOOT
);

44 
	}
}

	@userland/sbin/sfsck/compat.h

30 #i‚de‡
SFSCK_H


31 
	#SFSCK_H


	)

38 
	~<°döt.h
>

41 
	~"suµ‹t.h
"

43 #ifde‡
HOST


48 
	~<√töë/ö.h
>

49 
	~<¨∑/öë.h
>

50 
	~"ho°com∑t.h
"

51 
	#SWAP64
(
x
Ë
	`¡ohŒ
(x)

	)

52 
	#SWAP32
(
x
Ë
	`¡ohl
(x)

	)

53 
	#SWAP16
(
x
Ë
	`¡ohs
(x)

	)

57 
	#SWAP64
(
x
Ë(x)

	)

58 
	#SWAP32
(
x
Ë(x)

	)

59 
	#SWAP16
(
x
Ë(x)

	)

60 
	#NO_REALLOC


	)

	@userland/sbin/sfsck/freemap.c

30 
	~<sys/ty≥s.h
>

31 
	~<limôs.h
>

32 
	~<°döt.h
>

33 
	~<°dio.h
>

34 
	~<as£π.h
>

35 
	~<îr.h
>

37 
	~"com∑t.h
"

38 
	~<kîn/sfs.h
>

40 
	~"utûs.h
"

41 
	~"sfs.h
"

42 
	~"sb.h
"

43 
	~"‰ìm≠.h
"

44 
	~"maö.h
"

46 
	gblocksöu£
 = 0;

47 
uöt8_t
 *
	g‰ìm≠d©a
;

48 
uöt8_t
 *
	gto‰ìd©a
;

56 
	$‰ìm≠_£tup
()

58 
size_t
 
i
, 
m≠byãs
;

59 
uöt32_t
 
fsblocks
, 
m≠blocks
;

61 
fsblocks
 = 
	`sb_tŸÆblocks
();

62 
m≠blocks
 = 
	`sb_‰ìm≠blocks
();

63 
m≠byãs
 = 
m≠blocks
 * 
SFS_BLOCKSIZE
;

65 
‰ìm≠d©a
 = 
	`domÆloc
(
m≠byãs
 * (
uöt8_t
));

66 
to‰ìd©a
 = 
	`domÆloc
(
m≠byãs
 * (
uöt8_t
));

67 
i
=0; i<
m≠byãs
; i++) {

68 
‰ìm≠d©a
[
i
] = 
to‰ìd©a
[i] = 0;

72 
i
=
fsblocks
; i < 
m≠blocks
*
SFS_BITSPERBLOCK
; i++) {

73 
	`‰ìm≠_blocköu£
(
i
, 
B_PASTEND
, 0);

77 
	`‰ìm≠_blocköu£
(
SFS_SUPER_BLOCK
, 
B_SUPERBLOCK
, 0);

78 
i
=0; i < 
m≠blocks
; i++) {

79 
	`‰ìm≠_blocköu£
(
SFS_FREEMAP_START
+
i
, 
B_FREEMAPBLOCK
, i);

81 
	}
}

88 
	$blockußge°r
(
blockußge_t
 
how
, 
uöt32_t
 
howdesc
)

90 
rv
[256];

91 
how
) {

92 
B_SUPERBLOCK
:

94 
B_FREEMAPBLOCK
:

95 
	`¢¥ötf
(
rv
, (rv), "freemap block %lu",

96 (Ë
howdesc
);

98 
B_INODE
:

99 
	`¢¥ötf
(
rv
, (rv), "inode %lu",

100 (Ë
howdesc
);

102 
B_IBLOCK
:

103 
	`¢¥ötf
(
rv
, (rv), "indirect block of inode %lu",

104 (Ë
howdesc
);

106 
B_DIRDATA
:

107 
	`¢¥ötf
(
rv
, (rv), "directory data from inode %lu",

108 (Ë
howdesc
);

110 
B_DATA
:

111 
	`¢¥ötf
(
rv
, (rv), "file data from inode %lu",

112 (Ë
howdesc
);

114 
B_PASTEND
:

117  
rv
;

118 
	}
}

127 
	$‰ìm≠_blocköu£
(
uöt32_t
 
block
, 
blockußge_t
 
how
, uöt32_à
howdesc
)

129 
ödex
 = 
block
/8;

130 
uöt8_t
 
mask
 = ((uöt8_t)1)<<(
block
%8);

132 i‡(
to‰ìd©a
[
ödex
] & 
mask
) {

134 
to‰ìd©a
[
ödex
] &~
mask
;

137 i‡(
‰ìm≠d©a
[
ödex
] & 
mask
) {

138 
	`w¨nx
("Block %lu (usedás %s)álready in use! (NOT FIXED)",

139 (Ë
block
, 
	`blockußge°r
(
how
, 
howdesc
));

140 
	`£tbad√ss
(
EXIT_UNRECOV
);

143 
‰ìm≠d©a
[
ödex
] |
mask
;

145 i‡(
how
 !
B_PASTEND
) {

146 
blocksöu£
++;

148 
	}
}

162 
	$‰ìm≠_block‰ì
(
uöt32_t
 
block
)

164 
ödex
 = 
block
/8;

165 
uöt8_t
 
mask
 = ((uöt8_t)1)<<(
block
%8);

167 i‡(
to‰ìd©a
[
ödex
] & 
mask
) {

171 i‡(
‰ìm≠d©a
[
ödex
] & 
mask
) {

175 
to‰ìd©a
[
ödex
] |
mask
;

176 
	}
}

183 
	$cou¡bôs
(
uöt8_t
 
vÆ
)

185 
uöt8_t
 
x
;

186 
˘
=0;

188 
x
=1; x; x<<=1) {

189 i‡(
vÆ
 & 
x
Ë
˘
++;

191  
˘
;

192 
	}
}

203 
	$ªp‹t‰ìm≠
(
uöt32_t
 
m≠block
, uöt32_à
byã
, 
uöt8_t
 
vÆ
, c⁄° *
wh©
)

205 
uöt8_t
 
x
, 
y
;

206 
uöt32_t
 
blocknum
;

208 
x
=1, 
y
=0; x; x<<=1, y++) {

209 i‡(
vÆ
 & 
x
) {

210 
blocknum
 = 
m≠block
*
SFS_BITSPERBLOCK
 +

211 
byã
*
CHAR_BIT
 + 
y
;

212 
	`w¨nx
("Block %luÉrroneously shown %s in freemap",

213 (Ë
blocknum
, 
wh©
);

216 
	}
}

225 
	$‰ìm≠_check
()

227 
uöt8_t
 
a˘uÆ
[
SFS_BLOCKSIZE
], *
ex≥˘ed
, *
to‰ì
, 
tmp
;

228 
uöt32_t
 
Æloccou¡
=0, 
‰ìcou¡
=0, 
i
, 
j
;

229 
bch™ged
;

230 
uöt32_t
 
bôblocks
;

232 
bôblocks
 = 
	`sb_‰ìm≠blocks
();

234 
i
=0; i<
bôblocks
; i++) {

235 
	`sfs_ªad‰ìm≠block
(
i
, 
a˘uÆ
);

236 
ex≥˘ed
 = 
‰ìm≠d©a
 + 
i
*
SFS_BLOCKSIZE
;

237 
to‰ì
 = 
to‰ìd©a
 + 
i
*
SFS_BLOCKSIZE
;

238 
bch™ged
 = 0;

240 
j
=0; j<
SFS_BLOCKSIZE
; j++) {

242 
	`as£π
((
ex≥˘ed
[
j
] & 
to‰ì
[j])==0);

245 i‡(
a˘uÆ
[
j
] =
ex≥˘ed
[j]) {

250 i‡(
a˘uÆ
[
j
] =(
ex≥˘ed
[j] | 
to‰ì
[j])) {

251 
a˘uÆ
[
j
] = 
ex≥˘ed
[j];

252 
bch™ged
 = 1;

259 
a˘uÆ
[
j
] &~
to‰ì
[j];

262 i‡((
a˘uÆ
[
j
] & 
ex≥˘ed
[j]) !=Éxpected[j]) {

263 
tmp
 = 
ex≥˘ed
[
j
] & ~
a˘uÆ
[j];

264 
Æloccou¡
 +
	`cou¡bôs
(
tmp
);

265 i‡(
tmp
 != 0) {

266 
	`ªp‹t‰ìm≠
(
i
, 
j
, 
tmp
, "free");

271 i‡((
a˘uÆ
[
j
] & 
ex≥˘ed
[j]) !=áctual[j]) {

272 
tmp
 = 
a˘uÆ
[
j
] & ~
ex≥˘ed
[j];

273 
‰ìcou¡
 +
	`cou¡bôs
(
tmp
);

274 i‡(
tmp
 != 0) {

275 
	`ªp‹t‰ìm≠
(
i
, 
j
, 
tmp
, "allocated");

280 
a˘uÆ
[
j
] = 
ex≥˘ed
[j];

281 
bch™ged
 = 1;

285 i‡(
bch™ged
) {

286 
	`sfs_wrôe‰ìm≠block
(
i
, 
a˘uÆ
);

290 i‡(
Æloccou¡
 > 0) {

291 
	`w¨nx
("%lu blocksÉrroneously shown free in freemap (fixed)",

292 (Ë
Æloccou¡
);

293 
	`£tbad√ss
(
EXIT_RECOV
);

295 i‡(
‰ìcou¡
 > 0) {

296 
	`w¨nx
("%lu blocksÉrroneously shown used in freemap (fixed)",

297 (Ë
‰ìcou¡
);

298 
	`£tbad√ss
(
EXIT_RECOV
);

300 
	}
}

307 
	$‰ìm≠_blocksu£d
()

309  
blocksöu£
;

310 
	}
}

	@userland/sbin/sfsck/freemap.h

30 #i‚de‡
FREEMAP_H


31 
	#FREEMAP_H


	)

39 
	~<°döt.h
>

42 
	mB_SUPERBLOCK
,

43 
	mB_FREEMAPBLOCK
,

44 
	mB_INODE
,

45 
	mB_IBLOCK
,

46 
	mB_DIRDATA
,

47 
	mB_DATA
,

48 
	mB_PASTEND
,

49 } 
	tblockußge_t
;

52 
‰ìm≠_£tup
();

55 
‰ìm≠_blocköu£
(
uöt32_t
 
block
, 
blockußge_t
 
how
, uöt32_à
howdesc
);

58 
‰ìm≠_block‰ì
(
uöt32_t
 
block
);

61 
‰ìm≠_check
();

64 
‰ìm≠_blocksu£d
();

	@userland/sbin/sfsck/ibmacros.h

30 #i‚de‡
IBMACROS_H


31 
	#IBMACROS_H


	)

51 #i‚de‡
SFS_NDIRECT


54 #i‚de‡
SFS_NINDIRECT


57 #i‚de‡
SFS_NDINDIRECT


60 #i‚de‡
SFS_NTINDIRECT


83 
	#NUM_D
 
SFS_NDIRECT


	)

84 
	#NUM_I
 
SFS_NINDIRECT


	)

85 
	#NUM_II
 
SFS_NDINDIRECT


	)

86 
	#NUM_III
 
SFS_NTINDIRECT


	)

90 #i‡
NUM_D
 == 0

91 
	#GET_D
(
sfi
, 
i
Ë
	`GET0_x
(sfi, 
sfi_dúe˘
, i)

	)

92 
	#SET_D
(
sfi
, 
i
Ë
	`SET0_x
(sfi, 
sfi_dúe˘
, i)

	)

93 #ñi‡
NUM_D
 == 1

94 
	#GET_D
(
sfi
, 
i
Ë
	`GET1_x
(sfi, 
sfi_dúe˘
, i)

	)

95 
	#SET_D
(
sfi
, 
i
Ë
	`SET1_x
(sfi, 
sfi_dúe˘
, i)

	)

97 
	#GET_D
(
sfi
, 
i
Ë
	`GETN_x
(sfi, 
sfi_dúe˘
, i)

	)

98 
	#SET_D
(
sfi
, 
i
Ë
	`SETN_x
(sfi, 
sfi_dúe˘
, i)

	)

101 #i‡
NUM_I
 == 0

102 
	#GET_I
(
sfi
, 
i
Ë
	`GET0_x
(sfi, 
sfi_ödúe˘
, i)

	)

103 
	#SET_I
(
sfi
, 
i
Ë
	`SET0_x
(sfi, 
sfi_ödúe˘
, i)

	)

104 #ñi‡
NUM_I
 == 1

105 
	#GET_I
(
sfi
, 
i
Ë
	`GET1_x
(sfi, 
sfi_ödúe˘
, i)

	)

106 
	#SET_I
(
sfi
, 
i
Ë
	`SET1_x
(sfi, 
sfi_ödúe˘
, i)

	)

108 
	#GET_I
(
sfi
, 
i
Ë
	`GETN_x
(sfi, 
sfi_ödúe˘
, i)

	)

109 
	#SET_I
(
sfi
, 
i
Ë
	`SETN_x
(sfi, 
sfi_ödúe˘
, i)

	)

112 #i‡
NUM_II
 == 0

113 
	#GET_II
(
sfi
, 
i
Ë
	`GET0_x
(sfi, 
sfi_dödúe˘
, i)

	)

114 
	#SET_II
(
sfi
, 
i
Ë
	`SET0_x
(sfi, 
sfi_dödúe˘
, i)

	)

115 #ñi‡
NUM_II
 == 1

116 
	#GET_II
(
sfi
, 
i
Ë
	`GET1_x
(sfi, 
sfi_dödúe˘
, i)

	)

117 
	#SET_II
(
sfi
, 
i
Ë
	`SET1_x
(sfi, 
sfi_dödúe˘
, i)

	)

119 
	#GET_II
(
sfi
, 
i
Ë
	`GETN_x
(sfi, 
sfi_dödúe˘
, i)

	)

120 
	#SET_II
(
sfi
, 
i
Ë
	`SETN_x
(sfi, 
sfi_dödúe˘
, i)

	)

123 #i‡
NUM_III
 == 0

124 
	#GET_III
(
sfi
, 
i
Ë
	`GET0_x
(sfi, 
sfi_tödúe˘
, i)

	)

125 
	#SET_III
(
sfi
, 
i
Ë
	`SET0_x
(sfi, 
sfi_tödúe˘
, i)

	)

126 #ñi‡
NUM_III
 == 1

127 
	#GET_III
(
sfi
, 
i
Ë
	`GET1_x
(sfi, 
sfi_tödúe˘
, i)

	)

128 
	#SET_III
(
sfi
, 
i
Ë
	`SET1_x
(sfi, 
sfi_tödúe˘
, i)

	)

130 
	#GET_III
(
sfi
, 
i
Ë
	`GETN_x
(sfi, 
sfi_tödúe˘
, i)

	)

131 
	#SET_III
(
sfi
, 
i
Ë
	`SETN_x
(sfi, 
sfi_tödúe˘
, i)

	)

136 
	#GET0_x
(
sfi
, 
fõld
, 
i
Ë(()(i), ()(sfi), 0)

	)

137 
	#GET1_x
(
sfi
, 
fõld
, 
i
Ë(()(i), (sfi)->fõld)

	)

138 
	#GETN_x
(
sfi
, 
fõld
, 
i
Ë((sfi)->fõld[(i)])

	)

140 
	#SET0_x
(
sfi
, 
fõld
, 
i
Ë(*(()(i), ()(sfi), (
uöt32_t
 *)
NULL
))

	)

141 
	#SET1_x
(
sfi
, 
fõld
, 
i
Ë(*(()(i), &(sfi)->fõld))

	)

142 
	#SETN_x
(
sfi
, 
fõld
, 
i
Ë((sfi)->fõld[(i)])

	)

146 
	#RANGE_D
 1

	)

147 
	#RANGE_I
 (
RANGE_D
 * 
SFS_DBPERIDB
)

	)

148 
	#RANGE_II
 (
RANGE_I
 * 
SFS_DBPERIDB
)

	)

149 
	#RANGE_III
 (
RANGE_II
 * 
SFS_DBPERIDB
)

	)

153 
	#INOMAX_D
 
NUM_D


	)

154 
	#INOMAX_I
 (
INOMAX_D
 + 
SFS_DBPERIDB
 * 
NUM_I
)

	)

155 
	#INOMAX_II
 (
INOMAX_I
 + 
SFS_DBPERIDB
 * 
NUM_II
)

	)

156 
	#INOMAX_III
 (
INOMAX_II
 + 
SFS_DBPERIDB
 * 
NUM_III
)

	)

	@userland/sbin/sfsck/inode.c

30 
	~<°döt.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<as£π.h
>

34 
	~<îr.h
>

36 
	~"com∑t.h
"

37 
	~<kîn/sfs.h
>

39 
	~"utûs.h
"

40 
	~"sfs.h
"

41 
	~"‰ìm≠.h
"

42 
	~"öode.h
"

43 
	~"maö.h
"

49 
	söodeöfo
 {

50 
uöt32_t
 
	möo
;

51 
uöt32_t
 
	mlökcou¡
;

52 
	mvisôed
;

53 
	mty≥
;

57 
öodeöfo
 *
	göodes
 = 
NULL
;

58 
	gnöodes
 = 0, 
	gmaxöodes
 = 0;

61 
	göodes_s‹ãd
 = 0;

71 
	$öode_addèbÀ
(
uöt32_t
 
öo
, 
ty≥
)

73 
√wmax
;

75 
	`as£π
(
nöodes
 <
maxöodes
);

76 i‡(
nöodes
 =
maxöodes
) {

77 
√wmax
 = 
maxöodes
 ? maxinodes * 2 : 4;

78 
öodes
 = 
	`d‹óŒoc
(öodes, 
maxöodes
 * (inodes[0]),

79 
√wmax
 * (
öodes
[0]));

80 
maxöodes
 = 
√wmax
;

82 
öodes
[
nöodes
].
öo
 = ino;

83 
öodes
[
nöodes
].
lökcou¡
 = 0;

84 
öodes
[
nöodes
].
visôed
 = 0;

85 
öodes
[
nöodes
].
ty≥
 =Åype;

86 
nöodes
++;

87 
öodes_s‹ãd
 = 0;

88 
	}
}

95 
	$öode_com∑ª
(c⁄° *
av
, c⁄° *
bv
)

97 c⁄° 
öodeöfo
 *
a
 = 
av
;

98 c⁄° 
öodeöfo
 *
b
 = 
bv
;

100 i‡(
a
->
öo
 < 
b
->ino) {

103 i‡(
a
->
öo
 > 
b
->ino) {

112 
	`as£π
(
av
 =
bv
);

114 
	}
}

120 
	$öode_s‹âabÀ
()

122 
	`qs‹t
(
öodes
, 
nöodes
, (öodes[0]), 
öode_com∑ª
);

123 
öodes_s‹ãd
 = 1;

124 
	}
}

136 
öodeöfo
 *

137 
	$öode_föd
(
uöt32_t
 
öo
)

139 
mö
, 
max
, 
i
;

141 
	`as£π
(
öodes_s‹ãd
);

142 
	`as£π
(
nöodes
 > 0);

144 
mö
 = 0;

145 
max
 = 
nöodes
;

147 
	`as£π
(
mö
 <
max
);

148 i‡(
mö
 =
max
) {

149 
	`îrx
(
EXIT_UNRECOV
, "FATAL: inodê%u wa¢'àfound i¿my inodêèbÀ", 
öo
);

151 
i
 = 
mö
 + (
max
 - min)/2;

152 i‡(
öodes
[
i
].
öo
 < ino) {

153 
mö
 = 
i
 + 1;

155 i‡(
öodes
[
i
].
öo
 > ino) {

156 
max
 = 
i
;

159 
	`as£π
(
öodes
[
i
].
öo
 == ino);

160  &
öodes
[
i
];

164 
	}
}

177 
	$öode_add
(
uöt32_t
 
öo
, 
ty≥
)

179 
i
;

181 
i
=0; i<
nöodes
; i++) {

182 i‡(
öodes
[
i
].
öo
==ino) {

183 
	`as£π
(
öodes
[
i
].
lökcou¡
 == 0);

184 
	`as£π
(
öodes
[
i
].
ty≥
 ==Åype);

189 
	`öode_addèbÀ
(
öo
, 
ty≥
);

192 
	}
}

202 
	$öode_visôdú
(
uöt32_t
 
öo
)

204 
öodeöfo
 *
öf
;

206 
öf
 = 
	`öode_föd
(
öo
);

207 
	`as£π
(
öf
->
ty≥
 =
SFS_TYPE_DIR
);

208 
	`as£π
(
öf
->
lökcou¡
 == 0);

209 i‡(
öf
->
visôed
) {

212 
öf
->
visôed
 = 1;

214 
	}
}

222 
	$öode_addlök
(
uöt32_t
 
öo
)

224 
öodeöfo
 *
öf
;

226 
öf
 = 
	`öode_föd
(
öo
);

227 
	`as£π
(
öf
->
ty≥
 =
SFS_TYPE_FILE
);

228 
	`as£π
(
öf
->
visôed
 == 0);

229 
öf
->
lökcou¡
++;

230 
	}
}

237 
	$öode_adju°_fûñöks
()

239 
sfs_döode
 
sfi
;

240 
i
;

242 
i
=0; i<
nöodes
; i++) {

243 i‡(
öodes
[
i
].
ty≥
 =
SFS_TYPE_DIR
) {

247 
	`as£π
(
öodes
[
i
].
ty≥
 =
SFS_TYPE_FILE
);

250 
	`as£π
(
öodes
[
i
].
lökcou¡
 > 0);

252 
	`sfs_ªadöode
(
öodes
[
i
].
öo
, &
sfi
);

253 
	`as£π
(
sfi
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

255 i‡(
sfi
.
sfi_lökcou¡
 !
öodes
[
i
].
lökcou¡
) {

256 
	`w¨nx
("File %luÜink count %lu should be %lu (fixed)",

257 (Ë
öodes
[
i
].
öo
,

258 (Ë
sfi
.
sfi_lökcou¡
,

259 (Ë
öodes
[
i
].
lökcou¡
);

260 
sfi
.
sfi_lökcou¡
 = 
öodes
[
i
].
lökcou¡
;

261 
	`£tbad√ss
(
EXIT_RECOV
);

262 
	`sfs_wrôeöode
(
öodes
[
i
].
öo
, &
sfi
);

265 
	}
}

	@userland/sbin/sfsck/inode.h

30 #i‚de‡
INODE_H


31 
	#INODE_H


	)

40 
öode_add
(
uöt32_t
 
öo
, 
ty≥
);

43 
öode_s‹âabÀ
();

50 
öode_visôdú
(
uöt32_t
 
öo
);

56 
öode_addlök
(
uöt32_t
 
öo
);

62 
öode_adju°_fûñöks
();

	@userland/sbin/sfsck/main.c

30 
	~<as£π.h
>

31 
	~<°döt.h
>

32 
	~<°dio.h
>

33 
	~<îr.h
>

35 
	~"com∑t.h
"

37 
	~"disk.h
"

38 
	~"sfs.h
"

39 
	~"sb.h
"

40 
	~"‰ìm≠.h
"

41 
	~"öode.h
"

42 
	~"∑s£s.h
"

43 
	~"maö.h
"

45 
	gbad√ss
=0;

54 
	$£tbad√ss
(
code
)

56 i‡(
bad√ss
 < 
code
) {

57 
bad√ss
 = 
code
;

59 
	}
}

65 
	$maö
(
¨gc
, **
¨gv
)

67 #ifde‡
HOST


68 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

72 i‡(
¨gc
!=2) {

73 
	`îrx
(
EXIT_USAGE
, "Usage: sfsck device/diskfile");

76 
	`›ídisk
(
¨gv
[1]);

78 
	`sfs_£tup
();

79 
	`sb_lﬂd
();

80 
	`sb_check
();

81 
	`‰ìm≠_£tup
();

83 
	`¥ötf
("Phase 1 -- check blocksánd sizes\n");

84 
	`∑ss1
();

85 
	`‰ìm≠_check
();

87 
	`¥ötf
("Phase 2 -- check directoryÅree\n");

88 
	`öode_s‹âabÀ
();

89 
	`∑ss2
();

91 
	`¥ötf
("Phase 3 -- checkÑeference counts\n");

92 
	`öode_adju°_fûñöks
();

94 
	`˛o£disk
();

96 
	`w¨nx
("%lu blocks used (of %lu); %lu directories; %lu files",

97 
	`‰ìm≠_blocksu£d
(), ()
	`sb_tŸÆblocks
(),

98 
	`∑ss1_founddús
(), 
	`∑ss1_foundfûes
());

100 
bad√ss
) {

101 
EXIT_USAGE
:

102 
EXIT_FATAL
:

105 
	`as£π
(0);

107 
EXIT_UNRECOV
:

108 
	`w¨nx
("WARNING - unrecoverableÉrrors. MaybeÅryágain?");

110 
EXIT_RECOV
:

111 
	`w¨nx
("Caution - filesystem modified. Runágain forÜuck.");

113 
EXIT_CLEAN
:

117  
bad√ss
;

118 
	}
}

	@userland/sbin/sfsck/main.h

30 #i‚de‡
MAIN_H


31 
	#MAIN_H


	)

40 
	#EXIT_USAGE
 4

	)

41 
	#EXIT_FATAL
 3

	)

42 
	#EXIT_UNRECOV
 2

	)

43 
	#EXIT_RECOV
 1

	)

44 
	#EXIT_CLEAN
 0

	)

46 
£tbad√ss
(
code
);

	@userland/sbin/sfsck/pass1.c

30 
	~<°döt.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<as£π.h
>

35 
	~<îr.h
>

37 
	~"com∑t.h
"

38 
	~<kîn/sfs.h
>

40 
	~"disk.h
"

41 
	~"utûs.h
"

42 
	~"ibma¸os.h
"

43 
	~"sfs.h
"

44 
	~"sb.h
"

45 
	~"‰ìm≠.h
"

46 
	~"öode.h
"

47 
	~"∑s£s.h
"

48 
	~"maö.h
"

50 
	gcou¡_dús
=0, 
	gcou¡_fûes
=0;

55 
	sib°©e
 {

56 
uöt32_t
 
	möo
;

57 
uöt32_t
 
	mcurfûeblock
;

58 
uöt32_t
 
	mfûeblocks
;

59 
uöt32_t
 
	mvﬁblocks
;

60 
	m∑°eofcou¡
;

61 
blockußge_t
 
	mußgëy≥
;

81 
	$check_ödúe˘_block
(
ib°©e
 *
ibs
, 
uöt32_t
 *
õ¡ry
, *
õch™gedp
,

82 
ödúe˘i⁄
)

84 
uöt32_t
 
íåõs
[
SFS_DBPERIDB
];

85 
uöt32_t
 
i
, 
˘
;

86 
uöt32_t
 
covîedblocks
;

87 
loˇlch™ged
 = 0;

88 
j
;

90 i‡(*
õ¡ry
 > 0 && *õ¡ry < 
ibs
->
vﬁblocks
) {

91 
	`sfs_ªadödúe˘
(*
õ¡ry
, 
íåõs
);

92 
	`‰ìm≠_blocköu£
(*
õ¡ry
, 
B_IBLOCK
, 
ibs
->
öo
);

95 i‡(*
õ¡ry
 >
ibs
->
vﬁblocks
) {

96 
	`£tbad√ss
(
EXIT_RECOV
);

97 
	`w¨nx
("Inode %lu: indirect blockÖointer (level %d) "

100 ()
ibs
->
öo
, 
ödúe˘i⁄
,

101 ()
ibs
->
curfûeblock
,

102 ()*
õ¡ry
);

103 *
õ¡ry
 = 0;

104 *
õch™gedp
 = 1;

106 
covîedblocks
 = 1;

107 
j
=0; j<
ödúe˘i⁄
; j++) {

108 
covîedblocks
 *
SFS_DBPERIDB
;

110 
ibs
->
curfûeblock
 +
covîedblocks
;

114 i‡(
ödúe˘i⁄
 > 1) {

115 
i
=0; i<
SFS_DBPERIDB
; i++) {

116 
	`check_ödúe˘_block
(
ibs
, &
íåõs
[
i
], &
loˇlch™ged
,

117 
ödúe˘i⁄
-1);

121 
	`as£π
(
ödúe˘i⁄
==1);

123 
i
=0; i<
SFS_DBPERIDB
; i++) {

124 i‡(
íåõs
[
i
] >
ibs
->
vﬁblocks
) {

125 
	`£tbad√ss
(
EXIT_RECOV
);

126 
	`w¨nx
("Inode %lu: direct blockÖointer for "

129 ()
ibs
->
öo
,

130 ()
ibs
->
curfûeblock
,

131 ()
íåõs
[
i
]);

132 
íåõs
[
i
] = 0;

133 
loˇlch™ged
 = 1;

135 i‡(
íåõs
[
i
] != 0) {

136 i‡(
ibs
->
curfûeblock
 < ibs->
fûeblocks
) {

137 
	`‰ìm≠_blocköu£
(
íåõs
[
i
],

138 
ibs
->
ußgëy≥
,

139 
ibs
->
öo
);

142 
	`£tbad√ss
(
EXIT_RECOV
);

143 
ibs
->
∑°eofcou¡
++;

144 
	`‰ìm≠_block‰ì
(
íåõs
[
i
]);

145 
íåõs
[
i
] = 0;

146 
loˇlch™ged
 = 1;

149 
ibs
->
curfûeblock
++;

153 
˘
=0;

154 
i
=
˘
=0; i<
SFS_DBPERIDB
; i++) {

155 i‡(
íåõs
[
i
]!=0Ë
˘
++;

157 i‡(
˘
==0) {

158 i‡(*
õ¡ry
 != 0) {

159 
	`£tbad√ss
(
EXIT_RECOV
);

162 *
õch™gedp
 = 1;

163 
	`‰ìm≠_block‰ì
(*
õ¡ry
);

164 *
õ¡ry
 = 0;

168 
	`as£π
(*
õ¡ry
 != 0);

169 i‡(
loˇlch™ged
) {

170 
	`sfs_wrôeödúe˘
(*
õ¡ry
, 
íåõs
);

173 
	}
}

185 
	$check_öode_blocks
(
uöt32_t
 
öo
, 
sfs_döode
 *
sfi
, 
isdú
)

187 
ib°©e
 
ibs
;

188 
uöt32_t
 
size
, 
d©ablock
;

189 
ch™ged
;

190 
i
;

192 
size
 = 
	`SFS_ROUNDUP
(
sfi
->
sfi_size
, 
SFS_BLOCKSIZE
);

194 
ibs
.
öo
 = ino;

196 
ibs
.
fûeblocks
 = 
size
/
SFS_BLOCKSIZE
;

197 
ibs
.
vﬁblocks
 = 
	`sb_tŸÆblocks
();

198 
ibs
.
∑°eofcou¡
 = 0;

199 
ibs
.
ußgëy≥
 = 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
;

201 
ch™ged
 = 0;

203 
ibs
.
curfûeblock
=0; ibs.curfûeblock<
NUM_D
; ibs.curfileblock++) {

204 
d©ablock
 = 
	`GET_D
(
sfi
, 
ibs
.
curfûeblock
);

205 i‡(
d©ablock
 >
ibs
.
vﬁblocks
) {

206 
	`£tbad√ss
(
EXIT_RECOV
);

207 
	`w¨nx
("Inode %lu: direct blockÖointer for "

210 ()
ibs
.
öo
,

211 ()
ibs
.
curfûeblock
,

212 ()
d©ablock
);

213 
	`SET_D
(
sfi
, 
ibs
.
curfûeblock
) = 0;

214 
ch™ged
 = 1;

216 i‡(
d©ablock
 > 0) {

217 i‡(
ibs
.
curfûeblock
 < ibs.
fûeblocks
) {

218 
	`‰ìm≠_blocköu£
(
d©ablock
, 
ibs
.
ußgëy≥
,

219 
ibs
.
öo
);

222 
	`£tbad√ss
(
EXIT_RECOV
);

223 
ibs
.
∑°eofcou¡
++;

224 
ch™ged
 = 1;

225 
	`‰ìm≠_block‰ì
(
d©ablock
);

226 
	`SET_D
(
sfi
, 
ibs
.
curfûeblock
) = 0;

231 
i
=0; i<
NUM_I
; i++) {

232 
	`check_ödúe˘_block
(&
ibs
, &
	`SET_I
(
sfi
, 
i
), &
ch™ged
, 1);

234 
i
=0; i<
NUM_II
; i++) {

235 
	`check_ödúe˘_block
(&
ibs
, &
	`SET_II
(
sfi
, 
i
), &
ch™ged
, 2);

237 
i
=0; i<
NUM_III
; i++) {

238 
	`check_ödúe˘_block
(&
ibs
, &
	`SET_III
(
sfi
, 
i
), &
ch™ged
, 3);

241 i‡(
ibs
.
∑°eofcou¡
 > 0) {

242 
	`w¨nx
("Inode %lu: %u blocksáfter EOF (freed)",

243 (Ë
ibs
.
öo
, ibs.
∑°eofcou¡
);

244 
	`£tbad√ss
(
EXIT_RECOV
);

247  
ch™ged
;

248 
	}
}

260 
	$∑ss1_öode
(
uöt32_t
 
öo
, 
sfs_döode
 *
sfi
, 
Æªadych™ged
)

262 
ch™ged
 = 
Æªadych™ged
;

263 
isdú
 = 
sfi
->
sfi_ty≥
 =
SFS_TYPE_DIR
;

265 i‡(
	`öode_add
(
öo
, 
sfi
->
sfi_ty≥
)) {

267 
	`as£π
(
ch™ged
 == 0);

271 
	`‰ìm≠_blocköu£
(
öo
, 
B_INODE
, ino);

273 i‡(
	`checkzî€d
(
sfi
->
sfi_wa°e
, (sfi->sfi_waste))) {

274 
	`w¨nx
("Inode %lu: sfi_waste sectionÇot zeroed (fixed)",

275 (Ë
öo
);

276 
	`£tbad√ss
(
EXIT_RECOV
);

277 
ch™ged
 = 1;

280 i‡(
	`check_öode_blocks
(
öo
, 
sfi
, 
isdú
)) {

281 
ch™ged
 = 1;

284 i‡(
ch™ged
) {

285 
	`sfs_wrôeöode
(
öo
, 
sfi
);

288 
	}
}

296 
	$∑ss1_dúíåy
(c⁄° *
∑th
, 
uöt32_t
 
ödex
, 
sfs_dúíåy
 *
sfd
)

298 
dch™ged
 = 0;

299 
uöt32_t
 
nblocks
;

301 
nblocks
 = 
	`sb_tŸÆblocks
();

303 i‡(
sfd
->
sfd_öo
 =
SFS_NOINO
) {

304 i‡(
sfd
->
sfd_«me
[0] != 0) {

305 
	`£tbad√ss
(
EXIT_RECOV
);

306 
	`w¨nx
("Directory %sÉntry %lu hasÇame butÇo file",

307 
∑th
, (Ë
ödex
);

308 
sfd
->
sfd_«me
[0] = 0;

309 
dch™ged
 = 1;

312 i‡(
sfd
->
sfd_öo
 >
nblocks
) {

313 
	`£tbad√ss
(
EXIT_RECOV
);

314 
	`w¨nx
("Directory %sÉntry %lu has out ofÑange "

316 
∑th
, (Ë
ödex
);

317 
sfd
->
sfd_öo
 = 
SFS_NOINO
;

318 
sfd
->
sfd_«me
[0] = 0;

319 
dch™ged
 = 1;

322 i‡(
sfd
->
sfd_«me
[0] == 0) {

324 
	`¢¥ötf
(
sfd
->
sfd_«me
, (sfd->sfd_name),

326 (Ë
sfd
->
sfd_öo
,

327 (Ë
	`uniqueid
());

328 
	`£tbad√ss
(
EXIT_RECOV
);

329 
	`w¨nx
("Directory %sÉntry %lu has file but "

331 
∑th
, (Ë
ödex
,

332 
sfd
->
sfd_«me
);

333 
dch™ged
 = 1;

335 i‡(
	`checknuŒ°rög
(
sfd
->
sfd_«me
, (sfd->sfd_name))) {

336 
	`£tbad√ss
(
EXIT_RECOV
);

337 
	`w¨nx
("Directory %sÉntry %luÇot "

339 
∑th
, (Ë
ödex
);

340 
dch™ged
 = 1;

342 i‡(
	`checkbad°rög
(
sfd
->
sfd_«me
)) {

343 
	`£tbad√ss
(
EXIT_RECOV
);

344 
	`w¨nx
("Directory %sÉntry %lu contains invalid "

346 
∑th
, (Ë
ödex
);

347 
dch™ged
 = 1;

350  
dch™ged
;

351 
	}
}

360 
	$∑ss1_dú
(
uöt32_t
 
öo
, c⁄° *
∑thsoÁr
)

362 
sfs_döode
 
sfi
;

363 
sfs_dúíåy
 *
dúíåõs
;

364 
uöt32_t
 
ndúíåõs
, 
i
;

365 
ich™ged
=0, 
dch™ged
=0;

367 
	`sfs_ªadöode
(
öo
, &
sfi
);

369 i‡(
sfi
.
sfi_size
 % (
sfs_dúíåy
) != 0) {

370 
	`£tbad√ss
(
EXIT_RECOV
);

371 
	`w¨nx
("Directory %s has illegal size %lu (fixed)",

372 
∑thsoÁr
, (Ë
sfi
.
sfi_size
);

373 
sfi
.
sfi_size
 = 
	`SFS_ROUNDUP
(sfi.sfi_size,

374 (
sfs_dúíåy
));

375 
ich™ged
 = 1;

377 
cou¡_dús
++;

379 i‡(
	`∑ss1_öode
(
öo
, &
sfi
, 
ich™ged
)) {

384 
ndúíåõs
 = 
sfi
.
sfi_size
/(
sfs_dúíåy
);

385 
dúíåõs
 = 
	`domÆloc
(
sfi
.
sfi_size
);

387 
	`sfs_ªaddú
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

389 
i
=0; i<
ndúíåõs
; i++) {

390 i‡(
	`∑ss1_dúíåy
(
∑thsoÁr
, 
i
, &
dúíåõs
[i])) {

391 
dch™ged
 = 1;

395 
i
=0; i<
ndúíåõs
; i++) {

396 i‡(
dúíåõs
[
i
].
sfd_öo
 =
SFS_NOINO
) {

399 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, ".")) {

402 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, "..")) {

406 
∑th
[
	`°æí
(
∑thsoÁr
)+
SFS_NAMELEN
+1];

407 
sfs_döode
 
subsfi
;

408 
uöt32_t
 
suböo
;

410 
suböo
 = 
dúíåõs
[
i
].
sfd_öo
;

411 
	`sfs_ªadöode
(
suböo
, &
subsfi
);

412 
	`¢¥ötf
(
∑th
, (path), "%s/%s",

413 
∑thsoÁr
, 
dúíåõs
[
i
].
sfd_«me
);

415 
subsfi
.
sfi_ty≥
) {

416 
SFS_TYPE_FILE
:

417 i‡(
	`∑ss1_öode
(
suböo
, &
subsfi
, 0)) {

421 
cou¡_fûes
++;

423 
SFS_TYPE_DIR
:

424 
	`∑ss1_dú
(
suböo
, 
∑th
);

427 
	`£tbad√ss
(
EXIT_RECOV
);

428 
	`w¨nx
("Object %s: Invalid inodeÅype "

429 "‘emoved)", 
∑th
);

430 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

431 
dúíåõs
[
i
].
sfd_«me
[0] = 0;

432 
dch™ged
 = 1;

438 i‡(
dch™ged
) {

439 
	`sfs_wrôedú
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

442 
	`‰ì
(
dúíåõs
);

443 
	}
}

450 
	$∑ss1_roŸdú
()

452 
sfs_döode
 
sfi
;

453 
∑th
[
SFS_VOLNAME_SIZE
 + 2];

455 
	`sfs_ªadöode
(
SFS_ROOTDIR_INO
, &
sfi
);

457 
sfi
.
sfi_ty≥
) {

458 
SFS_TYPE_DIR
:

460 
SFS_TYPE_FILE
:

461 
	`w¨nx
("Root directory inode isáÑegular file (fixed)");

462 
fix
;

464 
	`w¨nx
("Root directory inode has invalidÅype %lu (fixed)",

465 (Ë
sfi
.
sfi_ty≥
);

466 
fix
:

467 
	`£tbad√ss
(
EXIT_RECOV
);

468 
sfi
.
sfi_ty≥
 = 
SFS_TYPE_DIR
;

469 
	`sfs_wrôeöode
(
SFS_ROOTDIR_INO
, &
sfi
);

473 
	`¢¥ötf
(
∑th
, ’©h), "%s:", 
	`sb_vﬁ«me
());

474 
	`∑ss1_dú
(
SFS_ROOTDIR_INO
, 
∑th
);

475 
	}
}

481 
	$∑ss1
()

483 
	`∑ss1_roŸdú
();

484 
	}
}

487 
	$∑ss1_founddús
()

489  
cou¡_dús
;

490 
	}
}

493 
	$∑ss1_foundfûes
()

495  
cou¡_fûes
;

496 
	}
}

	@userland/sbin/sfsck/pass2.c

30 
	~<°döt.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<as£π.h
>

35 
	~<îr.h
>

37 
	~"com∑t.h
"

38 
	~<kîn/sfs.h
>

40 
	~"disk.h
"

41 
	~"utûs.h
"

42 
	~"ibma¸os.h
"

43 
	~"sfs.h
"

44 
	~"sb.h
"

45 
	~"‰ìm≠.h
"

46 
	~"öode.h
"

47 
	~"∑s£s.h
"

48 
	~"maö.h
"

63 
	$∑ss2_dú
(
uöt32_t
 
öo
, uöt32_à
∑ª¡öo
, c⁄° *
∑thsoÁr
)

65 
sfs_döode
 
sfi
;

66 
sfs_dúíåy
 *
dúíåõs
;

67 *
s‹tve˘‹
;

68 
uöt32_t
 
dúsize
, 
ndúíåõs
, 
maxdúíåõs
, 
subdúcou¡
, 
i
;

69 
ich™ged
=0, 
dch™ged
=0, 
dŸ£í
=0, 
dŸdŸ£í
=0;

71 i‡(
	`öode_visôdú
(
öo
)) {

77 
	`sfs_ªadöode
(
öo
, &
sfi
);

85 
ndúíåõs
 = 
sfi
.
sfi_size
/(
sfs_dúíåy
);

86 
maxdúíåõs
 = 
	`SFS_ROUNDUP
(
ndúíåõs
,

87 
SFS_BLOCKSIZE
/(
sfs_dúíåy
));

88 
dúsize
 = 
maxdúíåõs
 * (
sfs_dúíåy
);

89 
dúíåõs
 = 
	`domÆloc
(
dúsize
);

91 
s‹tve˘‹
 = 
	`domÆloc
(
ndúíåõs
 * ());

93 
	`sfs_ªaddú
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

94 
i
=
ndúíåõs
; i<
maxdúíåõs
; i++) {

95 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

96 
	`bzîo
(
dúíåõs
[
i
].
sfd_«me
, (direntries[i].sfd_name));

103 
	`sfsdú_s‹t
(
dúíåõs
, 
ndúíåõs
, 
s‹tve˘‹
);

106 
i
=0; i+1<
ndúíåõs
; i++) {

107 
sfs_dúíåy
 *
d1
 = &
dúíåõs
[
s‹tve˘‹
[
i
]];

108 
sfs_dúíåy
 *
d2
 = &
dúíåõs
[
s‹tve˘‹
[
i
+1]];

109 
	`as£π
(
d1
 !
d2
);

111 i‡(
d1
->
sfd_öo
 =
SFS_NOINO
 || 
d2
->sfd_ino == SFS_NOINO) {

116 i‡(!
	`°rcmp
(
d1
->
sfd_«me
, 
d2
->sfd_name)) {

117 i‡(
d1
->
sfd_öo
 =
d2
->sfd_ino) {

118 
	`£tbad√ss
(
EXIT_RECOV
);

119 
	`w¨nx
("Directory %s: DuplicateÉntries for "

121 
∑thsoÁr
, 
d1
->
sfd_«me
);

122 
d1
->
sfd_öo
 = 
SFS_NOINO
;

123 
d1
->
sfd_«me
[0] = 0;

127 
	`¢¥ötf
(
d1
->
sfd_«me
, (d1->sfd_name),

129 (Ë
d1
->
sfd_öo
,

130 (Ë
	`uniqueid
());

131 
	`£tbad√ss
(
EXIT_RECOV
);

132 
	`w¨nx
("Directory %s: DuplicateÇames %s "

134 
∑thsoÁr
, 
d2
->
sfd_«me
, 
d1
->sfd_name);

136 
dch™ged
 = 1;

144 
i
=0; i<
ndúíåõs
; i++) {

145 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, ".")) {

146 i‡(
dúíåõs
[
i
].
sfd_öo
 !
öo
) {

147 
	`£tbad√ss
(
EXIT_RECOV
);

148 
	`w¨nx
("Directory %s: Incorrect `.'Éntry "

149 "(fixed)", 
∑thsoÁr
);

150 
dúíåõs
[
i
].
sfd_öo
 = 
öo
;

151 
dch™ged
 = 1;

154 
	`as£π
(
dŸ£í
==0);

155 
dŸ£í
 = 1;

157 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, "..")) {

158 i‡(
dúíåõs
[
i
].
sfd_öo
 !
∑ª¡öo
) {

159 
	`£tbad√ss
(
EXIT_RECOV
);

160 
	`w¨nx
("Directory %s: Incorrect `..'Éntry "

161 "(fixed)", 
∑thsoÁr
);

162 
dúíåõs
[
i
].
sfd_öo
 = 
∑ª¡öo
;

163 
dch™ged
 = 1;

166 
	`as£π
(
dŸdŸ£í
==0);

167 
dŸdŸ£í
 = 1;

175 i‡(!
dŸ£í
) {

176 i‡(
	`sfsdú_åyadd
(
dúíåõs
, 
ndúíåõs
, ".", 
öo
)==0) {

177 
	`£tbad√ss
(
EXIT_RECOV
);

178 
	`w¨nx
("Directory %s: No `.'Éntry (added)",

179 
∑thsoÁr
);

180 
dch™ged
 = 1;

182 i‡(
	`sfsdú_åyadd
(
dúíåõs
, 
maxdúíåõs
, ".",

183 
öo
)==0) {

184 
	`£tbad√ss
(
EXIT_RECOV
);

185 
	`w¨nx
("Directory %s: No `.'Éntry (added)",

186 
∑thsoÁr
);

187 
ndúíåõs
++;

188 
dch™ged
 = 1;

189 
sfi
.
sfi_size
 +(
sfs_dúíåy
);

190 
ich™ged
 = 1;

193 
	`£tbad√ss
(
EXIT_UNRECOV
);

194 
	`w¨nx
("Directory %s: No `.'Éntry (NOT FIXED)",

195 
∑thsoÁr
);

203 i‡(!
dŸdŸ£í
) {

204 i‡(
	`sfsdú_åyadd
(
dúíåõs
, 
ndúíåõs
, "..",

205 
∑ª¡öo
)==0) {

206 
	`£tbad√ss
(
EXIT_RECOV
);

207 
	`w¨nx
("Directory %s: No `..'Éntry (added)",

208 
∑thsoÁr
);

209 
dch™ged
 = 1;

211 i‡(
	`sfsdú_åyadd
(
dúíåõs
, 
maxdúíåõs
, "..",

212 
∑ª¡öo
)==0) {

213 
	`£tbad√ss
(
EXIT_RECOV
);

214 
	`w¨nx
("Directory %s: No `..'Éntry (added)",

215 
∑thsoÁr
);

216 
ndúíåõs
++;

217 
dch™ged
 = 1;

218 
sfi
.
sfi_size
 +(
sfs_dúíåy
);

219 
ich™ged
 = 1;

222 
	`£tbad√ss
(
EXIT_UNRECOV
);

223 
	`w¨nx
("Directory %s: No `..'Éntry (NOT FIXED)",

224 
∑thsoÁr
);

236 
subdúcou¡
=0;

237 
i
=0; i<
ndúíåõs
; i++) {

238 i‡(
dúíåõs
[
i
].
sfd_öo
 =
SFS_NOINO
) {

241 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, ".")) {

244 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, "..")) {

248 
∑th
[
	`°æí
(
∑thsoÁr
)+
SFS_NAMELEN
+1];

249 
sfs_döode
 
subsfi
;

251 
	`sfs_ªadöode
(
dúíåõs
[
i
].
sfd_öo
, &
subsfi
);

252 
	`¢¥ötf
(
∑th
, (path), "%s/%s",

253 
∑thsoÁr
, 
dúíåõs
[
i
].
sfd_«me
);

255 
subsfi
.
sfi_ty≥
) {

256 
SFS_TYPE_FILE
:

257 
	`öode_addlök
(
dúíåõs
[
i
].
sfd_öo
);

259 
SFS_TYPE_DIR
:

260 i‡(
	`∑ss2_dú
(
dúíåõs
[
i
].
sfd_öo
,

261 
öo
,

262 
∑th
)) {

263 
	`£tbad√ss
(
EXIT_RECOV
);

264 
	`w¨nx
("Directory %s: CrosslinkÅo "

266 
∑th
);

267 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

268 
dúíåõs
[
i
].
sfd_«me
[0] = 0;

269 
dch™ged
 = 1;

272 
subdúcou¡
++;

276 
	`£tbad√ss
(
EXIT_RECOV
);

277 
	`w¨nx
("Object %s: Invalid inodeÅype "

278 "‘emoved)", 
∑th
);

279 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

280 
dúíåõs
[
i
].
sfd_«me
[0] = 0;

281 
dch™ged
 = 1;

291 i‡(
sfi
.
sfi_lökcou¡
 !
subdúcou¡
+2) {

292 
	`£tbad√ss
(
EXIT_RECOV
);

293 
	`w¨nx
("Directory %s: Link count %lu should be %lu (fixed)",

294 
∑thsoÁr
, (Ë
sfi
.
sfi_lökcou¡
,

295 (Ë
subdúcou¡
+2);

296 
sfi
.
sfi_lökcou¡
 = 
subdúcou¡
+2;

297 
ich™ged
 = 1;

304 i‡(
dch™ged
) {

305 
	`sfs_wrôedú
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

308 i‡(
ich™ged
) {

309 
	`sfs_wrôeöode
(
öo
, &
sfi
);

312 
	`‰ì
(
dúíåõs
);

313 
	`‰ì
(
s‹tve˘‹
);

316 
	}
}

319 
	$∑ss2
()

321 
∑th
[
SFS_VOLNAME_SIZE
 + 2];

323 
	`¢¥ötf
(
∑th
, ’©h), "%s:", 
	`sb_vﬁ«me
());

324 
	`∑ss2_dú
(
SFS_ROOTDIR_INO
, SFS_ROOTDIR_INO, 
∑th
);

325 
	}
}

	@userland/sbin/sfsck/passes.h

30 #i‚de‡
PASSES_H


31 
	#PASSES_H


	)

44 
∑ss1
();

45 
∑ss2
();

48 
∑ss1_founddús
();

49 
∑ss1_foundfûes
();

	@userland/sbin/sfsck/sb.c

30 
	~<sys/ty≥s.h
>

31 
	~<limôs.h
>

32 
	~<°döt.h
>

33 
	~<as£π.h
>

34 
	~<îr.h
>

36 
	~"com∑t.h
"

37 
	~<kîn/sfs.h
>

39 
	~"utûs.h
"

40 
	~"sfs.h
"

41 
	~"sb.h
"

42 
	~"‰ìm≠.h
"

43 
	~"maö.h
"

45 
sfs_su≥rblock
 
	gsb
;

51 
	$sb_lﬂd
()

53 
	`sfs_ªadsb
(
SFS_SUPER_BLOCK
, &
sb
);

54 i‡(
sb
.
sb_magic
 !
SFS_MAGIC
) {

55 
	`îrx
(
EXIT_FATAL
, "Notán sfs filesystem");

58 
	`as£π
(
sb
.
sb_nblocks
 > 0);

59 
	`as£π
(
	`SFS_FREEMAPBLOCKS
(
sb
.
sb_nblocks
) > 0);

60 
	}
}

66 
	$sb_check
()

68 
sch™ged
=0;

76 i‡(
	`checknuŒ°rög
(
sb
.
sb_vﬁ«me
, (sb.sb_volname))) {

77 
	`w¨nx
("VolumeÇameÇotÇull-terminated (fixed)");

78 
	`£tbad√ss
(
EXIT_RECOV
);

79 
sch™ged
 = 1;

81 i‡(
	`checkbad°rög
(
sb
.
sb_vﬁ«me
)) {

82 
	`w¨nx
("VolumeÇame contains illegal characters (fixed)");

83 
	`£tbad√ss
(
EXIT_RECOV
);

84 
sch™ged
 = 1;

86 i‡(
	`checkzî€d
(
sb
.
ª£rved
, (sb.reserved))) {

87 
	`w¨nx
("Reserved section of superblockÇot zeroed (fixed)");

88 
	`£tbad√ss
(
EXIT_RECOV
);

89 
sch™ged
 = 1;

93 i‡(
sch™ged
) {

94 
	`sfs_wrôesb
(
SFS_SUPER_BLOCK
, &
sb
);

96 
	}
}

101 
uöt32_t


102 
	$sb_tŸÆblocks
()

104  
sb
.
sb_nblocks
;

105 
	}
}

111 
uöt32_t


112 
	$sb_‰ìm≠blocks
()

114  
	`SFS_FREEMAPBLOCKS
(
sb
.
sb_nblocks
);

115 
	}
}

121 
	$sb_vﬁ«me
()

123  
sb
.
sb_vﬁ«me
;

124 
	}
}

	@userland/sbin/sfsck/sb.h

30 #i‚de‡
SB_H


31 
	#SB_H


	)

38 
	~<°döt.h
>

41 
sb_lﬂd
();

44 
uöt32_t
 
sb_tŸÆblocks
();

47 
uöt32_t
 
sb_‰ìm≠blocks
();

50 c⁄° *
sb_vﬁ«me
();

53 
sb_check
();

	@userland/sbin/sfsck/sfs.c

30 
	~<°döt.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<as£π.h
>

34 
	~<îr.h
>

36 
	~"com∑t.h
"

37 
	~<kîn/sfs.h
>

39 
	~"disk.h
"

40 
	~"utûs.h
"

41 
	~"ibma¸os.h
"

42 
	~"sfs.h
"

43 
	~"maö.h
"

49 
	$sfs_£tup
()

51 
	`as£π
((
sfs_su≥rblock
)==
SFS_BLOCKSIZE
);

52 
	`as£π
((
sfs_döode
)==
SFS_BLOCKSIZE
);

53 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dúíåy
) == 0);

54 
	}
}

61 
	$sw≠sb
(
sfs_su≥rblock
 *
sb
)

63 
sb
->
sb_magic
 = 
	`SWAP32
(sb->sb_magic);

64 
sb
->
sb_nblocks
 = 
	`SWAP32
(sb->sb_nblocks);

65 
	}
}

69 
	$sw≠bôs
(
uöt8_t
 *
bôs
)

72 ()
bôs
;

73 
	}
}

77 
	$sw≠öode
(
sfs_döode
 *
sfi
)

79 
i
;

81 
sfi
->
sfi_size
 = 
	`SWAP32
(sfi->sfi_size);

82 
sfi
->
sfi_ty≥
 = 
	`SWAP16
(sfi->sfi_type);

83 
sfi
->
sfi_lökcou¡
 = 
	`SWAP16
(sfi->sfi_linkcount);

85 
i
=0; i<
NUM_D
; i++) {

86 
	`SET_D
(
sfi
, 
i
Ë
	`SWAP32
(
	`GET_D
(sfi, i));

89 
i
=0; i<
NUM_I
; i++) {

90 
	`SET_I
(
sfi
, 
i
Ë
	`SWAP32
(
	`GET_I
(sfi, i));

93 
i
=0; i<
NUM_II
; i++) {

94 
	`SET_II
(
sfi
, 
i
Ë
	`SWAP32
(
	`GET_II
(sfi, i));

97 
i
=0; i<
NUM_III
; i++) {

98 
	`SET_III
(
sfi
, 
i
Ë
	`SWAP32
(
	`GET_III
(sfi, i));

100 
	}
}

104 
	$sw≠dú
(
sfs_dúíåy
 *
sfd
)

106 
sfd
->
sfd_öo
 = 
	`SWAP32
(sfd->sfd_ino);

107 
	}
}

111 
	$sw≠ödú
(
uöt32_t
 *
íåõs
)

113 
i
;

114 
i
=0; i<
SFS_DBPERIDB
; i++) {

115 
íåõs
[
i
] = 
	`SWAP32
(entries[i]);

117 
	}
}

132 
uöt32_t


133 
	$ibm≠
(
uöt32_t
 
iblock
, uöt32_à
off£t
, uöt32_à
íåysize
)

135 
uöt32_t
 
íåõs
[
SFS_DBPERIDB
];

137 i‡(
iblock
 == 0) {

141 
	`diskªad
(
íåõs
, 
iblock
);

142 
	`sw≠ödú
(
íåõs
);

144 i‡(
íåysize
 > 1) {

145 
uöt32_t
 
ödex
 = 
off£t
 / 
íåysize
;

146 
off£t
 %
íåysize
;

147  
	`ibm≠
(
íåõs
[
ödex
], 
off£t
, 
íåysize
/
SFS_DBPERIDB
);

150 
	`as£π
(
off£t
 < 
SFS_DBPERIDB
);

151  
íåõs
[
off£t
];

153 
	}
}

161 
uöt32_t


162 
	$bm≠
(c⁄° 
sfs_döode
 *
sfi
, 
uöt32_t
 
fûeblock
)

164 
uöt32_t
 
iblock
, 
off£t
;

166 i‡(
fûeblock
 < 
INOMAX_D
) {

167  
	`GET_D
(
sfi
, 
fûeblock
);

169 i‡(
fûeblock
 < 
INOMAX_I
) {

170 
iblock
 = (
fûeblock
 - 
INOMAX_D
Ë/ 
RANGE_I
;

171 
off£t
 = (
fûeblock
 - 
INOMAX_D
Ë% 
RANGE_I
;

172  
	`ibm≠
(
	`GET_I
(
sfi
, 
iblock
), 
off£t
, 
RANGE_D
);

174 i‡(
fûeblock
 < 
INOMAX_II
) {

175 
iblock
 = (
fûeblock
 - 
INOMAX_I
Ë/ 
RANGE_II
;

176 
off£t
 = (
fûeblock
 - 
INOMAX_I
Ë% 
RANGE_II
;

177  
	`ibm≠
(
	`GET_II
(
sfi
, 
iblock
), 
off£t
, 
RANGE_I
);

179 i‡(
fûeblock
 < 
INOMAX_III
) {

180 
iblock
 = (
fûeblock
 - 
INOMAX_II
Ë/ 
RANGE_III
;

181 
off£t
 = (
fûeblock
 - 
INOMAX_II
Ë% 
RANGE_III
;

182  
	`ibm≠
(
	`GET_III
(
sfi
, 
iblock
), 
off£t
, 
RANGE_II
);

185 
	}
}

195 
	$sfs_ªadsb
(
uöt32_t
 
blocknum
, 
sfs_su≥rblock
 *
sb
)

197 
	`diskªad
(
sb
, 
blocknum
);

198 
	`sw≠sb
(
sb
);

199 
	}
}

202 
	$sfs_wrôesb
(
uöt32_t
 
blocknum
, 
sfs_su≥rblock
 *
sb
)

204 
	`sw≠sb
(
sb
);

205 
	`diskwrôe
(
sb
, 
blocknum
);

206 
	`sw≠sb
(
sb
);

207 
	}
}

215 
	$sfs_ªad‰ìm≠block
(
uöt32_t
 
whichblock
, 
uöt8_t
 *
bôs
)

217 
	`diskªad
(
bôs
, 
SFS_FREEMAP_START
 + 
whichblock
);

218 
	`sw≠bôs
(
bôs
);

219 
	}
}

222 
	$sfs_wrôe‰ìm≠block
(
uöt32_t
 
whichblock
, 
uöt8_t
 *
bôs
)

224 
	`sw≠bôs
(
bôs
);

225 
	`diskwrôe
(
bôs
, 
SFS_FREEMAP_START
 + 
whichblock
);

226 
	`sw≠bôs
(
bôs
);

227 
	}
}

234 
	$sfs_ªadöode
(
uöt32_t
 
öo
, 
sfs_döode
 *
sfi
)

236 
	`diskªad
(
sfi
, 
öo
);

237 
	`sw≠öode
(
sfi
);

238 
	}
}

241 
	$sfs_wrôeöode
(
uöt32_t
 
öo
, 
sfs_döode
 *
sfi
)

243 
	`sw≠öode
(
sfi
);

244 
	`diskwrôe
(
sfi
, 
öo
);

245 
	`sw≠öode
(
sfi
);

246 
	}
}

253 
	$sfs_ªadödúe˘
(
uöt32_t
 
blocknum
, uöt32_à*
íåõs
)

255 
	`diskªad
(
íåõs
, 
blocknum
);

256 
	`sw≠ödú
(
íåõs
);

257 
	}
}

260 
	$sfs_wrôeödúe˘
(
uöt32_t
 
blocknum
, uöt32_à*
íåõs
)

262 
	`sw≠ödú
(
íåõs
);

263 
	`diskwrôe
(
íåõs
, 
blocknum
);

264 
	`sw≠ödú
(
íåõs
);

265 
	}
}

275 
	$sfs_ªaddúblock
(
sfs_dúíåy
 *
d
, 
uöt32_t
 
diskblock
)

277 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dúíåy
);

278 
j
;

280 i‡(
diskblock
 != 0) {

281 
	`diskªad
(
d
, 
diskblock
);

282 
j
=0; j<
©⁄˚
; j++) {

283 
	`sw≠dú
(&
d
[
j
]);

287 
	`w¨nx
("Warning: sparse directory found");

288 
	`bzîo
(
d
, 
SFS_BLOCKSIZE
);

290 
	}
}

298 
	$sfs_ªaddú
(
sfs_döode
 *
sfi
, 
sfs_dúíåy
 *
d
, 
nd
)

300 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dúíåy
);

301 
nblocks
 = 
	`SFS_ROUNDUP
(
nd
, 
©⁄˚
) /átonce;

302 
i
, 
j
;

303 
À·
, 
thism™y
;

304 
sfs_dúíåy
 
buf„r
[
©⁄˚
];

305 
uöt32_t
 
diskblock
;

307 
À·
 = 
nd
;

308 
i
=0; i<
nblocks
; i++) {

309 
diskblock
 = 
	`bm≠
(
sfi
, 
i
);

310 i‡(
À·
 < 
©⁄˚
) {

311 
thism™y
 = 
À·
;

312 
	`sfs_ªaddúblock
(
buf„r
, 
diskblock
);

313 
j
=0; j<
thism™y
; j++) {

314 
d
[
i
*
©⁄˚
 + 
j
] = 
buf„r
[j];

318 
thism™y
 = 
©⁄˚
;

319 
	`sfs_ªaddúblock
(
d
 + 
i
*
©⁄˚
, 
diskblock
);

321 
À·
 -
thism™y
;

323 
	`as£π
(
À·
 == 0);

324 
	}
}

331 
	$sfs_wrôedúblock
(
sfs_dúíåy
 *
d
, 
uöt32_t
 
diskblock
)

333 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dúíåy
);

334 
j
, 
bad
;

336 i‡(
diskblock
 != 0) {

337 
j
=0; j<
©⁄˚
; j++) {

338 
	`sw≠dú
(&
d
[
j
]);

340 
	`diskwrôe
(
d
, 
diskblock
);

343 
j
=
bad
=0; j<
©⁄˚
; j++) {

344 i‡(
d
[
j
].
sfd_öo
 !
SFS_NOINO
 ||

345 
d
[
j
].
sfd_«me
[0] != 0) {

346 
bad
 = 1;

349 i‡(
bad
) {

350 
	`w¨nx
("Cannot writeÅo missing block in "

352 
	`£tbad√ss
(
EXIT_UNRECOV
);

355 
	}
}

363 
	$sfs_wrôedú
(c⁄° 
sfs_döode
 *
sfi
, 
sfs_dúíåy
 *
d
, 
nd
)

365 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dúíåy
);

366 
nblocks
 = 
	`SFS_ROUNDUP
(
nd
, 
©⁄˚
) /átonce;

367 
i
, 
j
;

368 
À·
, 
thism™y
;

369 
sfs_dúíåy
 
buf„r
[
©⁄˚
];

370 
uöt32_t
 
diskblock
;

372 
À·
 = 
nd
;

373 
i
=0; i<
nblocks
; i++) {

374 
diskblock
 = 
	`bm≠
(
sfi
, 
i
);

375 i‡(
À·
 < 
©⁄˚
) {

376 
thism™y
 = 
À·
;

377 
j
=0; j<
thism™y
; j++) {

378 
buf„r
[
j
] = 
d
[
i
*
©⁄˚
 + j];

380 ; 
j
<
©⁄˚
; j++) {

381 
	`mem£t
(&
buf„r
[
j
], 0, (buffer[j]));

383 
	`sfs_wrôedúblock
(
buf„r
, 
diskblock
);

386 
thism™y
 = 
©⁄˚
;

387 
	`sfs_wrôedúblock
(
d
 + 
i
*
©⁄˚
, 
diskblock
);

389 
À·
 -
thism™y
;

391 
	`as£π
(
À·
 == 0);

392 
	}
}

398 
sfs_dúíåy
 *
	gglobÆ_s‹tdús
;

406 
	$dús‹tfunc
(c⁄° *
Ø
, c⁄° *
bb
)

408 c⁄° *
a
 = (c⁄° *)
Ø
;

409 c⁄° *
b
 = (c⁄° *)
bb
;

410 c⁄° 
sfs_dúíåy
 *
ad
 = &
globÆ_s‹tdús
[*
a
];

411 c⁄° 
sfs_dúíåy
 *
bd
 = &
globÆ_s‹tdús
[*
b
];

414 i‡(
ad
->
sfd_öo
 =
SFS_NOINO
 && 
bd
->sfd_ino == SFS_NOINO) {

417 i‡(
ad
->
sfd_öo
 =
SFS_NOINO
) {

420 i‡(
bd
->
sfd_öo
 =
SFS_NOINO
) {

424  
	`°rcmp
(
ad
->
sfd_«me
, 
bd
->sfd_name);

425 
	}
}

433 
	$sfsdú_s‹t
(
sfs_dúíåy
 *
d
, 
nd
, *
ve˘‹
)

435 
i
;

437 
i
=0; i<
nd
; i++) {

438 
ve˘‹
[
i
] = i;

441 
globÆ_s‹tdús
 = 
d
;

442 
	`qs‹t
(
ve˘‹
, 
nd
, (), 
dús‹tfunc
);

443 
	}
}

452 
	$sfsdú_åyadd
(
sfs_dúíåy
 *
d
, 
nd
, c⁄° *
«me
, 
uöt32_t
 
öo
)

454 
i
;

455 
i
=0; i<
nd
; i++) {

456 i‡(
d
[
i
].
sfd_öo
==
SFS_NOINO
) {

457 
d
[
i
].
sfd_öo
 = 
öo
;

458 
	`as£π
(
	`°æí
(
«me
Ë< (
d
[
i
].
sfd_«me
));

459 
	`°r˝y
(
d
[
i
].
sfd_«me
, 
«me
);

464 
	}
}

	@userland/sbin/sfsck/sfs.h

30 #i‚de‡
SFS_H


31 
	#SFS_H


	)

39 
	~<°döt.h
>

41 
	gsfs_su≥rblock
;

42 
	gsfs_döode
;

43 
	gsfs_dúíåy
;

46 
sfs_£tup
();

53 
sfs_ªadsb
(
uöt32_t
 
blocknum
, 
sfs_su≥rblock
 *
sb
);

54 
sfs_wrôesb
(
uöt32_t
 
blocknum
, 
sfs_su≥rblock
 *
sb
);

57 
sfs_ªad‰ìm≠block
(
uöt32_t
 
whichblock
, 
uöt8_t
 *
bôs
);

58 
sfs_wrôe‰ìm≠block
(
uöt32_t
 
whichblock
, 
uöt8_t
 *
bôs
);

61 
sfs_ªadöode
(
uöt32_t
 
öum
, 
sfs_döode
 *
sfi
);

62 
sfs_wrôeöode
(
uöt32_t
 
öum
, 
sfs_döode
 *
sfi
);

65 
sfs_ªadödúe˘
(
uöt32_t
 
blocknum
, uöt32_à*
íåõs
);

66 
sfs_wrôeödúe˘
(
uöt32_t
 
blocknum
, uöt32_à*
íåõs
);

69 
sfs_ªaddú
(
sfs_döode
 *
sfi
, 
sfs_dúíåy
 *
d
, 
nd
);

70 
sfs_wrôedú
(c⁄° 
sfs_döode
 *
sfi
,

71 
sfs_dúíåy
 *
d
, 
nd
);

74 
sfsdú_åyadd
(
sfs_dúíåy
 *
d
, 
nd
,

75 c⁄° *
«me
, 
uöt32_t
 
öo
);

78 
sfsdú_s‹t
(
sfs_dúíåy
 *
d
, 
nd
, *
ve˘‹
);

	@userland/sbin/sfsck/utils.c

30 
	~<°döt.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<îr.h
>

35 
	~"com∑t.h
"

36 
	~"utûs.h
"

37 
	~"maö.h
"

43 
	$domÆloc
(
size_t
 
Àn
)

45 *
x
;

46 
x
 = 
	`mÆloc
(
Àn
);

47 i‡(
x
==
NULL
) {

48 
	`îrx
(
EXIT_FATAL
, "Out of memory");

50  
x
;

51 
	}
}

58 
	$d‹óŒoc
(*
›
, 
size_t
 
osz
, size_à
nsz
)

60 *
≈
;

61 #ifde‡
NO_REALLOC


62 
size_t
 
c›ysz
;

64 
≈
 = 
	`domÆloc
(
nsz
);

65 i‡(
›
 !
NULL
) {

66 
c›ysz
 = 
osz
 < 
nsz
 ? osz :Çsz;

67 
	`mem˝y
(
≈
, 
›
, 
c›ysz
);

68 
	`‰ì
(
›
);

71 ()
osz
;

72 
≈
 = 
	`ªÆloc
(
›
, 
nsz
);

73 i‡(
≈
 =
NULL
) {

74 
	`îrx
(
EXIT_FATAL
, "Out of memory");

77  
≈
;

78 
	}
}

83 
uöt32_t


84 
	$uniqueid
()

86 
uöt32_t
 
uniquecou¡î
;

88  
uniquecou¡î
++;

89 
	}
}

96 
	$checknuŒ°rög
(*
buf
, 
size_t
 
maxÀn
)

98 
size_t
 
i
;

99 
i
=0; i<
maxÀn
; i++) {

100 i‡(
buf
[
i
]==0) {

104 
buf
[
maxÀn
-1] = 0;

106 
	}
}

113 
	$checkbad°rög
(*
buf
)

115 
size_t
 
i
;

116 
rv
 = 0;

118 
i
=0; 
buf
[i]; i++) {

119 i‡(
buf
[
i
]==':' || buf[i]=='/') {

120 
buf
[
i
] = '_';

121 
rv
 = 1;

124  
rv
;

125 
	}
}

131 
	$checkzî€d
(*
vbuf
, 
size_t
 
Àn
)

133 *
buf
 = 
vbuf
;

134 
size_t
 
i
;

135 
rv
 = 0;

137 
i
=0; i < 
Àn
; i++) {

138 i‡(
buf
[
i
] != 0) {

139 
buf
[
i
] = 0;

140 
rv
 = 1;

143  
rv
;

144 
	}
}

	@userland/sbin/sfsck/utils.h

30 #i‚de‡
UTILS_H


31 
	#UTILS_H


	)

33 
	~<sys/ty≥s.h
>

34 
	~<°döt.h
>

37 *
domÆloc
(
size_t
 
Àn
);

38 *
d‹óŒoc
(*
›
, 
size_t
 
osz
, size_à
nsz
);

41 
uöt32_t
 
uniqueid
();

44 
checknuŒ°rög
(*
buf
, 
size_t
 
maxÀn
);

47 
checkbad°rög
(*
buf
);

50 
checkzî€d
(*
buf
, 
size_t
 
Àn
);

	@userland/testbin/add/add.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<îr.h
>

43 
	$maö
(
¨gc
, *
¨gv
[])

45 
i
, 
j
;

47 i‡(
¨gc
 != 3) {

48 
	`îrx
(1, "Usage:áddÇum1Çum2");

51 
i
 = 
	`©oi
(
¨gv
[1]);

52 
j
 = 
	`©oi
(
¨gv
[2]);

54 
	`¥ötf
("Answî: %d\n", 
i
+
j
);

57 
	}
}

	@userland/testbin/argtest/argtest.c

38 
	~<°dio.h
>

41 
	$maö
(
¨gc
, *
¨gv
[])

43 c⁄° *
tmp
;

44 
i
;

46 
	`¥ötf
("¨gc: %d\n", 
¨gc
);

48 
i
=0; i<=
¨gc
; i++) {

49 
tmp
 = 
¨gv
[
i
];

50 i‡(
tmp
==
NULL
) {

51 
tmp
 = "[NULL]";

53 
	`¥ötf
("¨gv[%d]: %s\n", 
i
, 
tmp
);

57 
	}
}

	@userland/testbin/badcall/bad_chdir.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

38 
	~"ã°.h
"

42 
	$chdú_em±y
()

44 
rv
;

50 
rv
 = 
	`chdú
("");

51 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 0, "chdirÅoÉmpty string");

52 
	}
}

55 
	$ã°_chdú
()

57 
	`ã°_chdú_∑th
();

58 
	`chdú_em±y
();

59 
	}
}

	@userland/testbin/badcall/bad_close.c

34 
	~"ã°.h
"

37 
	$ã°_˛o£
()

39 
	`ã°_˛o£_fd
();

40 
	}
}

	@userland/testbin/badcall/bad_dup2.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

49 
	$dup2_fd2
(
fd
, c⁄° *
desc
)

51 
rv
;

53 
rv
 = 
	`dup2
(
STDIN_FILENO
, 
fd
);

54 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EBADF
, 
desc
);

56 i‡(
rv
 != -1) {

57 
	`˛o£
(
fd
);

59 
	}
}

63 
	$dup2_£lf
()

65 
°©
 
sb
;

66 
rv
;

67 
ã°fd
;

70 
ã°fd
 = 
CLOSED_FD
;

72 
rv
 = 
	`dup2
(
STDIN_FILENO
, 
ã°fd
);

73 i‡(
rv
 == -1) {

74 
	`w¨n
("UH-OH: couldn't copy stdin");

78 
rv
 = 
	`dup2
(
ã°fd
,Åestfd);

79 i‡(
rv
 =
ã°fd
) {

80 
	`w¨nx
("passed: dup2Åo same fd");

82 i‡(
rv
<0) {

83 
	`w¨n
("FAILURE: dup2Åo same fd:Érror");

86 
	`w¨nx
("FAILURE: dup2Åÿßmêfd:Ñëu∫ed %d in°ód", 
rv
);

89 
rv
 = 
	`f°©
(
ã°fd
, &
sb
);

90 i‡(
rv
==0) {

91 
	`w¨nx
("passed: fstat fdáfter dup2Åo itself");

93 i‡(
î∫o
 !
ENOSYS
) {

94 
	`w¨n
("FAILURE: fstat fdáfter dup2Åo itself");

98 
rv
 = 
	`l£ek
(
ã°fd
, 0, 
SEEK_CUR
);

99 i‡(
rv
==0 || (rv==-1 && 
î∫o
==
ESPIPE
)) {

100 
	`w¨nx
("passed:Üseek fdáfter dup2Åo itself");

103 
	`w¨n
("FAILURE:Üseek fdáfter dup2Åo itself");

107 
	`˛o£
(
ã°fd
);

108 
	}
}

111 
	$ã°_dup2
()

114 
	`ã°_dup2_fd
();

117 
	`dup2_fd2
(-1, "dup2Åo -1");

118 
	`dup2_fd2
(-5, "dup2Åo -5");

119 
	`dup2_fd2
(
IMPOSSIBLE_FD
, "dup2Åo impossible fd");

120 #ifde‡
OPEN_MAX


121 
	`dup2_fd2
(
OPEN_MAX
, "dup2Åo OPEN_MAX");

123 
	`w¨nx
("Warning: OPEN_MAXÇot defined -Åest skipped");

126 
	`dup2_£lf
();

127 
	}
}

	@userland/testbin/badcall/bad_execv.c

34 
	~<sys/ty≥s.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<î∫o.h
>

38 
	~<îr.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$exec_comm⁄_f‹k
()

47 
pid
, 
rv
, 
°©us
;

49 
pid
 = 
	`f‹k
();

50 i‡(
pid
<0) {

51 
	`w¨n
("UH-OH: fork failed");

55 i‡(
pid
==0) {

60 
rv
 = 
	`waôpid
(
pid
, &
°©us
, 0);

61 i‡(
rv
 == -1) {

62 
	`w¨n
("UH-OH: waitpid failed");

65 i‡(!
	`WIFEXITED
(
°©us
Ë|| 
	`WEXITSTATUS
(°©usË!
MAGIC_STATUS
) {

66 
	`w¨nx
("FAILURE: wrongÉxit code of subprocess");

69 
	}
}

73 
	$exec_bad¥og
(c⁄° *
¥og
, c⁄° *
desc
)

75 
rv
;

76 *
¨gs
[2];

77 
¨gs
[0] = (*)"foo";

78 
¨gs
[1] = 
NULL
;

80 i‡(
	`exec_comm⁄_f‹k
() != 0) {

84 
rv
 = 
	`execv
(
¥og
, 
¨gs
);

85 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

86 
	`exô
(
MAGIC_STATUS
);

87 
	}
}

91 
	$exec_em±y¥og
()

93 
rv
;

94 *
¨gs
[2];

95 
¨gs
[0] = (*)"foo";

96 
¨gs
[1] = 
NULL
;

98 i‡(
	`exec_comm⁄_f‹k
() != 0) {

102 
rv
 = 
	`execv
("", 
¨gs
);

103 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
EISDIR
, "execÅheÉmpty string");

104 
	`exô
(
MAGIC_STATUS
);

105 
	}
}

109 
	$exec_bad¨gs
(*
¨gs
, c⁄° *
desc
)

111 
rv
;

113 i‡(
	`exec_comm⁄_f‹k
() != 0) {

117 
rv
 = 
	`execv
("/bö/åue", 
¨gs
);

118 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

119 
	`exô
(
MAGIC_STATUS
);

120 
	}
}

124 
	$exec_⁄órg
(*
±r
, c⁄° *
desc
)

126 
rv
;

128 *
¨gs
[3];

129 
¨gs
[0] = (*)"foo";

130 
¨gs
[1] = (*)
±r
;

131 
¨gs
[2] = 
NULL
;

133 i‡(
	`exec_comm⁄_f‹k
() != 0) {

137 
rv
 = 
	`execv
("/bö/åue", 
¨gs
);

138 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

139 
	`exô
(
MAGIC_STATUS
);

140 
	}
}

143 
	$ã°_execv
()

145 
	`exec_bad¥og
(
NULL
, "exec NULL");

146 
	`exec_bad¥og
(
INVAL_PTR
, "exec invalidÖointer");

147 
	`exec_bad¥og
(
KERN_PTR
, "exec kernelÖointer");

149 
	`exec_em±y¥og
();

151 
	`exec_bad¨gs
(
NULL
, "exec /bin/true with NULLárglist");

152 
	`exec_bad¨gs
(
INVAL_PTR
, "exec /bin/true with invalidÖointerárglist");

153 
	`exec_bad¨gs
(
KERN_PTR
, "exec /bin/true with kernelÖointerárglist");

155 
	`exec_⁄órg
(
INVAL_PTR
, "exec /bin/true with invalidÖointerárg");

156 
	`exec_⁄órg
(
KERN_PTR
, "exec /bin/true with kernelÖointerárg");

157 
	}
}

	@userland/testbin/badcall/bad_fsync.c

34 
	~"ã°.h
"

37 
	$ã°_fsync
()

39 
	`ã°_fsync_fd
();

40 
	}
}

	@userland/testbin/badcall/bad_ftruncate.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$·runˇã_fd_devi˚
()

50 
rv
, 
fd
;

52 
fd
 = 
	`›í
("nuŒ:", 
O_RDWR
);

53 i‡(
fd
<0) {

54 
	`w¨n
("UH-OH: openingÇull: failed");

58 
rv
 = 
	`·runˇã
(
fd
, 6);

59 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "ftruncate on device");

61 
	`˛o£
(
fd
);

62 
	}
}

66 
	$·runˇã_size_√g
()

68 
rv
, 
fd
;

70 
fd
 = 
	`›í_ã°fûe
(
NULL
);

71 i‡(
fd
<0) {

75 
rv
 = 
	`·runˇã
(
fd
, -60);

76 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "ftruncateÅoÇegative size");

78 
	`˛o£
(
fd
);

79 
	`ªmove
(
TESTFILE
);

80 
	}
}

83 
	$ã°_·runˇã
()

85 
	`ã°_·runˇã_fd
();

87 
	`·runˇã_fd_devi˚
();

88 
	`·runˇã_size_√g
();

89 
	}
}

	@userland/testbin/badcall/bad_getcwd.c

34 
	~"ã°.h
"

37 
	$ã°_gëcwd
()

39 
	`ã°_gëcwd_buf
();

40 
	}
}

	@userland/testbin/badcall/bad_getdirentry.c

34 
	~"ã°.h
"

37 
	$ã°_gëdúíåy
()

39 
	`ã°_gëdúíåy_fd
();

40 
	`ã°_gëdúíåy_buf
();

41 
	}
}

	@userland/testbin/badcall/bad_ioctl.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/io˘l.h
>

36 
	~<uni°d.h
>

37 
	~<°dio.h
>

38 
	~<î∫o.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$⁄e_io˘l_badbuf
(
fd
, 
code
, c⁄° *
codíame
,

46 *
±r
, c⁄° *
±rdesc
)

48 
desc
[128];

49 
rv
;

51 
	`¢¥ötf
(
desc
, (desc), "io˘»%†wôh %s", 
codíame
, 
±rdesc
);

52 
rv
 = 
	`io˘l
(
fd
, 
code
, 
±r
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$™y_io˘l_badbuf
(
fd
, 
code
, c⁄° *
codíame
)

60 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
NULL
, "NULLÖointer");

61 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
INVAL_PTR
, "invalidÖointer");

62 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
KERN_PTR
, "kernelÖointer");

63 
	}
}

65 
	#IOCTL
(
fd
, 
sym
Ë
	`™y_io˘l_badbuf
(fd, sym, #sym)

	)

69 
	$io˘l_badbuf
()

82 ()
™y_io˘l_badbuf
;

83 
	}
}

87 
	$io˘l_badcode
()

89 
rv
;

90 
rv
 = 
	`io˘l
(
STDIN_FILENO
, 
NONEXIST_IOCTL
, 
NULL
);

91 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EIOCTL
, "invalid ioctl");

92 
	}
}

95 
	$ã°_io˘l
()

97 
	`ã°_io˘l_fd
();

100 
	`io˘l_badcode
();

101 
	`io˘l_badbuf
();

102 
	}
}

	@userland/testbin/badcall/bad_link.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$lök_dú
()

43 
rv
;

44 
rv
 = 
	`lök
(".", 
TESTDIR
);

45 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜink of .");

46 i‡(
rv
==0) {

48 
	`ªmove
(
TESTDIR
);

50 
	}
}

54 
	$lök_em±y1
()

56 
rv
;

57 
rv
 = 
	`lök
("", 
TESTDIR
);

58 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜink ofÉmpty string");

59 
	}
}

63 
	$lök_em±y2
()

65 
rv
;

66 i‡(
	`¸óã_ã°dú
()<0) {

69 
rv
 = 
	`lök
(
TESTDIR
, "");

70 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜinkÅoÉmpty string");

71 
	`rmdú
(
TESTDIR
);

72 
	}
}

75 
	$ã°_lök
()

77 
	`ã°_lök_∑ths
();

78 
	`lök_dú
();

79 
	`lök_em±y1
();

80 
	`lök_em±y2
();

81 
	}
}

	@userland/testbin/badcall/bad_lseek.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$l£ek_fd_devi˚
()

50 
fd
, 
rv
;

52 
fd
 = 
	`›í
("nuŒ:", 
O_RDONLY
);

53 i‡(
fd
<0) {

54 
	`w¨n
("UH-OH: openingÇull: failed");

58 
rv
 = 
	`l£ek
(
fd
, 309, 
SEEK_SET
);

59 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
ESPIPE
, "lseek on device");

61 
	`˛o£
(
fd
);

62 
	}
}

66 
	$l£ek_fûe_°dö
()

68 
fd
, 
fd2
, 
rv
, 
°©us
;

69 c⁄° 
¶og™
[] = "Thereáin'tÇo suchÅhingásá freeÜunch";

70 
size_t
 
Àn
 = 
	`°æí
(
¶og™
);

71 
pid_t
 
pid
;

74 
pid
 = 
	`f‹k
();

75 i‡(
pid
<0) {

76 
	`w¨n
("UH-OH: fork failed");

79 i‡(
pid
!=0) {

81 
rv
 = 
	`waôpid
(
pid
, &
°©us
, 0);

82 i‡(
rv
<0) {

83 
	`w¨n
("UH-OH: waitpid failed");

85 i‡(
	`WIFSIGNALED
(
°©us
)) {

86 
	`w¨n
("UH-OH: subprocessÉxited with signal %d",

87 
	`WTERMSIG
(
°©us
));

89 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) != 0) {

90 
	`w¨n
("UH-OH: subprocessÉxited with code %d",

91 
	`WEXITSTATUS
(
°©us
));

98 
fd
 = 
	`›í_ã°fûe
(
NULL
);

99 i‡(
fd
<0) {

100 
	`_exô
(0);

110 
fd2
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

111 i‡(
fd2
<0) {

112 
	`w¨n
("UH-OH: dup2Åo stdin failed");

113 
	`˛o£
(
fd
);

114 
	`ªmove
(
TESTFILE
);

115 
	`_exô
(0);

117 i‡(
fd2
 !
STDIN_FILENO
) {

118 
	`w¨n
("UH-OH: dup2Ñeturned wrong file handle");

119 
	`˛o£
(
fd
);

120 
	`ªmove
(
TESTFILE
);

121 
	`_exô
(0);

123 
	`˛o£
(
fd
);

125 
rv
 = 
	`wrôe
(
STDIN_FILENO
, 
¶og™
, 
Àn
);

126 i‡(
rv
<0) {

127 
	`w¨n
("UH-OH: wrôêtÿ%†(vü stdöËÁûed", 
TESTFILE
);

128 
	`ªmove
(
TESTFILE
);

129 
	`_exô
(0);

132 i‡(()
rv
 !
Àn
) {

133 
	`w¨nx
("UH-OH: writeÅo %s (via stdin) got short count",

134 
TESTFILE
);

135 
	`ªmove
(
TESTFILE
);

136 
	`_exô
(0);

139 
rv
 = 
	`l£ek
(
STDIN_FILENO
, 0, 
SEEK_SET
);

140 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 0, "lseek stdin when open on file (try 1)");

142 
rv
 = 
	`l£ek
(
STDIN_FILENO
, 0, 
SEEK_END
);

143 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 0, "lseek stdin when open on file (try 2)");

145 
	`ªmove
(
TESTFILE
);

146 
	`_exô
(0);

147 
	}
}

151 
	$l£ek_loc_√g©ive
()

153 
fd
, 
rv
;

155 
fd
 = 
	`›í_ã°fûe
(
NULL
);

156 i‡(
fd
<0) {

160 
rv
 = 
	`l£ek
(
fd
, -309, 
SEEK_SET
);

161 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "lseekÅoÇegative offset");

163 
	`˛o£
(
fd
);

164 
	`ªmove
(
TESTFILE
);

165 
	}
}

169 
	$l£ek_whí˚_övÆ
()

171 
fd
, 
rv
;

173 
fd
 = 
	`›í_ã°fûe
(
NULL
);

174 i‡(
fd
<0) {

178 
rv
 = 
	`l£ek
(
fd
, 0, 3594);

179 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "lseek with invalid whence code");

181 
	`˛o£
(
fd
);

182 
	`ªmove
(
TESTFILE
);

183 
	}
}

187 
	$l£ek_loc_∑°eof
()

189 c⁄° *
mesßge
 = "blahblah";

190 
fd
;

191 
off_t
 
pos
;

193 
fd
 = 
	`›í_ã°fûe
(
mesßge
);

194 i‡(
fd
<0) {

198 
pos
 = 
	`l£ek
(
fd
, 5340, 
SEEK_SET
);

199 i‡(
pos
 == -1) {

200 
	`w¨n
("FAILURE:ÜseekÖast EOF failed");

201 
out
;

203 i‡(
pos
 != 5340) {

204 
	`w¨nx
("FAILURE:Ü£ekÅÿ5340 gŸ off£à%ld", (Ë
pos
);

205 
out
;

208 
pos
 = 
	`l£ek
(
fd
, -50, 
SEEK_CUR
);

209 i‡(
pos
 == -1) {

210 
	`w¨n
("FAILURE: small seek beyond EOF failed");

211 
out
;

213 i‡(
pos
 != 5290) {

214 
	`w¨nx
("FAILURE: SEEK_CURÅÿ5290 gŸ off£à%ld", (Ë
pos
);

215 
out
;

218 
pos
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

219 i‡(
pos
 == -1) {

220 
	`w¨n
("FAILURE: seekÅo EOF failed");

221 
out
;

224 i‡(
pos
 !(
off_t
Ë
	`°æí
(
mesßge
)) {

225 
	`w¨nx
("FAILURE: seekÅo EOF got %ld (should be %d)",

226 (Ë
pos
, 
	`°æí
(
mesßge
));

227 
out
;

230 
	`w¨nx
("passed: seekÖast/to EOF");

232 
out
:

233 
	`˛o£
(
fd
);

234 
	`ªmove
(
TESTFILE
);

236 
	}
}

239 
	$ã°_l£ek
()

241 
	`ã°_l£ek_fd
();

243 
	`l£ek_fd_devi˚
();

244 
	`l£ek_fûe_°dö
();

245 
	`l£ek_loc_√g©ive
();

246 
	`l£ek_loc_∑°eof
();

247 
	`l£ek_whí˚_övÆ
();

248 
	}
}

	@userland/testbin/badcall/bad_mkdir.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$mkdú_dŸ
()

50 
rv
;

52 
rv
 = 
	`mkdú
(".", 0775);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EEXIST
, "mkdir .");

54 
	}
}

58 
	$mkdú_dŸdŸ
()

60 
rv
;

62 
rv
 = 
	`mkdú
("..", 0775);

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EEXIST
, "mkdir ..");

64 
	}
}

68 
	$mkdú_em±y
()

70 
rv
;

71 
rv
 = 
	`mkdú
("", 0775);

72 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "mkdir ofÉmpty string");

73 
	}
}

76 
	$ã°_mkdú
()

78 
	`ã°_mkdú_∑th
();

80 
	`mkdú_dŸ
();

81 
	`mkdú_dŸdŸ
();

82 
	`mkdú_em±y
();

83 
	}
}

	@userland/testbin/badcall/bad_open.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$›í_badÊags
()

50 
fd
;

52 
fd
 = 
	`›í
("null:", 309842);

53 
	`ªp‹t_ã°
(
fd
, 
î∫o
, 
EINVAL
, "openÇull: with bad flags");

54 
	}
}

58 
	$›í_em±y
()

60 
rv
;

61 
rv
 = 
	`›í
("", 
O_RDONLY
);

62 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, "openÉmpty string");

63 i‡(
rv
>=0) {

64 
	`˛o£
(
rv
);

66 
	}
}

69 
	$ã°_›í
()

71 
	`ã°_›í_∑th
();

73 
	`›í_badÊags
();

74 
	`›í_em±y
();

75 
	}
}

	@userland/testbin/badcall/bad_pipe.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$pùe_bad±r
(*
±r
, c⁄° *
desc
)

50 
rv
;

52 
rv
 = 
	`pùe
(
±r
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$pùe_u«lig√d
()

60 
fds
[3], 
rv
;

61 *
±r
;

63 
±r
 = (*)&
fds
[0];

64 
±r
++;

66 
rv
 = 
	`pùe
((*)
±r
);

67 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "pipe with unalignedÖointer");

68 
	}
}

71 
	$ã°_pùe
()

73 
	`pùe_bad±r
(
NULL
, "pipe with NULLÖointer");

74 
	`pùe_bad±r
(
INVAL_PTR
, "pipe with invalidÖointer");

75 
	`pùe_bad±r
(
KERN_PTR
, "pipe with kernelÖointer");

77 
	`pùe_u«lig√d
();

78 
	}
}

	@userland/testbin/badcall/bad_read.c

34 
	~"ã°.h
"

37 
	$ã°_ªad
()

39 
	`ã°_ªad_fd
();

40 
	`ã°_ªad_buf
();

41 
	}
}

	@userland/testbin/badcall/bad_readlink.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$ªadlök_fûe
()

43 
buf
[128];

44 
fd
, 
rv
;

46 
fd
 = 
	`›í_ã°fûe
("the question containsán invalidássumption");

47 i‡(
fd
<0) {

50 
	`˛o£
(
fd
);

51 
rv
 = 
	`ªadlök
(
TESTFILE
, 
buf
, (buf));

52 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "readlink on file");

53 
	`ªmove
(
TESTFILE
);

54 
	}
}

58 
	$ªadlök_dú
()

60 
buf
[128];

61 
rv
;

62 
rv
 = 
	`ªadlök
(".", 
buf
, (buf));

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EISDIR
, "readlink on .");

64 
	}
}

68 
	$ªadlök_em±y
()

70 
buf
[128];

71 
rv
;

72 
rv
 = 
	`ªadlök
("", 
buf
, (buf));

73 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "readlink onÉmpty string");

74 
	}
}

77 
	$ã°_ªadlök
()

79 
	`ã°_ªadlök_∑th
();

80 
	`ã°_ªadlök_buf
();

82 
	`ªadlök_fûe
();

83 
	`ªadlök_dú
();

84 
	`ªadlök_em±y
();

85 
	}
}

	@userland/testbin/badcall/bad_reboot.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$ªboŸ_badÊags
()

50 
rv
;

52 
	`w¨nx
("NOTICE: ifÅhis killsÅhe system, it'sá failure.");

53 
rv
 = 
	`ªboŸ
(15353);

54 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "reboot with invalid flags");

55 
	}
}

58 
	$ã°_ªboŸ
()

60 
	`ªboŸ_badÊags
();

61 
	}
}

	@userland/testbin/badcall/bad_remove.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$ªmove_dú
()

50 
rv
;

52 i‡(
	`¸óã_ã°dú
() < 0) {

56 
rv
 = 
	`ªmove
(
TESTDIR
);

57 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EISDIR
, "remove() oná directory");

58 
	`rmdú
(
TESTDIR
);

59 
	}
}

63 
	$ªmove_dŸ
()

65 
rv
;

66 
rv
 = 
	`ªmove
(".");

67 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() on .");

68 
	}
}

72 
	$ªmove_dŸdŸ
()

74 
rv
;

75 
rv
 = 
	`ªmove
("..");

76 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() on ..");

77 
	}
}

81 
	$ªmove_em±y
()

83 
rv
;

84 
rv
 = 
	`ªmove
("");

85 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() onÉmpty string");

86 
	}
}

89 
	$ã°_ªmove
()

91 
	`ã°_ªmove_∑th
();

93 
	`ªmove_dú
();

94 
	`ªmove_dŸ
();

95 
	`ªmove_dŸdŸ
();

96 
	`ªmove_em±y
();

97 
	}
}

	@userland/testbin/badcall/bad_rename.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$ª«me_dŸ
()

43 
rv
;

44 
rv
 = 
	`ª«me
(".", 
TESTDIR
);

45 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rename .");

46 i‡(
rv
==0) {

48 
	`ª«me
(
TESTDIR
, ".");

50 
	}
}

54 
	$ª«me_dŸdŸ
()

56 
rv
;

57 
rv
 = 
	`ª«me
("..", 
TESTDIR
);

58 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rename ..");

59 i‡(
rv
==0) {

61 
	`ª«me
(
TESTDIR
, "..");

63 
	}
}

67 
	$ª«me_em±y1
()

69 
rv
;

70 
rv
 = 
	`ª«me
("", 
TESTDIR
);

71 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "renameÉmpty string");

72 i‡(
rv
==0) {

74 
	`ª«me
(
TESTDIR
, TESTDIR "-foo");

76 
	}
}

80 
	$ª«me_em±y2
()

82 
rv
;

83 i‡(
	`¸óã_ã°dú
()<0) {

86 
rv
 = 
	`ª«me
(
TESTDIR
, "");

87 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "renameÅoÉmpty string");

88 
	`rmdú
(
TESTDIR
);

89 
	}
}

92 
	$ã°_ª«me
()

94 
	`ã°_ª«me_∑ths
();

96 
	`ª«me_dŸ
();

97 
	`ª«me_dŸdŸ
();

98 
	`ª«me_em±y1
();

99 
	`ª«me_em±y2
();

100 
	}
}

	@userland/testbin/badcall/bad_rmdir.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$rmdú_fûe
()

50 
rv
;

51 i‡(
	`¸óã_ã°fûe
()<0) {

54 
rv
 = 
	`rmdú
(
TESTFILE
);

55 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
ENOTDIR
, "rmdirá file");

56 
	`ªmove
(
TESTFILE
);

57 
	}
}

61 
	$rmdú_dŸ
()

63 
rv
;

65 
rv
 = 
	`rmdú
(".");

66 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rmdir .");

67 
	}
}

71 
	$rmdú_dŸdŸ
()

73 
rv
;

75 
rv
 = 
	`rmdú
("..");

76 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
ENOTEMPTY
, "rmdir ..");

77 
	}
}

81 
	$rmdú_em±y
()

83 
rv
;

84 
rv
 = 
	`rmdú
("");

85 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rmdirÉmpty string");

86 
	}
}

89 
	$ã°_rmdú
()

91 
	`ã°_rmdú_∑th
();

93 
	`rmdú_fûe
();

94 
	`rmdú_dŸ
();

95 
	`rmdú_dŸdŸ
();

96 
	`rmdú_em±y
();

97 
	}
}

	@userland/testbin/badcall/bad_sbrk.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$åy_sbrk
(
vÆ
)

50 *
rv
;

51 
rv
 = 
	`sbrk
(
vÆ
);

52 i‡(
rv
==(*)-1) {

53  
î∫o
;

56 
	}
}

60 
	$íf‹˚_sbrk
(
vÆ
, c⁄° *
desc
, 
îr
)

62 
e
;

64 
e
 = 
	`åy_sbrk
(
vÆ
);

65 i‡(
e
 !
îr
 &&É==0) {

66 
	`w¨nx
("FAILURE: sbrk(%s):Çÿîr‹", 
desc
);

69 i‡(
e
 !
îr
) {

70 
î∫o
 = 
e
;

71 
	`w¨n
("FAILURE: sbrk(%s): wr⁄gÉº‹", 
desc
);

74 
	`w¨nx
("∑s£d: sbrk(%s)", 
desc
);

75 
	}
}

79 
	$sbrk_bigpos
()

81 
	`íf‹˚_sbrk
(4096*1024*256, "hugêposôive", 
ENOMEM
);

82 
	}
}

86 
	$sbrk_big√g
()

88 
	`íf‹˚_sbrk
(-4096*1024*256, "hugê√g©ive", 
EINVAL
);

89 
	}
}

93 
	$sbrk_√g
()

95 
	`íf‹˚_sbrk
(-8192, "too-œrgê√g©ive", 
EINVAL
);

96 
	}
}

100 
	$sbrk_u«lig√dpos
()

102 
	`åy_sbrk
(17)) {

104 
EINVAL
:

105 
	`w¨nx
("passed: sbrk(unalignedÖositive)");

108 
	`w¨n
("FAILURE: sbrk(unalignedÖositive): wrongÉrror");

111 
	}
}

115 
	$sbrk_u«lig√d√g
()

117 
	`åy_sbrk
(-17)) {

119 
EINVAL
:

120 
	`w¨nx
("passed: sbrk(unalignedÇegative)");

123 
	`w¨n
("FAILURE: sbrk(unalignedÇegative): wrongÉrror");

126 
	}
}

129 
	$ã°_sbrk
()

131 
	`sbrk_√g
();

132 
	`sbrk_bigpos
();

133 
	`sbrk_big√g
();

134 
	`sbrk_u«lig√dpos
();

135 
	`sbrk_u«lig√d√g
();

136 
	}
}

	@userland/testbin/badcall/bad_stat.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

50 
	$badbuf_f°©
(
°©
 *
sb
)

52  
	`f°©
(
STDIN_FILENO
, 
sb
);

53 
	}
}

57 
	$badbuf_l°©
(
°©
 *
sb
)

59  
	`l°©
("nuŒ:", 
sb
);

60 
	}
}

64 
	$badbuf_°©
(
°©
 *
sb
)

66  
	`°©
("nuŒ:", 
sb
);

67 
	}
}

71 
comm⁄_badbuf
((*
°©func
)(
°©
 *), *
±r
,

72 c⁄° *
ˇŒ
, c⁄° *
±rdesc
)

74 
rv
;

75 
mydesc
[128];

77 
	`¢¥ötf
(
mydesc
, (mydesc), "%†wôh %†buf", 
ˇŒ
, 
±rdesc
);

78 
rv
 = 
	`°©func
(
±r
);

79 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

80 
	}
}

84 
™y_badbuf
((*
°©func
)(
°©
 *), c⁄° *
ˇŒ
)

86 
	`comm⁄_badbuf
(
°©func
, 
NULL
, 
ˇŒ
, "NULL");

87 
	`comm⁄_badbuf
(
°©func
, 
INVAL_PTR
, 
ˇŒ
, "invalidÖointer");

88 
	`comm⁄_badbuf
(
°©func
, 
KERN_PTR
, 
ˇŒ
, "kernelÖointer");

89 
	}
}

95 
™y_em±y
((*
°©func
)(c⁄° *, 
°©
 *), c⁄° *
ˇŒ
)

97 
°©
 
sb
;

98 
desc
[128];

99 
rv
;

101 
	`¢¥ötf
(
desc
, (desc), "%†⁄Ém±y såög", 
ˇŒ
);

102 
rv
 = 
	`°©func
("", &
sb
);

103 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, 
desc
);

104 
	}
}

109 
	$ã°_f°©
()

111 
	`ã°_f°©_fd
();

112 
	`™y_badbuf
(
badbuf_f°©
, "fstat");

113 
	}
}

116 
	$ã°_l°©
()

118 
	`ã°_l°©_∑th
();

119 
	`™y_em±y
(
l°©
, "lstat");

120 
	`™y_badbuf
(
badbuf_l°©
, "lstat");

121 
	}
}

124 
	$ã°_°©
()

126 
	`ã°_°©_∑th
();

127 
	`™y_em±y
(
°©
, "stat");

128 
	`™y_badbuf
(
badbuf_°©
, "stat");

129 
	}
}

	@userland/testbin/badcall/bad_symlink.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$symlök_em±y1
()

43 
rv
;

44 
rv
 = 
	`symlök
("", 
TESTLINK
);

45 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, "symlink ->Émpty string");

46 
	`ªmove
(
TESTLINK
);

47 
	}
}

51 
	$symlök_em±y2
()

53 
rv
;

54 
rv
 = 
	`symlök
("foo", "");

55 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "symlinkÇamedÉmpty string");

56 
	}
}

59 
	$ã°_symlök
()

61 
	`ã°_symlök_∑ths
();

62 
	`symlök_em±y1
();

63 
	`symlök_em±y2
();

64 
	}
}

	@userland/testbin/badcall/bad_time.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$time_bad£cs
(*
±r
, c⁄° *
desc
)

50 
rv
;

52 
rv
 = 
	`__time
(
±r
, 
NULL
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$time_badn£cs
(*
±r
, c⁄° *
desc
)

60 
rv
;

62 
rv
 = 
	`__time
(
NULL
, 
±r
);

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

64 
	}
}

67 
	$ã°_time
()

69 
	`time_bad£cs
(
INVAL_PTR
, "__time with invalid secondsÖointer");

70 
	`time_bad£cs
(
KERN_PTR
, "__time with kernel secondsÖointer");

72 
	`time_badn£cs
(
INVAL_PTR
, "__time with invalidÇsecsÖointer");

73 
	`time_badn£cs
(
KERN_PTR
, "__time with kernelÇsecsÖointer");

74 
	}
}

	@userland/testbin/badcall/bad_waitpid.c

34 
	~<sys/ty≥s.h
>

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<uni°d.h
>

38 
	~<î∫o.h
>

39 
	~<îr.h
>

41 
	~"c⁄fig.h
"

42 
	~"ã°.h
"

46 
	$waô_badpid
(
pid_t
 
pid
, c⁄° *
desc
)

48 
pid_t
 
rv
;

49 
x
;

51 
rv
 = 
	`waôpid
(
pid
, &
x
, 0);

53 i‡(
pid
 <0 && 
rv
 =-1 && 
î∫o
 =
ENOSYS
) {

54 
î∫o
 = 
ESRCH
;

56 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
ESRCH
, 
ECHILD
, 
desc
);

57 
	}
}

61 
	$waô_nuŒ°©us
()

63 
pid_t
 
pid
, 
rv
;

64 
x
;

66 
pid
 = 
	`f‹k
();

67 i‡(
pid
<0) {

68 
	`w¨n
("UH-OH: fork failed");

71 i‡(
pid
==0) {

72 
	`exô
(0);

76 
rv
 = 
	`waôpid
(
pid
, 
NULL
, 0);

77 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 0, "wait with NULL status");

78 
	`waôpid
(
pid
, &
x
, 0);

79 
	}
}

83 
	$waô_bad°©us
(*
±r
, c⁄° *
desc
)

85 
pid_t
 
pid
, 
rv
;

86 
x
;

88 
pid
 = 
	`f‹k
();

89 i‡(
pid
<0) {

90 
	`w¨n
("UH-OH: fork failed");

93 i‡(
pid
==0) {

94 
	`exô
(0);

97 
rv
 = 
	`waôpid
(
pid
, 
±r
, 0);

98 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

99 
	`waôpid
(
pid
, &
x
, 0);

100 
	}
}

104 
	$waô_u«lig√d
()

106 
pid_t
 
pid
, 
rv
;

107 
x
;

108 
°©us
[2];

109 *
±r
;

111 
pid
 = 
	`f‹k
();

112 i‡(
pid
<0) {

113 
	`w¨n
("UH-OH: fork failed");

116 i‡(
pid
==0) {

117 
	`exô
(0);

121 
±r
 = (*)(&
°©us
[0]);

124 
±r
++;

126 
rv
 = 
	`waôpid
(
pid
, (*)
±r
, 0);

127 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait with unaligned status");

128 i‡(
rv
<0) {

129 
	`waôpid
(
pid
, &
x
, 0);

131 
	}
}

135 
	$waô_badÊags
()

137 
pid_t
 
pid
, 
rv
;

138 
x
;

140 
pid
 = 
	`f‹k
();

141 i‡(
pid
<0) {

142 
	`w¨n
("UH-OH: fork failed");

145 i‡(
pid
==0) {

146 
	`exô
(0);

149 
rv
 = 
	`waôpid
(
pid
, &
x
, 309429);

150 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "wait with bad flags");

151 
	`waôpid
(
pid
, &
x
, 0);

152 
	}
}

156 
	$waô_£lf
()

158 
pid_t
 
rv
;

159 
x
;

161 
rv
 = 
	`waôpid
(
	`gëpid
(), &
x
, 0);

162 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait for self");

163 
	}
}

167 
	$waô_∑ª¡
()

169 
pid_t
 
mypid
, 
chûdpid
, 
rv
;

170 
x
;

172 
mypid
 = 
	`gëpid
();

173 
chûdpid
 = 
	`f‹k
();

174 i‡(
chûdpid
<0) {

175 
	`w¨n
("UH-OH: can't fork");

178 i‡(
chûdpid
==0) {

180 
rv
 = 
	`waôpid
(
mypid
, &
x
, 0);

181 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait forÖarent (from child)");

182 
	`_exô
(0);

184 
rv
 = 
	`waôpid
(
chûdpid
, &
x
, 0);

185 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait forÖarentÅest (fromÖarent)");

186 
	}
}

192 
	$waô_siblögs_chûd
(c⁄° *
£m«me
)

194 
pid_t
 
pids
[2], 
mypid
, 
Ÿhîpid
;

195 
rv
, 
fd
, 
£mfd
, 
x
;

197 
mypid
 = 
	`gëpid
();

204 
£mfd
 = 
	`›í
(
£m«me
, 
O_RDONLY
);

205 i‡(
£mfd
 < 0) {

206 
	`w¨n
("UH-OH: childÖrocess (pid %d) can't open %s",

207 
mypid
, 
£m«me
);

210 i‡(
	`ªad
(
£mfd
, 
NULL
, 1) < 0) {

211 
	`w¨n
("UH-OH: i¿pid %d: %s:Ñód", 
mypid
, 
£m«me
);

213 
	`˛o£
(
£mfd
);

216 
fd
 = 
	`›í
(
TESTFILE
, 
O_RDONLY
);

217 i‡(
fd
<0) {

218 
	`w¨n
("UH-OH: childÖrocess (pid %d) can't open %s",

219 
mypid
, 
TESTFILE
);

229 
rv
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

230 i‡(
rv
<0) {

231 
	`w¨n
("UH-OH: childÖrocess (pid %d)ÜseekÉrror",

232 
mypid
);

235 
rv
 = 
	`ªad
(
fd
, 
pids
, (pids));

236 i‡(
rv
<0) {

237 
	`w¨n
("UH-OH: childÖrocess (pid %d)ÑeadÉrror",

238 
mypid
);

241 } 
rv
 < ()(
pids
));

243 i‡(
mypid
==
pids
[0]) {

244 
Ÿhîpid
 = 
pids
[1];

246 i‡(
mypid
==
pids
[1]) {

247 
Ÿhîpid
 = 
pids
[0];

250 
	`w¨n
("UH-OH: childÖrocess (pid %d) got garbage in comm file",

251 
mypid
);

254 
	`˛o£
(
fd
);

256 
rv
 = 
	`waôpid
(
Ÿhîpid
, &
x
, 0);

257 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "sibling wait");

258 
	}
}

262 
	$waô_siblögs
()

264 
pid_t
 
pids
[2];

265 
rv
, 
fd
, 
£mfd
, 
x
;

266 
£m«me
[32];

270 
	`¢¥ötf
(
£m«me
, (£m«me), "£m:badˇŒ.%d", ()
	`gëpid
());

271 
£mfd
 = 
	`›í
(
£m«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

272 i‡(
£mfd
 < 0) {

273 
	`w¨n
("UH-OH: can't make semaphore");

277 
fd
 = 
	`›í_ã°fûe
(
NULL
);

278 i‡(
fd
<0) {

279 
	`˛o£
(
£mfd
);

280 
	`ªmove
(
£m«me
);

284 
pids
[0] = 
	`f‹k
();

285 i‡(
pids
[0]<0) {

286 
	`w¨n
("UH-OH: can't fork");

287 
	`˛o£
(
fd
);

288 
	`˛o£
(
£mfd
);

289 
	`ªmove
(
£m«me
);

292 i‡(
pids
[0]==0) {

293 
	`˛o£
(
fd
);

294 
	`˛o£
(
£mfd
);

295 
	`waô_siblögs_chûd
(
£m«me
);

296 
	`_exô
(0);

299 
pids
[1] = 
	`f‹k
();

300 i‡(
pids
[1]<0) {

301 
	`w¨n
("UH-OH: can't fork");

303 
	`˛o£
(
fd
);

304 
	`˛o£
(
£mfd
);

305 
	`ªmove
(
£m«me
);

308 i‡(
pids
[1]==0) {

309 
	`˛o£
(
fd
);

310 
	`˛o£
(
£mfd
);

311 
	`waô_siblögs_chûd
(
£m«me
);

312 
	`_exô
(0);

315 
rv
 = 
	`wrôe
(
fd
, 
pids
, (pids));

316 i‡(
rv
 < 0) {

317 
	`w¨n
("UH-OH: wrôêîr‹ o¿%s", 
TESTFILE
);

319 
	`˛o£
(
fd
);

320 
	`˛o£
(
£mfd
);

321 
	`ªmove
(
£m«me
);

324 i‡(
rv
 !()(
pids
)) {

325 
	`w¨nx
("UH-OH: wrôêîr‹ o¿%s: sh‹àcou¡", 
TESTFILE
);

327 
	`˛o£
(
fd
);

328 
	`˛o£
(
£mfd
);

329 
	`ªmove
(
£m«me
);

334 
rv
 = 
	`wrôe
(
£mfd
, 
NULL
, 2);

335 i‡(
rv
 < 0) {

336 
	`w¨n
("UH-OH: %s: wrôe", 
£m«me
);

339 
rv
 = 
	`waôpid
(
pids
[0], &
x
, 0);

340 i‡(
rv
<0) {

341 
	`w¨n
("UH-OH:Éº‹ waôög f‹ chûd 0 (pid %d)", 
pids
[0]);

343 
rv
 = 
	`waôpid
(
pids
[1], &
x
, 0);

344 i‡(
rv
<0) {

345 
	`w¨n
("UH-OH:Éº‹ waôög f‹ chûd 1 (pid %d)", 
pids
[1]);

347 
	`w¨nx
("passed: siblings wait forÉach other");

348 
	`˛o£
(
fd
);

349 
	`˛o£
(
£mfd
);

350 
	`ªmove
(
£m«me
);

351 
	`ªmove
(
TESTFILE
);

352 
	}
}

357 
	$ã°_waôpid
()

359 
	`waô_badpid
(-8, "wait forÖid -8");

360 
	`waô_badpid
(-1, "wait forÖid -1");

361 
	`waô_badpid
(0, "pid zero");

362 
	`waô_badpid
(
NONEXIST_PID
, "nonexistentÖid");

364 
	`waô_nuŒ°©us
();

365 
	`waô_bad°©us
(
INVAL_PTR
, "wait with invalidÖointer status");

366 
	`waô_bad°©us
(
KERN_PTR
, "wait with kernelÖointer status");

368 
	`waô_u«lig√d
();

370 
	`waô_badÊags
();

372 
	`waô_£lf
();

373 
	`waô_∑ª¡
();

374 
	`waô_siblögs
();

375 
	}
}

	@userland/testbin/badcall/bad_write.c

34 
	~"ã°.h
"

37 
	$ã°_wrôe
()

39 
	`ã°_wrôe_fd
();

40 
	`ã°_wrôe_buf
();

41 
	}
}

	@userland/testbin/badcall/common_buf.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

47 
	gbuf_fd
;

49 
	sbu·e°
 {

50 (*
	m£tup
)();

51 (*
	m›
)(*);

52 (*
	m˛ónup
)();

53 c⁄° *
	m«me
;

60 
	$ªad_£tup
()

62 
buf_fd
 = 
	`›í_ã°fûe
("i doÇotÜike greenÉggsánd ham");

63 i‡(
buf_fd
<0) {

67 
	}
}

71 
	$ªad_badbuf
(*
buf
)

73  
	`ªad
(
buf_fd
, 
buf
, 128);

74 
	}
}

78 
	$ªad_˛ónup
()

80 
	`˛o£
(
buf_fd
);

81 
	`ªmove
(
TESTFILE
);

82 
	}
}

88 
	$wrôe_£tup
()

90 
buf_fd
 = 
	`›í_ã°fûe
(
NULL
);

91 i‡(
buf_fd
<0) {

95 
	}
}

99 
	$wrôe_badbuf
(*
±r
)

101  
	`wrôe
(
buf_fd
, 
±r
, 128);

102 
	}
}

106 
	$wrôe_˛ónup
()

108 
	`˛o£
(
buf_fd
);

109 
	`ªmove
(
TESTFILE
);

110 
	}
}

116 
	$gëdúíåy_£tup
()

118 
buf_fd
 = 
	`›í
(".", 
O_RDONLY
);

119 i‡(
buf_fd
 < 0) {

120 
	`w¨n
("UH-OH: couldn't open .");

124 
	}
}

128 
	$gëdúíåy_badbuf
(*
±r
)

130  
	`gëdúíåy
(
buf_fd
, 
±r
, 1024);

131 
	}
}

135 
	$gëdúíåy_˛ónup
()

137 
	`˛o£
(
buf_fd
);

138 
	}
}

144 
	$ªadlök_£tup
()

146  
	`¸óã_ã°lök
();

147 
	}
}

151 
	$ªadlök_badbuf
(*
buf
)

153  
	`ªadlök
(
TESTLINK
, 
buf
, 168);

154 
	}
}

158 
	$ªadlök_˛ónup
()

160 
	`ªmove
(
TESTLINK
);

161 
	}
}

165 
	$gëcwd_£tup
(Ë{  0; 
	}
}

166 
	$gëcwd_˛ónup
(Ë{
	}
}

170 
	$gëcwd_badbuf
(*
buf
)

172  
	`__gëcwd
(
buf
, 408);

173 
	}
}

179 
	$comm⁄_badbuf
(
bu·e°
 *
öfo
, *
buf
, c⁄° *
bufdesc
)

181 
mydesc
[128];

182 
rv
;

184 
	`¢¥ötf
(
mydesc
, (mydesc), "%s with %s buffer",

185 
öfo
->
«me
, 
bufdesc
);

186 
öfo
->
	`£tup
();

187 
rv
 = 
öfo
->
	`›
(
buf
);

188 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

189 
öfo
->
	`˛ónup
();

190 
	}
}

194 
	$™y_badbuf
(
bu·e°
 *
öfo
)

196 
	`comm⁄_badbuf
(
öfo
, 
NULL
, "NULL");

197 
	`comm⁄_badbuf
(
öfo
, 
INVAL_PTR
, "invalid");

198 
	`comm⁄_badbuf
(
öfo
, 
KERN_PTR
, "kernel-space");

199 
	}
}

203 
	#T
(
ˇŒ
) \

205 
ã°_
##
ˇŒ
##
	`_buf
() \

207 
bu·e°
 
öfo
 = { \

208 
ˇŒ
##
_£tup
, \

209 
ˇŒ
##
_badbuf
, \

210 
ˇŒ
##
_˛ónup
, \

213 
	`™y_badbuf
(&
öfo
); \

214 }

	)

216 
T
(
ªad
);

217 
T
(
wrôe
);

218 
T
(
gëdúíåy
);

219 
T
(
ªadlök
);

220 
T
(
gëcwd
);

	@userland/testbin/badcall/common_fds.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

48 
	erwã°modes
 {

49 
	mRW_TEST_NONE
,

50 
	mRW_TEST_RDONLY
,

51 
	mRW_TEST_WRONLY
,

56 
	$ªad_badfd
(
fd
)

58 
buf
[128];

59  
	`ªad
(
fd
, 
buf
, (buf));

60 
	}
}

64 
	$wrôe_badfd
(
fd
)

66 
buf
[128];

67 
	`mem£t
(
buf
, 'a', (buf));

68  
	`wrôe
(
fd
, 
buf
, (buf));

69 
	}
}

74 
	$˛o£_badfd
(
fd
)

76  
	`˛o£
(
fd
);

77 
	}
}

81 
	$io˘l_badfd
(
fd
)

83  
	`io˘l
(
fd
, 0, 
NULL
);

84 
	}
}

88 
	$l£ek_badfd
(
fd
)

90  
	`l£ek
(
fd
, 0, 
SEEK_SET
);

91 
	}
}

95 
	$fsync_badfd
(
fd
)

97  
	`fsync
(
fd
);

98 
	}
}

102 
	$·runˇã_badfd
(
fd
)

104  
	`·runˇã
(
fd
, 60);

105 
	}
}

109 
	$f°©_badfd
(
fd
)

111 
°©
 
sb
;

112  
	`f°©
(
fd
, &
sb
);

113 
	}
}

117 
	$gëdúíåy_badfd
(
fd
)

119 
buf
[32];

120  
	`gëdúíåy
(
fd
, 
buf
, (buf));

121 
	}
}

125 
	$dup2_badfd
(
fd
)

128  
	`dup2
(
fd
, 
CLOSED_FD
+1);

129 
	}
}

133 
	$dup2_˛ónup
()

135 
	`˛o£
(
CLOSED_FD
+1);

136 
	}
}

142 
™y_badfd
((*
func
)(
fd
), (*
˛ónup
)(), c⁄° *
ˇŒ«me
,

143 
fd
, c⁄° *
fddesc
)

145 
fuŒdesc
[128];

146 
rv
;

148 
	`¢¥ötf
(
fuŒdesc
, (fuŒdesc), "%†usög %s", 
ˇŒ«me
, 
fddesc
);

149 
rv
 = 
	`func
(
fd
);

150 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EBADF
, 
fuŒdesc
);

151 i‡(
˛ónup
) {

152 
	`˛ónup
();

154 
	}
}

158 
ru¡e°
((*
func
)(
fd
), (*
˛ónup
)(), c⁄° *
ˇŒ«me
,

159 
rwã°modes
 
rw
)

161 
fd
;

168 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, -1, "fd -1");

171 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, -5, "fd -5");

174 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
CLOSED_FD
, "closed fd");

177 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
IMPOSSIBLE_FD
, "impossible fd");

180 #ifde‡
OPEN_MAX


181 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
OPEN_MAX
, "fd OPEN_MAX");

183 
	`w¨nx
("Warning: OPEN_MAXÇot defined,Åest skipped");

186 i‡(
rw
 =
RW_TEST_RDONLY
) {

187 
fd
 = 
	`ª›í_ã°fûe
(
O_RDONLY
|
O_CREAT
);

188 i‡(
fd
 < 0) {

192 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
fd
,

195 
	`˛o£
(
fd
);

197 i‡(
rw
 =
RW_TEST_WRONLY
) {

198 
fd
 = 
	`ª›í_ã°fûe
(
O_WRONLY
|
O_CREAT
);

199 i‡(
fd
 < 0) {

203 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
fd
,

206 
	`˛o£
(
fd
);

208 
	}
}

212 
	#T
(
ˇŒ
, 
rw
) \

214 
ã°_
##
ˇŒ
##
	`_fd
() \

216 
	`ru¡e°
(
ˇŒ
##
_badfd
, 
NULL
, #ˇŒ, 
rw
); \

217 }

	)

219 
	#TC
(
ˇŒ
, 
rw
) \

221 
ã°_
##
ˇŒ
##
	`_fd
() \

223 
	`ru¡e°
(
ˇŒ
##
_badfd
, cÆl##
_˛ónup
, #ˇŒ, 
rw
);\

224 }

	)

226 
T
(
ªad
, 
RW_TEST_WRONLY
);

227 
T
(
wrôe
, 
RW_TEST_RDONLY
);

228 
T
(
˛o£
, 
RW_TEST_NONE
);

229 
T
(
io˘l
, 
RW_TEST_NONE
);

230 
T
(
l£ek
, 
RW_TEST_NONE
);

231 
T
(
fsync
, 
RW_TEST_NONE
);

232 
T
(
·runˇã
, 
RW_TEST_RDONLY
);

233 
T
(
f°©
, 
RW_TEST_NONE
);

234 
T
(
gëdúíåy
, 
RW_TEST_WRONLY
);

235 
TC
(
dup2
, 
RW_TEST_NONE
);

	@userland/testbin/badcall/common_path.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

49 
	$›í_bad∑th
(c⁄° *
∑th
)

51  
	`›í
(
∑th
, 
O_RDONLY
);

52 
	}
}

56 
	$ªmove_bad∑th
(c⁄° *
∑th
)

58  
	`ªmove
(
∑th
);

59 
	}
}

63 
	$ª«me_bad∑th1
(c⁄° *
∑th
)

65  
	`ª«me
(
∑th
, 
TESTFILE
);

66 
	}
}

70 
	$ª«me_bad∑th2
(c⁄° *
∑th
)

72  
	`ª«me
(
TESTFILE
, 
∑th
);

73 
	}
}

77 
	$lök_bad∑th1
(c⁄° *
∑th
)

79  
	`lök
(
∑th
, 
TESTFILE
);

80 
	}
}

84 
	$lök_bad∑th2
(c⁄° *
∑th
)

86  
	`lök
(
TESTFILE
, 
∑th
);

87 
	}
}

91 
	$mkdú_bad∑th
(c⁄° *
∑th
)

93  
	`mkdú
(
∑th
, 0775);

94 
	}
}

98 
	$rmdú_bad∑th
(c⁄° *
∑th
)

100  
	`rmdú
(
∑th
);

101 
	}
}

105 
	$chdú_bad∑th
(c⁄° *
∑th
)

107  
	`chdú
(
∑th
);

108 
	}
}

112 
	$symlök_bad∑th1
(c⁄° *
∑th
)

114  
	`symlök
(
∑th
, 
TESTFILE
);

115 
	}
}

119 
	$symlök_bad∑th2
(c⁄° *
∑th
)

121  
	`symlök
(
TESTFILE
, 
∑th
);

122 
	}
}

126 
	$ªadlök_bad∑th
(c⁄° *
∑th
)

128 
buf
[128];

129  
	`ªadlök
(
∑th
, 
buf
, (buf));

130 
	}
}

134 
	$l°©_bad∑th
(c⁄° *
«me
)

136 
°©
 
sb
;

137  
	`l°©
(
«me
, &
sb
);

138 
	}
}

142 
	$°©_bad∑th
(c⁄° *
«me
)

144 
°©
 
sb
;

145  
	`°©
(
«me
, &
sb
);

146 
	}
}

152 
comm⁄_bad∑th
((*
func
)(c⁄° *
∑th
), 
mk
, 
rm
, const *path,

153 c⁄° *
ˇŒ
, c⁄° *
∑thdesc
)

155 
mydesc
[128];

156 
rv
;

158 i‡(
mk
) {

159 i‡(
	`¸óã_ã°fûe
()<0) {

164 
	`¢¥ötf
(
mydesc
, (mydesc), "%†wôh %†∑th", 
ˇŒ
, 
∑thdesc
);

165 
rv
 = 
	`func
(
∑th
);

166 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

168 i‡(
mk
 || 
rm
) {

169 
	`ªmove
(
TESTFILE
);

171 
	}
}

175 
™y_bad∑th
((*
func
)(c⁄° *
∑th
), c⁄° *
ˇŒ
, 
mk
, 
rm
)

177 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
NULL
, 
ˇŒ
, "NULL");

178 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
INVAL_PTR
, 
ˇŒ
, "invalid-pointer");

179 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
KERN_PTR
, 
ˇŒ
, "kernel-pointer");

180 
	}
}

185 
	#T
(
ˇŒ
) \

187 
ã°_
##
ˇŒ
##
	`_∑th
() \

189 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th
, #call, 0, 0); \

190 }

	)

192 
T
(
›í
);

193 
T
(
ªmove
);

194 
T
(
mkdú
);

195 
T
(
rmdú
);

196 
T
(
chdú
);

197 
T
(
ªadlök
);

198 
T
(
°©
);

199 
T
(
l°©
);

202 
	#T2
(
ˇŒ
) \

204 
ã°_
##
ˇŒ
##
	`_∑ths
() \

206 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th1
, #call "(arg1)", 0, 1); \

207 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th2
, #call "(arg2)", 1, 1); \

208 }

	)

210 
T2
(
ª«me
);

211 
T2
(
lök
);

212 
T2
(
symlök
);

	@userland/testbin/badcall/config.h

37 #i‡
deföed
(
__mùs__
)

38 
	#KERN_PTR
 ((*)0x80000000Ë

	)

39 
	#INVAL_PTR
 ((*)0x40000000Ë

	)

48 
	#CLOSED_FD
 10

	)

51 
	#IMPOSSIBLE_FD
 1234567890

	)

54 
	#NONEXIST_PID
 34000

	)

57 
	#MAGIC_STATUS
 107

	)

60 
	#NONEXIST_IOCTL
 12345

	)

	@userland/testbin/badcall/driver.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<uni°d.h
>

36 
	~<î∫o.h
>

37 
	~<îr.h
>

39 
	~"c⁄fig.h
"

40 
	~"ã°.h
"

46 
	$födîr‹
(
rv
, 
îr‹
)

48 i‡(
rv
==-1) {

49  
îr‹
;

54 
	}
}

57 
	$ªp‹t_survivÆ
(
rv
, 
îr‹
, c⁄° *
desc
)

60 
î∫o
 = 
	`födîr‹
(
rv
, 
îr‹
);

61 
	`w¨n
("∑s£d: %s", 
desc
);

62 
	}
}

66 
	$ªp‹t_ã°N
(
rv
, 
îr‹
, *
right_îr‹s
, 
right_num
,

67 c⁄° *
desc
)

69 
i
, 
gŸîr‹
;

71 
gŸîr‹
 = 
	`födîr‹
(
rv
, 
îr‹
);

73 
i
=0; i<
right_num
; i++) {

74 i‡(
gŸîr‹
 =
right_îr‹s
[
i
]) {

75 
	`w¨nx
("∑s£d: %s", 
desc
);

80 i‡(
gŸîr‹
 =
ENOSYS
) {

81 
	`w¨nx
("------: %†(unim∂emíãd)", 
desc
);

84 
î∫o
 = 
gŸîr‹
;

85 
	`w¨n
("FAILURE: %s", 
desc
);

87 
	}
}

90 
	$ªp‹t_ã°
(
rv
, 
îr‹
, 
right_îr‹
, c⁄° *
desc
)

92 
	`ªp‹t_ã°N
(
rv
, 
îr‹
, &
right_îr‹
, 1, 
desc
);

93 
	}
}

96 
	$ªp‹t_ã°2
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, c⁄° *
desc
)

98 
ok
[2];

100 
ok
[0] = 
okîr1
;

101 
ok
[1] = 
okîr2
;

102 
	`ªp‹t_ã°N
(
rv
, 
îr‹
, 
ok
, 2, 
desc
);

103 
	}
}

106 
	$ªp‹t_ã°3
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, 
okîr3
,

107 c⁄° *
desc
)

109 
ok
[3];

111 
ok
[0] = 
okîr1
;

112 
ok
[1] = 
okîr2
;

113 
ok
[2] = 
okîr3
;

114 
	`ªp‹t_ã°N
(
rv
, 
îr‹
, 
ok
, 3, 
desc
);

115 
	}
}

120 
	$›í_ã°fûe
(c⁄° *
°rög
)

122 
fd
, 
rv
;

123 
size_t
 
Àn
;

125 
fd
 = 
	`›í
(
TESTFILE
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0664);

126 i‡(
fd
<0) {

127 
	`w¨n
("UH-OH: cª©ög %s: faûed", 
TESTFILE
);

131 i‡(
°rög
) {

132 
Àn
 = 
	`°æí
(
°rög
);

133 
rv
 = 
	`wrôe
(
fd
, 
°rög
, 
Àn
);

134 i‡(
rv
<0) {

135 
	`w¨n
("UH-OH: wrôêtÿ%†Áûed", 
TESTFILE
);

136 
	`˛o£
(
fd
);

137 
	`ªmove
(
TESTFILE
);

140 i‡(()
rv
 !
Àn
) {

141 
	`w¨nx
("UH-OH: wrôêtÿ%†gŸ sh‹àcou¡", 
TESTFILE
);

142 
	`˛o£
(
fd
);

143 
	`ªmove
(
TESTFILE
);

146 
rv
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

147 i‡(
rv
<0) {

148 
	`w¨n
("UH-OH:Ñewöd o‡%†Áûed", 
TESTFILE
);

149 
	`˛o£
(
fd
);

150 
	`ªmove
(
TESTFILE
);

154  
fd
;

155 
	}
}

158 
	$¸óã_ã°fûe
()

160 
fd
, 
rv
;

162 
fd
 = 
	`›í_ã°fûe
(
NULL
);

163 i‡(
fd
<0) {

167 
rv
 = 
	`˛o£
(
fd
);

168 i‡(
rv
<0) {

169 
	`w¨n
("UH-OH: closög %†Áûed", 
TESTFILE
);

174 
	}
}

177 
	$ª›í_ã°fûe
(
›íÊags
)

179 
fd
;

181 
fd
 = 
	`›í
(
TESTFILE
, 
›íÊags
, 0664);

182 i‡(
fd
 < 0) {

183 
	`w¨n
("UH-OH:Ñe›íög %s: faûed", 
TESTFILE
);

186  
fd
;

187 
	}
}

190 
	$¸óã_ã°dú
()

192 
rv
;

193 
rv
 = 
	`mkdú
(
TESTDIR
, 0775);

194 i‡(
rv
<0) {

195 i‡(
î∫o
 =
ENOSYS
) {

196 
	`w¨nx
("------: mkdir unimplemented; cannotÑunÅest");

199 
	`w¨n
("UH-OH: mkdú %†Áûed", 
TESTDIR
);

204 
	}
}

207 
	$¸óã_ã°lök
()

209 
rv
;

210 
rv
 = 
	`symlök
("bœhbœh", 
TESTLINK
);

211 i‡(
rv
<0) {

212 
	`w¨n
("UH-OH: makög symlök %†Áûed", 
TESTLINK
);

216 
	}
}

222 
	mch
;

223 
	mas°
;

224 c⁄° *
	m«me
;

225 (*
	mf
)();

226 } 
	g›s
[] = {

227 { 'a', 2, "execv", 
ã°_execv
 },

228 { 'b', 2, "waôpid", 
ã°_waôpid
 },

229 { 'c', 2, "›í", 
ã°_›í
 },

230 { 'd', 2, "ªad", 
ã°_ªad
 },

231 { 'e', 2, "wrôe", 
ã°_wrôe
 },

232 { 'f', 2, "˛o£", 
ã°_˛o£
 },

233 { 'g', 0, "ªboŸ", 
ã°_ªboŸ
 },

234 { 'h', 3, "sbrk", 
ã°_sbrk
 },

235 { 'i', 5, "io˘l", 
ã°_io˘l
 },

236 { 'j', 2, "l£ek", 
ã°_l£ek
 },

237 { 'k', 4, "fsync", 
ã°_fsync
 },

238 { 'l', 4, "·runˇã", 
ã°_·runˇã
 },

239 { 'm', 4, "f°©", 
ã°_f°©
 },

240 { 'n', 4, "ªmove", 
ã°_ªmove
 },

241 { 'o', 4, "ª«me", 
ã°_ª«me
 },

242 { 'p', 5, "lök", 
ã°_lök
 },

243 { 'q', 4, "mkdú", 
ã°_mkdú
 },

244 { 'r', 4, "rmdú", 
ã°_rmdú
 },

245 { 's', 2, "chdú", 
ã°_chdú
 },

246 { 't', 4, "gëdúíåy", 
ã°_gëdúíåy
 },

247 { 'u', 5, "symlök", 
ã°_symlök
 },

248 { 'v', 5, "ªadlök", 
ã°_ªadlök
 },

249 { 'w', 2, "dup2", 
ã°_dup2
 },

250 { 'x', 5, "pùe", 
ã°_pùe
 },

251 { 'y', 5, "__time", 
ã°_time
 },

252 { 'z', 2, "__gëcwd", 
ã°_gëcwd
 },

253 { '{', 5, "°©", 
ã°_°©
 },

254 { '|', 5, "l°©", 
ã°_l°©
 },

255 { 0, 0, 
NULL
, NULL }

258 
	#LOWEST
 'a'

	)

259 
	#HIGHEST
 '|'

	)

263 
	$míu
()

265 
i
;

266 
i
=0; 
›s
[i].
«me
; i++) {

267 
	`¥ötf
("[%c] %-24s", 
›s
[
i
].
ch
, ops[i].
«me
);

268 i‡(
i
%2==1) {

269 
	`¥ötf
("\n");

272 i‡(
i
%2==1) {

273 
	`¥ötf
("\n");

275 
	`¥ötf
("[1] %-24s", "asst1");

276 
	`¥ötf
("[2] %-24s\n", "asst2");

277 
	`¥ötf
("[3] %-24s", "asst3");

278 
	`¥ötf
("[4] %-24s\n", "asst4");

279 
	`¥ötf
("[*] %-24s", "all");

280 
	`¥ötf
("[!] %-24s\n", "quit");

281 
	}
}

285 
	$runô
(
›
)

287 
i
, 
k
;

289 i‡(
›
=='!') {

290 
	`exô
(0);

293 i‡(
›
=='?') {

294 
	`míu
();

298 i‡(
›
=='*') {

299 
i
=0; 
›s
[i].
«me
; i++) {

300 
	`¥ötf
("[%s]\n", 
›s
[
i
].
«me
);

301 
›s
[
i
].
	`f
();

306 i‡(
›
>='1' && op <= '4') {

307 
k
 = 
›
-'0';

308 
i
=0; 
›s
[i].
«me
; i++) {

309 i‡(
›s
[
i
].
as°
 <
k
) {

310 
	`¥ötf
("[%s]\n", 
›s
[
i
].
«me
);

311 
›s
[
i
].
	`f
();

317 i‡(
›
 < 
LOWEST
 || o∞> 
HIGHEST
) {

318 
	`¥ötf
("InvÆidÑeque° %c\n", 
›
);

322 
›s
[
›
-'a'].
	`f
();

323 
	}
}

326 
	$maö
(
¨gc
, **
¨gv
)

328 
›
, 
i
, 
j
;

330 
	`¥ötf
("[%c-%c, 1-4, *, ?=míu, !=quô]\n", 
LOWEST
, 
HIGHEST
);

332 i‡(
¨gc
 > 1) {

333 
i
=1; i<
¨gc
; i++) {

334 
j
=0; 
¨gv
[
i
][j]; j++) {

335 
	`¥ötf
("Choose: %c\n",

336 
¨gv
[
i
][
j
]);

337 
	`runô
(
¨gv
[
i
][
j
]);

342 
	`míu
();

344 
	`¥ötf
("Choose: ");

345 
›
 = 
	`gëch¨
();

346 i‡(
›
==
EOF
) {

349 
	`¥ötf
("%c\n", 
›
);

350 
	`runô
(
›
);

355 
	}
}

	@userland/testbin/badcall/test.h

30 
	#TESTFILE
 "badˇŒfûe"

	)

31 
	#TESTDIR
 "badˇŒdú"

	)

32 
	#TESTLINK
 "badˇŒlök"

	)

35 
ªp‹t_survivÆ
(
rv
, 
îr‹
, c⁄° *
desc
);

36 
ªp‹t_ã°
(
rv
, 
îr‹
, 
right_îr‹
, c⁄° *
desc
);

37 
ªp‹t_ã°2
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, c⁄° *
desc
);

38 
ªp‹t_ã°3
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, 
okîr3
,

39 c⁄° *
desc
);

40 
›í_ã°fûe
(c⁄° *
°r
);

41 
ª›í_ã°fûe
(
›íÊags
);

42 
¸óã_ã°fûe
();

43 
¸óã_ã°dú
();

44 
¸óã_ã°lök
();

47 
ã°_ªad_buf
();

48 
ã°_wrôe_buf
();

49 
ã°_gëdúíåy_buf
();

50 
ã°_gëcwd_buf
();

51 
ã°_ªadlök_buf
();

54 
ã°_ªad_fd
();

55 
ã°_wrôe_fd
();

56 
ã°_˛o£_fd
();

57 
ã°_io˘l_fd
();

58 
ã°_l£ek_fd
();

59 
ã°_fsync_fd
();

60 
ã°_·runˇã_fd
();

61 
ã°_f°©_fd
();

62 
ã°_gëdúíåy_fd
();

63 
ã°_dup2_fd
();

66 
ã°_›í_∑th
();

67 
ã°_ªmove_∑th
();

68 
ã°_ª«me_∑ths
();

69 
ã°_lök_∑ths
();

70 
ã°_mkdú_∑th
();

71 
ã°_rmdú_∑th
();

72 
ã°_chdú_∑th
();

73 
ã°_symlök_∑ths
();

74 
ã°_ªadlök_∑th
();

75 
ã°_°©_∑th
();

76 
ã°_l°©_∑th
();

79 
ã°_execv
();

80 
ã°_waôpid
();

81 
ã°_›í
();

82 
ã°_ªad
();

83 
ã°_wrôe
();

84 
ã°_˛o£
();

85 
ã°_ªboŸ
();

86 
ã°_sbrk
();

87 
ã°_io˘l
();

88 
ã°_l£ek
();

89 
ã°_fsync
();

90 
ã°_·runˇã
();

91 
ã°_f°©
();

92 
ã°_ªmove
();

93 
ã°_ª«me
();

94 
ã°_lök
();

95 
ã°_mkdú
();

96 
ã°_rmdú
();

97 
ã°_chdú
();

98 
ã°_gëdúíåy
();

99 
ã°_symlök
();

100 
ã°_ªadlök
();

101 
ã°_dup2
();

102 
ã°_pùe
();

103 
ã°_time
();

104 
ã°_gëcwd
();

105 
ã°_°©
();

106 
ã°_l°©
();

	@userland/testbin/bigexec/bigexec.c

37 
	~<°d¨g.h
>

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

40 
	~<uni°d.h
>

41 
	~<limôs.h
>

42 
	~<as£π.h
>

43 
	~<îr.h
>

45 
	#_PATH_MYSELF
 "/ã°bö/bigexec"

	)

50 c⁄° 
	gw‹d8
[] = "Dalemark";

51 
	gw‹d4050
[4051];

52 
	gw‹d16320
[16321];

53 
	gw‹d65500
[65501];

57 
	$fûl
(*
buf
, 
size_t
 
buÊí
)

59 c⁄° *c⁄° 
«mes
[22] = {

66 c⁄° *
«me
;

67 
size_t
 
Àn
;

69 
buÊí
 > 4) {

70 
«me
 = 
«mes
[
	`øndom
()%22];

71 
Àn
 = 
	`°æí
(
«me
);

72 i‡(
Àn
 < 
buÊí
) {

73 
	`°r˝y
(
buf
, 
«me
);

74 
buf
 +
Àn
;

75 
buÊí
 -
Àn
;

76 i‡(
buÊí
 > 1) {

77 *
buf
 = ' ';

78 
buf
++;

79 
buÊí
--;

83 
buÊí
 > 1) {

84 *
buf
 = '.';

85 
buf
++;

86 
buÊí
--;

88 *
buf
 = 0;

89 
	}
}

93 
	$¥ïw‹ds
()

95 
	`§™dom
(16581);

96 
	`fûl
(
w‹d4050
, (word4050));

97 
	`fûl
(
w‹d16320
, (word16320));

98 
	`fûl
(
w‹d65500
, (word65500));

99 
	}
}

106 
	$åy
(c⁄° *
fú°
, ...)

108 c⁄° *
¨gs
[20];

109 c⁄° *
s
;

110 
va_li°
 
≠
;

111 
num
;

113 
	`as£π
(
fú°
 !
NULL
);

114 
¨gs
[0] = 
_PATH_MYSELF
;

115 
¨gs
[1] = 
fú°
;

116 
num
 = 2;

118 
	`va_°¨t
(
≠
, 
fú°
);

120 
s
 = 
	`va_¨g
(
≠
, const *);

121 i‡(
s
 =
NULL
) {

124 
	`as£π
(
num
 < 20);

125 
¨gs
[
num
++] = 
s
;

127 
	`as£π
(
num
 < 20);

128 
¨gs
[
num
] = 
NULL
;

129 
	`execv
(
_PATH_MYSELF
, (**)
¨gs
);

130 
	`îr
(1, "execv");

131 
	}
}

135 
	$åym™y
(
num
, c⁄° *
w‹d
)

137 c⁄° *
¨gs
[
num
+2];

138 
i
;

140 
¨gs
[0] = 
_PATH_MYSELF
;

141 
i
=0; i<
num
; i++) {

142 
¨gs
[
i
+1] = 
w‹d
;

144 
¨gs
[
num
+1] = 
NULL
;

145 
	`execv
(
_PATH_MYSELF
, (**)
¨gs
);

146 
	`îr
(1, "execv");

147 
	}
}

151 
	$check
(
¨gc
, *
¨gv
[], c⁄° *
fú°
, ...)

153 c⁄° *
s
;

154 
va_li°
 
≠
;

155 
pos
;

157 
pos
 = 1;

158 
	`va_°¨t
(
≠
, 
fú°
);

159 
s
 = 
fú°
;

160 
s
 !
NULL
) {

161 i‡(
pos
 =
¨gc
) {

165 
	`as£π
(
pos
 < 
¨gc
);

166 i‡(
¨gv
[
pos
] =
NULL
) {

168 
	`w¨nx
("¨gv[%d] i†nuŒ buà¨g¯i†%d", 
pos
, 
¨gc
);

171 i‡(
	`°rcmp
(
¨gv
[
pos
], 
s
) != 0) {

175 
s
 = 
	`va_¨g
(
≠
, const *);

176 
pos
++;

178 i‡(
pos
 !
¨gc
) {

182 i‡(
¨gv
[
pos
] !
NULL
) {

183 
	`w¨nx
("argv[argc] isÇotÇull");

187 
	}
}

191 
	$checkm™y
(
¨gc
, *
¨gv
[], 
num
, c⁄° *
w‹d
)

193 
i
;

195 i‡(
¨gc
 !
num
 + 1) {

199 
i
=1; i<
¨gc
; i++) {

200 i‡(
	`°rcmp
(
¨gv
[
i
], 
w‹d
) != 0) {

206 
	}
}

213 
	$dum∑rgs
(
¨gc
, *
¨gv
[])

215 c⁄° *
s
;

216 
i
;

218 
	`w¨nx
("%dárgs", 
¨gc
);

219 
	`w¨nx
("¨gv[0]: %s", 
¨gv
[0]);

220 
i
=1; i<=
¨gc
; i++) {

221 
s
 = 
¨gv
[
i
];

222 i‡(
s
 =
NULL
) {

223 
	`w¨nx
("¨gv[%d]: i†nuŒ", 
i
);

225 i‡(!
	`°rcmp
(
s
, 
w‹d8
)) {

226 
	`w¨nx
("¨gv[%d] i†w‹d8", 
i
);

228 i‡(!
	`°rcmp
(
s
, 
w‹d4050
)) {

229 
	`w¨nx
("¨gv[%d] i†w‹d4050", 
i
);

231 i‡(!
	`°rcmp
(
s
, 
w‹d16320
)) {

232 
	`w¨nx
("¨gv[%d] i†w‹d16320", 
i
);

234 i‡(!
	`°rcmp
(
s
, 
w‹d65500
)) {

235 
	`w¨nx
("¨gv[%d] i†w‹d65500", 
i
);

237 i‡(
	`°æí
(
s
) < 72) {

238 
	`w¨nx
("¨gv[%d]: %s", 
i
, 
s
);

241 
	`w¨nx
("argv[%d] is %zu bytes, begins %.64s",

242 
i
, 
	`°æí
(
s
), s);

245 
	}
}

248 
	$maö
(
¨gc
, *
¨gv
[])

250 i‡(
¨gc
 < 0) {

251 
	`îr
(1, "argc isÇegative!?");

254 
	`¥ïw‹ds
();

255 
	`as£π
(
	`°æí
(
w‹d8
) == 8);

256 
	`as£π
(
	`°æí
(
w‹d4050
) == 4050);

257 
	`as£π
(
	`°æí
(
w‹d16320
) == 16320);

258 
	`as£π
(
	`°æí
(
w‹d65500
) == 65500);

260 
	`as£π
(
ARG_MAX
 >= 65536);

262 i‡(
¨gv
 =
NULL
 || 
¨gc
 == 0 ||árgc == 1) {

264 
	`w¨nx
("Starting.");

269 
	`w¨nx
("1. Execing with one 8-letter word.");

270 
	`åy
(
w‹d8
, 
NULL
);

272 i‡(
	`check
(
¨gc
, 
¨gv
, 
w‹d8
, 
NULL
)) {

276 
	`w¨nx
("2. Execing with one 4050-letter word.");

277 
	`åy
(
w‹d4050
, 
NULL
);

279 i‡(
	`check
(
¨gc
, 
¨gv
, 
w‹d4050
, 
NULL
)) {

283 
	`w¨nx
("3. Execing withÅwo 4050-letter words.");

284 
	`åy
(
w‹d4050
, w‹d4050, 
NULL
);

286 i‡(
	`check
(
¨gc
, 
¨gv
, 
w‹d4050
, w‹d4050, 
NULL
)) {

298 
	`w¨nx
("4. Execing with 16 4050-letter words.");

299 
	`åy
(
w‹d4050
, word4050, word4050, word4050,

300 
w‹d4050
, word4050, word4050, word4050,

301 
w‹d4050
, word4050, word4050, word4050,

302 
w‹d4050
, word4050, word4050, word4050,

303 
NULL
);

305 i‡(
	`check
(
¨gc
, 
¨gv
,

306 
w‹d4050
, word4050, word4050, word4050,

307 
w‹d4050
, word4050, word4050, word4050,

308 
w‹d4050
, word4050, word4050, word4050,

309 
w‹d4050
, word4050, word4050, word4050,

310 
NULL
)) {

314 
	`w¨nx
("5. Execing with one 16320-letter word.");

315 
	`åy
(
w‹d16320
, 
NULL
);

317 i‡(
	`check
(
¨gc
, 
¨gv
, 
w‹d16320
, 
NULL
)) {

321 
	`w¨nx
("6. Execing withÅwo 16320-letter words.");

322 
	`åy
(
w‹d16320
, w‹d16320, 
NULL
);

324 i‡(
	`check
(
¨gc
, 
¨gv
, 
w‹d16320
, w‹d16320, 
NULL
)) {

328 
	`w¨nx
("7. Execing with four 16320-letter words.");

329 
	`åy
(
w‹d16320
, word16320, word16320, word16320,

330 
NULL
);

332 i‡(
	`check
(
¨gc
, 
¨gv
, 
w‹d16320
, word16320,

333 
w‹d16320
, w‹d16320, 
NULL
)) {

338 
	`w¨nx
("8. Execing with one 65500-letter word.");

339 
	`åy
(
w‹d65500
, 
NULL
);

341 i‡(
	`check
(
¨gc
, 
¨gv
, 
w‹d65500
, 
NULL
)) {

348 
	`as£π
((8+1+(*))*300 < 4096);

349 
	`w¨nx
("9. Execing with 300 8-letter words.");

350 
	`åym™y
(300, 
w‹d8
);

352 i‡(
	`checkm™y
(
¨gc
, 
¨gv
, 300, 
w‹d8
)) {

363 
	`as£π
((8+1+(*))*5020 < 65536);

364 
	`as£π
((8+1+2*(*))*3850 < 65536);

365 
	`w¨nx
("10. Execing with 3850 8-letter words.");

366 
	`åym™y
(3850, 
w‹d8
);

368 i‡(
	`checkm™y
(
¨gc
, 
¨gv
, 3850, 
w‹d8
)) {

374 
	`w¨nx
("10. Execing with 1000 8-letter words.");

375 
	`åym™y
(1000, 
w‹d8
);

377 i‡(
	`checkm™y
(
¨gc
, 
¨gv
, 1000, 
w‹d8
)) {

379 
	`w¨nx
("Complete.");

383 
	`w¨nx
("Received unknown/unexpectedárgs:");

384 
	`dum∑rgs
(
¨gc
, 
¨gv
);

387 
	}
}

	@userland/testbin/bigfile/bigfile.c

39 
	~<°dlib.h
>

40 
	~<°dio.h
>

41 
	~<°rög.h
>

42 
	~<uni°d.h
>

43 
	~<îr.h
>

45 
	gbuf„r
[8192 + 1];

48 
	$maö
(
¨gc
, *
¨gv
[])

50 c⁄° *
fûíame
;

51 *
s
;

52 
size_t
 
i
, 
size
, 
chunksize
, 
off£t
;

53 
ssize_t
 
Àn
;

54 
fd
;

56 i‡(
¨gc
 != 3) {

57 
	`w¨nx
("Usage: bigfile <filename> <size>");

58 
	`îrx
(1, " or: bigfile <filename> <size>/<chunksize>");

61 
fûíame
 = 
¨gv
[1];

62 
s
 = 
	`°rchr
(
¨gv
[2], '/');

63 i‡(
s
 !
NULL
) {

64 *
s
++ = 0;

65 
chunksize
 = 
	`©oi
(
s
);

66 i‡(
chunksize
 >(
buf„r
)) {

67 
chunksize
 = (
buf„r
) - 1;

69 i‡(
chunksize
 == 0) {

70 
	`îrx
(1, "Really?");

74 
chunksize
 = 10;

76 
size
 = 
	`©oi
(
¨gv
[2]);

79 
size
 = ((sizê+ 
chunksize
 - 1) / chunksize) * chunksize;

81 
	`¥ötf
("Creatingá file of size %d in %d-byte chunks\n",

82 
size
, 
chunksize
);

84 
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

85 i‡(
fd
 < 0) {

86 
	`îr
(1, "%s: cª©e", 
fûíame
);

89 
i
=0;

90 
i
<
size
) {

91 
	`¢¥ötf
(
buf„r
, (buf„r), "%d\n", 
i
);

92 i‡(
	`°æí
(
buf„r
Ë< 
chunksize
) {

93 
off£t
 = 
chunksize
 - 
	`°æí
(
buf„r
);

94 
	`memmove
(
buf„r
 + 
off£t
, buf„r, 
	`°æí
(buffer)+1);

95 
	`mem£t
(
buf„r
, ' ', 
off£t
);

97 
Àn
 = 
	`wrôe
(
fd
, 
buf„r
, 
	`°æí
(buffer));

98 i‡(
Àn
<0) {

99 
	`îr
(1, "%s: wrôe", 
fûíame
);

101 
i
 +
Àn
;

104 
	`˛o£
(
fd
);

107 
	}
}

	@userland/testbin/bigseek/bigseek.c

30 
	~<sys/ty≥s.h
>

31 
	~<°dboﬁ.h
>

32 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~<uni°d.h
>

35 
	~<îr.h
>

36 
	~<î∫o.h
>

63 
	#TESTFILE
 "big£ekfûe"

	)

65 c⁄° *
	g¶og™s
[] = {

72 
	$wrôe_¶og™
(
fd
, 
which
, 
boﬁ
 
Áûok
)

74 
size_t
 
Àn
;

75 
ssize_t
 
r
;

77 
Àn
 = 
	`°æí
(
¶og™s
[
which
]);

78 
r
 = 
	`wrôe
(
fd
, 
¶og™s
[
which
], 
Àn
);

79 i‡(
r
 < 0) {

80 i‡(
Áûok
 && 
î∫o
 =
EFBIG
) {

83 
	`îr
(1, "write");

85 i‡(
Áûok
) {

86 
	`îrx
(1, "wrôe:Éx≥˘ed faûuª buàwrŸê%zd byãs", 
r
);

88 i‡((
size_t
)
r
 !
Àn
) {

89 
	`îrx
(1, "wrôe:Ñesu… %zd byãs,Éx≥˘ed %zu", 
r
, 
Àn
);

91 
	}
}

95 
	$check_¶og™
(
fd
, 
which
)

97 
buf
[256];

98 
size_t
 
Àn
;

99 
ssize_t
 
r
;

100 
i
, 
wr⁄gcou¡
;

102 
r
 = 
	`ªad
(
fd
, 
buf
, (buf));

103 i‡(
r
 < 0) {

104 
	`îr
(1, "read");

106 i‡(
r
 == 0) {

107 
	`îrx
(1, "read: Unexpected EOF");

111 
Àn
 = 
	`°æí
(
¶og™s
[
which
]);

112 i‡((
size_t
)
r
 !(
buf
Ë&& (size_tÏ !
Àn
) {

113 
	`îrx
(1, "read:Ñesult %zd bytes,Éxpected %zu or %zu",

114 
r
, (
buf
), 
Àn
);

118 i‡(
	`memcmp
(
buf
, 
¶og™s
[
which
], 
Àn
) != 0) {

119 
	`w¨nx
("read: got wrong data");

120 
	`w¨nx
("ex≥˘ed: %s", 
¶og™s
[
which
]);

121 
buf
[(buf) - 1] = 0;

122 
	`îrx
(1, "found: %s", 
buf
);

126 
wr⁄gcou¡
 = 0;

127 
i
=
Àn
; i<(
size_t
)
r
; i++) {

128 i‡(
buf
[
i
] != 0) {

129 
	`w¨nx
("ªad: buf[%zu] wa†0x%x,Éx≥˘ed 0", 
i
,

130 ()
buf
[
i
]);

131 
wr⁄gcou¡
++;

134 i‡(
wr⁄gcou¡
 > 0) {

135 
	`îrx
(1, "%u byã†o‡åash i¿fûe", 
wr⁄gcou¡
);

137 
	}
}

141 
	$åy_ªadög
(
fd
)

143 
buf
[16];

144 
ssize_t
 
r
;

146 
r
 = 
	`ªad
(
fd
, 
buf
, (buf));

147 i‡(
r
 == 0) {

151 i‡(
r
 < 0) {

152 
	`îr
(1, "read");

154 
	`îrx
(1, "ªad: Ex≥˘ed EOF buàgŸ %zd byãs", 
r
);

155 
	}
}

159 
	$åy_wrôög
(
fd
)

161 
	`wrôe_¶og™
(
fd
, 1, 
åue
);

162 
	}
}

166 
	$dﬁ£ek
(
fd
, 
off_t
 
pos
, 
whí˚
, c⁄° *
whí˚°r
, off_à
ex≥˘ed
)

168 
off_t
 
ªsu…
;

170 
ªsu…
 = 
	`l£ek
(
fd
, 
pos
, 
whí˚
);

171 i‡(
ªsu…
 == -1) {

172 
	`îr
(1, "l£ek(fd, 0x%Œx, %s)", 
pos
, 
whí˚°r
);

174 i‡(
ªsu…
 !
ex≥˘ed
) {

175 
	`îrx
(1, "lseek(fd, 0x%llx, %s): WrongÑeturn value"

176 " (gŸ 0x%Œx,Éx≥˘ed 0x%Œx)", 
pos
, 
whí˚°r
,

177 
ªsu…
, 
ex≥˘ed
);

179 
	}
}

183 
	$åy_£ekög
(
fd
, 
off_t
 
pos
, off_à
cursize
)

185 
	`¥ötf
("SìkögÅÿ◊ndÇórË0x%Œx\n", 
pos
);

188 
	`dﬁ£ek
(
fd
, 
pos
, 
SEEK_SET
, "SEEK_SET",Öos);

191 
	`dﬁ£ek
(
fd
, 0, 
SEEK_CUR
, "SEEK_CUR", 
pos
);

193 i‡(
pos
 >= 10) {

195 
	`dﬁ£ek
(
fd
, -10, 
SEEK_CUR
, "SEEK_CUR", 
pos
 - 10);

198 
	`dﬁ£ek
(
fd
, 20, 
SEEK_CUR
, "SEEK_CUR", 
pos
 + 10);

202 
	`dﬁ£ek
(
fd
, 10, 
SEEK_CUR
, "SEEK_CUR", 
pos
 + 10);

206 
	`dﬁ£ek
(
fd
, 
pos
, 
SEEK_END
, "SEEK_END",Öo†+ 
cursize
);

209 
	`dﬁ£ek
(
fd
, 
pos
, 
SEEK_SET
, "SEEK_SET",Öos);

210 
	}
}

213 
	$maö
()

215 
off_t
 
cursize
;

216 
fd
;

218 
	`¥ötf
("Creating file...\n");

219 
fd
 = 
	`›í
(
TESTFILE
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0664);

220 i‡(
fd
 < 0) {

221 
	`îr
(1, "%s", 
TESTFILE
);

224 
	`¥ötf
("Writing somethingát offset 0\n");

225 
	`wrôe_¶og™
(
fd
, 0, 
Ál£
);

226 
cursize
 = 
	`°æí
(
¶og™s
[0]);

228 
	`åy_£ekög
(
fd
, (
off_t
)0x1000LL, 
cursize
);

230 
	`¥ötf
("Writing somethingÉlse\n");

231 
	`wrôe_¶og™
(
fd
, 1, 
Ál£
);

232 
cursize
 = (
off_t
)0x1000LL + 
	`°æí
(
¶og™s
[1]);

234 
	`åy_£ekög
(
fd
, (
off_t
)0, 
cursize
);

237 
	`¥ötf
("Checking what we wrote\n");

238 
	`check_¶og™
(
fd
, 0);

240 
	`åy_£ekög
(
fd
, (
off_t
)0x1000LL, 
cursize
);

241 
	`¥ötf
("CheckingÅhe otherÅhing we wrote\n");

242 
	`check_¶og™
(
fd
, 1);

244 
	`åy_£ekög
(
fd
, (
off_t
)0x20LL, 
cursize
);

245 
	`åy_£ekög
(
fd
, (
off_t
)0x7fffffffLL, 
cursize
);

246 
	`åy_£ekög
(
fd
, (
off_t
)0x80000000LL, 
cursize
);

247 
	`åy_£ekög
(
fd
, (
off_t
)0x80000020LL, 
cursize
);

248 
	`åy_£ekög
(
fd
, (
off_t
)0x100000000LL, 
cursize
);

249 
	`åy_£ekög
(
fd
, (
off_t
)0x100000020LL, 
cursize
);

250 
	`åy_£ekög
(
fd
, (
off_t
)0x180000000LL, 
cursize
);

251 
	`åy_£ekög
(
fd
, (
off_t
)0x180000020LL, 
cursize
);

253 
	`¥ötf
("NowÅryingÅoÑead (should get EOF)\n");

254 
	`åy_ªadög
(
fd
);

256 
	`¥ötf
("NowÅryingÅo write (should get EFBIG)\n");

257 
	`åy_wrôög
(
fd
);

259 
	`åy_£ekög
(
fd
, (
off_t
)0x100000000LL, 
cursize
);

262 
	`¥ötf
("TryingÅoÑeadágain (should get EOF)\n");

263 
	`åy_ªadög
(
fd
);

265 
	`¥ötf
("Passed.\n");

267 
	`˛o£
(
fd
);

268 
	`ªmove
(
TESTFILE
);

270 
	}
}

	@userland/testbin/bloat/bloat.c

10 
	~<°dboﬁ.h
>

11 
	~<°dio.h
>

12 
	~<°döt.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<uni°d.h
>

16 
	~<as£π.h
>

17 
	~<îr.h
>

20 
	#PAGE_SIZE
 4096

	)

23 *
	gfú°∑ge
;

24 *
	gœ°∑ge
;

27 
	gÆlocs
;

30 
	gtouch∑ges
;

33 
	gbüs
;

38 
	$m‹emem
()

40 
tŸÆ∑ges
;

42 *
±r
;

43 
i
;

45 
i
=0; i<
Ælocs
; i++) {

46 
±r
 = 
	`sbrk
(
PAGE_SIZE
);

47 i‡(
±r
 == (*)-1) {

48 
	`îr
(1, "A·î %uÖages: sbrk", 
tŸÆ∑ges
);

50 
tŸÆ∑ges
++;

51 
œ°∑ge
 = 
±r
;

52 i‡(
fú°∑ge
 =
NULL
) {

53 
fú°∑ge
 = 
±r
;

56 
	}
}

60 
	$touch∑ge
(
∑gíum
)

62 *
±r
;

64 
±r
 = (*)((
uöçå_t
)
fú°∑ge
 + 
PAGE_SIZE
 * 
∑gíum
);

65 *
±r
 = 
∑gíum
;

66 
	}
}

70 
	$pick∑ge
(
num∑ges
)

72 
mnum
, 
moff£t
;

73 
•™
, 
vÆ
, 
i
;

76 i‡(
	`øndom
() % 1000 == 0) {

77  
	`øndom
(Ë% 
num∑ges
;

82 
mnum
 = 
num∑ges
 / 100;

83 i‡(
mnum
 < 
touch∑ges
 * 2) {

84 
mnum
 = 
touch∑ges
 * 2;

86 i‡(
mnum
 >
num∑ges
) {

87 
mnum
 = 
num∑ges
;

89 
moff£t
 = 
num∑ges
 / 2 - 
mnum
 / 2;

91 
	`as£π
(
büs
 >= 1);

92 
•™
 = (
mnum
 + 
büs
 - 1) / bias;

95 
vÆ
 = 0;

96 
i
=0; i<
büs
; i++) {

97 
vÆ
 +
	`øndom
(Ë% 
•™
;

99 } 
vÆ
 >
mnum
);

100  
moff£t
 + 
vÆ
;

101 
	}
}

105 
	$touchmem
()

107 
i
, 
num
;

109 
num
 = (((
uöçå_t
)
œ°∑ge
 - (uöçå_t)
fú°∑ge
Ë/ 
PAGE_SIZE
) + 1;

111 i‡(
num
 % 256 == 0) {

112 
	`w¨nx
("%uÖages", 
num
);

115 
i
=0; i<
touch∑ges
; i++) {

116 
	`touch∑ge
(
	`pick∑ge
(
num
));

118 
	}
}

122 
	$run
()

125 
	`m‹emem
();

126 
	`touchmem
();

128 
	}
}

132 
	$¥öt£âögs
()

134 
	`¥ötf
("Pagêsize: %u\n", 
PAGE_SIZE
);

135 
	`¥ötf
("Allocating %uÖagesándÅouching %uÖages onÉach cycle.\n",

136 
Ælocs
, 
touch∑ges
);

137 
	`¥ötf
("Pagê£À˘i⁄ büs: %u\n", 
büs
);

138 
	`¥ötf
("\n");

139 
	}
}

143 
	$ußge
()

145 
	`w¨nx
("bloat [-aállocs] [-b bias] [-pÖages]");

146 
	`w¨nx
("állocs:Çumber ofÖagesállocatedÖer cycle (default 4)");

147 
	`w¨nx
(" bias:Çumber of diceÑolledÅoÅouchÖages (default 8)");

148 
	`w¨nx
("Öages:ÖagesÅouchedÖer cycle (default 8)");

149 
	`exô
(1);

150 
	}
}

153 
	$maö
(
¨gc
, *
¨gv
[])

155 
i
;

158 
Ælocs
 = 4;

159 
touch∑ges
 = 8;

160 
büs
 = 8;

162 
	`§™dom
(1234);

164 
i
=1; i<
¨gc
; i++) {

165 i‡(!
	`°rcmp
(
¨gv
[
i
], "-a")) {

166 
i
++;

167 i‡(
i
 =
¨gc
) {

168 
	`îrx
(1, "-a: optionÑequiresárgument");

170 
Ælocs
 = 
	`©oi
(
¨gv
[
i
]);

171 i‡(
Ælocs
 == 0) {

172 
	`îrx
(1, "-a: mustÇot be zero");

175 i‡(!
	`°rcmp
(
¨gv
[
i
], "-b")) {

176 
i
++;

177 i‡(
i
 =
¨gc
) {

178 
	`îrx
(1, "-b: optionÑequiresárgument");

180 
büs
 = 
	`©oi
(
¨gv
[
i
]);

181 i‡(
büs
 == 0) {

182 
	`îrx
(1, "-b: mustÇot be zero");

185 i‡(!
	`°rcmp
(
¨gv
[
i
], "-h")) {

186 
	`ußge
();

188 i‡(!
	`°rcmp
(
¨gv
[
i
], "-p")) {

189 
i
++;

190 i‡(
i
 =
¨gc
) {

191 
	`îrx
(1, "-p: optionÑequiresárgument");

193 
touch∑ges
 = 
	`©oi
(
¨gv
[
i
]);

196 
	`îrx
(1, "Argumíà%†nŸÑecognized", 
¨gv
[
i
]);

197 
	`ußge
();

201 
	`¥öt£âögs
();

202 
	`run
();

204 
	}
}

	@userland/testbin/conman/conman.c

37 
	~<uni°d.h
>

38 
	~<îr.h
>

41 
	$maö
()

43 
ch
=0;

44 
Àn
;

46 
ch
!='q') {

47 
Àn
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

48 i‡(
Àn
 < 0) {

49 
	`îr
(1, "stdin:Ñead");

51 i‡(
Àn
==0) {

55 
	`wrôe
(
STDOUT_FILENO
, &
ch
, 1);

58 
	}
}

	@userland/testbin/crash/crash.c

44 
	~<°dio.h
>

45 
	~<°döt.h
>

46 
	~<uni°d.h
>

47 
	~<sig«l.h
>

48 
	~<îr.h
>

50 #i‡
deföed
(
__mùs__
)

51 
	#KERNEL_ADDR
 0x80000000

	)

52 
	#INVAL_ADDR
 0x40000000

	)

53 
	#INSN_TYPE
 
uöt32_t


	)

54 
	#INVAL_INSN
 0x0000003f

	)

59 (*
	tfunc
)();

63 
	$ªad_‰om_nuŒ
()

65 *
nuŒ
 = 
NULL
;

66 vﬁ©ûê
x
;

68 
x
 = *
nuŒ
;

71 ()
x
;

72 
	}
}

76 
	$ªad_‰om_övÆ
()

78 *
±r
 = (*Ë
INVAL_ADDR
;

79 vﬁ©ûê
x
;

81 
x
 = *
±r
;

84 ()
x
;

85 
	}
}

89 
	$ªad_‰om_kî√l
()

91 *
±r
 = (*Ë
KERNEL_ADDR
;

92 vﬁ©ûê
x
;

94 
x
 = *
±r
;

97 ()
x
;

98 
	}
}

102 
	$wrôe_to_nuŒ
()

104 *
nuŒ
 = 
NULL
;

105 *
nuŒ
 = 6;

106 
	}
}

110 
	$wrôe_to_övÆ
()

112 *
±r
 = (*Ë
INVAL_ADDR
;

113 *
±r
 = 8;

114 
	}
}

118 
	$wrôe_to_code
()

120 
INSN_TYPE
 *
x
 = (INSN_TYPE *)
wrôe_to_code
;

121 *
x
 = 
INVAL_INSN
;

122 
	}
}

126 
	$wrôe_to_kî√l
()

128 *
±r
 = (*Ë
KERNEL_ADDR
;

129 *
±r
 = 8;

130 
	}
}

134 
	$jump_to_nuŒ
()

136 
func
 
f
 = 
NULL
;

137 
	`f
();

138 
	}
}

142 
	$jump_to_övÆ
()

144 
func
 
f
 = (funcË
INVAL_ADDR
;

145 
	`f
();

146 
	}
}

150 
	$jump_to_kî√l
()

152 
func
 
f
 = (funcË
KERNEL_ADDR
;

153 
	`f
();

154 
	}
}

159 
	$ûÀgÆ_ö°ru˘i⁄
()

161 #i‡
	`deföed
(
__mùs__
)

162 
	`asm
(".long 0x0000003f");

166 
	}
}

170 
	$Æignmít_îr‹
()

172 
x
;

173 *
±r
, *
bad±r
;

174 vﬁ©ûê
uöçå_t
 
±rvÆ
;

175 vﬁ©ûê
j
;

177 
x
 = 0;

178 
±r
 = &
x
;

184 
±rvÆ
 = (
uöçå_t
)
±r
;

185 
±rvÆ
++;

186 
bad±r
 = (*)
±rvÆ
;

188 
j
 = *
bad±r
;

191 ()
j
;

192 
	}
}

196 
	$divide_by_zîo
()

198 vﬁ©ûê
x
 = 6;

199 vﬁ©ûê
z
 = 0;

200 vﬁ©ûê
a
;

202 
a
 = 
x
/
z
;

205 ()
a
;

206 
	}
}

210 
	$mod_by_zîo
()

212 vﬁ©ûê
x
 = 6;

213 vﬁ©ûê
z
 = 0;

214 vﬁ©ûê
a
;

216 
a
 = 
x
%
z
;

219 ()
a
;

220 
	}
}

224 
	$ªcur£_öf
()

226 vﬁ©ûê
buf
[16];

228 
buf
[0] = 0;

229 
	`ªcur£_öf
();

230 
buf
[0] = 1;

233 ()
buf
;

234 
	}
}

239 
	mch
;

240 c⁄° *
	m«me
;

241 
func
 
	mf
;

242 
	msig
;

243 } 
	g›s
[] = {

244 { 'a', "ªad from NULL", 
ªad_‰om_nuŒ
, 
SIGSEGV
 },

245 { 'b', "ªad from invÆidáddªss", 
ªad_‰om_övÆ
, 
SIGSEGV
 },

246 { 'c', "ªad from kî√»addªss", 
ªad_‰om_kî√l
, 
SIGBUS
 },

247 { 'd', "wrôêtÿNULL", 
wrôe_to_nuŒ
, 
SIGSEGV
 },

248 { 'e', "wrôêtÿövÆidáddªss", 
wrôe_to_övÆ
, 
SIGSEGV
 },

249 { 'f', "wrôêtÿcodê£gmít", 
wrôe_to_code
, 
SIGSEGV
 },

250 { 'g', "wrôêtÿkî√»addªss", 
wrôe_to_kî√l
, 
SIGBUS
 },

251 { 'h', "jum∞tÿNULL", 
jump_to_nuŒ
, 
SIGSEGV
 },

252 { 'i', "jum∞tÿövÆidáddªss", 
jump_to_övÆ
, 
SIGSEGV
 },

253 { 'j', "jum∞tÿkî√»addªss", 
jump_to_kî√l
, 
SIGBUS
 },

254 { 'k', "Æignmíàîr‹", 
Æignmít_îr‹
, 
SIGBUS
 },

255 { 'l', "ûÀgÆ in°ru˘i⁄", 
ûÀgÆ_ö°ru˘i⁄
, 
SIGILL
 },

256 { 'm', "dividêby zîo", 
divide_by_zîo
, 
SIGTRAP
 },

257 { 'n', "mod by zîo", 
mod_by_zîo
, 
SIGTRAP
 },

258 { 'o', "Recur£ inföôñy", 
ªcur£_öf
, 
SIGSEGV
 },

259 { 0, 
NULL
, NULL, 0 }

263 
	$maö
(
¨gc
, **
¨gv
)

265 
›
, 
i
, 
°©us
;

266 
pid_t
 
pid
;

268 i‡(
¨gc
 == 2) {

269 
›
 = 
¨gv
[1][0];

272 
i
=0; 
›s
[i].
«me
; i++) {

273 
	`¥ötf
("[%c] %s\n", 
›s
[
i
].
ch
, ops[i].
«me
);

275 
	`¥ötf
("[*] RunÉverything (in subprocesses)\n");

276 
	`¥ötf
("Note: [f] mayÇot causeánÉxception on some "

279 
	`¥ötf
("Choose: ");

280 
›
 = 
	`gëch¨
();

283 i‡(
›
=='*') {

284 
i
=0; 
›s
[i].
«me
; i++) {

285 
	`¥ötf
("Ru¬ög: [%c] %s\n", 
›s
[
i
].
ch
, ops[i].
«me
);

286 
pid
 = 
	`f‹k
();

287 i‡(
pid
<0) {

289 
	`w¨n
("fork");

291 i‡(
pid
==0) {

293 
›s
[
i
].
	`f
();

294 
	`¥ötf
("I wasn't killed -Åest fails!\n");

295 
	`_exô
(1);

297 
	`waôpid
(
pid
, &
°©us
, 0);

298 i‡(
	`WIFSIGNALED
(
°©us
)) {

299 i‡(
	`WTERMSIG
(
°©us
Ë=
›s
[
i
].
sig
) {

300 
	`¥ötf
("Signal %d (correct)\n",

301 
	`WTERMSIG
(
°©us
));

304 
	`¥ötf
("Signal %d (expected %d)\n",

305 
	`WTERMSIG
(
°©us
), 
›s
[
i
].
sig
);

309 
	`¥ötf
("Exit %d;Éxpected signal %d\n",

310 
	`WEXITSTATUS
(
°©us
), 
›s
[
i
].
sig
);

316 
›s
[
›
-'a'].
	`f
();

318 
	`¥ötf
("I wasn't killed -Åest fails!\n");

322 
	}
}

	@userland/testbin/ctest/ctest.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

47 
	#SIZE
 (1024*1024/(
íåy
))

	)

48 
	#DEFAULT
 477

	)

50 
	síåy
 {

51 
íåy
 *
	me
;

54 
íåy
 
	g¨øy
[
SIZE
];

57 
	$maö
(
¨gc
, **
¨gv
)

59 vﬁ©ûê
íåy
 *
e
;

60 
i
, 
°ride
;

62 
°ride
 = 
DEFAULT
;

63 i‡(
¨gc
 == 2) {

64 
°ride
 = 
	`©oi
(
¨gv
[1]);

66 i‡(
°ride
 <0 || 
¨gc
 > 2) {

67 
	`¥ötf
("Usage: ctest [stridesize]\n");

68 
	`¥ötf
(" stridesize shouldÇot beá multiple of 2.\n");

72 
	`¥ötf
("Sèπög cã°: såidê%d\n", 
°ride
);

81 
i
=0; i<
SIZE
; i++) {

82 
¨øy
[
i
].
e
 = &¨øy[(i+
°ride
Ë% 
SIZE
];

91 
e
 = &
¨øy
[0];

92 
i
=0; i<
SIZE
; i++) {

93 i‡(
i
 % 
°ride
 == 0) {

94 
	`putch¨
('.');

96 
e
 =É->e;

99 
	`¥ötf
("\nDone!\n");

101 
	}
}

	@userland/testbin/dirconc/dirconc.c

37 
	~<sys/ty≥s.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/°©.h
>

40 
	~<î∫o.h
>

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<°dlib.h
>

44 
	~<°d¨g.h
>

45 
	~<°rög.h
>

47 
	#NTRIES
 100

	)

48 
	#NPROCS
 5

	)

50 
	#TESTDIR
 "dúc⁄c"

	)

51 
	#NNAMES
 4

	)

52 
	#NAMESIZE
 32

	)

56 c⁄° *c⁄° 
	g«mes
[
NNAMES
] = {

65 
	$choo£_«me
(*
buf
, 
size_t
 
Àn
)

67 c⁄° *
a
, *
b
, *
c
;

69 
a
 = 
«mes
[
	`øndom
()%
NNAMES
];

70 i‡(
	`øndom
()%2==0) {

71 
	`¢¥ötf
(
buf
, 
Àn
, "%s", 
a
);

74 
b
 = 
«mes
[
	`øndom
()%
NNAMES
];

75 i‡(
	`øndom
()%2==0) {

76 
	`¢¥ötf
(
buf
, 
Àn
, "%s/%s", 
a
, 
b
);

79 
c
 = 
«mes
[
	`øndom
()%
NNAMES
];

80 
	`¢¥ötf
(
buf
, 
Àn
, "%s/%s/%s", 
a
, 
b
, 
c
);

81 
	}
}

91 #ifde‡
__GNUC__


92 
__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 1, 2)))

94 
	$ßy
(c⁄° *
fmt
, ...)

96 
buf
[512];

97 
va_li°
 
≠
;

98 
	`va_°¨t
(
≠
, 
fmt
);

99 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

100 
	`va_íd
(
≠
);

101 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
	`°æí
(buf));

102 
	}
}

108 
	$d‹íame
(c⁄° *
«me1
, c⁄° *
«me2
)

110 i‡(
	`ª«me
(
«me1
, 
«me2
) < 0) {

111 
î∫o
) {

112 
ENOENT
:

113 
ENOTEMPTY
:

114 
EINVAL
:

117 
	`ßy
("pid %d:Ñename %s -> %s: %s\n",

118 
	`gëpid
(), 
«me1
, 
«me2
, 
	`°ªº‹
(
î∫o
));

122 
	}
}

126 
	$domkdú
(c⁄° *
«me
)

128 i‡(
	`mkdú
(
«me
, 0775)<0) {

129 
î∫o
) {

130 
ENOENT
:

131 
EEXIST
:

134 
	`ßy
("pid %d: mkdir %s: %s\n",

135 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

139 
	}
}

143 
	$d‹mdú
(c⁄° *
«me
)

145 i‡(
	`rmdú
(
«me
)<0) {

146 
î∫o
) {

147 
ENOENT
:

148 
ENOTEMPTY
:

151 
	`ßy
("pid %d:Ñmdir %s: %s\n",

152 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

156 
	}
}

160 
	$˛ónup_rmdú
(c⁄° *
«me
)

162 i‡(
	`rmdú
(
«me
)<0) {

163 
î∫o
) {

164 
ENOENT
:

167 
	`ßy
("cleanup (pid %d):Ñmdir %s: %s\n",

168 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

172 
	}
}

178 
	$ª«me_¥oc
()

180 
«me1
[
NAMESIZE
], 
«me2
[NAMESIZE];

181 
˘
;

183 
˘
=0; ct<
NTRIES
; ct++) {

184 
	`choo£_«me
(
«me1
, (name1));

185 
	`choo£_«me
(
«me2
, (name2));

186 
	`ßy
("pid %2d:Ñíamê%†-> %s\n", ()
	`gëpid
(), 
«me1
, 
«me2
);

187 
	`d‹íame
(
«me1
, 
«me2
);

189 
	}
}

193 
	$mkdú_¥oc
()

195 
«me
[
NAMESIZE
];

196 
˘
;

198 
˘
=0; ct<
NTRIES
; ct++) {

199 
	`choo£_«me
(
«me
, (name));

200 
	`ßy
("pid %2d: mkdú %s\n", ()
	`gëpid
(), 
«me
);

201 
	`domkdú
(
«me
);

203 
	}
}

207 
	$rmdú_¥oc
()

209 
«me
[
NAMESIZE
];

210 
˘
;

212 
˘
=0; ct<
NTRIES
; ct++) {

213 
	`choo£_«me
(
«me
, (name));

214 
	`ßy
("pid %2d:Ñmdú %s\n", ()
	`gëpid
(), 
«me
);

215 
	`d‹mdú
(
«me
);

217 
	}
}

222 
pid_t


223 
dof‹k
((*
func
)())

225 
pid_t
 
pid
;

227 
pid
 = 
	`f‹k
();

228 i‡(
pid
 < 0) {

229 
	`ßy
("f‹k: %s\n", 
	`°ªº‹
(
î∫o
));

232 i‡(
pid
 == 0) {

234 
	`func
();

235 
	`exô
(0);

237  
pid
;

238 
	}
}

242 
	$run
()

244 
pid_t
 
pids
[
NPROCS
*4], 
wp
;

245 
i
, 
°©us
;

247 
i
=0; i<
NPROCS
; i++) {

248 
pids
[
i
*4] = 
	`dof‹k
(
mkdú_¥oc
);

249 
pids
[
i
*4+1] = 
	`dof‹k
(
mkdú_¥oc
);

250 
pids
[
i
*4+2] = 
	`dof‹k
(
ª«me_¥oc
);

251 
pids
[
i
*4+3] = 
	`dof‹k
(
rmdú_¥oc
);

254 
i
=0; i<
NPROCS
*4; i++) {

255 i‡(
pids
[
i
]>=0) {

256 
wp
 = 
	`waôpid
(
pids
[
i
], &
°©us
, 0);

257 i‡(
wp
<0) {

258 
	`ßy
("waôpid %d: %s\n", (Ë
pids
[
i
],

259 
	`°ªº‹
(
î∫o
));

261 i‡(
	`WIFSIGNALED
(
°©us
)) {

262 
	`ßy
("pid %d: sig«»%d\n", (Ë
pids
[
i
],

263 
	`WTERMSIG
(
°©us
));

265 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status)!=0) {

266 
	`ßy
("pid %d:Éxô %d\n", (Ë
pids
[
i
],

267 
	`WEXITSTATUS
(
°©us
));

271 
	}
}

277 
	$£tup
(c⁄° *
fs
)

279 i‡(
	`chdú
(
fs
)<0) {

280 
	`ßy
("chdú: %s: %s\n", 
fs
, 
	`°ªº‹
(
î∫o
));

281 
	`exô
(1);

283 i‡(
	`mkdú
(
TESTDIR
, 0775)<0) {

284 
	`ßy
("mkdú: %s: %s\n", 
TESTDIR
, 
	`°ªº‹
(
î∫o
));

285 
	`exô
(1);

287 i‡(
	`chdú
(
TESTDIR
)<0) {

288 
	`ßy
("chdú: %s: %s\n", 
TESTDIR
, 
	`°ªº‹
(
î∫o
));

289 
	`exô
(1);

291 
	}
}

295 
	$ªcursive_˛ónup
(c⁄° *
soÁr
, 
dïth
)

297 
buf
[
NAMESIZE
*32];

298 
i
;

300 
i
=0; i<
NNAMES
; i++) {

301 
	`¢¥ötf
(
buf
, (buf), "%s/%s", 
soÁr
, 
«mes
[
i
]);

302 i‡(
	`rmdú
(
buf
)<0) {

303 i‡(
î∫o
==
ENOTEMPTY
) {

304 
	`ªcursive_˛ónup
(
buf
, 
dïth
+1);

305 
	`˛ónup_rmdú
(
buf
);

307 i‡(
î∫o
!=
ENOENT
) {

308 
	`ßy
("cleanup (pid %d):Ñmdir %s: %s\n",

309 
	`gëpid
(), 
buf
, 
	`°ªº‹
(
î∫o
));

313 
	}
}

317 
	$˛ónup
()

319 
	`ªcursive_˛ónup
(".", 0);

321 
	`chdú
("..");

322 
	`˛ónup_rmdú
(
TESTDIR
);

323 
	}
}

328 
	$maö
(
¨gc
, *
¨gv
[])

330 c⁄° *
fs
;

331 
£ed
 = 0;

333 
	`ßy
("Concurrent directory opsÅest\n");

335 i‡(
¨gc
==0 || 
¨gv
==
NULL
) {

336 
	`ßy
("Warning:árgc is 0 -ássuming you meanÅoÑun onÜhd1: "

338 
fs
 = "lhd1:";

340 i‡(
¨gc
==2) {

341 
fs
 = 
¨gv
[1];

343 i‡(
¨gc
==3) {

344 
fs
 = 
¨gv
[1];

345 
£ed
 = 
	`©oi
(
¨gv
[2]);

348 
	`ßy
("Usage: dirconc filesystem [random-seed]\n");

349 
	`exô
(1);

352 
	`§™dom
(
£ed
);

353 
	`£tup
(
fs
);

354 
	`ßy
("Sèπög i¿%s/%s\n", 
fs
, 
TESTDIR
);

356 
	`run
();

358 
	`ßy
("Cleaning up\n");

359 
	`˛ónup
();

362 
	}
}

	@userland/testbin/dirseek/dirseek.c

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

51 
	~<uni°d.h
>

52 
	~<°rög.h
>

53 
	~<°dio.h
>

54 
	~<°dlib.h
>

55 
	~<îr.h
>

57 
	#TESTDIR
 "£ekã°dú"

	)

60 c⁄° *
	m«me
;

61 
	mmake_ô
;

62 
off_t
 
	mpos
;

63 } 
	gã°fûes
[] = {

84 { 
NULL
, 0, 0 }

91 
	gdúfd
;

95 
	$födíåy
(c⁄° *
«me
)

97 
i
;

99 
i
=0; 
ã°fûes
[i].
«me
; i++) {

100 i‡(!
	`°rcmp
(
ã°fûes
[
i
].
«me
,Çame)) {

101  
i
;

105 
	}
}

109 
	$›íô
()

111 
dúfd
 = 
	`›í
(".", 
O_RDONLY
);

112 i‡(
dúfd
 < 0) {

113 
	`îr
(1, ".: open");

115 
	}
}

119 
	$˛o£ô
()

121 i‡(
	`˛o£
(
dúfd
)<0) {

122 
	`îr
(1, ".: close");

124 
dúfd
 = -1;

125 
	}
}

129 
	$ªadô
()

131 
buf
[4096];

132 
off_t
 
pos
;

133 
Àn
;

134 
n
, 
i
, 
ix
;

136 
i
=0; 
ã°fûes
[i].
«me
; i++) {

137 
ã°fûes
[
i
].
pos
 = -1;

140 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

141 i‡(
pos
 < 0) {

142 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

144 
n
 = 0;

146 (
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1)) > 0) {

148 i‡(()
Àn
 >(
buf
)-1) {

149 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

150 "övÆidÜígth %d", 
n
, 
Àn
);

152 
buf
[
Àn
] = 0;

153 
ix
 = 
	`födíåy
(
buf
);

154 i‡(
ix
 < 0) {

155 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

156 "u√x≥˘edÇamê%s", 
n
, 
buf
);

159 i‡(
ã°fûes
[
ix
].
pos
 >= 0) {

160 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

161 "%†®£c⁄dÅime", 
n
, 
buf
);

164 
ã°fûes
[
ix
].
pos
 =Öos;

166 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

167 i‡(
pos
 < 0) {

168 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

170 
n
++;

172 i‡(
Àn
<0) {

173 
	`îr
(1, ".:É¡ry %d: gëdúíåy", 
n
);

176 
i
=0; 
ã°fûes
[i].
«me
; i++) {

177 i‡(
ã°fûes
[
i
].
pos
 < 0) {

178 
	`îrx
(1, ".: getdirentry failedÅoÑeturn %s",

179 
ã°fûes
[
i
].
«me
);

182 i‡(
i
!=
n
) {

189 
	`îrx
(1, ".: getdirentryÑeturned %dÇames,Çot %d (huh...?)",

190 
n
, 
i
);

192 
	}
}

196 
	$fú°ªad
()

198 
off_t
 
pos
;

200 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

201 i‡(
pos
 < 0) {

202 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

204 i‡(
pos
 != 0) {

205 
	`îrx
(1, ".: FileÖositionáfter openÇot 0");

208 
	`¥ötf
("Scanning directory...\n");

210 
	`ªadô
();

211 
	}
}

215 
	$d‹ód©0
()

217 
off_t
 
pos
;

219 
	`¥ötf
("Rewinding directoryándÑeading itágain...\n");

221 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_SET
);

222 i‡(
pos
 < 0) {

223 
	`îr
(1, ".:Üseek(0, SEEK_SET)");

225 i‡(
pos
 != 0) {

226 
	`îrx
(1, ".:Ü£ek(0, SEEK_SETËªtu∫ed %ld", (Ë
pos
);

229 
	`ªadô
();

230 
	}
}

234 
	$ªad⁄e
(c⁄° *
shouldbe
)

236 
buf
[4096];

237 
Àn
;

239 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

240 i‡(
Àn
 < 0) {

241 
	`îr
(1, ".: getdirentry");

243 i‡(()
Àn
 >(
buf
)-1) {

244 
	`îrx
(1, ".: gëdúíåyÑëu∫ed invÆidÜígth %d", 
Àn
);

246 
buf
[
Àn
] = 0;

248 i‡(
	`°rcmp
(
buf
, 
shouldbe
)) {

249 
	`îrx
(1, ".: getdirentryÑeturned %s (expected %s)",

250 
buf
, 
shouldbe
);

252 
	}
}

256 
	$d‹ód⁄e
(
which
)

258 
off_t
 
pos
;

259 
pos
 = 
	`l£ek
(
dúfd
, 
ã°fûes
[
which
].pos, 
SEEK_SET
);

260 i‡(
pos
<0) {

261 
	`îr
(1, ".:Ü£ek(%ld, SEEK_SET)", (Ë
ã°fûes
[
which
].
pos
);

263 i‡(
pos
 !
ã°fûes
[
which
].pos) {

264 
	`îrx
(1, ".:Üseek(%ld, SEEK_SET)Ñeturned %ld",

265 (Ë
ã°fûes
[
which
].
pos
, ()Öos);

268 
	`ªad⁄e
(
ã°fûes
[
which
].
«me
);

269 
	}
}

273 
	$ªadÆl⁄eby⁄e
()

275 
i
;

277 
	`¥ötf
("TryingÅoÑeadÉachÉntryágain...\n");

278 
i
=0; 
ã°fûes
[i].
«me
; i++) {

279 
	`d‹ód⁄e
(
i
);

281 
	}
}

285 
	$ªadÆÃ™domly
()

287 
n
, 
i
, 
x
;

289 
	`¥ötf
("TryingÅoÑeadá bunch ofÉntriesÑandomly...\n");

291 
i
=0; 
ã°fûes
[i].
«me
; i++);

292 
n
 = 
i
;

294 
	`§™dom
(39584);

295 
i
=0; i<512; i++) {

296 
x
 = ()(
	`øndom
()%
n
);

297 
	`d‹ód⁄e
(
x
);

299 
	}
}

303 
	$ªad©eof
()

305 
buf
[4096];

306 
Àn
;

308 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

309 i‡(
Àn
 < 0) {

310 
	`îr
(1, ".:át EOF: getdirentry");

312 i‡(
Àn
==0) {

315 i‡(()
Àn
 >(
buf
)-1) {

316 
	`îrx
(1, ".:át EOF: getdirentryÑeturned "

317 "övÆidÜígth %d", 
Àn
);

319 
buf
[
Àn
] = 0;

320 
	`îrx
(1, ".:áàEOF: gŸ u√x≥˘edÇamê%s", 
buf
);

321 
	}
}

325 
	$d‹ód©eof
()

327 
off_t
 
pos
;

328 
i
;

330 
	`¥ötf
("TryingÅoÑeadáfter goingÅo EOF...\n");

332 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_END
);

333 i‡(
pos
<0) {

334 
	`îr
(1, ".:Üseek(0, SEEK_END)");

337 
i
=0; 
ã°fûes
[i].
«me
; i++) {

338 i‡(
pos
 <
ã°fûes
[
i
].pos) {

339 
	`îrx
(1, ".: EOFÖosition %ld belowÖosition %ld of %s",

340 
pos
, 
ã°fûes
[
i
].pos,Åe°fûes[i].
«me
);

344 
	`ªad©eof
();

345 
	}
}

349 
	$övÆ_ªad
()

351 
buf
[4096];

352 
Àn
;

354 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

357 ()
Àn
;

358 
	}
}

362 
	$dobadªads
()

364 
off_t
 
pos
, 
pos2
, 
eof
;

365 
vÆid
, 
i
, 
k
=0;

367 
	`¥ötf
("Trying someÖossibly invalidÑeads...\n");

369 
eof
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_END
);

370 i‡(
eof
 < 0) {

371 
	`îr
(1, ".:Üseek(0, SEEK_END)");

374 
pos
=0;Öo†< 
eof
;Öos++) {

375 
vÆid
 = 0;

376 
i
=0; 
ã°fûes
[i].
«me
; i++) {

377 i‡(
pos
==
ã°fûes
[
i
].pos) {

378 
vÆid
 = 1;

381 i‡(
vÆid
) {

386 
pos2
 = 
	`l£ek
(
dúfd
, 
pos
, 
SEEK_SET
);

387 i‡(
pos2
 < 0) {

391 
	`övÆ_ªad
();

392 
k
++;

396 i‡(
k
>0) {

397 
	`¥ötf
("Survived %d invÆidÑóds...\n", 
k
);

400 
	`¥ötf
("Couldn't findány invalid offsetsÅoÅry...\n");

403 
	`¥ötf
("TryingÅoÑead beyond EOF...\n");

404 
pos2
 = 
	`l£ek
(
dúfd
, 
eof
 + 1000, 
SEEK_SET
);

405 i‡(
pos2
 < 0) {

409 
	`övÆ_ªad
();

411 
	}
}

415 
	$dŸe°
()

417 
	`¥ötf
("Opening directory...\n");

418 
	`›íô
();

420 
	`¥ötf
("RunningÅests...\n");

423 
	`fú°ªad
();

426 
	`ªad©eof
();

429 
	`ªadÆl⁄eby⁄e
();

432 
	`d‹ód©eof
();

435 
	`ªadÆÃ™domly
();

438 
	`d‹ód©0
();

441 
	`dobadªads
();

444 
	`d‹ód©0
();

446 
	`¥ötf
("Closing directory...\n");

447 
	`˛o£ô
();

448 
	}
}

456 
	$mkfûe
(c⁄° *
«me
)

458 
fd
, 
i
, 
r
;

459 c⁄° 
mesßge
[] = "TheÅurtle moves!\n";

460 
buf
[32*(
mesßge
)+1];

462 
buf
[0]=0;

463 
i
=0; i<32; i++) {

464 
	`°rˇt
(
buf
, 
mesßge
);

468 
fd
 = 
	`›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
, 0664);

469 i‡(
fd
<0) {

470 
	`îr
(1, "%s: cª©e", 
«me
);

473 
r
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

474 i‡(
r
<0) {

475 
	`îr
(1, "%s: wrôe", 
«me
);

477 i‡(()
r
 !
	`°æí
(
buf
)) {

478 
	`îrx
(1, "%s: sh‹àwrôê(%d byãs)", 
«me
, 
r
);

481 i‡(
	`˛o£
(
fd
)<0) {

482 
	`îr
(1, "%s: clo£", 
«me
);

484 
	}
}

488 
	$£tup
()

490 
i
;

492 
	`¥ötf
("Makög dúe˘‹y %s...\n", 
TESTDIR
);

495 i‡(
	`mkdú
(
TESTDIR
, 0775)<0) {

496 
	`îr
(1, "%s: mkdú", 
TESTDIR
);

500 i‡(
	`chdú
(
TESTDIR
)<0) {

501 
	`îr
(1, "%s: chdú", 
TESTDIR
);

504 
	`¥ötf
("Making some files...\n");

507 
i
=0; 
ã°fûes
[i].
«me
; i++) {

508 i‡(
ã°fûes
[
i
].
make_ô
) {

509 
	`mkfûe
(
ã°fûes
[
i
].
«me
);

511 
ã°fûes
[
i
].
pos
 = -1;

513 
	}
}

517 
	$˛ónup
()

519 
i
;

521 
	`¥ötf
("Cleaning up...\n");

524 
i
=0; 
ã°fûes
[i].
«me
; i++) {

525 i‡(
ã°fûes
[
i
].
make_ô
) {

526 i‡(
	`ªmove
(
ã°fûes
[
i
].
«me
)<0) {

527 
	`îr
(1, "%s:Ñemove", 
ã°fûes
[
i
].
«me
);

533 i‡(
	`chdú
("..")<0) {

534 
	`îr
(1, "..: chdir");

538 i‡(
	`rmdú
(
TESTDIR
)<0) {

539 
	`îr
(1, "%s:Ñmdú", 
TESTDIR
);

541 
	}
}

545 
	$maö
()

547 
	`£tup
();

550 
	`dŸe°
();

551 
	`dŸe°
();

553 
	`˛ónup
();

555 
	}
}

	@userland/testbin/dirtest/dirtest.c

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<°rög.h
>

47 
	~<îr.h
>

49 
	#MAXLEVELS
 5

	)

52 
	$maö
()

54 
i
;

55 c⁄° *
⁄íame
 = "testdir";

56 
dú«me
[512];

58 
	`°r˝y
(
dú«me
, 
⁄íame
);

60 
i
=0; i<
MAXLEVELS
; i++) {

61 
	`¥ötf
("Cª©ög dúe˘‹y: %s\n", 
dú«me
);

63 i‡(
	`mkdú
(
dú«me
, 0755)) {

64 
	`îr
(1, "%s: mkdú", 
dú«me
);

67 
	`°rˇt
(
dú«me
, "/");

68 
	`°rˇt
(
dú«me
, 
⁄íame
);

71 
	`¥ötf
("Passed directory creationÅest.\n");

73 
i
=0; i<
MAXLEVELS
; i++) {

74 
dú«me
[
	`°æí
(dú«meË- såÀn(
⁄íame
) - 1] = 0;

76 
	`¥ötf
("Removög dúe˘‹y: %s\n", 
dú«me
);

78 i‡(
	`rmdú
(
dú«me
)) {

79 
	`îr
(1, "%s:Ñmdú", 
dú«me
);

82 
	`¥ötf
("Passed directoryÑemovalÅest.\n");

85 
	}
}

	@userland/testbin/f_test/f_hdr.h

30 
sub¥oc_ªad
();

31 
sub¥oc_wrôe
();

	@userland/testbin/f_test/f_read.c

44 
	#Se˘‹Size
 512

	)

46 
	#TMULT
 50

	)

47 
	#FSIZE
 ((
Se˘‹Size
 + 1Ë* 
TMULT
)

	)

49 
	#FNAME
 "f-ã°fûe"

	)

50 
	#READCHAR
 'r'

	)

51 
	#WRITECHAR
 'w'

	)

53 
	~<°dio.h
>

54 
	~<uni°d.h
>

55 
	~<îr.h
>

56 
	~"f_hdr.h
"

58 
	gbuf„r
[
Se˘‹Size
 + 1];

62 
	$check_buf„r
()

64 
i
;

65 
ch
 = 
buf„r
[0];

67 
i
 = 1; i < 
Se˘‹Size
 + 1; i++) {

68 i‡(
buf„r
[
i
] !
ch
) {

69 
	`îrx
(1, "RódÉº‹: %s", 
buf„r
);

73 
	`putch¨
(
ch
);

74 
	}
}

77 
	$sub¥oc_ªad
()

79 
fd
;

80 
i
, 
ªs
;

82 
	`¥ötf
("File Reader starting ...\n\n");

84 
fd
 = 
	`›í
(
FNAME
, 
O_RDONLY
);

85 i‡(
fd
 < 0) {

86 
	`îr
(1, "%s: o≥n", 
FNAME
);

89 
i
=0; i<
TMULT
; i++) {

90 
ªs
 = 
	`ªad
(
fd
, 
buf„r
, 
Se˘‹Size
 + 1);

91 i‡(
ªs
 < 0) {

92 
	`îr
(1, "%s:Ñód", 
FNAME
);

97 i‡(
ªs
 !
Se˘‹Size
 + 1) {

98 
	`îrx
(1, "%s:Ñód: sh‹àcou¡", 
FNAME
);

100 
	`check_buf„r
();

103 
	`˛o£
(
fd
);

105 
	`¥ötf
("File ReadÉxited successfully!\n");

106 
	}
}

	@userland/testbin/f_test/f_test.c

43 
	~<sys/ty≥s.h
>

44 
	~<sys/°©.h
>

45 
	~<°dio.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<îr.h
>

49 
	~"f_hdr.h
"

51 
	#SECTOR_SIZE
 512

	)

54 
	#BUFFER_SIZE
 (2 * 
SECTOR_SIZE
 + 1)

	)

55 
	#BIGFILE_SIZE
 (270 * 
BUFFER_SIZE
)

	)

56 
	#BIGFILE_NAME
 "œrge-f"

	)

58 
	#LETTER
(
x
Ë('a' + (x % 31))

	)

60 
	gfbuf„r
[
BUFFER_SIZE
];

61 
	gibuf„r
[32];

64 
	#DIR_DEPTH
 8

	)

65 
	#DIR_NAME
 "/t"

	)

66 
	#DIRFILE_NAME
 "a"

	)

69 
	#FNAME
 "f-ã°fûe"

	)

70 
	#TMULT
 50

	)

71 
	#FSIZE
 ((
SECTOR_SIZE
 + 1Ë* 
TMULT
)

	)

73 
	#READCHAR
 'r'

	)

74 
	#WRITECHAR
 'w'

	)

76 
	gcbuf„r
[
SECTOR_SIZE
 + 1];

84 
pid_t


85 
f‹koff
((*
func
)())

87 
pid_t
 
pid
 = 
	`f‹k
();

88 
pid
) {

90 
	`w¨n
("fork");

93 
	`func
();

94 
	`_exô
(0);

97  
pid
;

98 
	}
}

102 
	$dowaô
(
pid
)

104 
°©us
;

106 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

107 
	`w¨n
("waôpid f‹ %d", 
pid
);

109 i‡(
	`WIFSIGNALED
(
°©us
)) {

110 
	`w¨nx
("pid %d: sig«»%d", 
pid
, 
	`WTERMSIG
(
°©us
));

112 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

113 
	`w¨nx
("pid %d:Éxô %d", 
pid
, 
	`WEXITSTATUS
(
°©us
));

115 
	}
}

123 
	$big_fûe
(
size
)

125 
i
, 
j
, 
fûeid
;

127 
	`¥ötf
("[BIGFILE]Åest starting :\n");

128 
	`¥ötf
("\tCª©ögá fûêo‡size: %d\n", 
size
);

130 
fûeid
 = 
	`›í
(
BIGFILE_NAME
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

131 i‡(
fûeid
 < 0) {

132 
	`îr
(1, "[BIGFILE]: %s: o≥¿f‹ wrôe", 
BIGFILE_NAME
);

135 
i
 = 0; i < 
BUFFER_SIZE
; i++) {

136 
fbuf„r
[
i
] = 
	`LETTER
(i);

139 
	`¥ötf
("\tWritingÅo file.\n");

140 
i
 = 0; i < 
size
; i +
BUFFER_SIZE
) {

141 
	`wrôe
(
fûeid
, 
fbuf„r
, 
BUFFER_SIZE
);

143 i‡(!(
i
 % (10 * 
BUFFER_SIZE
))) {

144 
	`¥ötf
("\rBW : %d", 
i
);

148 
	`¥ötf
("\n\tReading from file.\n");

149 
	`˛o£
(
fûeid
);

151 
fûeid
 = 
	`›í
(
BIGFILE_NAME
, 
O_RDONLY
);

152 i‡(
fûeid
 < 0) {

153 
	`îr
(1, "[BIGFILE]: %s: o≥¿f‹Ñód", 
BIGFILE_NAME
);

156 
i
 = 0; i < 
size
; i +
BUFFER_SIZE
) {

157 
j
 = 
	`ªad
(
fûeid
, 
fbuf„r
, 
BUFFER_SIZE
);

158 i‡(
j
<0) {

159 
	`îr
(1, "[BIGFILE]:Ñead");

161 i‡(
j
 !
BUFFER_SIZE
) {

162 
	`îrx
(1, "[BIGFILE]:Ñód: o∆y %d byãs", 
j
);

166 i‡(!(
i
 % (10 * 
BUFFER_SIZE
))) {

167 
	`¥ötf
("\rBR : %d", 
i
);

171 
j
 = 0; j < 
BUFFER_SIZE
; j++) {

172 i‡(
fbuf„r
[
j
] !
	`LETTER
(j)) {

173 
	`îrx
(1, "[BIGFILE] : FailedÑead check : "

174 "öc⁄si°íàd©®ªad: %d", 
i
+
j
);

179 
	`˛o£
(
fûeid
);

180 i‡(
	`ªmove
(
BIGFILE_NAME
)) {

181 
	`îr
(1, "[BIGFILE]: %s:Ñemove", 
BIGFILE_NAME
);

184 
	`¥ötf
("\n[BIGFILE] : Success!\n");

185 
	}
}

193 
	$c⁄cur
()

195 
i
, 
fd
;

196 
r1
, 
r2
, 
w1
;

198 
	`¥ötf
("Spawning 2Ñeaders, 1 writer.\n");

201 
fd
 = 
	`›í
(
FNAME
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

202 i‡(
fd
 < 0) {

203 
	`îr
(1, "[CONCUR]: %s: o≥n", 
FNAME
);

206 
	`¥ötf
("InitializingÅest file: ");

208 
i
 = 0; i < 
SECTOR_SIZE
 + 1; i++) {

209 
cbuf„r
[
i
] = 
READCHAR
;

212 
i
 = 0; i < 
TMULT
; i++) {

213 
	`wrôe
(
fd
, 
cbuf„r
, 
SECTOR_SIZE
 + 1);

217 
	`˛o£
(
fd
);

219 
	`¥ötf
("Done initializing. StartingÖrocesses...\n");

221 
r1
 = 
	`f‹koff
(
sub¥oc_ªad
);

222 
w1
 = 
	`f‹koff
(
sub¥oc_wrôe
);

223 
r2
 = 
	`f‹koff
(
sub¥oc_ªad
);

225 
	`¥ötf
("Waiting forÖrocesses.\n");

227 
	`dowaô
(
r1
);

228 
	`dowaô
(
r2
);

229 
	`dowaô
(
w1
);

231 i‡(
	`ªmove
(
FNAME
)) {

232 
	`îr
(1, "[CONCUR]: %s:Ñemove", 
FNAME
);

235 
	`¥ötf
("[CONCUR] Done!\n");

236 
	}
}

244 
	$dú_ã°
(
dïth
)

246 
i
, 
fd
;

247 
tmp
[] = 
DIR_NAME
;

248 
fmp
[] = 
DIRFILE_NAME
;

249 
dú«me
[64];

251 
	`°r˝y
(
dú«me
, ".");

253 
i
 = 0; i < 
dïth
; i++) {

254 
	`°rˇt
(
dú«me
, 
tmp
);

256 
	`¥ötf
("\tCª©ög dú : %s\n", 
dú«me
);

258 i‡(
	`mkdú
(
dú«me
, 0775) < 0) {

259 
	`îr
(1, "[DIRTEST]: %s: mkdú", 
dú«me
);

262 
	`°rˇt
(
dú«me
, 
fmp
);

263 
	`¥ötf
("\tCª©ög fûe: %s\n", 
dú«me
);

265 
fd
 = 
	`›í
(
dú«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

266 i‡(
fd
<0) {

267 
	`îr
(1, "[DIRTEST]: %s: o≥n", 
dú«me
);

270 
dú«me
[
	`°æí
(dú«meË- såÀn(
fmp
)] = '\0';

273 
	`¥ötf
("[DIRTEST] : Passed directory creationÅest.\n");

275 
i
 = 0; i < 
dïth
; i++) {

276 
	`°rˇt
(
dú«me
, 
fmp
);

278 
	`¥ötf
("\tDñëög fûe: %s\n", 
dú«me
);

280 i‡(
	`ªmove
(
dú«me
)) {

281 
	`îr
(1, "[DIRTEST]: %s:Ñemove", 
dú«me
);

284 
dú«me
[
	`°æí
(dú«meË- såÀn(
fmp
)] = '\0';

285 
	`¥ötf
("\tRemovög dú : %s\n", 
dú«me
);

287 i‡(
	`rmdú
(
dú«me
)) {

288 
	`îr
(1, "[DIRTEST]: %s:Ñmdú", 
dú«me
);

291 
dú«me
[
	`°æí
(dú«meË- såÀn(
tmp
)] = '\0';

294 
	`¥ötf
("[DIRTEST] : Passed directoryÑemovalÅest.\n");

295 
	`¥ötf
("[DIRTEST] : Success!\n");

296 
	}
}

302 
	#RUNBIGFILE
 0x1

	)

303 
	#RUNDIRTEST
 0x2

	)

304 
	#RUNCONCUR
 0x4

	)

305 
	#RUNTHEMALL
 (
RUNBIGFILE
 | 
RUNDIRTEST
 | 
RUNCONCUR
)

	)

308 
	$maö
(
¨gc
, * 
¨gv
[])

310 
tv
 = 0;

312 i‡(
¨gc
 > 1) {

313 i‡(*
¨gv
[1]=='1') {

314 
tv
 = 
RUNBIGFILE
;

316 i‡(*
¨gv
[1]=='2') {

317 
tv
 = 
RUNDIRTEST
;

319 i‡(*
¨gv
[1]=='3') {

320 
tv
 = 
RUNCONCUR
;

324 
tv
 = 
RUNTHEMALL
;

327 i‡(
tv
 & 
RUNBIGFILE
) {

328 
	`¥ötf
("[BIGFILE] : Run #1\n");

329 
	`big_fûe
(
BIGFILE_SIZE
);

330 
	`¥ötf
("[BIGFILE] : Run #2\n");

331 
	`big_fûe
(
BIGFILE_SIZE
);

334 i‡(
tv
 & 
RUNDIRTEST
) {

335 
	`¥ötf
("[DIRTEST] : Run #1\n");

336 
	`dú_ã°
(
DIR_DEPTH
);

337 
	`¥ötf
("[DIRTEST] : Run #2\n");

338 
	`dú_ã°
(
DIR_DEPTH
);

341 i‡(
tv
 & 
RUNCONCUR
) {

342 
	`¥ötf
("[CONCUR]\n");

343 
	`c⁄cur
();

346 
	}
}

	@userland/testbin/f_test/f_write.c

44 
	#Se˘‹Size
 512

	)

46 
	#TMULT
 50

	)

47 
	#FSIZE
 ((
Se˘‹Size
 + 1Ë* 
TMULT
)

	)

49 
	#FNAME
 "f-ã°fûe"

	)

50 
	#READCHAR
 'r'

	)

51 
	#WRITECHAR
 'w'

	)

53 
	~<uni°d.h
>

54 
	~<°dio.h
>

55 
	~<îr.h
>

56 
	~"f_hdr.h
"

58 
	gbuf„r
[
Se˘‹Size
 + 1];

61 
	$sub¥oc_wrôe
()

63 
fd
;

64 
i
;

66 
i
=0; i < 
Se˘‹Size
 + 1; i++) {

67 
buf„r
[
i
] = 
WRITECHAR
;

70 
	`¥ötf
("File Writer starting ...\n");

72 
fd
 = 
	`›í
(
FNAME
, 
O_WRONLY
);

73 i‡(
fd
 < 0) {

74 
	`îr
(1, "%s: o≥n", 
FNAME
);

77 
i
=0; i<
TMULT
; i++) {

79 
	`wrôe
(
fd
, 
buf„r
, 
Se˘‹Size
 + 1);

82 
	`˛o£
(
fd
);

84 
	`¥ötf
("File WriteÉxited successfully!\n");

85 
	}
}

	@userland/testbin/factorial/factorial.c

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<as£π.h
>

34 
	~<îr.h
>

36 
	#_PATH_SELF
 "/ã°bö/Á˘‹ül"

	)

58 
	#NUMSIZE
 8191

	)

59 
	snumbî
 {

60 
	mbuf
[
NUMSIZE
+1];

61 
size_t
 
	mfú°
;

64 
numbî
 
	gs¸©ch
;

68 
	$numbî_öô
(
numbî
 *
n
, c⁄° *
txt
)

70 
size_t
 
Àn
, 
i
;

72 
Àn
 = 
	`°æí
(
txt
);

73 i‡(
Àn
 > 
NUMSIZE
) {

74 
	`w¨nx
("%s", 
txt
);

75 
	`îrx
(1, "NumberÅooÜarge");

77 
n
->
fú°
 = 
NUMSIZE
 - 
Àn
;

78 
	`°r˝y
(
n
->
buf
 +Ç->
fú°
, 
txt
);

80 
i
=0; i<
n
->
fú°
; i++) {

81 
n
->
buf
[
i
] = '0';

84 
i
=
n
->
fú°
; i<
NUMSIZE
; i++) {

85 i‡(
n
->
buf
[
i
] < '0' ||Ç->buf[i] > '9') {

86 
	`w¨nx
("%s", 
txt
);

87 
	`îrx
(1, "Number containedÇon-digit characters");

90 
	`as£π
(
n
->
buf
[
NUMSIZE
] == 0);

91 
n
->
fú°
 < 
NUMSIZE
 &&Ç->
buf
[n->first] == '0') {

92 
n
->
fú°
++;

94 
	}
}

98 
	$numbî_gë
(
numbî
 *
n
)

100 
size_t
 
pos
;

102 
pos
 = 
n
->
fú°
;

103 
pos
 < 
NUMSIZE
 && 
n
->
buf
[pos] == '0') {

104 
pos
++;

106 i‡(
pos
 =
NUMSIZE
) {

107 
pos
--;

108 
n
->
buf
[
pos
] = '0';

110  &
n
->
buf
[
pos
];

111 
	}
}

115 
	$föishˇºy
(
numbî
 *
r
, c⁄° numbî *
b
, 
size_t
 
pos
,

116 
ˇºy
)

118 i‡(
ˇºy
 > 0 && 
b
->
fú°
 == 0) {

120 
	`îrx
(1, "Overflow");

122 
ˇºy
 > 0) {

123 i‡(
pos
 == 0) {

124 
	`îrx
(1, "Overflow");

126 
r
->
buf
[
pos
--] = 
ˇºy
 % 10 + '0';

127 
ˇºy
 = carry / 10;

129 
r
->
fú°
 = 
pos
 + 1;

130 
	}
}

134 
	$∂u£q
(
numbî
 *
r
, c⁄° numbî *
b
)

136 
size_t
 
pos
;

137 
™
, 
bn
, 
∫
, 
ˇºy
;

139 
ˇºy
 = 0;

140 
pos
 = 
NUMSIZE
;Öos-- > 
b
->
fú°
; ) {

141 
™
 = 
pos
 < 
r
->
fú°
 ? 0 :Ñ->
buf
[pos] - '0';

142 
bn
 = 
b
->
buf
[
pos
] - '0';

143 
∫
 = 
™
 + 
bn
 + 
ˇºy
;

144 
r
->
buf
[
pos
] = 
∫
 % 10 + '0';

145 
ˇºy
 = 
∫
 / 10;

147 
	`föishˇºy
(
r
, 
b
, 
pos
, 
ˇºy
);

148 
	}
}

152 
	$dec
(
numbî
 *
r
)

154 
size_t
 
pos
;

156 
pos
 = 
NUMSIZE
;Öos-- > 
r
->
fú°
; ) {

157 i‡(
r
->
buf
[
pos
] == '0') {

158 
r
->
buf
[
pos
] = '9';

161 
r
->
buf
[
pos
]--;

166 
	`îrx
(1, "Underflow");

167 
	}
}

171 
	$mu…c
(
numbî
 *
r
, c⁄° numbî *
a
, 
bn
, 
size_t
 
off£t
)

173 
size_t
 
pos
;

174 
™
, 
∫
, 
ˇºy
;

176 
pos
 = 
NUMSIZE
;Öos-- > NUMSIZE - 
off£t
; ) {

177 
r
->
buf
[
pos
] = '0';

179 
ˇºy
 = 0;

180 
pos
 = 
NUMSIZE
;Öos-- > 
a
->
fú°
; ) {

181 
™
 = 
a
->
buf
[
pos
] - '0';

182 
∫
 = 
™
 * 
bn
 + 
ˇºy
;

183 i‡(
pos
 < 
off£t
) {

184 
	`îrx
(1, "Overflow");

186 
r
->
buf
[
pos
 - 
off£t
] = 
∫
 % 10 + '0';

187 
ˇºy
 = 
∫
 / 10;

189 i‡(
ˇºy
 > 0 && 
pos
 < 
off£t
) {

190 
	`îrx
(1, "Overflow");

192 
	`föishˇºy
(
r
, 
a
, 
pos
 - 
off£t
, 
ˇºy
);

193 
	}
}

197 
	$mu…
(
numbî
 *
r
, c⁄° numbî *
a
, c⁄° numbî *
b
)

199 
off£t
;

200 
size_t
 
≠os
;

203 i‡(
a
->
fú°
 < 
b
->first) {

204 
	`mu…
(
r
, 
b
, 
a
);

208 
	`numbî_öô
(&
s¸©ch
, "0");

209 
off£t
 = 0;

210 
≠os
 = 
NUMSIZE
;ápos-- > 
a
->
fú°
; ) {

211 
	`mu…c
(&
s¸©ch
, 
b
, 
a
->
buf
[
≠os
] - '0', 
off£t
);

212 
	`∂u£q
(
r
, &
s¸©ch
);

213 
off£t
++;

215 
	}
}

222 
	$£lf
(c⁄° *
¨g1
, c⁄° *
¨g2
)

224 c⁄° *
¨gs
[4];

226 
¨gs
[0] = 
_PATH_SELF
;

227 
¨gs
[1] = 
¨g1
;

228 
¨gs
[2] = 
¨g2
;

229 
¨gs
[3] = 
NULL
;

230 
	`execv
(
_PATH_SELF
, (**)
¨gs
);

231 
	`îr
(1, "execv");

232 
	}
}

234 
numbî
 
	gn1
, 
	gn2
, 
	gmu…buf
;

237 
	$maö
(
¨gc
, *
¨gv
[])

239 i‡(
¨gc
 == 0) {

241 
	`£lf
("404", "1");

243 i‡(
¨gc
 == 2) {

244 
	`£lf
(
¨gv
[1], "1");

246 i‡(
¨gc
 == 3) {

247 i‡(!
	`°rcmp
(
¨gv
[1], "1") || !strcmp(argv[1], "0")) {

248 
	`¥ötf
("%s\n", 
¨gv
[2]);

251 
	`numbî_öô
(&
n1
, 
¨gv
[1]);

252 
	`numbî_öô
(&
n2
, 
¨gv
[2]);

253 
	`numbî_öô
(&
mu…buf
, "0");

254 
	`mu…
(&
mu…buf
, &
n1
, &
n2
);

255 
	`dec
(&
n1
);

256 
	`£lf
(
	`numbî_gë
(&
n1
),Çumbî_gë(&
mu…buf
));

260 
	`w¨nx
("Usage: factorial N");

263 
	}
}

	@userland/testbin/farm/farm.c

40 
	~<uni°d.h
>

41 
	~<îr.h
>

43 *
	gh¨gv
[2] = { (*)"hog", 
NULL
 };

44 *
	gˇrgv
[3] = { (*)"ˇt", (*)"ˇtfûe", 
NULL
 };

46 
	#MAXPROCS
 6

	)

47 
	gpids
[
MAXPROCS
], 
	g≈ids
;

51 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

53 
pid
 = 
	`f‹k
();

54 
pid
) {

56 
	`îr
(1, "fork");

59 
	`execv
(
¥og
, 
¨gv
);

60 
	`îr
(1, "%s", 
¥og
);

63 
pids
[
≈ids
++] = 
pid
;

66 
	}
}

70 
	$waôÆl
()

72 
i
, 
°©us
;

73 
i
=0; i<
≈ids
; i++) {

74 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

75 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

77 i‡(
	`WIFSIGNALED
(
°©us
)) {

78 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

80 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

81 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

84 
	}
}

88 
	$hog
()

90 
	`•awnv
("/ã°bö/hog", 
h¨gv
);

91 
	}
}

95 
	$ˇt
()

97 
	`•awnv
("/bö/ˇt", 
ˇrgv
);

98 
	}
}

101 
	$maö
()

103 
	`hog
();

104 
	`hog
();

105 
	`hog
();

106 
	`ˇt
();

108 
	`waôÆl
();

111 
	}
}

	@userland/testbin/faulter/faulter.c

39 
	~<°dio.h
>

41 
	#REALLY_BIG_ADDRESS
 0x40000000

	)

44 
	$maö
()

46 vﬁ©ûê
i
;

48 
	`¥ötf
("\nEnteringÅhe faulterÖrogram - I should die immediately\n");

49 
i
 = *(*)
REALLY_BIG_ADDRESS
;

52 ()
i
;

54 
	`¥ötf
("I didn't get killed! Program hasá bug\n");

56 
	}
}

	@userland/testbin/filetest/filetest.c

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~<îr.h
>

47 
	$maö
(
¨gc
, *
¨gv
[])

49 
wrôebuf
[40] = "Twiddle dee dee, Twiddle dum dum.......\n";

50 
ªadbuf
[41];

52 c⁄° *
fûe
;

53 
fd
, 
rv
;

55 i‡(
¨gc
 == 0) {

56 
	`w¨nx
("Noárguments -Ñunning on \"testfile\"");

57 
fûe
 = "testfile";

59 i‡(
¨gc
 == 2) {

60 
fûe
 = 
¨gv
[1];

63 
	`îrx
(1, "Usage: filetest <filename>");

66 
fd
 = 
	`›í
(
fûe
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

67 i‡(
fd
<0) {

68 
	`îr
(1, "%s: o≥¿f‹ wrôe", 
fûe
);

72 
rv
 = 
	`wrôe
(
fd
, 
wrôebuf
, 40);

73 i‡(
rv
<0) {

74 
	`îr
(1, "%s: wrôe", 
fûe
);

77 
rv
 = 
	`˛o£
(
fd
);

78 i‡(
rv
<0) {

79 
	`îr
(1, "%s: clo£ (1°Åime)", 
fûe
);

82 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

83 i‡(
fd
<0) {

84 
	`îr
(1, "%s: o≥¿f‹Ñód", 
fûe
);

87 
rv
 = 
	`ªad
(
fd
, 
ªadbuf
, 40);

88 i‡(
rv
<0) {

89 
	`îr
(1, "%s:Ñód", 
fûe
);

91 
rv
 = 
	`˛o£
(
fd
);

92 i‡(
rv
<0) {

93 
	`îr
(1, "%s: clo£ (2ndÅime)", 
fûe
);

96 
ªadbuf
[40] = 0;

98 i‡(
	`°rcmp
(
ªadbuf
, 
wrôebuf
)) {

99 
	`îrx
(1, "Buffer data mismatch!");

102 
rv
 = 
	`ªmove
(
fûe
);

103 i‡(
rv
<0) {

104 
	`îr
(1, "%s:Ñemove", 
fûe
);

106 
	`¥ötf
("Passed filetest.\n");

108 
	}
}

	@userland/testbin/forkbomb/forkbomb.c

50 
	~<uni°d.h
>

51 
	~<îr.h
>

53 vﬁ©ûê
	gpid
;

56 
	$maö
()

58 
i
;

61 
	`f‹k
();

63 
pid
 = 
	`gëpid
();

66 
i
=0; i<300; i++) {

67 vﬁ©ûê
£ípid
;

68 
£ípid
 = 
pid
;

69 i‡(
£ípid
 !
	`gëpid
()) {

70 
	`îrx
(1, "pid mismatch (%d, should be %d) "

72 
£ípid
, 
	`gëpid
());

76 
	}
}

	@userland/testbin/forktest/forktest.c

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<°dlib.h
>

42 
	~<°dio.h
>

43 
	~<îr.h
>

49 vﬁ©ûê
	gmypid
;

56 
	$dof‹k
()

58 
pid
;

59 
pid
 = 
	`f‹k
();

60 i‡(
pid
 < 0) {

61 
	`w¨n
("fork");

63  
pid
;

64 
	}
}

73 
	$check
()

75 
i
;

77 
mypid
 = 
	`gëpid
();

80 
i
=0; i<800; i++) {

81 vﬁ©ûê
£ípid
;

82 
£ípid
 = 
mypid
;

83 i‡(
£ípid
 !
	`gëpid
()) {

84 
	`îrx
(1, "pid mismatch (%d, should be %d) "

86 
£ípid
, 
	`gëpid
());

89 
	}
}

102 
	$dowaô
(
nowaô
, 
pid
)

104 
x
;

106 i‡(
pid
<0) {

110 i‡(
pid
==0) {

112 
	`exô
(0);

115 i‡(!
nowaô
) {

116 i‡(
	`waôpid
(
pid
, &
x
, 0)<0) {

117 
	`w¨n
("waitpid");

119 i‡(
	`WIFSIGNALED
(
x
)) {

120 
	`w¨nx
("pid %d: sig«»%d", 
pid
, 
	`WTERMSIG
(
x
));

122 i‡(
	`WEXITSTATUS
(
x
) != 0) {

123 
	`w¨nx
("pid %d:Éxô %d", 
pid
, 
	`WEXITSTATUS
(
x
));

126 
	}
}

133 
	$ã°
(
nowaô
)

135 
pid0
, 
pid1
, 
pid2
, 
pid3
;

144 
pid0
 = 
	`dof‹k
();

145 
	`putch¨
('0');

146 
	`check
();

147 
pid1
 = 
	`dof‹k
();

148 
	`putch¨
('1');

149 
	`check
();

150 
pid2
 = 
	`dof‹k
();

151 
	`putch¨
('2');

152 
	`check
();

153 
pid3
 = 
	`dof‹k
();

154 
	`putch¨
('3');

155 
	`check
();

161 
	`dowaô
(
nowaô
, 
pid3
);

162 
	`dowaô
(
nowaô
, 
pid2
);

163 
	`dowaô
(
nowaô
, 
pid1
);

164 
	`dowaô
(
nowaô
, 
pid0
);

166 
	`putch¨
('\n');

167 
	}
}

170 
	$maö
(
¨gc
, *
¨gv
[])

172 c⁄° 
ex≥˘ed
[] =

174 
nowaô
=0;

176 i‡(
¨gc
==2 && !
	`°rcmp
(
¨gv
[1], "-w")) {

177 
nowaô
=1;

179 i‡(
¨gc
!=1 &&árgc!=0) {

180 
	`w¨nx
("usage: forktest [-w]");

183 
	`w¨nx
("Starting. ExpectÅhis many:");

184 
	`wrôe
(
STDERR_FILENO
, 
ex≥˘ed
, 
	`°æí
(expected));

186 
	`ã°
(
nowaô
);

188 
	`w¨nx
("Complete.");

190 
	}
}

	@userland/testbin/frack/check.c

31 
	~<sys/ty≥s.h
>

32 
	~<sys/°©.h
>

33 
	~<°döt.h
>

34 
	~<°dio.h
>

35 
	~<°d¨g.h
>

36 
	~<°rög.h
>

37 
	~<uni°d.h
>

38 
	~<limôs.h
>

39 
	~<as£π.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"«me.h
"

44 
	~"d©a.h
"

45 
	~"poﬁ.h
"

46 
	~"check.h
"

51 
	#UNKNOWN_ID
 (()-1)

	)

58 
	efsch™ges
 {

59 
	mFC_NEWFS
,

60 
	mFC_TRUNCATE
,

61 
	mFC_WRITE
,

62 
	mFC_CREAT
,

63 
	mFC_MKDIR
,

64 
	mFC_RMDIR
,

65 
	mFC_UNLINK
,

66 
	mFC_LINK
,

67 
	mFC_RENAMEFILE
,

68 
	mFC_RENAMEDIR
,

70 
	sfsch™ge
 {

71 
fsch™ge
 *
	m¥ev
;

72 
fsch™ge
 *
	m√xt
;

73 
	mvîsi⁄
;

74 
	m∑πül
;

75 
fsch™ges
 
	mty≥
;

78 
	mroŸdúnum
;

79 } 
	mfc_√wfs
;

81 
fsch™ge
 *
	m¥ev_thisfûe
;

82 
	mfûe
;

83 
off_t
 
	mÀn
;

84 } 
	mfc_åunˇã
;

86 
fsch™ge
 *
	m¥ev_thisfûe
;

87 
	mfûe
;

88 
off_t
 
	mpos
;

89 
off_t
 
	mÀn
;

90 
off_t
 
	mﬁdfûesize
;

91 
	mcode
;

92 
	m£q
;

93 } 
	mfc_wrôe
;

95 
fsch™ge
 *
	m¥ev_thisdú
;

96 
	mdú
;

97 
	m«me
;

98 
	m√wfûe
;

99 } 
	mfc_¸ót
;

101 
fsch™ge
 *
	m¥ev_thisdú
;

102 
	mdú
;

103 
	m«me
;

104 
	m√wdú
;

105 } 
	mfc_mkdú
;

107 
fsch™ge
 *
	m¥ev_thisdú
;

108 
fsch™ge
 *
	m¥ev_vi˘imdú
;

109 
	mdú
;

110 
	m«me
;

111 
	mvi˘imdú
;

112 } 
	mfc_rmdú
;

114 
fsch™ge
 *
	m¥ev_thisdú
;

115 
fsch™ge
 *
	m¥ev_vi˘imfûe
;

116 
	mdú
;

117 
	m«me
;

118 
	mvi˘imfûe
;

119 } 
	mfc_u∆ök
;

121 
fsch™ge
 *
	m¥ev_‰omdú
;

122 
fsch™ge
 *
	m¥ev_todú
;

123 
fsch™ge
 *
	m¥ev_thisfûe
;

124 
	m‰omdú
;

125 
	m‰om«me
;

126 
	mtodú
;

127 
	mt⁄ame
;

128 
	mfûe
;

129 } 
	mfc_lök
;

131 
fsch™ge
 *
	m¥ev_‰omdú
;

132 
fsch™ge
 *
	m¥ev_todú
;

133 
fsch™ge
 *
	m¥ev_movedfûe
;

134 
	m‰omdú
;

135 
	m‰om«me
;

136 
	mtodú
;

137 
	mt⁄ame
;

138 
	mmovedfûe
;

139 } 
	mfc_ª«mefûe
;

141 
fsch™ge
 *
	m¥ev_‰omdú
;

142 
fsch™ge
 *
	m¥ev_todú
;

143 
fsch™ge
 *
	m¥ev_moveddú
;

144 
	m‰omdú
;

145 
	m‰om«me
;

146 
	mtodú
;

147 
	mt⁄ame
;

148 
	mmoveddú
;

149 } 
	mfc_ª«medú
;

157 
	sfsdúít
 {

158 
	m«me
;

159 
fsobje˘
 *
	mobj
;

160 
fsdúít
 *
	m√xt
;

163 
	sfsobje˘
 {

164 
	misdú
;

165 
	mªfcou¡
;

168 
	midítôy
;

169 
off_t
 
	mÀn
;

170 } 
	mobj_fûe
;

172 
	midítôy
;

173 
fsdúít
 *
	míåõs
;

174 
fsobje˘
 *
	m∑ª¡
;

175 } 
	mobj_dú
;

182 
	#MAXCHANGES
 16384

	)

183 
	#MAXOBJECTS
 16384

	)

184 
	#MAXDIRENTS
 16384

	)

186 
DECLPOOL
(
fsch™ge
, 
MAXCHANGES
);

187 
DECLPOOL
(
fsobje˘
, 
MAXOBJECTS
);

188 
DECLPOOL
(
fsdúít
, 
MAXDIRENTS
);

191 
fsch™ge
 *

192 
	$gëch™ge
()

194  
	`POOLALLOC
(
fsch™ge
);

195 
	}
}

198 
fsobje˘
 *

199 
	$gëobje˘
()

201  
	`POOLALLOC
(
fsobje˘
);

202 
	}
}

205 
fsdúít
 *

206 
	$gëdúít
()

208  
	`POOLALLOC
(
fsdúít
);

209 
	}
}

214 
	$putch™ge
(
fsch™ge
 *
fc
)

216 
	`POOLFREE
(
fsch™ge
, 
fc
);

217 
	}
}

222 
	$putobje˘
(
fsobje˘
 *
obj
)

224 
	`POOLFREE
(
fsobje˘
, 
obj
);

225 
	}
}

229 
	$putdúít
(
fsdúít
 *
dúít
)

231 
	`POOLFREE
(
fsdúít
, 
dúít
);

232 
	}
}

238 
fsch™ge
 *

239 
	$fc_¸óã
(
fsch™ges
 
ty≥
)

241 
fsch™ge
 *
fc
;

243 
fc
 = 
	`gëch™ge
();

244 
fc
->
¥ev
 = fc->
√xt
 = 
NULL
;

245 
fc
->
vîsi⁄
 = 0;

246 
fc
->
∑πül
 = 0;

247 
fc
->
ty≥
 =Åype;

248  
fc
;

249 
	}
}

252 
fsch™ge
 *

253 
	$fc_¸óã_√wfs
(
roŸdúnum
)

255 
fsch™ge
 *
fc
;

257 
fc
 = 
	`fc_¸óã
(
FC_NEWFS
);

258 
fc
->
fc_√wfs
.
roŸdúnum
 =Ñootdirnum;

259  
fc
;

260 
	}
}

263 
fsch™ge
 *

264 
	$fc_¸óã_åunˇã
(
fsch™ge
 *
¥ev_thisfûe
, 
fûe
, 
off_t
 
Àn
)

266 
fsch™ge
 *
fc
;

268 
fc
 = 
	`fc_¸óã
(
FC_TRUNCATE
);

269 
fc
->
fc_åunˇã
.
¥ev_thisfûe
 =Örev_thisfile;

270 
fc
->
fc_åunˇã
.
fûe
 = file;

271 
fc
->
fc_åunˇã
.
Àn
 =Üen;

272  
fc
;

273 
	}
}

276 
fsch™ge
 *

277 
	$fc_¸óã_wrôe
(
fsch™ge
 *
¥ev_thisfûe
, 
fûe
,

278 
off_t
 
pos
, off_à
Àn
, off_à
ﬁdfûesize
,

279 
code
, 
£q
)

281 
fsch™ge
 *
fc
;

283 
fc
 = 
	`fc_¸óã
(
FC_WRITE
);

284 
fc
->
fc_wrôe
.
¥ev_thisfûe
 =Örev_thisfile;

285 
fc
->
fc_wrôe
.
fûe
 = file;

286 
fc
->
fc_wrôe
.
pos
 =Öos;

287 
fc
->
fc_wrôe
.
Àn
 =Üen;

288 
fc
->
fc_wrôe
.
ﬁdfûesize
 = oldfilesize;

289 
fc
->
fc_wrôe
.
code
 = code;

290 
fc
->
fc_wrôe
.
£q
 = seq;

291  
fc
;

292 
	}
}

295 
fsch™ge
 *

296 
	$fc_¸óã_¸ót
(
fsch™ge
 *
¥ev_thisdú
,

297 
dú
, 
«me
, 
√wfûe
)

299 
fsch™ge
 *
mdc
;

301 
mdc
 = 
	`fc_¸óã
(
FC_CREAT
);

302 
mdc
->
fc_¸ót
.
¥ev_thisdú
 =Örev_thisdir;

303 
mdc
->
fc_¸ót
.
dú
 = dir;

304 
mdc
->
fc_¸ót
.
«me
 =Çame;

305 
mdc
->
fc_¸ót
.
√wfûe
 =Çewfile;

306  
mdc
;

307 
	}
}

310 
fsch™ge
 *

311 
	$fc_¸óã_mkdú
(
fsch™ge
 *
¥ev_thisdú
,

312 
dú
, 
«me
, 
√wdú
)

314 
fsch™ge
 *
mdc
;

316 
mdc
 = 
	`fc_¸óã
(
FC_MKDIR
);

317 
mdc
->
fc_mkdú
.
¥ev_thisdú
 =Örev_thisdir;

318 
mdc
->
fc_mkdú
.
dú
 = dir;

319 
mdc
->
fc_mkdú
.
«me
 =Çame;

320 
mdc
->
fc_mkdú
.
√wdú
 =Çewdir;

321  
mdc
;

322 
	}
}

325 
fsch™ge
 *

326 
	$fc_¸óã_rmdú
(
fsch™ge
 *
¥ev_thisdú
, fsch™gê*
¥ev_vi˘imdú
,

327 
dú
, 
«me
, 
vi˘imdú
)

329 
fsch™ge
 *
mdc
;

331 
mdc
 = 
	`fc_¸óã
(
FC_RMDIR
);

332 
mdc
->
fc_rmdú
.
¥ev_thisdú
 =Örev_thisdir;

333 
mdc
->
fc_rmdú
.
¥ev_vi˘imdú
 =Örev_victimdir;

334 
mdc
->
fc_rmdú
.
dú
 = dir;

335 
mdc
->
fc_rmdú
.
«me
 =Çame;

336 
mdc
->
fc_rmdú
.
vi˘imdú
 = victimdir;

337  
mdc
;

338 
	}
}

341 
fsch™ge
 *

342 
	$fc_¸óã_u∆ök
(
fsch™ge
 *
¥ev_thisdú
,

343 
fsch™ge
 *
¥ev_vi˘imfûe
,

344 
dú
, 
«me
, 
vi˘imfûe
)

346 
fsch™ge
 *
mdc
;

348 
mdc
 = 
	`fc_¸óã
(
FC_UNLINK
);

349 
mdc
->
fc_u∆ök
.
¥ev_thisdú
 =Örev_thisdir;

350 
mdc
->
fc_u∆ök
.
¥ev_vi˘imfûe
 =Örev_victimfile;

351 
mdc
->
fc_u∆ök
.
dú
 = dir;

352 
mdc
->
fc_u∆ök
.
«me
 =Çame;

353 
mdc
->
fc_u∆ök
.
vi˘imfûe
 = victimfile;

354  
mdc
;

355 
	}
}

358 
fsch™ge
 *

359 
	$fc_¸óã_lök
(
fsch™ge
 *
¥ev_‰omdú
, fsch™gê*
¥ev_todú
,

360 
fsch™ge
 *
¥ev_thisfûe
,

361 
‰omdú
, 
‰om«me
,

362 
todú
, 
t⁄ame
,

363 
fûe
)

365 
fsch™ge
 *
mdc
;

367 
mdc
 = 
	`fc_¸óã
(
FC_LINK
);

368 
mdc
->
fc_lök
.
¥ev_‰omdú
 =Örev_fromdir;

369 
mdc
->
fc_lök
.
¥ev_todú
 =Örev_todir;

370 
mdc
->
fc_lök
.
¥ev_thisfûe
 =Örev_thisfile;

371 
mdc
->
fc_lök
.
‰omdú
 = fromdir;

372 
mdc
->
fc_lök
.
‰om«me
 = fromname;

373 
mdc
->
fc_lök
.
todú
 =Åodir;

374 
mdc
->
fc_lök
.
t⁄ame
 =Åoname;

375 
mdc
->
fc_lök
.
fûe
 = file;

376  
mdc
;

377 
	}
}

380 
fsch™ge
 *

381 
	$fc_¸óã_ª«mefûe
(
fsch™ge
 *
¥ev_‰omdú
,

382 
fsch™ge
 *
¥ev_todú
,

383 
fsch™ge
 *
¥ev_movedfûe
,

384 
‰omdú
, 
‰om«me
,

385 
todú
, 
t⁄ame
,

386 
movedfûe
)

388 
fsch™ge
 *
mdc
;

390 
mdc
 = 
	`fc_¸óã
(
FC_RENAMEFILE
);

391 
mdc
->
fc_ª«mefûe
.
¥ev_‰omdú
 =Örev_fromdir;

392 
mdc
->
fc_ª«mefûe
.
¥ev_todú
 =Örev_todir;

393 
mdc
->
fc_ª«mefûe
.
¥ev_movedfûe
 =Örev_movedfile;

394 
mdc
->
fc_ª«mefûe
.
‰omdú
 = fromdir;

395 
mdc
->
fc_ª«mefûe
.
‰om«me
 = fromname;

396 
mdc
->
fc_ª«mefûe
.
todú
 =Åodir;

397 
mdc
->
fc_ª«mefûe
.
t⁄ame
 =Åoname;

398 
mdc
->
fc_ª«mefûe
.
movedfûe
 = movedfile;

399  
mdc
;

400 
	}
}

403 
fsch™ge
 *

404 
	$fc_¸óã_ª«medú
(
fsch™ge
 *
¥ev_‰omdú
,

405 
fsch™ge
 *
¥ev_todú
,

406 
fsch™ge
 *
¥ev_moveddú
,

407 
‰omdú
, 
‰om«me
,

408 
todú
, 
t⁄ame
,

409 
moveddú
)

411 
fsch™ge
 *
fc
;

413 
fc
 = 
	`fc_¸óã
(
FC_RENAMEDIR
);

414 
fc
->
fc_ª«medú
.
¥ev_‰omdú
 =Örev_fromdir;

415 
fc
->
fc_ª«medú
.
¥ev_todú
 =Örev_todir;

416 
fc
->
fc_ª«medú
.
¥ev_moveddú
 =Örev_moveddir;

417 
fc
->
fc_ª«medú
.
‰omdú
 = fromdir;

418 
fc
->
fc_ª«medú
.
‰om«me
 = fromname;

419 
fc
->
fc_ª«medú
.
todú
 =Åodir;

420 
fc
->
fc_ª«medú
.
t⁄ame
 =Åoname;

421 
fc
->
fc_ª«medú
.
moveddú
 = moveddir;

422  
fc
;

423 
	}
}

429 
fsdúít
 *

430 
	$fsdúít_¸óã
(
«me
, 
fsobje˘
 *
obj
)

432 
fsdúít
 *
ªt
;

434 
ªt
 = 
	`gëdúít
();

435 
ªt
->
«me
 =Çame;

436 
ªt
->
obj
 = obj;

437 
ªt
->
√xt
 = 
NULL
;

438  
ªt
;

439 
	}
}

443 
	$fsdúít_de°roy
(
fsdúít
 *
de
)

445 
	`as£π
(
de
->
obj
 =
NULL
);

446 
	`as£π
(
de
->
√xt
 =
NULL
);

447 
	`putdúít
(
de
);

448 
	}
}

451 
fsobje˘
 *

452 
	$fsobje˘_¸óã_fûe
(
id
)

454 
fsobje˘
 *
ªt
;

456 
ªt
 = 
	`gëobje˘
();

457 
ªt
->
isdú
 = 0;

458 
ªt
->
ªfcou¡
 = 1;

459 
ªt
->
obj_fûe
.
idítôy
 = 
id
;

460 
ªt
->
obj_fûe
.
Àn
 = 0;

461  
ªt
;

462 
	}
}

465 
fsobje˘
 *

466 
	$fsobje˘_¸óã_dú
(
id
, 
fsobje˘
 *
∑ª¡
)

468 
fsobje˘
 *
ªt
;

470 
ªt
 = 
	`gëobje˘
();

471 
ªt
->
isdú
 = 1;

472 
ªt
->
ªfcou¡
 = 1;

473 
ªt
->
obj_dú
.
idítôy
 = 
id
;

474 
ªt
->
obj_dú
.
íåõs
 = 
NULL
;

475 
ªt
->
obj_dú
.
∑ª¡
 =Öarent;

476  
ªt
;

477 
	}
}

481 
	$fsobje˘_ö¸ef
(
fsobje˘
 *
obj
)

483 
	`as£π
(
obj
->
ªfcou¡
 > 0);

484 
obj
->
ªfcou¡
++;

485 
	`as£π
(
obj
->
ªfcou¡
 > 0);

486 
	}
}

490 
	$fsobje˘_de¸ef
(
fsobje˘
 *
obj
)

492 
	`as£π
(
obj
->
ªfcou¡
 > 0);

493 
obj
->
ªfcou¡
--;

494 i‡(
obj
->
ªfcou¡
 > 0) {

498 i‡(
obj
->
isdú
) {

499 
	`as£π
(
obj
->
obj_dú
.
íåõs
 =
NULL
);

501 
	`putobje˘
(
obj
);

502 
	}
}

506 
	$fsobje˘_de°royåì
(
fsobje˘
 *
obj
)

508 
fsdúít
 *
de
;

510 i‡(
obj
->
isdú
) {

511 
obj
->
obj_dú
.
íåõs
 !
NULL
) {

512 
de
 = 
obj
->
obj_dú
.
íåõs
;

513 
obj
->
obj_dú
.
íåõs
 = 
de
->
√xt
;

514 
de
->
√xt
 = 
NULL
;

515 
	`fsobje˘_de°royåì
(
de
->
obj
);

516 
de
->
obj
 = 
NULL
;

517 
	`fsdúít_de°roy
(
de
);

520 
	`fsobje˘_de¸ef
(
obj
);

521 
	}
}

528 
	$dõ
(c⁄° *
fmt
, ...)

530 
buf
[256];

531 
va_li°
 
≠
;

533 
	`va_°¨t
(
≠
, 
fmt
);

534 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

535 
	`va_íd
(
≠
);

536 
	`îrx
(1, "Inc⁄si°ícy: %s", 
buf
);

537 
	}
}

542 
	$fsdúít_cou¡
(
fsdúít
 *
de
)

544 i‡(
de
 =
NULL
) {

547  1 + 
	`fsdúít_cou¡
(
de
->
√xt
);

548 
	}
}

553 
	$fsdú_add_íåy
(
fsobje˘
 *
dú
, 
fsdúít
 *
nde
)

555 
fsdúít
 *
ode
;

557 
	`as£π
(
dú
->
isdú
);

558 
ode
 = 
dú
->
obj_dú
.
íåõs
; odê!
NULL
; odêode->
√xt
) {

559 i‡(
ode
->
«me
 =
nde
->name) {

560 
	`dõ
("In directory %u, %sálreadyÉxisted",

561 
dú
->
obj_dú
.
idítôy
, 
	`«me_gë
(
nde
->
«me
));

564 
nde
->
√xt
 = 
dú
->
obj_dú
.
íåõs
;

565 
dú
->
obj_dú
.
íåõs
 = 
nde
;

566 
	}
}

569 
fsdúít
 *

570 
	$fsdú_föd_íåy
(
fsobje˘
 *
dú
, 
«me
, 
¸ﬂk
)

572 
fsdúít
 *
de
;

574 
	`as£π
(
dú
->
isdú
);

575 
de
 = 
dú
->
obj_dú
.
íåõs
; dê!
NULL
; dêde->
√xt
) {

576 i‡(
de
->
«me
 ==Çame) {

577  
de
;

580 i‡(
¸ﬂk
) {

581 
	`dõ
("In directory %u, didÇot find %s",

582 
dú
->
obj_dú
.
idítôy
, 
	`«me_gë
(
«me
));

584  
NULL
;

585 
	}
}

588 
fsdúít
 *

589 
	$fsdú_ªmove_íåy
(
fsobje˘
 *
dú
, 
«me
)

591 
fsdúít
 *
de
, **
¥ev±r
;

593 
	`as£π
(
dú
->
isdú
);

594 
¥ev±r
 = &
dú
->
obj_dú
.
íåõs
;

595 
de
 = *
¥ev±r
; dê!
NULL
;Öªv±∏&de->
√xt
, de = *prevptr) {

596 i‡(
de
->
«me
 ==Çame) {

597 *
¥ev±r
 = 
de
->
√xt
;

598 
de
->
√xt
 = 
NULL
;

599  
de
;

602 
	`dõ
("In directory %u, didÇot find %s",

603 
dú
->
obj_dú
.
idítôy
, 
	`«me_gë
(
«me
));

604  
NULL
;

605 
	}
}

611 
fsobje˘
 *

612 
	$födsub
(
fsobje˘
 *
obj
, 
isdú
, 
id
)

614 
fsobje˘
 *
ªt
;

615 
fsdúít
 *
de
;

616 
objid
;

619 
objid
 = 
obj
->
isdú
 ? obj->
obj_dú
.
idítôy
 : obj->
obj_fûe
.identity;

620 i‡(
obj
->
isdú
 =isdú && 
objid
 =
id
) {

621  
obj
;

625 i‡(!
obj
->
isdú
) {

626  
NULL
;

629 
de
 = 
obj
->
obj_dú
.
íåõs
; dê!
NULL
; dêde->
√xt
) {

630 
ªt
 = 
	`födsub
(
de
->
obj
, 
isdú
, 
id
);

631 i‡(
ªt
 !
NULL
) {

632  
ªt
;

635  
NULL
;

636 
	}
}

640 
fsobje˘
 *

641 
	$födfûe
(
fsobje˘
 *
roŸdú
, 
id
)

643 
fsobje˘
 *
ªt
;

645 
ªt
 = 
	`födsub
(
roŸdú
, 0 , 
id
);

646 i‡(
ªt
 =
NULL
) {

647 
	`dõ
("Fûê%uÇŸ found i¿cuºíà°©e", 
id
);

649  
ªt
;

650 
	}
}

654 
fsobje˘
 *

655 
	$födfûe_maybe
(
fsobje˘
 *
roŸdú
, 
id
)

657  
	`födsub
(
roŸdú
, 0 , 
id
);

658 
	}
}

661 
fsobje˘
 *

662 
	$föddú
(
fsobje˘
 *
roŸdú
, 
id
)

664 
fsobje˘
 *
ªt
;

666 
ªt
 = 
	`födsub
(
roŸdú
, 1 , 
id
);

667 i‡(
ªt
 =
NULL
) {

668 
	`dõ
("Dúe˘‹y %uÇŸ found i¿cuºíà°©e", 
id
);

670  
ªt
;

671 
	}
}

675 
	$≠∂y_ch™ge
(
fsobje˘
 *
roŸdú
, 
fsch™ge
 *
ch™ge
)

677 
fsobje˘
 *
obj1
, *
obj2
;

678 
fsdúít
 *
de
;

679 
off_t
 
ídpos
;

681 
ch™ge
->
ty≥
) {

682 
FC_NEWFS
:

683 
	`as£π
(
roŸdú
->
obj_dú
.
idítôy
 ==

684 
ch™ge
->
fc_√wfs
.
roŸdúnum
);

686 
FC_TRUNCATE
:

692 
obj1
 = 
	`födfûe_maybe
(
roŸdú
, 
ch™ge
->
fc_åunˇã
.
fûe
);

693 i‡(
obj1
 !
NULL
) {

694 
obj1
->
obj_fûe
.
Àn
 = 
ch™ge
->
fc_åunˇã
.len;

697 
FC_WRITE
:

701 
obj1
 = 
	`födfûe_maybe
(
roŸdú
, 
ch™ge
->
fc_wrôe
.
fûe
);

702 i‡(
obj1
 !
NULL
) {

703 
ídpos
 = 
ch™ge
->
fc_wrôe
.
pos
 + ch™ge->fc_wrôe.
Àn
;

704 i‡(
obj1
->
obj_fûe
.
Àn
 < 
ídpos
) {

705 
obj1
->
obj_fûe
.
Àn
 = 
ídpos
;

709 
FC_CREAT
:

710 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_¸ót
.
dú
);

711 
obj2
 = 
	`fsobje˘_¸óã_fûe
(
ch™ge
->
fc_¸ót
.
√wfûe
);

712 
de
 = 
	`fsdúít_¸óã
(
ch™ge
->
fc_¸ót
.
«me
, 
obj2
);

713 
	`fsdú_add_íåy
(
obj1
, 
de
);

715 
FC_MKDIR
:

716 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_mkdú
.
dú
);

717 
obj2
 = 
	`fsobje˘_¸óã_dú
(
ch™ge
->
fc_mkdú
.
√wdú
, 
obj1
);

718 
de
 = 
	`fsdúít_¸óã
(
ch™ge
->
fc_mkdú
.
«me
, 
obj2
);

719 
	`fsdú_add_íåy
(
obj1
, 
de
);

721 
FC_RMDIR
:

722 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_rmdú
.
dú
);

723 
de
 = 
	`fsdú_ªmove_íåy
(
obj1
, 
ch™ge
->
fc_rmdú
.
«me
);

724 
obj2
 = 
de
->
obj
;

725 
de
->
obj
 = 
NULL
;

726 
	`as£π
(
obj2
->
isdú
);

727 
	`as£π
(
obj2
->
obj_dú
.
íåõs
 =
NULL
);

728 
	`as£π
(
obj2
->
obj_dú
.
idítôy
 =
ch™ge
->
fc_rmdú
.
vi˘imdú
);

729 
	`as£π
(
obj2
->
obj_dú
.
∑ª¡
 =
obj1
);

730 
	`fsdúít_de°roy
(
de
);

731 
	`fsobje˘_de¸ef
(
obj2
);

733 
FC_UNLINK
:

734 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_u∆ök
.
dú
);

735 
de
 = 
	`fsdú_ªmove_íåy
(
obj1
, 
ch™ge
->
fc_u∆ök
.
«me
);

736 
obj2
 = 
de
->
obj
;

737 
de
->
obj
 = 
NULL
;

738 
	`as£π
(!
obj2
->
isdú
);

739 
	`as£π
(
obj2
->
obj_fûe
.
idítôy
 ==

740 
ch™ge
->
fc_u∆ök
.
vi˘imfûe
);

741 
	`fsdúít_de°roy
(
de
);

742 
	`fsobje˘_de¸ef
(
obj2
);

744 
FC_LINK
:

745 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_lök
.
‰omdú
);

746 
de
 = 
	`fsdú_föd_íåy
(
obj1
, 
ch™ge
->
fc_lök
.
‰om«me
, 1);

747 
obj2
 = 
de
->
obj
;

748 
	`as£π
(!
obj2
->
isdú
);

749 
	`as£π
(
obj2
->
obj_fûe
.
idítôy
 =
ch™ge
->
fc_lök
.
fûe
);

750 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_lök
.
todú
);

751 
	`fsobje˘_ö¸ef
(
obj2
);

752 
de
 = 
	`fsdúít_¸óã
(
ch™ge
->
fc_lök
.
t⁄ame
, 
obj2
);

753 
	`fsdú_add_íåy
(
obj1
, 
de
);

755 
FC_RENAMEFILE
:

756 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_ª«mefûe
.
‰omdú
);

757 
de
 = 
	`fsdú_ªmove_íåy
(
obj1
, 
ch™ge
->
fc_ª«mefûe
.
‰om«me
);

758 
obj2
 = 
de
->
obj
;

759 
	`as£π
(!
obj2
->
isdú
);

760 
	`as£π
(
obj2
->
obj_fûe
.
idítôy
 ==

761 
ch™ge
->
fc_ª«mefûe
.
movedfûe
);

762 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_ª«mefûe
.
todú
);

763 
de
->
«me
 = 
ch™ge
->
fc_ª«mefûe
.
t⁄ame
;

764 
	`fsdú_add_íåy
(
obj1
, 
de
);

766 
FC_RENAMEDIR
:

767 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_ª«medú
.
‰omdú
);

768 
de
 = 
	`fsdú_ªmove_íåy
(
obj1
, 
ch™ge
->
fc_ª«medú
.
‰om«me
);

769 
obj2
 = 
de
->
obj
;

770 
	`as£π
(
obj2
->
isdú
);

771 
	`as£π
(
obj2
->
obj_dú
.
idítôy
 ==

772 
ch™ge
->
fc_ª«medú
.
moveddú
);

773 
	`as£π
(
obj2
->
obj_dú
.
∑ª¡
 =
obj1
);

774 
obj1
 = 
	`föddú
(
roŸdú
, 
ch™ge
->
fc_ª«medú
.
todú
);

775 
de
->
«me
 = 
ch™ge
->
fc_ª«medú
.
t⁄ame
;

776 
obj2
->
obj_dú
.
∑ª¡
 = 
obj1
;

777 
	`fsdú_add_íåy
(
obj1
, 
de
);

780 
	}
}

785 
fsch™ge
 *
	gfú°ch™ge
;

786 
fsch™ge
 *
	gch™ges
;

787 
fsobje˘
 *
	g°©e
;

788 
	g√xtfûíum
, 
	g√xtdúnum
;

795 
	$fc_©èch
(
fsch™ge
 *
√w
)

797 
fsch™ge
 *
¥ev
;

799 
¥ev
 = 
ch™ges
;

801 
	`as£π
(
¥ev
->
√xt
 =
NULL
);

802 
	`as£π
(
√w
->
¥ev
 =
NULL
);

803 
	`as£π
(
√w
->
√xt
 =
NULL
);

804 
¥ev
->
√xt
 = 
√w
;

805 
√w
->
¥ev
 =Örev;

806 
√w
->
vîsi⁄
 = 
¥ev
->version + 1;

808 
ch™ges
 = 
√w
;

809 
	`≠∂y_ch™ge
(
°©e
, 
√w
);

810 
	}
}

814 
	$ªwöd°©e
()

816 i‡(
°©e
 !
NULL
) {

817 
	`fsobje˘_de°royåì
(
°©e
);

820 
	`as£π
(
fú°ch™ge
->
ty≥
 =
FC_NEWFS
);

822 
°©e
 = 
	`fsobje˘_¸óã_dú
(
fú°ch™ge
->
fc_√wfs
.
roŸdúnum
, 
NULL
);

824 
°©e
->
obj_dú
.
∑ª¡
 = state;

825 
	}
}

829 
	$adv™˚°©ëo
(
fsch™ge
 *
èrgëch™ge
)

831 
fsch™ge
 *
ch™ge
;

833 
ch™ge
 = 
fú°ch™ge
; ch™gê!
NULL
; ch™gêch™ge->
√xt
) {

834 
	`≠∂y_ch™ge
(
°©e
, 
ch™ge
);

835 i‡(
ch™ge
 =
èrgëch™ge
) {

839 
	`as£π
(0);

840 
	}
}

850 
fsch™ge
 *
	$ch™ges_föd¥evfûe
(
fûíum
)

852 
fsch™ge
 *
hîe
;

854 
hîe
 = 
ch™ges
; hîê!
NULL
; hîêhîe->
¥ev
) {

855 
hîe
->
ty≥
) {

856 
FC_NEWFS
:

858 
FC_TRUNCATE
:

859 i‡(
hîe
->
fc_åunˇã
.
fûe
 =
fûíum
) {

860  
hîe
;

863 
FC_WRITE
:

864 i‡(
hîe
->
fc_wrôe
.
fûe
 =
fûíum
) {

865  
hîe
;

868 
FC_CREAT
:

869 i‡(
hîe
->
fc_¸ót
.
√wfûe
 =
fûíum
) {

870  
hîe
;

873 
FC_MKDIR
:

874 
FC_RMDIR
:

876 
FC_UNLINK
:

877 i‡(
hîe
->
fc_u∆ök
.
vi˘imfûe
 =
fûíum
) {

878  
hîe
;

881 
FC_LINK
:

882 i‡(
hîe
->
fc_lök
.
fûe
 =
fûíum
) {

883  
hîe
;

886 
FC_RENAMEFILE
:

887 i‡(
hîe
->
fc_ª«mefûe
.
movedfûe
 =
fûíum
) {

888  
hîe
;

891 
FC_RENAMEDIR
:

895 
	`dõ
("Nÿ¥eviou†ªc‹d f‹ fûê%u", 
fûíum
);

896  
NULL
;

897 
	}
}

903 
fsch™ge
 *

904 
	$ch™ges_föd¥evdú
(
dúnum
)

906 
fsch™ge
 *
hîe
;

908 
hîe
 = 
ch™ges
; hîê!
NULL
; hîêhîe->
¥ev
) {

909 
hîe
->
ty≥
) {

910 
FC_NEWFS
:

911 i‡(
hîe
->
fc_√wfs
.
roŸdúnum
 =
dúnum
) {

912  
hîe
;

915 
FC_TRUNCATE
:

916 
FC_WRITE
:

918 
FC_CREAT
:

919 i‡(
hîe
->
fc_¸ót
.
dú
 =
dúnum
) {

920  
hîe
;

923 
FC_MKDIR
:

924 i‡(
hîe
->
fc_mkdú
.
dú
 =
dúnum
 ||

925 
hîe
->
fc_mkdú
.
√wdú
 =
dúnum
) {

926  
hîe
;

929 
FC_RMDIR
:

930 i‡(
hîe
->
fc_rmdú
.
dú
 =
dúnum
 ||

931 
hîe
->
fc_rmdú
.
vi˘imdú
 =
dúnum
) {

932  
hîe
;

935 
FC_UNLINK
:

936 i‡(
hîe
->
fc_u∆ök
.
dú
 =
dúnum
) {

937  
hîe
;

940 
FC_LINK
:

941 i‡(
hîe
->
fc_lök
.
‰omdú
 =
dúnum
 ||

942 
hîe
->
fc_lök
.
todú
 =
dúnum
) {

943  
hîe
;

946 
FC_RENAMEFILE
:

947 i‡(
hîe
->
fc_ª«mefûe
.
‰omdú
 =
dúnum
 ||

948 
hîe
->
fc_ª«mefûe
.
todú
 =
dúnum
) {

949  
hîe
;

952 
FC_RENAMEDIR
:

953 i‡(
hîe
->
fc_ª«medú
.
‰omdú
 =
dúnum
 ||

954 
hîe
->
fc_ª«medú
.
todú
 =
dúnum
 ||

955 
hîe
->
fc_ª«medú
.
moveddú
 =
dúnum
) {

956  
hîe
;

961 
	`dõ
("Nÿ¥eviou†ªc‹d f‹ dúe˘‹y %u", 
dúnum
);

962  
NULL
;

963 
	}
}

967 
fsch™ge
 *

968 
	$fs_¥evf‹fûe
(
fsch™ge
 *
fc
, 
fûíum
)

970 
fc
->
ty≥
) {

971 
FC_TRUNCATE
:

972 i‡(
fc
->
fc_åunˇã
.
fûe
 =
fûíum
) {

973  
fc
->
fc_åunˇã
.
¥ev_thisfûe
;

976 
FC_WRITE
:

977 i‡(
fc
->
fc_wrôe
.
fûe
 =
fûíum
) {

978  
fc
->
fc_wrôe
.
¥ev_thisfûe
;

981 
FC_UNLINK
:

982 i‡(
fc
->
fc_u∆ök
.
vi˘imfûe
 =
fûíum
) {

983  
fc
->
fc_u∆ök
.
¥ev_vi˘imfûe
;

986 
FC_LINK
:

987 i‡(
fc
->
fc_lök
.
fûe
 =
fûíum
) {

988  
fc
->
fc_lök
.
¥ev_thisfûe
;

991 
FC_RENAMEFILE
:

992 i‡(
fc
->
fc_ª«mefûe
.
movedfûe
 =
fûíum
) {

993  
fc
->
fc_ª«mefûe
.
¥ev_movedfûe
;

999  
fc
->
¥ev
;

1000 
	}
}

1005 
fsch™ge
 *

1006 
	$fs_¥evf‹dú
(
fsch™ge
 *
fc
, 
dúnum
)

1008 
fc
->
ty≥
) {

1009 
FC_CREAT
:

1010 i‡(
fc
->
fc_¸ót
.
dú
 =
dúnum
) {

1011  
fc
->
fc_¸ót
.
¥ev_thisdú
;

1014 
FC_MKDIR
:

1015 i‡(
fc
->
fc_mkdú
.
dú
 =
dúnum
) {

1016  
fc
->
fc_mkdú
.
¥ev_thisdú
;

1019 
FC_RMDIR
:

1020 i‡(
fc
->
fc_rmdú
.
dú
 =
dúnum
) {

1021  
fc
->
fc_rmdú
.
¥ev_thisdú
;

1023 i‡(
fc
->
fc_rmdú
.
vi˘imdú
 =
dúnum
) {

1024  
fc
->
fc_rmdú
.
¥ev_vi˘imdú
;

1027 
FC_UNLINK
:

1028 i‡(
fc
->
fc_u∆ök
.
dú
 =
dúnum
) {

1029  
fc
->
fc_u∆ök
.
¥ev_thisdú
;

1032 
FC_LINK
:

1033 i‡(
fc
->
fc_lök
.
‰omdú
 =
dúnum
) {

1034  
fc
->
fc_lök
.
¥ev_‰omdú
;

1036 i‡(
fc
->
fc_lök
.
todú
 =
dúnum
) {

1037  
fc
->
fc_lök
.
¥ev_todú
;

1040 
FC_RENAMEFILE
:

1041 i‡(
fc
->
fc_ª«mefûe
.
‰omdú
 =
dúnum
) {

1042  
fc
->
fc_ª«mefûe
.
¥ev_‰omdú
;

1044 i‡(
fc
->
fc_ª«mefûe
.
todú
 =
dúnum
) {

1045  
fc
->
fc_ª«mefûe
.
¥ev_todú
;

1048 
FC_RENAMEDIR
:

1049 i‡(
fc
->
fc_ª«medú
.
‰omdú
 =
dúnum
) {

1050  
fc
->
fc_ª«medú
.
¥ev_‰omdú
;

1052 i‡(
fc
->
fc_ª«medú
.
todú
 =
dúnum
) {

1053  
fc
->
fc_ª«medú
.
¥ev_todú
;

1055 i‡(
fc
->
fc_ª«medú
.
moveddú
 =
dúnum
) {

1056  
fc
->
fc_ª«medú
.
¥ev_moveddú
;

1062  
fc
->
¥ev
;

1063 
	}
}

1065 
	sfödªsu…
 {

1066 
	misfûe
;

1067 
	mobjnum
;

1072 
	$fs_föd
(
dúnum
, 
«me
, 
födªsu…
 *
ªs
)

1074 
fsch™ge
 *
hîe
;

1076 
hîe
 = 
fs
; hîê!
NULL
; hîê
	`fs_¥evf‹dú
(hîe, 
dúnum
)) {

1077 
hîe
->
ty≥
) {

1078 
FC_NEWFS
:

1079 
FC_TRUNCATE
:

1080 
FC_WRITE
:

1082 
FC_CREAT
:

1083 i‡(
hîe
->
fc_¸ót
.
dú
 =
dúnum
 &&

1084 
hîe
->
fc_¸ót
.
«me
 ==Çame) {

1085 
ªs
->
isfûe
 = 1;

1086 
ªs
->
objnum
 = 
hîe
->
fc_¸ót
.
√wfûe
;

1090 
FC_MKDIR
:

1091 i‡(
hîe
->
fc_mkdú
.
dú
 =
dúnum
 &&

1092 
hîe
->
fc_mkdú
.
«me
 ==Çame) {

1093 
ªs
->
isfûe
 = 0;

1094 
ªs
->
objnum
 = 
hîe
->
fc_mkdú
.
√wdú
;

1097 i‡(
hîe
->
fc_mkdú
.
√wdú
 =
dúnum
) {

1101 
FC_RMDIR
:

1102 i‡(
hîe
->
fc_rmdú
.
dú
 =
dúnum
 &&

1103 
hîe
->
fc_rmdú
.
«me
 ==Çame) {

1106 i‡(
hîe
->
fc_rmdú
.
vi˘imdú
 =
dúnum
) {

1110 
FC_UNLINK
:

1111 i‡(
hîe
->
fc_u∆ök
.
dú
 =
dúnum
 &&

1112 
hîe
->
fc_u∆ök
.
«me
 ==Çame) {

1116 
FC_LINK
:

1117 i‡((
hîe
->
fc_lök
.
todú
 =
dúnum
 &&

1118 
hîe
->
fc_lök
.
t⁄ame
 =
«me
) ||

1119 (
hîe
->
fc_lök
.
‰omdú
 =
dúnum
 &&

1120 
hîe
->
fc_lök
.
‰om«me
 =
«me
)) {

1121 
ªs
->
isfûe
 = 1;

1122 
ªs
->
objnum
 = 
hîe
->
fc_lök
.
fûe
;

1126 
FC_RENAMEFILE
:

1127 i‡(
hîe
->
fc_ª«mefûe
.
‰omdú
 =
dúnum
 &&

1128 
hîe
->
fc_ª«mefûe
.
‰om«me
 =
«me
) {

1131 i‡(
hîe
->
fc_ª«mefûe
.
todú
 =
dúnum
 &&

1132 
hîe
->
fc_ª«mefûe
.
t⁄ame
 =
«me
) {

1133 
ªs
->
isfûe
 = 1;

1134 
ªs
->
objnum
 = 
hîe
->
fc_ª«mefûe
.
movedfûe
;

1138 
FC_RENAMEDIR
:

1139 i‡(
hîe
->
fc_ª«medú
.
‰omdú
 =
dúnum
 &&

1140 
hîe
->
fc_ª«medú
.
‰om«me
 =
«me
) {

1143 i‡(
hîe
->
fc_ª«medú
.
todú
 =
dúnum
 &&

1144 
hîe
->
fc_ª«medú
.
t⁄ame
 =
«me
) {

1145 
ªs
->
isfûe
 = 0;

1146 
ªs
->
objnum
 = 
hîe
->
fc_ª«medú
.
moveddú
;

1153 
	}
}

1157 
	$fs_födfûe
(
dúnum
, 
«me
)

1159 
födªsu…
 
ªs
;

1161 i‡(
	`fs_föd
(
dúnum
, 
«me
, &
ªs
) < 0) {

1162 
	`dõ
("In directory %u, didÇot find %s",

1163 
dúnum
, 
	`«me_gë
(
«me
));

1165 i‡(
ªs
.
isfûe
 == 0) {

1166 
	`dõ
("In directory %u, %s wasá directory",

1167 
dúnum
, 
	`«me_gë
(
«me
));

1169  
ªs
.
objnum
;

1170 
	}
}

1174 
	$fs_föddú
(
dúnum
, 
«me
)

1176 
födªsu…
 
ªs
;

1178 i‡(
	`fs_föd
(
dúnum
, 
«me
, &
ªs
) < 0) {

1179 
	`dõ
("In directory %u, didÇot find %s",

1180 
dúnum
, 
	`«me_gë
(
«me
));

1182 i‡(
ªs
.
isfûe
 == 1) {

1183 
	`dõ
("In directory %u, %s wasÇotá directory",

1184 
dúnum
, 
	`«me_gë
(
«me
));

1186  
ªs
.
objnum
;

1187 
	}
}

1191 
	$fs_isfûe
(
dúnum
, 
«me
)

1193 
födªsu…
 
ªs
;

1195 i‡(
	`fs_föd
(
dúnum
, 
«me
, &
ªs
) < 0) {

1198  
ªs
.
isfûe
;

1199 
	}
}

1203 
	$fs_isdú
(
dúnum
, 
«me
)

1205 
födªsu…
 
ªs
;

1207 i‡(
	`fs_föd
(
dúnum
, 
«me
, &
ªs
) < 0) {

1210  !
ªs
.
isfûe
;

1211 
	}
}

1215 
	$fs_föd∑ª¡
(
dúnum
)

1217 
fsch™ge
 *
hîe
;

1219 
hîe
 = 
fs
; hîê!
NULL
; hîê
	`fs_¥evf‹dú
(hîe, 
dúnum
)) {

1220 
hîe
->
ty≥
) {

1221 
FC_NEWFS
:

1222 i‡(
hîe
->
fc_√wfs
.
roŸdúnum
 =
dúnum
) {

1223  
dúnum
;

1226 
FC_TRUNCATE
:

1227 
FC_WRITE
:

1228 
FC_CREAT
:

1230 
FC_MKDIR
:

1231 i‡(
hîe
->
fc_mkdú
.
√wdú
 =
dúnum
) {

1232  
hîe
->
fc_mkdú
.
dú
;

1235 
FC_RMDIR
:

1236 i‡(
hîe
->
fc_rmdú
.
vi˘imdú
 =
dúnum
) {

1237 
	`dõ
("Dúe˘‹y %u wa†ªmoved", 
dúnum
);

1240 
FC_UNLINK
:

1241 
FC_LINK
:

1242 
FC_RENAMEFILE
:

1244 
FC_RENAMEDIR
:

1245 i‡(
hîe
->
fc_ª«medú
.
moveddú
 =
dúnum
) {

1246  
hîe
->
fc_ª«medú
.
todú
;

1251 
	`dõ
("Dúe˘‹y %uÇŸ found", 
dúnum
);

1253 
	}
}

1258 
	$modñ_födfûe
(
dúnum
, 
«me
)

1260 
fsobje˘
 *
obj
;

1261 
fsdúít
 *
de
;

1263 
obj
 = 
	`föddú
(
°©e
, 
dúnum
);

1264 
de
 = 
	`fsdú_föd_íåy
(
obj
, 
«me
, 1);

1265 i‡(
de
->
obj
->
isdú
) {

1266 
	`dõ
("In directory %u, %s wasá directory",

1267 
dúnum
, 
	`«me_gë
(
«me
));

1269  
de
->
obj
->
obj_fûe
.
idítôy
;

1270 
	}
}

1274 
	$modñ_föddú
(
dúnum
, 
«me
)

1276 
fsobje˘
 *
obj
;

1277 
fsdúít
 *
de
;

1279 
obj
 = 
	`föddú
(
°©e
, 
dúnum
);

1280 
de
 = 
	`fsdú_föd_íåy
(
obj
, 
«me
, 1);

1281 i‡(!
de
->
obj
->
isdú
) {

1282 
	`dõ
("In directory %u, %s wasÇotá directory",

1283 
dúnum
, 
	`«me_gë
(
«me
));

1285  
de
->
obj
->
obj_dú
.
idítôy
;

1286 
	}
}

1290 
	$modñ_föd∑ª¡
(
dúnum
)

1292 
fsobje˘
 *
obj
;

1294 
obj
 = 
	`föddú
(
°©e
, 
dúnum
);

1295 
	`as£π
(
obj
->
isdú
);

1296 
	`as£π
(
obj
->
obj_dú
.
∑ª¡
->
isdú
);

1297  
obj
->
obj_dú
.
∑ª¡
->obj_dú.
idítôy
;

1298 
	}
}

1302 
	$modñ_isfûe
(
dúnum
, 
«me
)

1304 
fsobje˘
 *
obj
;

1305 
fsdúít
 *
de
;

1307 
obj
 = 
	`föddú
(
°©e
, 
dúnum
);

1308 
de
 = 
	`fsdú_föd_íåy
(
obj
, 
«me
, 0);

1309  
de
 !
NULL
 && !de->
obj
->
isdú
;

1310 
	}
}

1314 
	$modñ_isdú
(
dúnum
, 
«me
)

1316 
fsobje˘
 *
obj
;

1317 
fsdúít
 *
de
;

1319 
obj
 = 
	`föddú
(
°©e
, 
dúnum
);

1320 
de
 = 
	`fsdú_föd_íåy
(
obj
, 
«me
, 0);

1321  
de
 !
NULL
 && de->
obj
->
isdú
;

1322 
	}
}

1325 
off_t


1326 
	$modñ_gëfûesize
(
fûíum
)

1328 
fsobje˘
 *
obj
;

1330 
obj
 = 
	`födfûe_maybe
(
°©e
, 
fûíum
);

1331 i‡(
obj
 =
NULL
) {

1335 
	`as£π
(!
obj
->
isdú
);

1336  
obj
->
obj_fûe
.
Àn
;

1337 
	}
}

1342 
	gcwd
;

1345 
	$check_£tup
()

1347 
roŸdú
;

1349 
	`as£π
(
fú°ch™ge
 =
NULL
);

1350 
	`as£π
(
ch™ges
 =
NULL
);

1351 
	`as£π
(
°©e
 =
NULL
);

1352 
	`as£π
(
√xtfûíum
 == 0);

1353 
	`as£π
(
√xtdúnum
 == 0);

1355 
roŸdú
 = 
√xtdúnum
++;

1356 
fú°ch™ge
 = 
ch™ges
 = 
	`fc_¸óã_√wfs
(
roŸdú
);

1358 
	`ªwöd°©e
();

1361 
	`≠∂y_ch™ge
(
°©e
, 
ch™ges
);

1363 
cwd
 = 
roŸdú
;

1364 
	}
}

1367 
	$check_¸óãfûe
(
«me
)

1369 
fsch™ge
 *
¥evdú
;

1370 
fûíum
;

1372 
¥evdú
 = 
	`ch™ges_föd¥evdú
(
cwd
);

1374 
fûíum
 = 
√xtfûíum
++;

1375 
	`fc_©èch
(
	`fc_¸óã_¸ót
(
¥evdú
, 
cwd
, 
«me
, 
fûíum
));

1376  
fûíum
;

1377 
	}
}

1380 
	$check_›ífûe
(
«me
)

1382  
	`modñ_födfûe
(
cwd
, 
«me
);

1383 
	}
}

1386 
	$check_˛o£fûe
(
h™dÀ
, 
«me
)

1389 ()
h™dÀ
;

1390 ()
«me
;

1391 
	}
}

1394 
	$check_wrôe
(
h™dÀ
, 
«me
, 
code
, 
£q
,

1395 
off_t
 
pos
, off_à
Àn
)

1397 
fûíum
;

1398 
fsch™ge
 *
¥evfûe
;

1399 
off_t
 
¥evÀn
;

1401 
fûíum
 = 
h™dÀ
;

1402 
	`as£π
(
fûíum
 < 
√xtfûíum
);

1403 ()
«me
;

1405 
¥evÀn
 = 
	`modñ_gëfûesize
(
fûíum
);

1407 
¥evfûe
 = 
	`ch™ges_föd¥evfûe
(
fûíum
);

1408 
	`fc_©èch
(
	`fc_¸óã_wrôe
(
¥evfûe
, 
fûíum
, 
pos
, 
Àn
, 
¥evÀn
,

1409 
code
, 
£q
));

1410 
	}
}

1413 
	$check_åunˇã
(
h™dÀ
, 
«me
, 
off_t
 
Àn
)

1415 
fûíum
;

1416 
fsch™ge
 *
¥evfûe
;

1418 
fûíum
 = 
h™dÀ
;

1419 
	`as£π
(
fûíum
 < 
√xtfûíum
);

1420 ()
«me
;

1422 
¥evfûe
 = 
	`ch™ges_föd¥evfûe
(
fûíum
);

1423 
	`fc_©èch
(
	`fc_¸óã_åunˇã
(
¥evfûe
, 
fûíum
, 
Àn
));

1424 
	}
}

1427 
	$check_mkdú
(
«me
)

1429 
fsch™ge
 *
¥evdú
;

1430 
dúnum
;

1432 
¥evdú
 = 
	`ch™ges_föd¥evdú
(
cwd
);

1433 
dúnum
 = 
√xtdúnum
++;

1434 
	`fc_©èch
(
	`fc_¸óã_mkdú
(
¥evdú
, 
cwd
, 
«me
, 
dúnum
));

1435 
	}
}

1438 
	$check_rmdú
(
«me
)

1440 
fsch™ge
 *
¥evdú
, *
¥evvi˘im
;

1441 
vi˘im
;

1443 
¥evdú
 = 
	`ch™ges_föd¥evdú
(
cwd
);

1444 
vi˘im
 = 
	`modñ_föddú
(
cwd
, 
«me
);

1445 
¥evvi˘im
 = 
	`ch™ges_föd¥evdú
(
vi˘im
);

1447 
	`fc_©èch
(
	`fc_¸óã_rmdú
(
¥evdú
, 
¥evvi˘im
, 
cwd
, 
«me
, 
vi˘im
));

1448 
	}
}

1451 
	$check_u∆ök
(
«me
)

1453 
fsch™ge
 *
¥evdú
, *
¥evvi˘im
;

1454 
vi˘im
;

1456 
¥evdú
 = 
	`ch™ges_föd¥evdú
(
cwd
);

1457 
vi˘im
 = 
	`modñ_födfûe
(
cwd
, 
«me
);

1458 
¥evvi˘im
 = 
	`ch™ges_föd¥evfûe
(
vi˘im
);

1460 
	`fc_©èch
(
	`fc_¸óã_u∆ök
(
¥evdú
, 
¥evvi˘im
, 
cwd
, 
«me
, 
vi˘im
));

1461 
	}
}

1464 
	$check_lök
(
‰om«me
, 
t⁄ame
)

1466 
fsch™ge
 *
¥evdú
, *
¥evfûe
;

1467 
fûíum
;

1469 
¥evdú
 = 
	`ch™ges_föd¥evdú
(
cwd
);

1470 
fûíum
 = 
	`modñ_födfûe
(
cwd
, 
‰om«me
);

1471 
¥evfûe
 = 
	`ch™ges_föd¥evfûe
(
fûíum
);

1473 
	`fc_©èch
(
	`fc_¸óã_lök
(
¥evdú
,Öªvdú, 
¥evfûe
,

1474 
cwd
, 
‰om«me
, cwd, 
t⁄ame
, 
fûíum
));

1475 
	}
}

1479 
	$comm⁄_ª«me
(
‰omdúnum
, 
‰om«me
,

1480 
todúnum
, 
t⁄ame
)

1482 
fsch™ge
 *
¥ev‰omdú
, *
¥evtodú
, *
¥ev‰om
, *
¥evto
;

1483 
‰omnum
, 
t⁄um
;

1484 
fsch™ge
 *
fc
;

1485 
isfûe
;

1487 
¥ev‰omdú
 = 
	`ch™ges_föd¥evdú
(
‰omdúnum
);

1488 
¥evtodú
 = 
	`ch™ges_föd¥evdú
(
todúnum
);

1490 i‡(
	`modñ_isfûe
(
todúnum
, 
t⁄ame
)) {

1491 
isfûe
 = 1;

1492 
	`as£π
(
	`modñ_isfûe
(
‰omdúnum
, 
‰om«me
));

1493 
t⁄um
 = 
	`modñ_födfûe
(
todúnum
, 
t⁄ame
);

1494 
¥evto
 = 
	`ch™ges_föd¥evfûe
(
t⁄um
);

1495 
fc
 = 
	`fc_¸óã_u∆ök
(
¥evtodú
, 
¥evto
,

1496 
todúnum
, 
t⁄ame
, 
t⁄um
);

1498 i‡(
	`modñ_isdú
(
todúnum
, 
t⁄ame
)) {

1499 
isfûe
 = 0;

1500 
	`as£π
(
	`modñ_isdú
(
‰omdúnum
, 
‰om«me
));

1501 
t⁄um
 = 
	`modñ_föddú
(
todúnum
, 
t⁄ame
);

1502 
¥evto
 = 
	`ch™ges_föd¥evdú
(
t⁄um
);

1503 
fc
 = 
	`fc_¸óã_rmdú
(
¥evtodú
, 
¥evto
,

1504 
todúnum
, 
t⁄ame
, 
t⁄um
);

1507 
isfûe
 = 
	`modñ_isfûe
(
‰omdúnum
, 
‰om«me
);

1508 
fc
 = 
NULL
;

1511 i‡(
fc
) {

1512 
fc
->
∑πül
 = 1;

1513 
	`fc_©èch
(
fc
);

1516 i‡(
isfûe
) {

1517 
‰omnum
 = 
	`modñ_födfûe
(
‰omdúnum
, 
‰om«me
);

1518 
¥ev‰om
 = 
	`ch™ges_föd¥evfûe
(
‰omnum
);

1519 
fc
 = 
	`fc_¸óã_ª«mefûe
(
¥ev‰omdú
, 
¥evtodú
, 
¥ev‰om
,

1520 
‰omdúnum
, 
‰om«me
,

1521 
todúnum
, 
t⁄ame
, 
‰omnum
);

1524 
‰omnum
 = 
	`modñ_föddú
(
‰omdúnum
, 
‰om«me
);

1525 
¥ev‰om
 = 
	`ch™ges_föd¥evdú
(
‰omnum
);

1526 
fc
 = 
	`fc_¸óã_ª«medú
(
¥ev‰omdú
, 
¥evtodú
, 
¥ev‰om
,

1527 
‰omdúnum
, 
‰om«me
,

1528 
todúnum
, 
t⁄ame
, 
‰omnum
);

1530 
	`fc_©èch
(
fc
);

1531 
	}
}

1534 
	$check_ª«me
(
‰om
, 
to
)

1536 
	`comm⁄_ª«me
(
cwd
, 
‰om
, cwd, 
to
);

1537 
	}
}

1540 
	$check_ª«mexd
(
‰omdú
, 
‰om
, 
todú
, 
to
)

1542 
‰omdúnum
, 
todúnum
;

1545 
‰omdúnum
 = 
	`modñ_föddú
(
cwd
, 
‰omdú
);

1546 
todúnum
 = 
	`modñ_föddú
(
cwd
, 
todú
);

1548 
	`comm⁄_ª«me
(
‰omdúnum
, 
‰om
, 
todúnum
, 
to
);

1549 
	}
}

1552 
	$check_chdú
(
«me
)

1554 
cwd
 = 
	`modñ_föddú
(cwd, 
«me
);

1555 
	}
}

1558 
	$check_chdúup
()

1560 
cwd
 = 
	`modñ_föd∑ª¡
(cwd);

1561 
	}
}

1564 
	$check_sync
()

1567 
	}
}

1572 
fsobje˘
 *
	gfound
;

1573 
	gfound_subdús
, 
	gfound_fûes
;

1580 
	$x°©
(c⁄° *
∑th
, 
°©
 *
buf
)

1582 
fd
, 
ªt
, 
£ºno
;

1584 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

1585 i‡(
fd
 < 0) {

1588 
ªt
 = 
	`f°©
(
fd
, 
buf
);

1589 
£ºno
 = 
î∫o
;

1590 
	`˛o£
(
fd
);

1591 
î∫o
 = 
£ºno
;

1592  
ªt
;

1593 
	}
}

1599 
fsobje˘
 *

1600 
	$ö•e˘dú
(
fsobje˘
 *
∑ª¡obj
, 
öo_t
 
∑ª¡öo
, c⁄° *
dú«me°r
)

1602 
sub«me°r
[
NAME_MAX
+1];

1603 
size_t
 
sub«mñí
;

1604 
°©
 
dú°©
, 
dŸ°©
, 
sub°©
;

1605 
dúfd
;

1606 
fsobje˘
 *
subobj
, *
ªt
;

1607 
fsdúít
 *
c⁄ã¡s
, *
de
;

1609 i‡(
	`x°©
(
dú«me°r
, &
dú°©
)) {

1610 
	`îr
(1, "%s: sèt", 
dú«me°r
);

1613 
	`as£π
(
	`S_ISDIR
(
dú°©
.
°_mode
));

1614 i‡(
	`chdú
(
dú«me°r
)) {

1615 
	`îr
(1, "%s: chdú", 
dú«me°r
);

1621 i‡(
	`x°©
(".", &
dŸ°©
)) {

1622 
	`îr
(1, "I¿%s: .: sèt", 
dú«me°r
);

1624 i‡(
dŸ°©
.
°_dev
 !
dú°©
.st_dev) {

1625 
	`îrx
(1, "in %s: .: wrong volume id; found %u,Éxpected %u",

1626 
dú«me°r
, 
dŸ°©
.
°_dev
, 
dú°©
.st_dev);

1628 i‡(
dŸ°©
.
°_öo
 !
dú°©
.st_ino) {

1629 
	`îrx
(1, "%s/.: wrong inodeÇumber; found %u,Éxpected %u",

1630 
dú«me°r
, 
dŸ°©
.
°_öo
, 
dú°©
.st_ino);

1636 i‡(
	`x°©
("..", &
dŸ°©
)) {

1637 
	`îr
(1, "I¿%s: ..: sèt", 
dú«me°r
);

1639 i‡(
dŸ°©
.
°_dev
 !
dú°©
.st_dev) {

1640 
	`îrx
(1, "In %s: ..: wrong volume id; found %u,Éxpected %u",

1641 
dú«me°r
, 
dŸ°©
.
°_dev
, 
dú°©
.st_dev);

1643 i‡(
dŸ°©
.
°_öo
 !
∑ª¡öo
) {

1644 
	`îrx
(1, "In %s: ..: wrong inodeÇumber; found %u,Éxpected %u",

1645 
dú«me°r
, 
dŸ°©
.
°_öo
, 
∑ª¡öo
);

1648 
dúfd
 = 
	`›í
(".", 
O_RDONLY
);

1649 i‡(
dúfd
 < 0) {

1650 
	`îr
(1, "I¿%s: .: o≥n", 
dú«me°r
);

1653 
ªt
 = 
	`fsobje˘_¸óã_dú
(
UNKNOWN_ID
, 
∑ª¡obj
);

1654 
c⁄ã¡s
 = 
NULL
;

1657 
sub«mñí
 = 
	`gëdúíåy
(
dúfd
, 
sub«me°r
,

1658 (
sub«me°r
)-1);

1659 i‡(
sub«mñí
 == 0) {

1662 
sub«me°r
[
sub«mñí
] = 0;

1664 i‡(!
	`°rcmp
(
sub«me°r
, ".") || !strcmp(subnamestr, "..")) {

1667 i‡(
	`x°©
(
sub«me°r
, &
sub°©
)) {

1668 
	`îr
(1, "I¿%s: %s: sèt", 
dú«me°r
, 
sub«me°r
);

1670 i‡(
	`S_ISDIR
(
sub°©
.
°_mode
)) {

1671 
subobj
 = 
	`ö•e˘dú
(
ªt
, 
dú°©
.
°_öo
, 
sub«me°r
);

1672 
found_subdús
++;

1675 
subobj
 = 
	`fsobje˘_¸óã_fûe
(
UNKNOWN_ID
);

1676 
subobj
->
obj_fûe
.
Àn
 = 
sub°©
.
°_size
;

1677 
found_fûes
++;

1679 
de
 = 
	`fsdúít_¸óã
(
	`«me_föd
(
sub«me°r
), 
subobj
);

1680 
de
->
√xt
 = 
c⁄ã¡s
;

1681 
c⁄ã¡s
 = 
de
;

1683 
	`˛o£
(
dúfd
);

1684 i‡(
	`chdú
("..")) {

1685 
	`îr
(1, "I¿%s; ..: chdú", 
dú«me°r
);

1688 
ªt
->
obj_dú
.
íåõs
 = 
c⁄ã¡s
;

1690  
ªt
;

1691 
	}
}

1695 
	$ö•e˘fs
()

1697 
°©
 
°
;

1699 i‡(
	`x°©
(".", &
°
)) {

1700 
	`îr
(1, ".: stat");

1702 
found
 = 
	`ö•e˘dú
(
NULL
, 
°
.
°_öo
, ".");

1703 
	}
}

1710 
	$cou¡_subåì
(
fsobje˘
 *
obj
)

1712 
fsdúít
 *
de
;

1713 
ªt
 = 1;

1715 i‡(
obj
->
isdú
) {

1716 
de
 = 
obj
->
obj_dú
.
íåõs
; dê!
NULL
; dêde->
√xt
) {

1717 
ªt
 +
	`cou¡_subåì
(
de
->
obj
);

1720  
ªt
;

1721 
	}
}

1725 
	$com∑ª_obje˘s
(
fsobje˘
 *
obja
, fsobje˘ *
objb
)

1727 
fsdúít
 *
íè
, *
ítb
;

1728 
ªt
, 
found
;

1730 i‡(
obja
->
isdú
 !
objb
->isdir) {

1736 i‡(
obja
->
isdú
) {

1737  
	`cou¡_subåì
(
obja
);

1739 
	`as£π
(
objb
->
isdú
);

1740  
	`cou¡_subåì
(
objb
);

1743 i‡(!
obja
->
isdú
) {

1744 
	`as£π
(!
objb
->
isdú
);

1745 i‡(
obja
->
obj_fûe
.
Àn
 !
objb
->obj_file.len) {

1751 
	`as£π
(
obja
->
isdú
);

1752 
	`as£π
(
objb
->
isdú
);

1754 
ªt
 = 0;

1755 
íè
 = 
obja
->
obj_dú
.
íåõs
;É¡®!
NULL
;É¡®íè->
√xt
) {

1756 
found
 = 0;

1757 
ítb
 = 
objb
->
obj_dú
.
íåõs
;É¡b !
NULL
;

1758 
ítb
 =É¡b->
√xt
) {

1759 i‡(
íè
->
«me
 =
ítb
->name) {

1760 
ªt
 +
	`com∑ª_obje˘s
(
íè
->
obj
, 
ítb
->obj);

1761 
found
 = 1;

1765 i‡(!
found
) {

1766 i‡(
íè
->
obj
->
isdú
) {

1768 
ªt
 +
	`cou¡_subåì
(
íè
->
obj
);

1771 
ªt
 += 1;

1776 
ítb
 = 
objb
->
obj_dú
.
íåõs
;É¡b !
NULL
;É¡b =É¡b->
√xt
) {

1777 
found
 = 0;

1778 
íè
 = 
obja
->
obj_dú
.
íåõs
;É¡®!
NULL
;

1779 
íè
 =É¡a->
√xt
) {

1780 i‡(
íè
->
«me
 =
ítb
->name) {

1781 
found
 = 1;

1785 i‡(!
found
) {

1786 i‡(
ítb
->
obj
->
isdú
) {

1788 
ªt
 +
	`cou¡_subåì
(
ítb
->
obj
);

1791 
ªt
 += 1;

1795  
ªt
;

1796 
	}
}

1800 
	$doödít
(
dïth
)

1802 
i
;

1804 
i
=0; i<
dïth
; i++) {

1805 
	`¥ötf
(" ");

1807 
	}
}

1814 
	$¥ötdiffs
(
ödít
, 
fsobje˘
 *
obja
, fsobje˘ *
objb
)

1816 
fsdúít
 *
íè
, *
ítb
;

1817 
found
;

1819 
	`as£π
(
obja
->
isdú
);

1820 
	`as£π
(
objb
->
isdú
);

1822 
íè
 = 
obja
->
obj_dú
.
íåõs
;É¡®!
NULL
;É¡®íè->
√xt
) {

1823 
found
 = 0;

1824 
ítb
 = 
objb
->
obj_dú
.
íåõs
;É¡b !
NULL
;

1825 
ítb
 =É¡b->
√xt
) {

1826 i‡(
íè
->
«me
 =
ítb
->name) {

1827 
	`doödít
(
ödít
);

1828 
	`¥ötf
("%s", 
	`«me_gë
(
íè
->
«me
));

1829 i‡(
íè
->
obj
->
isdú
 &&

1830 !
ítb
->
obj
->
isdú
) {

1831 
	`¥ötf
(":Éxpected dir, found file;");

1832 
	`¥ötf
(" %uÇames missing.\n",

1833 
	`cou¡_subåì
(
íè
->
obj
) - 1);

1835 i‡(!
íè
->
obj
->
isdú
 &&

1836 
ítb
->
obj
->
isdú
) {

1837 
	`¥ötf
(":Éxpected file, found dir;");

1838 
	`¥ötf
(" %uÉxtraÇames.\n",

1839 
	`cou¡_subåì
(
ítb
->
obj
) - 1);

1841 i‡(!
íè
->
obj
->
isdú
 &&

1842 !
ítb
->
obj
->
isdú
) {

1843 
off_t
 
Æí
, 
bÀn
;

1845 
Æí
 = 
íè
->
obj
->
obj_fûe
.
Àn
;

1846 
bÀn
 = 
ítb
->
obj
->
obj_fûe
.
Àn
;

1847 i‡(
Æí
 =
bÀn
) {

1848 
	`¥ötf
("\t\t%lld bytes (ok)\n",

1849 
Æí
);

1852 
	`¥ötf
(": found %lld bytes, "

1855 
bÀn
, 
Æí
);

1859 
	`¥ötf
("/\n");

1860 
	`¥ötdiffs
(
ödít
 + 1,

1861 
íè
->
obj
, 
ítb
->obj);

1863 
found
 = 1;

1867 i‡(!
found
) {

1868 
	`doödít
(
ödít
);

1869 
	`¥ötf
("%s: missög ", 
	`«me_gë
(
íè
->
«me
));

1870 i‡(
íè
->
obj
->
isdú
) {

1871 
	`¥ötf
("subtree with %uÇames.\n",

1872 
	`cou¡_subåì
(
íè
->
obj
) - 1);

1875 
	`¥ötf
("file\n");

1881 
ítb
 = 
objb
->
obj_dú
.
íåõs
;É¡b !
NULL
;É¡b =É¡b->
√xt
) {

1882 
found
 = 0;

1883 
íè
 = 
obja
->
obj_dú
.
íåõs
;É¡®!
NULL
;

1884 
íè
 =É¡a->
√xt
) {

1885 i‡(
íè
->
«me
 =
ítb
->name) {

1886 
found
 = 1;

1890 i‡(!
found
) {

1891 
	`doödít
(
ödít
);

1892 
	`¥ötf
("%s:Éxå®", 
	`«me_gë
(
ítb
->
«me
));

1893 i‡(
ítb
->
obj
->
isdú
) {

1894 
	`¥ötf
("subtree with %uÇames.\n",

1895 
	`cou¡_subåì
(
ítb
->
obj
) - 1);

1898 
	`¥ötf
("file\n");

1902 
	}
}

1913 
	$födokvîsi⁄
(
fsch™ge
 *
ch™ge
)

1915 
ch™ge
 !
NULL
) {

1916 
ch™ge
->
ty≥
) {

1917 
FC_TRUNCATE
:

1918 
FC_WRITE
:

1921  
ch™ge
->
vîsi⁄
;

1923 
ch™ge
 = ch™ge->
¥ev
;

1925 
	`as£π
(0);

1927 
	}
}

1938 
fsch™ge
 *

1939 
	$backup_f‹_fûe
(
fsch™ge
 *
ch™ge
, 
fûíum
)

1941 
ch™ge
 !
NULL
) {

1942 
ch™ge
->
ty≥
) {

1943 
FC_TRUNCATE
:

1944 i‡(
ch™ge
->
fc_åunˇã
.
fûe
 =
fûíum
) {

1945  
ch™ge
;

1948 
FC_WRITE
:

1949 i‡(
ch™ge
->
fc_wrôe
.
fûe
 =
fûíum
) {

1950  
ch™ge
;

1953 
FC_CREAT
:

1954 i‡(
ch™ge
->
fc_¸ót
.
√wfûe
 =
fûíum
) {

1955  
ch™ge
;

1961 
ch™ge
 = ch™ge->
¥ev
;

1963  
NULL
;

1964 
	}
}

1968 
	$checkfûezîos
(
fd
, c⁄° *
«me°r
, 
off_t
 
°¨t
, off_à
íd
)

1970 
buf
[1024];

1971 
size_t
 
Àn
, 
i
;

1972 
ssize_t
 
ªt
;

1973 
pois⁄
 = 0, 
åash
 = 0;

1974 
off_t
 
‹ig°¨t
 = 
°¨t
;

1976 
	`¥ötf
(" %Œd - %Œd (ex≥˘ög zîos)\n", 
°¨t
, 
íd
);

1978 i‡(
	`l£ek
(
fd
, 
°¨t
, 
SEEK_SET
) == -1) {

1979 
	`îr
(1, "%s:Ü£ekÅÿ%Œd", 
«me°r
, 
°¨t
);

1981 
°¨t
 < 
íd
) {

1983 
Àn
 = 
íd
 - 
°¨t
;

1984 i‡(
Àn
 > (
buf
)) {

1985 
Àn
 = (
buf
);

1987 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

1988 i‡(
ªt
 == -1) {

1989 
	`îr
(1, "%s:Ñód %uáà%Œd", 
«me°r
, 
Àn
, 
°¨t
);

1991 i‡(
ªt
 == 0) {

1992 
	`îrx
(1, "%s:Ñead %uát %lld: Unexpected EOF",

1993 
«me°r
, 
Àn
, 
°¨t
);

1995 
i
=0; i<
Àn
; i++) {

1996 i‡(()
buf
[
i
] =
POISON_VAL
) {

1997 
pois⁄
++;

1999 i‡(
buf
[
i
] != 0) {

2000 
åash
++;

2003 
°¨t
 +
ªt
;

2005 i‡(
pois⁄
 > 0 || 
åash
 > 0) {

2006 
	`¥ötf
("ERROR: File %s:Éxpected zeros from %lldÅo %lld; "

2008 
«me°r
, 
‹ig°¨t
, 
íd
);

2009 i‡(
pois⁄
 > 0) {

2010 
	`¥ötf
(" %uÖois⁄ byãs", 
pois⁄
);

2011 i‡(
åash
 > 0) {

2012 
	`¥ötf
("ánd");

2015 i‡(
åash
 > 0) {

2016 
	`¥ötf
(" %uÅøsh byãs", 
åash
);

2018 
	`¥ötf
("\n");

2020 
	}
}

2024 
	$ªadfûed©a
(
fd
, c⁄° *
«me°r
,

2025 
off_t
 
ªgi⁄°¨t
, off_à
check°¨t
,

2026 
off_t
 
checkíd
, off_à
ªgi⁄íd
)

2028 *
ªadbuf
;

2029 
size_t
 
buÂos
, 
Àn
;

2030 
ssize_t
 
ªt
;

2032 
ªadbuf
 = 
	`d©a_m≠ªadbuf
(
ªgi⁄íd
 - 
ªgi⁄°¨t
);

2033 
buÂos
 = 
check°¨t
 - 
ªgi⁄°¨t
;

2034 
Àn
 = 
checkíd
 - 
check°¨t
;

2035 i‡(
	`l£ek
(
fd
, 
check°¨t
, 
SEEK_SET
) == -1) {

2036 
	`îr
(1, "%s:Ü£ekÅÿ%Œd", 
«me°r
, 
check°¨t
);

2039 
Àn
 > 0) {

2040 
ªt
 = 
	`ªad
(
fd
, 
ªadbuf
 + 
buÂos
, 
Àn
);

2041 i‡(
ªt
 == -1) {

2042 
	`îr
(1, "%s:Ñead %uát %lld",

2043 
«me°r
, 
Àn
, 
ªgi⁄°¨t
 + 
buÂos
);

2045 i‡(
ªt
 == 0) {

2046 
	`îrx
(1, "%s:Ñead %uát %lld: Unexpected EOF",

2047 
«me°r
, 
Àn
, 
ªgi⁄°¨t
 + 
buÂos
);

2049 
buÂos
 +
ªt
;

2050 
	`as£π
(
Àn
 <(
size_t
)
ªt
);

2051 
Àn
 -
ªt
;

2053 
	}
}

2057 
	$checkfûed©a
(
fd
, c⁄° *
«me°r
, 
code
, 
£q
,

2058 
off_t
 
zîo°¨t
,

2059 
off_t
 
ªgi⁄°¨t
, off_à
check°¨t
,

2060 
off_t
 
checkíd
, off_à
ªgi⁄íd
)

2062 i‡(
check°¨t
 < 
ªgi⁄°¨t
) {

2063 
check°¨t
 = 
ªgi⁄°¨t
;

2065 i‡(
checkíd
 > 
ªgi⁄íd
) {

2066 
checkíd
 = 
ªgi⁄íd
;

2069 
	`¥ötf
(" %Œd - %Œd\n", 
check°¨t
, 
checkíd
);

2071 
	`ªadfûed©a
(
fd
, 
«me°r
,

2072 
ªgi⁄°¨t
, 
check°¨t
, 
ªgi⁄íd
, 
checkíd
);

2074 
	`d©a_check
(
«me°r
, 
ªgi⁄°¨t
,

2075 
code
, 
£q
, 
zîo°¨t
 - 
ªgi⁄°¨t
, 
ªgi⁄íd
 -Ñegionstart,

2076 
check°¨t
 - 
ªgi⁄°¨t
, 
checkíd
 - checkstart);

2077 
	}
}

2081 
	$checkfûî™ge
(
fd
, c⁄° *
«me°r
, 
fsch™ge
 *
ch™ge
,

2082 
off_t
 
°¨t
, off_à
íd
)

2084 
	`as£π
(
°¨t
 < 
íd
);

2085 i‡(
ch™ge
->
ty≥
 =
FC_TRUNCATE
) {

2086 
off_t
 
éí
;

2087 
fsch™ge
 *
¥ev
;

2089 
éí
 = 
ch™ge
->
fc_åunˇã
.
Àn
;

2090 
¥ev
 = 
ch™ge
->
fc_åunˇã
.
¥ev_thisfûe
;

2092 i‡(
éí
 < 
°¨t
) {

2093 
	`checkfûezîos
(
fd
, 
«me°r
, 
°¨t
, 
íd
);

2095 i‡(
éí
 < 
íd
) {

2096 
	`checkfûî™ge
(
fd
, 
«me°r
, 
¥ev
, 
°¨t
, 
éí
);

2097 
	`checkfûezîos
(
fd
, 
«me°r
, 
éí
, 
íd
);

2100 
	`checkfûî™ge
(
fd
, 
«me°r
, 
¥ev
, 
°¨t
, 
íd
);

2103 i‡(
ch™ge
->
ty≥
 =
FC_WRITE
) {

2104 
off_t
 
w°¨t
, 
wíd
;

2105 
fsch™ge
 *
¥ev
;

2106 
code
, 
£q
;

2107 
off_t
 
ﬁdfûesize
, 
zîo°¨t
;

2109 
w°¨t
 = 
ch™ge
->
fc_wrôe
.
pos
;

2110 
wíd
 = 
ch™ge
->
fc_wrôe
.
pos
 + ch™ge->fc_wrôe.
Àn
;

2111 
¥ev
 = 
ch™ge
->
fc_wrôe
.
¥ev_thisfûe
;

2112 
code
 = 
ch™ge
->
fc_wrôe
.code;

2113 
£q
 = 
ch™ge
->
fc_wrôe
.seq;

2114 
ﬁdfûesize
 = 
ch™ge
->
fc_wrôe
.oldfilesize;

2116 i‡(
ﬁdfûesize
 < 
w°¨t
) {

2117 
zîo°¨t
 = 
w°¨t
;

2119 i‡(
ﬁdfûesize
 < 
wíd
) {

2120 
zîo°¨t
 = 
ﬁdfûesize
;

2123 
zîo°¨t
 = 
wíd
;

2133 i‡(
íd
 <
w°¨t
 || 
°¨t
 >
wíd
) {

2135 
	`checkfûî™ge
(
fd
, 
«me°r
, 
¥ev
, 
°¨t
, 
íd
);

2139 i‡(
°¨t
 < 
w°¨t
) {

2141 
	`checkfûî™ge
(
fd
, 
«me°r
, 
¥ev
,

2142 
°¨t
, 
w°¨t
);

2144 
	`checkfûed©a
(
fd
, 
«me°r
, 
code
, 
£q
, 
zîo°¨t
,

2145 
w°¨t
, 
°¨t
, 
íd
, 
wíd
);

2146 i‡(
íd
 > 
wíd
) {

2148 
	`checkfûî™ge
(
fd
, 
«me°r
, 
¥ev
, 
wíd
, 
íd
);

2152 i‡(
ch™ge
->
ty≥
 =
FC_RENAMEFILE
) {

2153 
fsch™ge
 *
¥ev
;

2155 
¥ev
 = 
ch™ge
->
fc_ª«mefûe
.
¥ev_movedfûe
;

2156 
	`checkfûî™ge
(
fd
, 
«me°r
, 
¥ev
, 
°¨t
, 
íd
);

2159 
	`as£π
(
ch™ge
->
ty≥
 =
FC_CREAT
);

2160 
	`checkfûezîos
(
fd
, 
«me°r
, 
°¨t
, 
íd
);

2162 
	}
}

2166 
	$ch™ge_is_¥e£¡
(
fd
, c⁄° *
«me°r
, 
off_t
 
fûesize
,

2167 
fsch™ge
 *
ch™ge
)

2169 
off_t
 
pos
, 
Àn
, 
ﬁdfûesize
, 
zîo°¨t
;

2170 
code
, 
£q
;

2172 
ch™ge
->
ty≥
) {

2173 
FC_TRUNCATE
:

2174  
fûesize
 =
ch™ge
->
fc_åunˇã
.
Àn
;

2175 
FC_WRITE
:

2176 
pos
 = 
ch™ge
->
fc_wrôe
.pos;

2177 
Àn
 = 
ch™ge
->
fc_wrôe
.len;

2178 
code
 = 
ch™ge
->
fc_wrôe
.code;

2179 
£q
 = 
ch™ge
->
fc_wrôe
.seq;

2180 
ﬁdfûesize
 = 
ch™ge
->
fc_wrôe
.oldfilesize;

2181 i‡(
ﬁdfûesize
 < 
pos
) {

2182 
zîo°¨t
 = 0;

2184 i‡(
ﬁdfûesize
 < 
pos
 + 
Àn
) {

2185 
zîo°¨t
 = 
ﬁdfûesize
 - 
pos
;

2188 
zîo°¨t
 = 
Àn
;

2190 
	`ªadfûed©a
(
fd
, 
«me°r
, 
pos
,Öos,Öos+
Àn
,Öos+len);

2191  
	`d©a_m©ches
(
«me°r
, 
pos
,

2192 
code
, 
£q
, 
zîo°¨t
, 
Àn
, 0,Üen);

2193 
FC_CREAT
:

2198 
	`as£π
(0);

2200 
	}
}

2204 
	$check⁄efûec⁄ã¡s
(c⁄° *
«me°r
, 
fsobje˘
 *
fûe
,

2205 
fsch™ge
 *
ch™ge
)

2207 
okvîsi⁄
;

2208 
fd
;

2210 
	`as£π
(!
fûe
->
isdú
);

2212 
fd
 = 
	`›í
(
«me°r
, 
O_RDONLY
);

2213 i‡(
fd
 < 0) {

2214 
	`îr
(1, "%s: o≥n", 
«me°r
);

2217 
okvîsi⁄
 = 
	`födokvîsi⁄
(
ch™ge
);

2218 
ch™ge
 = 
	`backup_f‹_fûe
(ch™ge, 
fûe
->
obj_fûe
.
idítôy
);

2220 i‡(
ch™ge
 =
NULL
) {

2221 
	`dõ
("Fûê%†wa†√vîÉví cª©ed?", 
«me°r
);

2224 i‡(
fûe
->
obj_fûe
.
Àn
 == 0) {

2225 i‡(
ch™ge
->
ty≥
 =
FC_CREAT
) {

2229 i‡(
ch™ge
->
ty≥
 =
FC_TRUNCATE
) {

2231 
	`as£π
(
ch™ge
->
fc_åunˇã
.
Àn
 == 0);

2236 
	`as£π
(
ch™ge
->
ty≥
 =
FC_WRITE
);

2237 
	`¥ötf
("ERROR: File %s is zeroÜength but wasÉxpectedÅo "

2239 
«me°r
, 
ch™ge
->
fc_wrôe
.
pos
, ch™ge->fc_wrôe.
Àn
);

2243 i‡(
ch™ge
->
ty≥
 =
FC_CREAT
) {

2244 
	`¥ötf
("ERROR: File %s wasÇever writtenÅo but has "

2246 
«me°r
, 
fûe
->
obj_fûe
.
Àn
);

2250 !
	`ch™ge_is_¥e£¡
(
fd
, 
«me°r
, 
fûe
->
obj_fûe
.
Àn
, 
ch™ge
)) {

2251 i‡(
ch™ge
->
vîsi⁄
 < 
okvîsi⁄
) {

2252 
	`¥ötf
("File %s: change for version %u is missing\n",

2253 
«me°r
, 
ch™ge
->
vîsi⁄
);

2255 
ch™ge
 = 
	`backup_f‹_fûe
(ch™ge->
¥ev
,
fûe
->
obj_fûe
.
idítôy
);

2256 i‡(
ch™ge
 =
NULL
) {

2257 
	`¥ötf
("File %s:Ço matching version found\n",

2258 
«me°r
);

2259 
	`˛o£
(
fd
);

2264 
	`checkfûî™ge
(
fd
, 
«me°r
, 
ch™ge
, 0, 
fûe
->
obj_fûe
.
Àn
);

2265 
	`˛o£
(
fd
);

2266 
	}
}

2270 
	$checkÆlfûec⁄ã¡s
(
fsobje˘
 *
dú
, 
fsch™ge
 *
ch™ge
)

2272 
fsdúít
 *
de
;

2273 c⁄° *
«me°r
;

2275 
	`as£π
(
dú
->
isdú
);

2276 
de
 = 
dú
->
obj_dú
.
íåõs
; dê!
NULL
; dêde->
√xt
) {

2277 
«me°r
 = 
	`«me_gë
(
de
->
«me
);

2278 i‡(
de
->
obj
->
isdú
) {

2279 
	`¥ötf
(" >>> E¡îög %s\n", 
«me°r
);

2280 i‡(
	`chdú
(
«me°r
)) {

2281 
	`îr
(1, "%s: chdú", 
«me°r
);

2283 
	`checkÆlfûec⁄ã¡s
(
de
->
obj
, 
ch™ge
);

2284 
	`¥ötf
(" <<< Lóvög %s\n", 
«me°r
);

2285 i‡(
	`chdú
("..")) {

2286 
	`îr
(1, "..: chdir");

2290 
	`¥ötf
("%s...\n", 
«me°r
);

2291 
	`check⁄efûec⁄ã¡s
(
«me°r
, 
de
->
obj
, 
ch™ge
);

2294 
	}
}

2300 
	$checkfs
()

2302 
fsch™ge
 *
ch™ge
, *
be°
;

2303 
sc‹e
, 
be°sc‹e
;

2305 
	`¥ötf
("Established %u versionsácross %u directoriesánd %u files\n",

2306 
ch™ges
->
vîsi⁄
 + 1, 
√xtdúnum
, 
√xtfûíum
);

2307 
	`ö•e˘fs
();

2308 
	`¥ötf
("Found %u subdirsánd %u files onÅhe volume\n",

2309 
found_subdús
, 
found_fûes
);

2311 
	`ªwöd°©e
();

2313 
ch™ge
 = 
fú°ch™ge
;

2314 
	`as£π
(
ch™ge
->
ty≥
 =
FC_NEWFS
);

2315 
be°
 = 
NULL
;

2316 
be°sc‹e
 = 0;

2318 
ch™ge
 !
NULL
) {

2319 
	`≠∂y_ch™ge
(
°©e
, 
ch™ge
);

2320 
sc‹e
 = 
	`com∑ª_obje˘s
(
°©e
, 
found
);

2321 i‡(
be°
 =
NULL
 || 
sc‹e
 <
be°sc‹e
) {

2322 
be°
 = 
ch™ge
;

2323 
be°sc‹e
 = 
sc‹e
;

2326 
ch™ge
 = ch™ge->
√xt
;

2328 
	`as£π
(
be°
 !
NULL
);

2330 
	`ªwöd°©e
();

2331 
	`adv™˚°©ëo
(
be°
);

2333 i‡(
be°sc‹e
 > 0) {

2334 
	`¥ötf
("FAILURE: DirectoryÅree doesÇot match onány "

2336 
	`¥ötf
("Best version is %u; describing differences:\n",

2337 
be°
->
vîsi⁄
);

2338 
	`¥ötdiffs
(1, 
°©e
, 
found
);

2341 
	`¥ötf
("Dúe˘‹yÅªêm©ched i¿vîsi⁄ %u.\n", 
be°
->
vîsi⁄
);

2342 i‡(
be°
->
∑πül
) {

2343 
	`¥ötf
("WARNING:Åhis isá version fromáÖartially committed "

2358 
	`¥ötf
("Checking file contents...\n");

2359 
	`checkÆlfûec⁄ã¡s
(
°©e
, 
be°
);

2360 
	`¥ötf
("Done.\n");

2361 
	}
}

	@userland/testbin/frack/check.h

32 
check_¸óãfûe
(
«me
);

33 
check_›ífûe
(
«me
);

34 
check_˛o£fûe
(
h™dÀ
, 
«me
);

35 
check_wrôe
(
h™dÀ
, 
«me
, 
code
, 
£q
,

36 
off_t
 
pos
, off_à
Àn
);

37 
check_åunˇã
(
h™dÀ
, 
«me
, 
off_t
 
Àn
);

38 
check_mkdú
(
«me
);

39 
check_rmdú
(
«me
);

40 
check_u∆ök
(
«me
);

41 
check_lök
(
‰om
, 
to
);

42 
check_ª«me
(
‰om
, 
to
);

43 
check_ª«mexd
(
‰omdú
, 
‰om
,

44 
todú
, 
to
);

45 
check_chdú
(
«me
);

46 
check_chdúup
();

47 
check_sync
();

50 
check_£tup
();

51 
checkfs
();

	@userland/testbin/frack/data.c

31 
	~<sys/ty≥s.h
>

32 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~<as£π.h
>

36 
	~"d©a.h
"

41 
	#BLOCKSIZE
 512

	)

43 
	gd©abuf
[
DATA_MAXSIZE
];

44 
	gªadbuf
[
DATA_MAXSIZE
];

48 
	$¥ïd©a
(
code
, 
£q
, *
buf
, 
off_t
 
Àn
)

50 
smÆlbuf
[32];

51 
Àâî
;

52 
size_t
 
¶í
;

54 
	`¢¥ötf
(
smÆlbuf
, (smÆlbuf), "%u@%u\n", 
£q
, 
code
);

55 
¶í
 = 
	`°æí
(
smÆlbuf
);

57 
Àn
 >
¶í
) {

58 
	`mem˝y
(
buf
, 
smÆlbuf
, 
¶í
);

59 
buf
 +
¶í
;

60 
Àn
 -
¶í
;

62 i‡(
Àn
 > 1) {

63 
Àâî
 = 'A' + (
code
 + 
£q
) % 26;

64 
	`mem£t
(
buf
, 
Àâî
, 
Àn
 - 1);

65 
buf
 +
Àn
 - 1;

67 i‡(
Àn
 > 0) {

68 *
buf
 = '\n';

70 
	}
}

74 
	$m©ches_©
(
size_t
 
°¨t
, size_à
Àn
)

76 i‡(!
	`memcmp
(
d©abuf
 + 
°¨t
, 
ªadbuf
 + sèπ, 
Àn
)) {

80 
	}
}

84 
	$byã_©
(
size_t
 
°¨t
, size_à
Àn
, 
vÆ
)

86 
size_t
 
i
;

88 
i
=0; i<
Àn
; i++) {

89 i‡(()
ªadbuf
[
°¨t
 + 
i
] !
vÆ
) {

94 
	}
}

98 
	$zîo_©
(
size_t
 
°¨t
, size_à
Àn
)

100  
	`byã_©
(
°¨t
, 
Àn
, 0);

101 
	}
}

105 
	$pois⁄_©
(
size_t
 
°¨t
, size_à
Àn
)

107  
	`byã_©
(
°¨t
, 
Àn
, 
POISON_VAL
);

108 
	}
}

123 
	$d©a_m©ches
(c⁄° *
«me°r
, 
off_t
 
ªgi⁄off£t
,

124 
code
, 
£q
, 
off_t
 
zîo°¨t
, off_à
Àn
,

125 
off_t
 
check°¨t
, off_à
checkÀn
)

127 
ªt
;

128 
off_t
 
whîe
;

129 
size_t
 
howmuch
;

130 
off_t
 
ab£nd
, 
¶›
;

132 
	`as£π
(
Àn
 <
DATA_MAXSIZE
);

133 
	`as£π
(
checkÀn
 > 0);

134 
	`as£π
(
checkÀn
 <
Àn
);

135 
	`as£π
(
check°¨t
 >0 && check°¨à< 
Àn
);

136 
	`as£π
(
check°¨t
 + 
checkÀn
 <
Àn
);

137 
	`as£π
(
zîo°¨t
 >= 0);

138 
	`as£π
(
zîo°¨t
 <
Àn
);

140 
	`¥ïd©a
(
code
, 
£q
, 
d©abuf
, 
Àn
);

142 
ªt
 = 1;

143 
checkÀn
 > 0) {

145 
whîe
 = 
check°¨t
;

146 
howmuch
 = 
BLOCKSIZE
;

148 i‡(
howmuch
 > 
checkÀn
) {

149 
howmuch
 = 
checkÀn
;

152 
ab£nd
 = 
ªgi⁄off£t
 + 
whîe
 + 
howmuch
;

153 
¶›
 = 
ab£nd
 % 
BLOCKSIZE
;

154 i‡(
¶›
 !0 && sl› < 
howmuch
) {

155 
howmuch
 -
¶›
;

158 i‡(
whîe
 < 
zîo°¨t
 && whîê+ 
howmuch
 > zerostart) {

159 
howmuch
 = 
zîo°¨t
 - 
whîe
;

161 
	`as£π
(
howmuch
 > 0);

163 i‡(
	`m©ches_©
(
whîe
, 
howmuch
)) {

166 i‡(
	`zîo_©
(
whîe
, 
howmuch
)) {

167 i‡(
whîe
 >
zîo°¨t
) {

168 
	`¥ötf
("WARNING: file %sÑange %lld-%lld is "

170 
«me°r
, 
ªgi⁄off£t
 + 
whîe
,

171 
ªgi⁄off£t
 + 
whîe
 + 
howmuch
);

174 
ªt
 = 0;

177 i‡(
	`pois⁄_©
(
whîe
, 
howmuch
)) {

178 i‡(
whîe
 >
zîo°¨t
) {

179 
	`¥ötf
("ERROR: file %sÑange %lld-%lld is "

181 
«me°r
, 
ªgi⁄off£t
 + 
whîe
,

182 
ªgi⁄off£t
 + 
whîe
 + 
howmuch
);

185 
ªt
 = 0;

189 
ªt
 = 0;

192 
check°¨t
 +
howmuch
;

193 
checkÀn
 -
howmuch
;

195  
ªt
;

196 
	}
}

199 
	$d©a_check
(c⁄° *
«me°r
, 
off_t
 
ªgi⁄off£t
,

200 
code
, 
£q
, 
off_t
 
zîo°¨t
, off_à
Àn
,

201 
off_t
 
check°¨t
, off_à
checkÀn
)

203 
	`as£π
(
zîo°¨t
 >= 0);

204 
	`as£π
(
zîo°¨t
 <
Àn
);

206 i‡(!
	`d©a_m©ches
(
«me°r
, 
ªgi⁄off£t
,

207 
code
, 
£q
, 
zîo°¨t
, 
Àn
, 
check°¨t
, 
checkÀn
)) {

208 
	`¥ötf
("ERROR: file %sÑange %lld-%lld contains garbage\n",

209 
«me°r
, 
ªgi⁄off£t
 + 
check°¨t
,

210 
ªgi⁄off£t
 + 
check°¨t
 + 
checkÀn
);

212 
	}
}

215 
	$d©a_m≠
(
code
, 
£q
, 
off_t
 
Àn
)

217 
	`as£π
(
Àn
 <
DATA_MAXSIZE
);

218 
	`¥ïd©a
(
code
, 
£q
, 
d©abuf
, 
Àn
);

219  
d©abuf
;

220 
	}
}

223 
	$d©a_m≠ªadbuf
(
off_t
 
Àn
)

225 
	`as£π
(
Àn
 <
DATA_MAXSIZE
);

226  
ªadbuf
;

227 
	}
}

	@userland/testbin/frack/data.h

31 *
d©a_m≠
(
code
, 
£q
, 
off_t
 
Àn
);

32 *
d©a_m≠ªadbuf
(
off_t
 
Àn
);

33 
d©a_m©ches
(c⁄° *
«me°r
, 
off_t
 
ªgi⁄off£t
,

34 
code
, 
£q
, 
off_t
 
zîo°¨t
, off_à
Àn
,

35 
off_t
 
check°¨t
, off_à
checkÀn
);

36 
d©a_check
(c⁄° *
«me°r
, 
off_t
 
ªgi⁄off£t
,

37 
code
, 
£q
, 
off_t
 
zîo°¨t
, off_à
Àn
,

38 
off_t
 
check°¨t
, off_à
checkÀn
);

40 
	#DATA_MAXSIZE
 65536

	)

41 
	#POISON_VAL
 0xa9

	)

	@userland/testbin/frack/do.c

31 
	~<sys/ty≥s.h
>

32 
	~<sys/°©.h
>

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<uni°d.h
>

36 
	~<îr.h
>

38 
	~"d©a.h
"

39 
	~"«me.h
"

40 
	~"do.h
"

43 
	$do_›ídú
(
«me
)

45 c⁄° *
«me°r
;

46 
fd
;

48 
«me°r
 = 
	`«me_gë
(
«me
);

49 
fd
 = 
	`›í
(
«me°r
, 
O_RDONLY
);

50 i‡(
fd
 < 0) {

51 
	`îr
(1, "%s: o≥ndú", 
«me°r
);

53  
fd
;

54 
	}
}

57 
	$do_˛o£dú
(
fd
, 
«me
)

59 i‡(
	`˛o£
(
fd
)) {

60 
	`w¨n
("%s: clo£dú", 
	`«me_gë
(
«me
));

62 
	}
}

65 
	$do_¸óãfûe
(
«me
)

67 c⁄° *
«me°r
;

68 
fd
;

70 
«me°r
 = 
	`«me_gë
(
«me
);

71 
fd
 = 
	`›í
(
«me°r
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
, 0664);

72 i‡(
fd
 < 0) {

73 
	`îr
(1, "%s: cª©e", 
«me°r
);

75 
	`¥ötf
("¸óã %s\n", 
«me°r
);

76  
fd
;

77 
	}
}

80 
	$do_›ífûe
(
«me
, 
dŸrunc
)

82 c⁄° *
«me°r
;

83 
fd
;

85 
«me°r
 = 
	`«me_gë
(
«me
);

86 
fd
 = 
	`›í
(
«me°r
, 
O_WRONLY
 | (
dŸrunc
 ? 
O_TRUNC
 : 0), 0664);

87 i‡(
fd
 < 0) {

88 
	`îr
(1, "%s: o≥n", 
«me°r
);

90  
fd
;

91 
	}
}

94 
	$do_˛o£fûe
(
fd
, 
«me
)

96 i‡(
	`˛o£
(
fd
)) {

97 
	`w¨n
("%s: clo£", 
	`«me_gë
(
«me
));

99 
	}
}

102 
	$do_wrôe
(
fd
, 
«me
, 
code
, 
£q
,

103 
off_t
 
pos
, off_à
Àn
)

105 
off_t
 
d⁄e
 = 0;

106 
ssize_t
 
ªt
;

107 *
buf
;

108 c⁄° *
«me°r
;

110 
«me°r
 = 
	`«me_gë
(
«me
);

111 
buf
 = 
	`d©a_m≠
(
code
, 
£q
, 
Àn
);

112 i‡(
	`l£ek
(
fd
, 
pos
, 
SEEK_SET
) == -1) {

113 
	`îr
(1, "%s:Ü£ekÅÿ%Œd", 
	`«me_gë
(
«me
), 
pos
);

116 
d⁄e
 < 
Àn
) {

117 
ªt
 = 
	`wrôe
(
fd
, 
buf
 + 
d⁄e
, 
Àn
 - done);

118 i‡(
ªt
 == -1) {

119 
	`îr
(1, "%s: wrôê%Œdáà%Œd", 
	`«me_gë
(
«me
),

120 
Àn
, 
pos
);

122 
d⁄e
 +
ªt
;

125 
	`¥ötf
("wrôê%s: %Œdáà%Œd\n", 
«me°r
, 
Àn
, 
pos
);

126 
	}
}

129 
	$do_åunˇã
(
fd
, 
«me
, 
off_t
 
Àn
)

131 c⁄° *
«me°r
;

133 
«me°r
 = 
	`«me_gë
(
«me
);

134 i‡(
	`·runˇã
(
fd
, 
Àn
) == -1) {

135 
	`îr
(1, "%s:ÅrunˇãÅÿ%Œd", 
«me°r
, 
Àn
);

137 
	`¥ötf
("åunˇã %s:Åÿ%Œd\n", 
«me°r
, 
Àn
);

138 
	}
}

141 
	$do_mkdú
(
«me
)

143 c⁄° *
«me°r
;

145 
«me°r
 = 
	`«me_gë
(
«me
);

146 i‡(
	`mkdú
(
«me°r
, 0775) == -1) {

147 
	`îr
(1, "%s: mkdú", 
«me°r
);

149 
	`¥ötf
("mkdú %s\n", 
«me°r
);

150 
	}
}

153 
	$do_rmdú
(
«me
)

155 c⁄° *
«me°r
;

157 
«me°r
 = 
	`«me_gë
(
«me
);

158 i‡(
	`rmdú
(
«me°r
) == -1) {

159 
	`îr
(1, "%s:Ñmdú", 
«me°r
);

161 
	`¥ötf
("rmdú %s\n", 
«me°r
);

162 
	}
}

165 
	$do_u∆ök
(
«me
)

167 c⁄° *
«me°r
;

169 
«me°r
 = 
	`«me_gë
(
«me
);

170 i‡(
	`ªmove
(
«me°r
) == -1) {

171 
	`îr
(1, "%s:Ñemove", 
«me°r
);

173 
	`¥ötf
("ªmovê%s\n", 
«me°r
);

174 
	}
}

177 
	$do_lök
(
‰om
, 
to
)

179 c⁄° *
‰om°r
, *
to°r
;

181 
‰om°r
 = 
	`«me_gë
(
‰om
);

182 
to°r
 = 
	`«me_gë
(
to
);

183 i‡(
	`lök
(
‰om°r
, 
to°r
) == -1) {

184 
	`îr
(1, "lök %†tÿ%s", 
‰om°r
, 
to°r
);

186 
	`¥ötf
("lök %†%s\n", 
‰om°r
, 
to°r
);

187 
	}
}

190 
	$do_ª«me
(
‰om
, 
to
)

192 c⁄° *
‰om°r
, *
to°r
;

194 
‰om°r
 = 
	`«me_gë
(
‰om
);

195 
to°r
 = 
	`«me_gë
(
to
);

196 i‡(
	`ª«me
(
‰om°r
, 
to°r
) == -1) {

197 
	`îr
(1, "ª«mê%†tÿ%s", 
‰om°r
, 
to°r
);

199 
	`¥ötf
("ª«mê%†%s\n", 
‰om°r
, 
to°r
);

200 
	}
}

203 
	$do_ª«mexd
(
‰omdú
, 
‰om
, 
todú
, 
to
)

205 
‰ombuf
[64];

206 
tobuf
[64];

208 
	`°r˝y
(
‰ombuf
, 
	`«me_gë
(
‰omdú
));

209 
	`°rˇt
(
‰ombuf
, "/");

210 
	`°rˇt
(
‰ombuf
, 
	`«me_gë
(
‰om
));

212 
	`°r˝y
(
tobuf
, 
	`«me_gë
(
todú
));

213 
	`°rˇt
(
tobuf
, "/");

214 
	`°rˇt
(
tobuf
, 
	`«me_gë
(
to
));

216 i‡(
	`ª«me
(
‰ombuf
, 
tobuf
) == -1) {

217 
	`îr
(1, "ª«mê%†tÿ%s", 
‰ombuf
, 
tobuf
);

219 
	`¥ötf
("ª«mê%†%s\n", 
‰ombuf
, 
tobuf
);

220 
	}
}

223 
	$do_chdú
(
«me
)

225 c⁄° *
«me°r
;

227 
«me°r
 = 
	`«me_gë
(
«me
);

228 i‡(
	`chdú
(
«me°r
) == -1) {

229 
	`îr
(1, "chdú: %s", 
«me°r
);

231 
	`¥ötf
("chdú %s\n", 
«me°r
);

232 
	}
}

235 
	$do_chdúup
()

237 i‡(
	`chdú
("..") == -1) {

238 
	`îr
(1, "chdir: ..");

240 
	`¥ötf
("chdir ..\n");

241 
	}
}

244 
	$do_sync
()

246 i‡(
	`sync
()) {

247 
	`w¨n
("sync");

249 
	`¥ötf
("sync\n");

250 
	`¥ötf
("----------------------------------------\n");

251 
	}
}

	@userland/testbin/frack/do.h

32 
do_›ídú
(
«me
);

33 
do_˛o£dú
(
h™dÀ
, 
«me
);

34 
do_¸óãfûe
(
«me
);

35 
do_›ífûe
(
«me
, 
dŸrunc
);

36 
do_˛o£fûe
(
h™dÀ
, 
«me
);

37 
do_wrôe
(
h™dÀ
, 
«me
, 
code
, 
£q
,

38 
off_t
 
pos
, off_à
Àn
);

39 
do_åunˇã
(
h™dÀ
, 
«me
, 
off_t
 
Àn
);

40 
do_mkdú
(
«me
);

41 
do_rmdú
(
«me
);

42 
do_u∆ök
(
«me
);

43 
do_lök
(
‰om
, 
to
);

44 
do_ª«me
(
‰om
, 
to
);

45 
do_ª«mexd
(
‰omdú
, 
‰om
, 
todú
, 
to
);

46 
do_chdú
(
«me
);

47 
do_chdúup
();

48 
do_sync
();

	@userland/testbin/frack/main.c

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<îr.h
>

36 
	~"w‹klﬂds.h
"

37 
	~"maö.h
"

39 
	sw‹klﬂd
 {

40 c⁄° *
	m«me
;

41 c⁄° *
	m¨g«me
;

43 (*
	mwôh¨g
)(const *);

44 (*
	mnﬂrg
)();

45 } 
	mrun
;

48 
	#WL
(
n
Ë{ .
«me
 = #n, .
¨g«me
 = 
NULL
, .
run
.
nﬂrg
 = 
wl_
##¿}

	)

49 
	#WLA
(
n
,
a
Ë{ .
«me
 = #n, .
¨g«me
 = #a, .
run
.
wôh¨g
 = 
wl_
##¿}

	)

51 c⁄° 
w‹klﬂd
 
	gw‹klﬂds
[] = {

52 
WLA
(
¸óãwrôe
, 
size
),

53 
WLA
(
ªwrôe
, 
size
),

54 
WLA
(
øndupd©e
, 
size
),

55 
WLA
(
åuncwrôe
, 
size
),

56 
WLA
(
makehﬁe
, 
size
),

57 
WLA
(
fûlhﬁe
, 
size
),

58 
WLA
(
åuncfûl
, 
size
),

59 
WLA
(
≠≥nd
, 
size
),

60 
WLA
(
åunczîo
, 
size
),

61 
WLA
(
åunc⁄eblock
, 
size
),

62 
WLA
(
åuncsmÆÀrsize
, 
size
),

63 
WLA
(
åun˛¨gîsize
, 
size
),

64 
WLA
(
≠≥nd™dåunczîo
, 
size
),

65 
WLA
(
≠≥nd™dåun˝¨éy
, 
size
),

66 
WL
(
mkfûe
),

67 
WL
(
mkdú
),

68 
WL
(
mkm™yfûe
),

69 
WL
(
mkm™ydú
),

70 
WL
(
mkåì
),

71 
WLA
(
mkøndåì
, 
£ed
),

72 
WL
(
rmfûe
),

73 
WL
(
rmdú
),

74 
WL
(
rmfûedñayed
),

75 
WL
(
rmfûedñayed≠≥nd
),

76 
WL
(
rmdúdñayed
),

77 
WL
(
rmm™yfûe
),

78 
WL
(
rmm™yfûedñayed
),

79 
WL
(
rmm™yfûedñayed™d≠≥nd
),

80 
WL
(
rmm™ydú
),

81 
WL
(
rmm™ydúdñayed
),

82 
WL
(
rmåì
),

83 
WLA
(
rmøndåì
, 
£ed
),

84 
WL
(
lökfûe
),

85 
WL
(
lökm™yfûe
),

86 
WL
(
u∆ökfûe
),

87 
WL
(
u∆ökm™yfûe
),

88 
WL
(
löku∆ökfûe
),

89 
WL
(
ª«mefûe
),

90 
WL
(
ª«medú
),

91 
WL
(
ª«mesubåì
),

92 
WL
(
ª«mexdfûe
),

93 
WL
(
ª«mexddú
),

94 
WL
(
ª«mexdsubåì
),

95 
WL
(
ª«mem™yfûe
),

96 
WL
(
ª«mem™ydú
),

97 
WL
(
ª«mem™ysubåì
),

98 
WL
(
c›y™dª«me
),

99 
WL
(
u¡¨
),

100 
WL
(
compûe
),

101 
WL
(
cvsupd©e
),

102 
WLA
(
wrôefûe£q
, 
£ed
),

103 
WLA
(
wrôërunc£q
, 
£ed
),

104 
WLA
(
mkrm£q
, 
£ed
),

105 
WLA
(
löku∆ök£q
, 
£ed
),

106 
WLA
(
ª«me£q
, 
£ed
),

107 
WLA
(
dú›£q
, 
£ed
),

108 
WLA
(
gí£q
, 
£ed
),

110 c⁄° 
	gnumw‹klﬂds
 = (
w‹klﬂds
) / (workloads[0]);

112 #unde‡
WL


113 #unde‡
WLA


116 c⁄° 
w‹klﬂd
 *

117 
	$födw‹klﬂd
(c⁄° *
«me
)

119 
i
;

121 
i
=0; i<
numw‹klﬂds
; i++) {

122 i‡(!
	`°rcmp
(
w‹klﬂds
[
i
].
«me
,Çame)) {

123  &
w‹klﬂds
[
i
];

126  
NULL
;

127 
	}
}

131 
	$¥ötw‹klﬂds
()

133 
i
;

135 
	`¥ötf
("Supported workloads:\n");

136 
i
=0; i<
numw‹klﬂds
; i++) {

137 
	`¥ötf
(" %s", 
w‹klﬂds
[
i
].
«me
);

138 i‡(
w‹klﬂds
[
i
].
¨g«me
) {

139 
	`¥ötf
(" %s", 
w‹klﬂds
[
i
].
¨g«me
);

141 
	`¥ötf
("\n");

143 
	}
}

146 
	$maö
(
¨gc
, *
¨gv
[])

148 c⁄° *
w‹klﬂd«me
;

149 c⁄° 
w‹klﬂd
 *workload;

150 
checkmode
 = 0;

152 i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "list")) {

153 
	`¥ötw‹klﬂds
();

154 
	`exô
(0);

157 i‡(
¨gc
 < 3) {

158 
	`w¨nx
("Ußge: %†do|check w‹klﬂd [¨g]", 
¨gv
[0]);

159 
	`w¨nx
("Use \"list\" foráÜist of workloads");

160 
	`exô
(1);

163 i‡(!
	`°rcmp
(
¨gv
[1], "do")) {

164 
checkmode
 = 0;

166 i‡(!
	`°rcmp
(
¨gv
[1], "check")) {

167 
checkmode
 = 1;

170 
	`îrx
(1, "Action must be \"do\" or \"check\"");

173 
w‹klﬂd«me
 = 
¨gv
[2];

174 
w‹klﬂd
 = 
	`födw‹klﬂd
(
w‹klﬂd«me
);

175 i‡(
w‹klﬂd
 =
NULL
) {

176 
	`îrx
(1, "Unknow¿w‹klﬂd %s\n", 
w‹klﬂd«me
);

177 
	`¥ötw‹klﬂds
();

178 
	`exô
(1);

180 
	`£tcheckmode
(
checkmode
);

181 i‡(
w‹klﬂd
->
¨g«me
) {

182 i‡(
¨gc
 != 4) {

183 
	`îrx
(1, "%sÑequiresárgument %s\n",

184 
w‹klﬂd«me
, 
w‹klﬂd
->
¨g«me
);

186 
w‹klﬂd
->
run
.
	`wôh¨g
(
¨gv
[3]);

189 i‡(
¨gc
 != 3) {

190 
	`îrx
(1, "Såayárgumíàf‹ w‹klﬂd %s",
w‹klﬂd«me
);

192 
w‹klﬂd
->
run
.
	`nﬂrg
();

194 
	`com∂ëe
();

196 
	}
}

	@userland/testbin/frack/main.h

31 
£tcheckmode
(
checkmode
);

32 
com∂ëe
();

	@userland/testbin/frack/name.c

31 
	~<°rög.h
>

32 
	~<as£π.h
>

33 
	~<îr.h
>

35 
	~"«me.h
"

37 
	#MAXNAMES
 32

	)

39 c⁄° *c⁄° 
	g«mes
[
MAXNAMES
] = {

75 
	$«me_gë
(
«me
)

77 
	`as£π
(
«me
 < 
MAXNAMES
);

78  
«mes
[
«me
];

79 
	}
}

82 
	$«me_föd
(c⁄° *
«me°r
)

84 
i
;

86 
i
=0; i<
MAXNAMES
; i++) {

87 i‡(!
	`°rcmp
(
«me°r
, 
«mes
[
i
])) {

88  
i
;

91 
	`îrx
(1, "Encou¡îed unknown/u√x≥˘edÇamê%s", 
«me°r
);

93 
	}
}

	@userland/testbin/frack/name.h

32 c⁄° *
«me_gë
(
«me
);

33 
«me_föd
(c⁄° *
«me°r
);

	@userland/testbin/frack/ops.c

31 
	~<°döt.h
>

32 
	~<uni°d.h
>

33 
	~<as£π.h
>

34 
	~<îr.h
>

36 
	~"poﬁ.h
"

37 
	~"d©a.h
"

38 
	~"do.h
"

39 
	~"check.h
"

40 
	~"›s.h
"

41 
	~"maö.h
"

43 
	sfûe
 {

44 
	m«me
;

45 
	mã°code
;

46 
	m£q
;

47 
	mh™dÀ
;

50 
	sdú
 {

51 
	m«me
;

52 
	mh™dÀ
;

55 
	gcheckmode
;

58 
	$£tcheckmode
(
mode
)

60 
checkmode
 = 
mode
;

61 i‡(
checkmode
) {

62 
	`check_£tup
();

64 
	}
}

69 
	#MAXDIRS
 32

	)

70 
DECLPOOL
(
dú
, 
MAXDIRS
);

72 
dú
 *

73 
	$›_›ídú
(
«me
)

75 
dú
 *
ªt
;

77 
ªt
 = 
	`POOLALLOC
(
dú
);

78 
ªt
->
«me
 =Çame;

79 i‡(
checkmode
) {

80 
ªt
->
h™dÀ
 = -1;

83 
ªt
->
h™dÀ
 = 
	`do_›ídú
(
«me
);

85  
ªt
;

86 
	}
}

89 
	$›_˛o£dú
(
dú
 *
d
)

91 i‡(
checkmode
) {

93 ()
d
;

96 
	`do_˛o£dú
(
d
->
h™dÀ
, d->
«me
);

98 
	`POOLFREE
(
dú
, 
d
);

99 
	}
}

104 
	#MAXFILES
 32

	)

105 
DECLPOOL
(
fûe
, 
MAXFILES
);

107 
fûe
 *

108 
	$›_›í
(
ã°code
, 
«me
, 
›íÊags
)

110 
fûe
 *
ªt
;

111 
dŸrunc
;

113 i‡(
›íÊags
 =
O_TRUNC
) {

114 
›íÊags
 = 0;

115 
dŸrunc
 = 1;

118 
dŸrunc
 = 0;

121 
	`as£π
(
›íÊags
 =0 || o≥nÊag†=(
O_CREAT
|
O_EXCL
));

123 
ªt
 = 
	`POOLALLOC
(
fûe
);

124 
ªt
->
«me
 =Çame;

125 
ªt
->
ã°code
 =Åestcode;

126 
ªt
->
£q
 = 0;

127 i‡(
checkmode
) {

128 i‡(
›íÊags
) {

129 
ªt
->
h™dÀ
 = 
	`check_¸óãfûe
(
«me
);

132 
ªt
->
h™dÀ
 = 
	`check_›ífûe
(
«me
);

136 i‡(
›íÊags
) {

137 
	`as£π
(
dŸrunc
 == 0);

138 
ªt
->
h™dÀ
 = 
	`do_¸óãfûe
(
«me
);

146 
ªt
->
h™dÀ
 = 
	`do_›ífûe
(
«me
, 
dŸrunc
);

147 
dŸrunc
 = 0;

150 i‡(
dŸrunc
) {

151 
	`›_åunˇã
(
ªt
, 0);

153  
ªt
;

154 
	}
}

157 
	$›_˛o£
(
fûe
 *
f
)

159 i‡(
checkmode
) {

160 
	`check_˛o£fûe
(
f
->
h™dÀ
, f->
«me
);

163 
	`do_˛o£fûe
(
f
->
h™dÀ
, f->
«me
);

165 
	`POOLFREE
(
fûe
, 
f
);

166 
	}
}

169 
	$›_wrôe
(
fûe
 *
f
, 
off_t
 
pos
, off_à
Àn
)

171 
off_t
 
amou¡
;

173 
Àn
 > 0) {

174 
amou¡
 = 
Àn
;

175 i‡(
amou¡
 > 
DATA_MAXSIZE
) {

176 
amou¡
 = 
DATA_MAXSIZE
;

179 i‡(
checkmode
) {

180 
	`check_wrôe
(
f
->
h™dÀ
, f->
«me
, f->
ã°code
, f->
£q
,

181 
pos
, 
amou¡
);

184 
	`do_wrôe
(
f
->
h™dÀ
, f->
«me
, f->
ã°code
, f->
£q
,

185 
pos
, 
amou¡
);

187 
f
->
£q
++;

188 
pos
 +
amou¡
;

189 
Àn
 -
amou¡
;

191 
	}
}

194 
	$›_åunˇã
(
fûe
 *
f
, 
off_t
 
Àn
)

196 i‡(
checkmode
) {

197 
	`check_åunˇã
(
f
->
h™dÀ
, f->
«me
, 
Àn
);

200 
	`do_åunˇã
(
f
->
h™dÀ
, f->
«me
, 
Àn
);

202 
	}
}

208 
	$›_mkdú
(
«me
)

210 i‡(
checkmode
) {

211 
	`check_mkdú
(
«me
);

214 
	`do_mkdú
(
«me
);

216 
	}
}

219 
	$›_rmdú
(
«me
)

221 i‡(
checkmode
) {

222 
	`check_rmdú
(
«me
);

225 
	`do_rmdú
(
«me
);

227 
	}
}

230 
	$›_u∆ök
(
«me
)

232 i‡(
checkmode
) {

233 
	`check_u∆ök
(
«me
);

236 
	`do_u∆ök
(
«me
);

238 
	}
}

241 
	$›_lök
(
‰om
, 
to
)

243 i‡(
checkmode
) {

244 
	`check_lök
(
‰om
, 
to
);

247 
	`do_lök
(
‰om
, 
to
);

249 
	}
}

252 
	$›_ª«me
(
‰om
, 
to
)

254 i‡(
checkmode
) {

255 
	`check_ª«me
(
‰om
, 
to
);

258 
	`do_ª«me
(
‰om
, 
to
);

260 
	}
}

263 
	$›_ª«mexd
(
‰omdú
, 
‰om
, 
todú
, 
to
)

265 i‡(
checkmode
) {

266 
	`check_ª«mexd
(
‰omdú
, 
‰om
, 
todú
, 
to
);

269 
	`do_ª«mexd
(
‰omdú
, 
‰om
, 
todú
, 
to
);

271 
	}
}

274 
	$›_chdú
(
«me
)

276 i‡(
checkmode
) {

277 
	`check_chdú
(
«me
);

280 
	`do_chdú
(
«me
);

282 
	}
}

285 
	$›_chdúup
()

287 i‡(
checkmode
) {

288 
	`check_chdúup
();

291 
	`do_chdúup
();

293 
	}
}

299 
	$›_sync
()

301 i‡(
checkmode
) {

302 
	`check_sync
();

305 
	`do_sync
();

307 
	}
}

310 
	$com∂ëe
()

312 i‡(
checkmode
) {

313 
	`checkfs
();

315 
	}
}

	@userland/testbin/frack/ops.h

31 
	gfûe
;

32 
	gdú
;

34 
dú
 *
›_›ídú
();

35 
›_˛o£dú
(
dú
 *);

36 
fûe
 *
›_›í
(, , );

37 
›_˛o£
(
fûe
 *);

38 
›_wrôe
(
fûe
 *, 
off_t
, off_t);

39 
›_åunˇã
(
fûe
 *, 
off_t
);

40 
›_sync
();

41 
›_mkdú
();

42 
›_rmdú
();

43 
›_u∆ök
();

44 
›_lök
(, );

45 
›_ª«me
(, );

46 
›_ª«mexd
(, , , );

47 
›_chdú
();

48 
›_chdúup
();

	@userland/testbin/frack/pool.c

31 
	~<°döt.h
>

32 
	~<as£π.h
>

33 
	~<îr.h
>

35 
	~"poﬁ.h
"

38 
	$poﬁÆloc
(
poﬁ˘l
 *
poﬁ
)

40 
uöt32_t
 
mask
;

41 
j
, 
i
;

43 
	`as£π
(
poﬁ
->
max
 % 32 == 0);

44 
j
=0; j<
poﬁ
->
max
/32; j++) {

45 
mask
=1, 
i
=0; i<32; mask<<=1, i++) {

46 i‡((
poﬁ
->
öu£
[
j
] & 
mask
) == 0) {

47 
poﬁ
->
öu£
[
j
] |
mask
;

48  
j
*32 + 
i
;

52 
	`îrx
(1, "Too many %s -- increase %s in %s",

53 
poﬁ
->
ôemty≥
,Öoﬁ->
max«me
,Öoﬁ->
fûe
);

55 
	}
}

58 
	$poﬁ‰ì
(
poﬁ˘l
 *
poﬁ
, 
num
)

60 
uöt32_t
 
mask
;

61 
pos
;

63 
	`as£π
(
num
 < 
poﬁ
->
max
);

65 
pos
 = 
num
 / 32;

66 
mask
 = 1 << (
num
 % 32);

68 
	`as£π
(
poﬁ
->
öu£
[
pos
] & 
mask
);

69 
poﬁ
->
öu£
[
pos
] &~(
uöt32_t
)
mask
;

70 
	}
}

	@userland/testbin/frack/pool.h

31 
	spoﬁ˘l
 {

32 
uöt32_t
 *
	möu£
;

33 
	mmax
;

34 c⁄° *
	môemty≥
;

35 c⁄° *
	mmax«me
;

36 c⁄° *
	mfûe
;

39 
	#DIVROUNDUP
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

40 
	#ROUNDUP
(
a
, 
b
Ë(
	`DIVROUNDUP
◊, bË* (b))

	)

42 
	#DECLPOOL
(
T
, 
MAX
) \

43 
T
 
poﬁ_•a˚_
##T[
	`ROUNDUP
(
MAX
, 32)]; \

44 
uöt32_t
 
poﬁ_öu£_
##
T
[
	`DIVROUNDUP
(
MAX
, 32)]; \

45 
poﬁ˘l
 
poﬁ_
##
T
 = { \

46 .
öu£
 = 
poﬁ_öu£_
##
T
, \

47 .
max
 = 
	`ROUNDUP
(
MAX
, 32), \

48 .
ôemty≥
 = "struct " #T, \

49 .
max«me
 = #MAX, \

50 .
fûe
 = 
__FILE__
 \

51 }

	)

53 
	#POOLALLOC
(
T
Ë(&
poﬁ_•a˚_
##T[
	`poﬁÆloc
(&
poﬁ_
##T)])

	)

54 
	#POOLFREE
(
T
, 
x
Ë(
	`poﬁ‰ì
(&
poﬁ_
##T, (xË- 
poﬁ_•a˚_
##T))

	)

56 
poﬁÆloc
(
poﬁ˘l
 *
poﬁ
);

57 
poﬁ‰ì
(
poﬁ˘l
 *
poﬁ
, 
ix
);

	@userland/testbin/frack/workloads.c

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

34 
	~<as£π.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

39 
	~<°dboﬁ.h
>

41 
	tboﬁ
;

42 
	#Ál£
 0

	)

43 
	#åue
 1

	)

46 
	~"›s.h
"

47 
	~"w‹klﬂds.h
"

54 
	$gënum
(c⁄° *
°r
)

57 
vÆ
;

58 *
x
;

60 
î∫o
 = 0;

61 
vÆ
 = 
	`°πoul
(
°r
, &
x
, 0);

62 i‡(
î∫o
) {

63 
	`îr
(1, "InvÆidÇumbî %s", 
°r
);

65 i‡(
	`°æí
(
x
) > 0) {

66 
	`îrx
(1, "InvÆid junkáàíd o‡numbî %s", 
°r
);

68  
vÆ
;

70  
	`©oi
(
°r
);

72 
	}
}

77 
	esizes
 {

78 
	mSIZE_ONE
,

79 
	mSIZE_SMALL
,

80 
	mSIZE_MEDIUM
,

81 
	mSIZE_LARGE
,

82 
	mSIZE_LARGEPLUS
,

90 
sizes


91 
	$°πosize
(c⁄° *
w‹d
)

93 i‡(!
	`°rcmp
(
w‹d
, "small")) {

94  
SIZE_SMALL
;

96 i‡(!
	`°rcmp
(
w‹d
, "medium")) {

97  
SIZE_MEDIUM
;

99 i‡(!
	`°rcmp
(
w‹d
, "large")) {

100  
SIZE_LARGE
;

102 
	`îrx
(1, "InvÆid sizê%†—ry smÆl, medium, o∏œrge)", 
w‹d
);

104  
SIZE_SMALL
;

105 
	}
}

108 
sizes


109 
	$øndsize
()

111 
	`øndom
() % 7) {

113  
SIZE_ONE
;

117  
SIZE_SMALL
;

120  
SIZE_MEDIUM
;

123  
SIZE_LARGE
;

125  
SIZE_MEDIUM
;

128  
SIZE_ONE
;

129 
	}
}

132 
sizes


133 
	$√xtsmÆÀrsize
(
sizes
 
sz
)

135 
sz
) {

136 
SIZE_ONE
:

138 
SIZE_SMALL
:

139  
SIZE_ONE
;

140 
SIZE_MEDIUM
:

141  
SIZE_SMALL
;

142 
SIZE_LARGE
:

143  
SIZE_MEDIUM
;

144 
SIZE_LARGEPLUS
:

145  
SIZE_LARGE
;

147 
	`as£π
(0);

148  
SIZE_ONE
;

149 
	}
}

152 
sizes


153 
	$√xé¨gîsize
(
sizes
 
sz
)

155 
sz
) {

156 
SIZE_ONE
:

157  
SIZE_SMALL
;

158 
SIZE_SMALL
:

159  
SIZE_MEDIUM
;

160 
SIZE_MEDIUM
:

161  
SIZE_LARGE
;

162 
SIZE_LARGE
:

163  
SIZE_LARGEPLUS
;

164 
SIZE_LARGEPLUS
:

167 
	`as£π
(0);

168  
SIZE_LARGEPLUS
;

169 
	}
}

173 
	$sizeblocks
(
sizes
 
sz
)

178 
	#BLOCKSIZE
 512

	)

179 c⁄° 
ndb
 = 15;

180 c⁄° 
db≥ridb
 = 128;

182 
sz
) {

183 
SIZE_ONE
:

186 
SIZE_SMALL
:

188  
ndb
;

189 
SIZE_MEDIUM
:

191  
ndb
 + 
db≥ridb
 / 2;

192 
SIZE_LARGE
:

194  
ndb
 + 
db≥ridb
 + dbperidb * dbperidb / 2;

195 
SIZE_LARGEPLUS
:

197  
ndb
 + 
db≥ridb
 + dbperidb * dbperidb + dbperidb / 2;

199 
	`as£π
(0);

201 
	}
}

205 
	$sizebyãs
(
sizes
 
sz
)

207  
BLOCKSIZE
 * 
	`sizeblocks
(
sz
);

208 
	}
}

215 
	$fûe_øndomwrôe
(
fûe
 *
f
, 
sizes
 
sz
,

216 
°¨tskù
, 
ídskù
)

218 
nblocks
, 
nwrôes
, 
i
;

219 
blocknum
;

220 
off_t
 
pos
;

222 
nblocks
 = 
	`sizeblocks
(
sz
);

223 
	`as£π
(
nblocks
 > 
°¨tskù
 + 
ídskù
);

225 
nwrôes
 = 
nblocks
/6;

226 i‡(
nwrôes
 < 2) {

227 
nwrôes
 = 2;

230 
nblocks
 -
°¨tskù
 + 
ídskù
;

231 
i
=0; i<
nwrôes
; i++) {

232 
blocknum
 = 
°¨tskù
 + 
	`øndom
(Ë% 
nblocks
;

233 
pos
 = (
off_t
)
BLOCKSIZE
 * 
blocknum
;

234 
	`›_wrôe
(
f
, 
pos
, 
BLOCKSIZE
);

236 
	}
}

240 
	$wrôìm±yfûe
(
fûíum
)

242 
fûe
 *
f
;

243 
Áke_ã°code
 = 0;

245 
f
 = 
	`›_›í
(
Áke_ã°code
, 
fûíum
, 
O_CREAT
|
O_EXCL
);

246 
	`›_˛o£
(
f
);

247 
	}
}

251 
	$wrôeoutfûe
(
ã°code
, 
fûíum
, 
›íÊags
,

252 
sizes
 
sz
)

254 
fûe
 *
f
;

256 
f
 = 
	`›_›í
(
ã°code
, 
fûíum
, 
›íÊags
);

257 
	`›_wrôe
(
f
, 0, 
	`sizebyãs
(
sz
));

258 
	`›_˛o£
(
f
);

259 
	}
}

263 
	$wrôíewfûe
(
ã°code
, 
fûíum
, 
sizes
 
sz
)

265 
	`wrôeoutfûe
(
ã°code
, 
fûíum
, 
O_CREAT
|
O_EXCL
, 
sz
);

266 
	}
}

270 
	$wrôehﬁeyfûe
(
ã°code
, 
fûíum
, 
sizes
 
sz
)

272 
fûe
 *
f
;

273 
›íÊags
 = 
O_CREAT
|
O_EXCL
;

275 
f
 = 
	`›_›í
(
ã°code
, 
fûíum
, 
›íÊags
);

276 
	`›_wrôe
(
f
, 0, 
BLOCKSIZE
);

277 
	`›_wrôe
(
f
, 
	`sizebyãs
(
sz
Ë- 
BLOCKSIZE
, BLOCKSIZE);

278 
	`›_˛o£
(
f
);

279 
	}
}

286 
	$makesubåì
(
ã°code
, 
fûíum
)

288 
i
;

290 
	`›_mkdú
(
fûíum
);

291 
	`›_chdú
(
fûíum
);

292 
i
=0; i<7; i++) {

293 i‡(
i
 == 2 || i == 5) {

294 
	`›_mkdú
(
i
);

297 
	`wrôíewfûe
(
ã°code
, 
i
, 
SIZE_ONE
);

300 
	`›_chdú
(2);

301 
i
=0; i<4; i++) {

302 
	`wrôíewfûe
(
ã°code
, 
i
+3, 
SIZE_ONE
);

304 
	`›_chdúup
();

305 
	`›_chdú
(5);

306 
i
=0; i<5; i++) {

307 i‡(
i
 == 3) {

308 
	`›_mkdú
(
i
+3);

311 
	`wrôíewfûe
(
ã°code
, 
i
+3, 
SIZE_ONE
);

314 
	`›_chdú
(6);

315 
i
=0; i<2; i++) {

316 
	`wrôíewfûe
(
ã°code
, 
i
+7, 
SIZE_ONE
);

318 
	`›_chdúup
();

319 
	`›_chdúup
();

320 
	`›_chdúup
();

321 
	}
}

330 
	$wl_¸óãwrôe
(c⁄° *
size
)

332 
ã°code
 = 1;

333 
sizes
 
sz
;

335 
sz
 = 
	`°πosize
(
size
);

337 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

338 
	}
}

345 
	$wl_ªwrôe
(c⁄° *
size
)

347 
ã°code
 = 2;

348 
sizes
 
sz
;

350 
sz
 = 
	`°πosize
(
size
);

352 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

353 
	`›_sync
();

354 
	`wrôeoutfûe
(
ã°code
 + 1, 0 , 0, 
sz
);

355 
	}
}

362 
	$wl_øndupd©e
(c⁄° *
size
)

364 
ã°code
 = 4;

365 
sizes
 
sz
;

366 
fûe
 *
f
;

368 
sz
 = 
	`°πosize
(
size
);

370 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

371 
	`›_sync
();

372 
	`§™dom
(71654);

373 
f
 = 
	`›_›í
(
ã°code
 + 1, 0 , 0);

374 
	`fûe_øndomwrôe
(
f
, 
sz
, 0, 0);

375 
	`›_˛o£
(
f
);

376 
	}
}

383 
	$wl_åuncwrôe
(c⁄° *
size
)

385 
ã°code
 = 6;

386 
sizes
 
sz
;

388 
sz
 = 
	`°πosize
(
size
);

390 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

391 
	`›_sync
();

392 
	`wrôeoutfûe
(
ã°code
, 0 , 
O_TRUNC
, 
sz
);

393 
	}
}

400 
	$wl_makehﬁe
(c⁄° *
size
)

402 
ã°code
 = 8;

403 
sizes
 
sz
;

405 
sz
 = 
	`°πosize
(
size
);

407 
	`wrôehﬁeyfûe
(
ã°code
, 0 , 
sz
);

408 
	}
}

415 
	$wl_fûlhﬁe
(c⁄° *
size
)

417 
ã°code
 = 9;

418 
sizes
 
sz
;

419 
fûe
 *
f
;

421 
sz
 = 
	`°πosize
(
size
);

423 
	`wrôehﬁeyfûe
(
ã°code
, 0 , 
sz
);

424 
	`›_sync
();

425 
	`§™dom
(51743);

426 
f
 = 
	`›_›í
(
ã°code
 + 1, 0 , 0);

427 
	`fûe_øndomwrôe
(
f
, 
sz
, 1, 1);

428 
	`›_˛o£
(
f
);

429 
	}
}

435 
	$wl_åuncfûl
(c⁄° *
size
)

437 
ã°code
 = 11;

438 
sizes
 
sz
;

439 
fûe
 *
f
;

441 
sz
 = 
	`°πosize
(
size
);

443 
f
 = 
	`›_›í
(
ã°code
, 0 , 
O_CREAT
|
O_EXCL
);

444 
	`›_åunˇã
(
f
, 
	`sizebyãs
(
sz
));

445 
	`›_˛o£
(
f
);

446 
	`›_sync
();

447 
	`§™dom
(52548);

448 
f
 = 
	`›_›í
(
ã°code
, 0 , 0);

449 
	`fûe_øndomwrôe
(
f
, 
sz
, 0, 0);

450 
	`›_˛o£
(
f
);

451 
	}
}

458 
	$wl_≠≥nd
(c⁄° *
size
)

460 
ã°code
 = 11;

461 
sizes
 
sz
;

462 
fûe
 *
f
;

464 
sz
 = 
	`°πosize
(
size
);

466 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

467 
	`›_sync
();

468 
f
 = 
	`›_›í
(
ã°code
 + 1, 0 , 0);

469 
	`›_wrôe
(
f
, 
	`sizebyãs
(
sz
), 
BLOCKSIZE
 * 4);

470 
	`›_˛o£
(
f
);

471 
	}
}

480 
	$wl_åunczîo
(c⁄° *
size
)

482 
ã°code
 = 50;

483 
sizes
 
sz
;

484 
fûe
 *
f
;

486 
sz
 = 
	`°πosize
(
size
);

488 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

489 
	`›_sync
();

490 
f
 = 
	`›_›í
(
ã°code
, 0 , 0);

491 
	`›_åunˇã
(
f
, 0);

492 
	`›_˛o£
(
f
);

493 
	}
}

499 
	$wl_åunc⁄eblock
(c⁄° *
size
)

501 
ã°code
 = 50;

502 
sizes
 
sz
;

503 
fûe
 *
f
;

505 
sz
 = 
	`°πosize
(
size
);

507 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

508 
	`›_sync
();

509 
f
 = 
	`›_›í
(
ã°code
, 0 , 0);

510 
	`›_åunˇã
(
f
, 
	`sizebyãs
(
sz
Ë- 
BLOCKSIZE
);

511 
	`›_˛o£
(
f
);

512 
	}
}

518 
	$wl_åuncsmÆÀrsize
(c⁄° *
size
)

520 
ã°code
 = 50;

521 
sizes
 
sz
;

522 
fûe
 *
f
;

524 
sz
 = 
	`°πosize
(
size
);

525 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

526 
	`›_sync
();

527 
f
 = 
	`›_›í
(
ã°code
, 0 , 0);

528 
	`›_åunˇã
(
f
, 
	`sizebyãs
(
	`√xtsmÆÀrsize
(
sz
)));

529 
	`›_˛o£
(
f
);

530 
	}
}

536 
	$wl_åun˛¨gîsize
(c⁄° *
size
)

538 
ã°code
 = 50;

539 
sizes
 
sz
;

540 
fûe
 *
f
;

542 
sz
 = 
	`°πosize
(
size
);

544 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

545 
	`›_sync
();

546 
f
 = 
	`›_›í
(
ã°code
, 0 , 0);

547 
	`›_åunˇã
(
f
, 
	`sizebyãs
(
	`√xé¨gîsize
(
sz
)));

548 
	`›_˛o£
(
f
);

549 
	}
}

555 
	$wl_≠≥nd™dåunczîo
(c⁄° *
size
)

557 
ã°code
 = 50;

558 
sizes
 
sz
;

559 
fûe
 *
f
;

561 
sz
 = 
	`°πosize
(
size
);

563 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

564 
	`›_sync
();

565 
f
 = 
	`›_›í
(
ã°code
, 0 , 0);

566 
	`›_wrôe
(
f
, 
	`sizebyãs
(
sz
), 
BLOCKSIZE
 * 4);

567 
	`›_åunˇã
(
f
, 0);

568 
	`›_˛o£
(
f
);

569 
	}
}

576 
	$wl_≠≥nd™dåun˝¨éy
(c⁄° *
size
)

578 
ã°code
 = 50;

579 
sizes
 
sz
;

580 
fûe
 *
f
;

582 
sz
 = 
	`°πosize
(
size
);

584 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

585 
	`›_sync
();

586 
f
 = 
	`›_›í
(
ã°code
, 0 , 0);

587 
	`›_wrôe
(
f
, 
	`sizebyãs
(
sz
), 
BLOCKSIZE
 * 4);

588 
	`›_åunˇã
(
f
, 
	`sizebyãs
(
sz
Ë+ 
BLOCKSIZE
 * 2);

589 
	`›_˛o£
(
f
);

590 
	}
}

600 
	$wl_mkfûe
()

602 
ã°code
 = 100;

604 
	`wrôíewfûe
(
ã°code
, 0 , 
SIZE_ONE
);

605 
	}
}

611 
	$wl_mkdú
()

613 
	`›_mkdú
(0 );

614 
	}
}

620 
	$wl_mkm™yfûe
()

622 
ã°code
 = 101;

623 
numfûes
 = 27;

624 
i
;

626 
i
=0; i<
numfûes
; i++) {

627 
	`wrôíewfûe
(
ã°code
, 
i
 , 
SIZE_ONE
);

629 
	}
}

635 
	$wl_mkm™ydú
()

637 
numdús
 = 27;

638 
i
;

640 
i
=0; i<
numdús
; i++) {

641 
	`›_mkdú
(
i
 );

643 
	}
}

648 
	~<°dio.h
>

651 
	$wl_mkåì_sub
(
ã°code
, 
dïth
)

653 
i
, 
numthögs
 = 4;

655 
i
=0; i<
numthögs
; i++) {

656 i‡(
i
 < 
dïth
) {

657 
	`wrôíewfûe
(
ã°code
, 
i
 , 
SIZE_ONE
);

660 
	`›_mkdú
(
i
 );

661 i‡(
dïth
 < 
numthögs
) {

662 
	`›_chdú
(
i
 );

663 
	`wl_mkåì_sub
(
ã°code
, 
dïth
 + 1);

664 
	`›_chdúup
();

668 
	}
}

672 
	$wl_rmåì_sub
(
dïth
)

674 
i
, 
numthögs
 = 4;

676 
i
=0; i<
numthögs
; i++) {

677 i‡(
i
 < 
dïth
) {

678 
	`›_u∆ök
(
i
 );

681 i‡(
dïth
 < 
numthögs
) {

682 
	`›_chdú
(
i
 );

683 
	`wl_rmåì_sub
(
dïth
 + 1);

684 
	`›_chdúup
();

686 
	`›_rmdú
(
i
 );

689 
	}
}

692 
	$wl_mkåì
()

694 
ã°code
 = 102;

696 
	`wl_mkåì_sub
(
ã°code
, 0);

697 
	}
}

705 
	$mkøndåì_sub
(
ã°code
, 
dïth
,

706 *
˘
, 
numthögs
)

708 
numhîe
;

710 
numhîe
 = 0;

711 *
˘
 < 
numthögs
) {

712 
	`øndom
() % 4) {

714 (*
˘
)++;

715 
	`›_mkdú
(
numhîe
 );

716 
	`›_chdú
(
numhîe
 );

717 
	`mkøndåì_sub
(
ã°code
, 
dïth
 + 1, 
˘
, 
numthögs
);

718 
	`›_chdúup
();

719 
numhîe
++;

722 i‡(
dïth
 > 0) {

728 
	`wrôíewfûe
(
ã°code
, 
numhîe
 , 
SIZE_ONE
);

729 (*
˘
)++;

730 
numhîe
++;

734 
	}
}

738 
	$rmøndåì_sub
(
dïth
, *
˘
, 
numthögs
)

740 
numhîe
;

742 
numhîe
 = 0;

743 *
˘
 < 
numthögs
) {

744 
	`øndom
() % 4) {

746 (*
˘
)++;

747 
	`›_chdú
(
numhîe
 );

748 
	`rmøndåì_sub
(
dïth
 + 1, 
˘
, 
numthögs
);

749 
	`›_chdúup
();

750 
	`›_rmdú
(
numhîe
 );

751 
numhîe
++;

754 i‡(
dïth
 > 0) {

760 
	`›_u∆ök
(
numhîe
 );

761 (*
˘
)++;

762 
numhîe
++;

766 
	}
}

769 
	$wl_mkøndåì
(c⁄° *
£ed
)

771 
ã°code
 = 103;

772 
numthögs
, 
cou¡
;

773 
£ednum
 = 
	`gënum
(
£ed
);

775 
	`§™dom
(
£ednum
);

776 
numthögs
 = 
	`øndom
() % 44 + 12;

777 
cou¡
 = 0;

779 
	`mkøndåì_sub
(
ã°code
, 0, &
cou¡
, 
numthögs
);

780 
	}
}

789 
	$wl_rmfûe
()

791 
ã°code
 = 150;

793 
	`wrôíewfûe
(
ã°code
, 0 , 
SIZE_ONE
);

794 
	`wrôìm±yfûe
(1 );

795 
	`›_sync
();

796 
	`›_u∆ök
(0 );

797 
	}
}

803 
	$wl_rmdú
()

805 
	`›_mkdú
(0 );

806 
	`wrôìm±yfûe
(1 );

807 
	`›_sync
();

808 
	`›_rmdú
(0 );

809 
	}
}

818 
	$wl_rmfûedñayed
()

820 
ã°code
 = 151;

821 
fûe
 *
f
;

823 
	`wrôíewfûe
(
ã°code
, 0 , 
SIZE_ONE
);

824 
	`wrôìm±yfûe
(1 );

825 
	`›_sync
();

826 
f
 = 
	`›_›í
(
ã°code
, 0 , 0);

827 
	`›_u∆ök
(0 );

828 
	`›_˛o£
(
f
);

829 
	}
}

836 
	$wl_rmfûedñayed≠≥nd
()

838 
ã°code
 = 152;

839 
fûe
 *
f
;

840 
sizes
 
sz
 = 
SIZE_SMALL
;

842 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

843 
	`wrôìm±yfûe
(1 );

844 
	`›_sync
();

845 
f
 = 
	`›_›í
(
ã°code
, 0 , 0);

846 
	`›_u∆ök
(0 );

847 
	`›_wrôe
(
f
, 
	`sizebyãs
(
sz
), 6 * 
BLOCKSIZE
);

848 
	`›_˛o£
(
f
);

849 
	}
}

855 
	$wl_rmdúdñayed
()

857 
dú
 *
d
;

859 
	`›_mkdú
(0 );

860 
	`wrôìm±yfûe
(1 );

861 
	`›_sync
();

862 
d
 = 
	`›_›ídú
(0 );

863 
	`›_rmdú
(0 );

864 
	`›_˛o£dú
(
d
);

865 
	}
}

871 
	$wl_rmm™yfûe
()

873 
ã°code
 = 153;

874 
numfûes
 = 27;

875 
i
;

877 
i
=0; i<
numfûes
; i++) {

878 
	`wrôíewfûe
(
ã°code
, 
i
 , 
SIZE_ONE
);

880 
	`wrôìm±yfûe
(
numfûes
 );

881 
	`›_sync
();

882 
i
=0; i<
numfûes
; i++) {

883 
	`›_u∆ök
(
i
 );

885 
	}
}

891 
	$wl_rmm™yfûedñayed
()

893 
ã°code
 = 154;

894 
numfûes
 = 27;

895 
fûe
 *
fûes
[27];

896 
i
;

898 
i
=0; i<
numfûes
; i++) {

899 
	`wrôíewfûe
(
ã°code
, 
i
 , 
SIZE_ONE
);

901 
	`wrôìm±yfûe
(
numfûes
 );

902 
	`›_sync
();

903 
i
=0; i<
numfûes
; i++) {

904 
fûes
[
i
] = 
	`›_›í
(
ã°code
, i , 0);

906 
i
=0; i<
numfûes
; i++) {

907 
	`›_u∆ök
(
i
 );

909 
i
=0; i<
numfûes
; i++) {

910 
	`›_˛o£
(
fûes
[
i
]);

912 
	}
}

921 
	$wl_rmm™yfûedñayed™d≠≥nd
()

923 
ã°code
 = 155;

924 
numfûes
 = 27;

925 
fûe
 *
fûes
[27];

926 
sizes
 
sz
 = 
SIZE_SMALL
;

927 
i
, 
j
;

929 
i
=0; i<
numfûes
; i++) {

930 
	`wrôíewfûe
(
ã°code
, 
i
 , 
sz
);

932 
	`wrôìm±yfûe
(
numfûes
 );

933 
	`›_sync
();

934 
i
=0; i<
numfûes
; i++) {

935 
fûes
[
i
] = 
	`›_›í
(
ã°code
, i , 0);

937 
i
=0; i<
numfûes
; i++) {

938 
	`›_u∆ök
(
i
 );

941 
i
=0; i<
numfûes
/2; i++) {

942 
	`›_wrôe
(
fûes
[
i
], 
	`sizebyãs
(
sz
), 6 * 
BLOCKSIZE
);

944 
j
=0; j<
numfûes
/4; j++) {

945 
	`›_˛o£
(
fûes
[
j
]);

947 
	`as£π
(
j
<=
i
);

948 
j
<
numfûes
) {

949 
	`as£π
(
j
<=
i
);

950 i‡(
i
<
numfûes
) {

951 
	`›_wrôe
(
fûes
[
i
++], 
	`sizebyãs
(
sz
), 6 * 
BLOCKSIZE
);

953 
	`›_˛o£
(
fûes
[
j
++]);

954 i‡(
j
 < 
i
) {

955 
	`›_˛o£
(
fûes
[
j
++]);

958 
	`as£π
(
i
==
numfûes
);

959 
	`as£π
(
j
==
i
);

960 
	}
}

966 
	$wl_rmm™ydú
()

968 
numdús
 = 27;

969 
i
;

971 
i
=0; i<
numdús
; i++) {

972 
	`›_mkdú
(
i
 );

974 
	`wrôìm±yfûe
(
numdús
 );

975 
	`›_sync
();

976 
i
=0; i<
numdús
; i++) {

977 
	`›_rmdú
(
i
 );

979 
	}
}

985 
	$wl_rmm™ydúdñayed
()

987 
numdús
 = 27;

988 
dú
 *
dús
[27];

989 
i
;

991 
i
=0; i<
numdús
; i++) {

992 
	`›_mkdú
(
i
 );

994 
	`wrôìm±yfûe
(
numdús
 );

995 
	`›_sync
();

996 
i
=0; i<
numdús
; i++) {

997 
dús
[
i
] = 
	`›_›ídú
(i );

999 
i
=0; i<
numdús
; i++) {

1000 
	`›_rmdú
(
i
 );

1002 
i
=0; i<
numdús
; i++) {

1003 
	`›_˛o£dú
(
dús
[
i
]);

1005 
	}
}

1011 
	$wl_rmåì
()

1013 
ã°code
 = 156;

1015 
	`wl_mkåì_sub
(
ã°code
, 0);

1016 
	`›_sync
();

1017 
	`wl_rmåì_sub
(0);

1018 
	}
}

1024 
	$wl_rmøndåì
(c⁄° *
£ed
)

1026 
ã°code
 = 157;

1027 
£ednum
 = 
	`gënum
(
£ed
);

1028 
numthögs
, 
numthögs2
, 
cou¡
;

1030 
	`§™dom
(
£ednum
);

1031 
numthögs
 = 
	`øndom
() % 44 + 12;

1032 
cou¡
 = 0;

1034 
	`mkøndåì_sub
(
ã°code
, 0, &
cou¡
, 
numthögs
);

1035 
	`›_sync
();

1037 
	`§™dom
(
£ednum
);

1038 
numthögs2
 = 
	`øndom
() % 44 + 12;

1039 
	`as£π
(
numthögs
 =
numthögs2
);

1040 
cou¡
 = 0;

1042 
	`rmøndåì_sub
(0, &
cou¡
, 
numthögs
);

1043 
	}
}

1052 
	$wl_lökfûe
()

1054 
ã°code
 = 200;

1056 
	`wrôíewfûe
(
ã°code
, 0 , 
SIZE_ONE
);

1057 
	`›_sync
();

1058 
	`›_lök
(0 , 1 );

1059 
	}
}

1065 
	$wl_lökm™yfûe
()

1067 
ã°code
 = 201;

1068 
i
, 
numfûes
 = 14;

1070 
i
=0; i<
numfûes
; i++) {

1071 
	`wrôíewfûe
(
ã°code
, 
i
 , 
SIZE_ONE
);

1073 
	`›_sync
();

1074 
i
=0; i<
numfûes
; i++) {

1075 
	`›_lök
(
i
, 
numfûes
+i);

1077 
	}
}

1083 
	$wl_u∆ökfûe
()

1085 
ã°code
 = 202;

1087 
	`wrôíewfûe
(
ã°code
, 0 , 
SIZE_ONE
);

1088 
	`›_lök
(0 , 1 );

1089 
	`wrôìm±yfûe
(2 );

1090 
	`›_sync
();

1091 
	`›_u∆ök
(1 );

1092 
	}
}

1098 
	$wl_u∆ökm™yfûe
()

1100 
ã°code
 = 203;

1101 
i
, 
numfûes
 = 14;

1103 
i
=0; i<
numfûes
; i++) {

1104 
	`wrôíewfûe
(
ã°code
, 
i
 , 
SIZE_ONE
);

1106 
i
=0; i<
numfûes
; i++) {

1107 
	`›_lök
(
i
, 
numfûes
+i);

1109 
	`wrôìm±yfûe
(
numfûes
*2 );

1110 
	`›_sync
();

1111 
i
=0; i<
numfûes
; i++) {

1113 i‡(
i
<
numfûes
/2) {

1114 
	`›_u∆ök
(
i
);

1117 
	`›_u∆ök
(
numfûes
+
i
);

1120 
	}
}

1126 
	$wl_löku∆ökfûe
()

1128 
ã°code
 = 204;

1130 
	`wrôíewfûe
(
ã°code
, 0 , 
SIZE_ONE
);

1131 
	`›_sync
();

1132 
	`›_lök
(0 , 1 );

1133 
	`›_u∆ök
(1 );

1134 
	}
}

1143 
	$wl_ª«mefûe
()

1145 
ã°code
 = 250;

1147 
	`wrôíewfûe
(
ã°code
, 0 , 
SIZE_ONE
);

1148 
	`wrôìm±yfûe
(2 );

1149 
	`›_sync
();

1150 
	`›_ª«me
(0 , 1 );

1151 
	}
}

1157 
	$wl_ª«medú
()

1159 
	`›_mkdú
(0 );

1160 
	`wrôìm±yfûe
(2 );

1161 
	`›_sync
();

1162 
	`›_ª«me
(0 , 1 );

1163 
	}
}

1169 
	$wl_ª«mesubåì
()

1171 
ã°code
 = 251;

1173 
	`makesubåì
(
ã°code
, 0 );

1174 
	`wrôìm±yfûe
(2 );

1175 
	`›_sync
();

1176 
	`›_ª«me
(0 , 1 );

1177 
	}
}

1183 
	$wl_ª«mexdfûe
()

1185 
ã°code
 = 252;

1187 
	`›_mkdú
(0 );

1188 
	`›_mkdú
(1 );

1189 
	`›_chdú
(0 );

1190 
	`wrôíewfûe
(
ã°code
, 2 , 
SIZE_ONE
);

1191 
	`›_chdúup
();

1192 
	`›_sync
();

1193 
	`›_ª«mexd
(0 , 2 , 1 , 3 );

1194 
	}
}

1200 
	$wl_ª«mexddú
()

1202 
	`›_mkdú
(0 );

1203 
	`›_mkdú
(1 );

1204 
	`›_chdú
(0 );

1205 
	`›_mkdú
(2 );

1206 
	`›_chdúup
();

1207 
	`›_sync
();

1208 
	`›_ª«mexd
(0 , 2 , 1 , 3 );

1209 
	}
}

1215 
	$wl_ª«mexdsubåì
()

1217 
ã°code
 = 253;

1219 
	`›_mkdú
(0 );

1220 
	`›_mkdú
(1 );

1221 
	`›_chdú
(0 );

1222 
	`makesubåì
(
ã°code
, 2 );

1223 
	`›_chdúup
();

1224 
	`›_sync
();

1225 
	`›_ª«mexd
(0 , 2 , 1 , 3 );

1226 
	}
}

1232 
	$wl_ª«mem™yfûe
()

1234 
ã°code
 = 254;

1235 
i
, 
numfûes
 = 14;

1237 
i
=0; i<
numfûes
; i++) {

1238 
	`wrôíewfûe
(
ã°code
, 
i
 , 
SIZE_ONE
);

1240 
	`wrôìm±yfûe
(
numfûes
*2 );

1241 
	`›_sync
();

1242 
i
=0; i<
numfûes
; i++) {

1243 
	`›_ª«me
(
i
, 
numfûes
+i);

1245 
	}
}

1251 
	$wl_ª«mem™ydú
()

1253 
i
, 
numdús
 = 14;

1255 
i
=0; i<
numdús
; i++) {

1256 
	`›_mkdú
(
i
 );

1258 
	`wrôìm±yfûe
(
numdús
*2 );

1259 
	`›_sync
();

1260 
i
=0; i<
numdús
; i++) {

1261 
	`›_ª«me
(
i
, 
numdús
+i);

1263 
	}
}

1269 
	$wl_ª«mem™ysubåì
()

1271 
ã°code
 = 255;

1272 
i
, 
numåìs
 = 14;

1274 
i
=0; i<
numåìs
; i++) {

1275 
	`makesubåì
(
ã°code
, 
i
 );

1277 
	`wrôìm±yfûe
(
numåìs
*2 );

1278 
	`›_sync
();

1279 
i
=0; i<
numåìs
; i++) {

1280 
	`›_ª«me
(
i
, 
numåìs
+i);

1282 
	}
}

1291 
	$wl_c›y™dª«me
()

1293 
ã°code
 = 300;

1294 
sizes
 
sz
 = 
SIZE_MEDIUM
;

1296 
	`wrôíewfûe
(
ã°code
, 0 , 
sz
);

1297 
	`wrôìm±yfûe
(2 );

1298 
	`›_sync
();

1299 
	`wrôíewfûe
(
ã°code
+1, 1 , 
sz
);

1300 
	`›_ª«me
(1, 0);

1301 
	}
}

1307 
	$wl_u¡¨
()

1309 
ã°code
 = 302;

1311 
	`makesubåì
(
ã°code
, 0 );

1312 
	}
}

1319 
	$wl_compûe
()

1322 
ã°code
 = 303;

1323 
i
, 
numfûes
 = 27;

1325 
	`£tfûesuffix
(".c");

1326 
i
=0; i<
numfûes
; i++) {

1327 
	`wrôíewfûe
(
ã°code
, 
i
 , 
SIZE_SMALL
);

1329 
	`›_sync
();

1330 
	`£tfûesuffix
(".o");

1331 
i
=0; i<
numfûes
; i++) {

1332 
	`wrôíewfûe
(
ã°code
 + 1, 
i
 , 
SIZE_SMALL
);

1334 
	`wrôíewfûe
(
ã°code
 + 1, 
numfûes
, 
SIZE_MEDIUM
);

1336 
	`îrx
(1, "The compile workload isn't implemented yet.");

1337 
	}
}

1343 
	$wl_cvsupd©e
()

1347 
	`îrx
(1, "This one isn't implementd yet.");

1348 
	}
}

1355 
	$¸óãfûes
(
ã°code
, 
num
, 
sizes
 
sz
)

1357 
i
;

1359 
i
=0; i<
num
; i++) {

1360 
	`wrôíewfûe
(
ã°code
, 
i
 , 
sz
);

1362 
	}
}

1366 
	$›ífûes
(
ã°code
,

1367 
fûe
 **
fûes
, 
›ínum
, 
tŸnum
)

1369 
i
;

1371 
i
=0; i<
›ínum
; i++) {

1372 
fûes
[
i
] = 
	`›_›í
(
ã°code
 + 1, i , 0);

1374 ; 
i
<
tŸnum
; i++) {

1375 
fûes
[
i
] = 
NULL
;

1377 
	}
}

1381 
	$øndwrôe
(
fûe
 *file)

1383 
off_t
 
maxpos
, 
pos
, 
Àn
;

1385 
maxpos
 = 
	`sizebyãs
(
SIZE_MEDIUM
) + 49152;

1387 
pos
 = 
	`øndom
(Ë% 
maxpos
;

1388 
Àn
 = 
	`øndom
() % 12000 + 200;

1389 
	`›_wrôe
(
fûe
, 
pos
, 
Àn
);

1390 
	}
}

1394 
	$øndåunˇã
(
fûe
 *file)

1396 
	`›_åunˇã
(
fûe
, 
	`øndom
(Ë% 
	`sizebyãs
(
SIZE_MEDIUM
));

1397 
	}
}

1403 
	$wl_wrôefûe£q
(c⁄° *
£ed
)

1405 
ã°code
 = 350;

1406 
numfûes
 = 27;

1407 
fûe
 *
fûes
[27];

1408 
fûíum
;

1409 
i
, 
num›s
;

1410 
£ednum
 = 
	`gënum
(
£ed
);

1412 
	`§™dom
(
£ednum
);

1415 
	`¸óãfûes
(
ã°code
, 
numfûes
/2, 
SIZE_MEDIUM
);

1416 
	`›_sync
();

1417 
	`›ífûes
(
ã°code
, 
fûes
, 
numfûes
/2,Çumfiles);

1420 
num›s
 = 
	`øndom
() % 100 + 100;

1421 
i
=0; i<
num›s
; i++) {

1423 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1425 i‡(
fûes
[
fûíum
] =
NULL
) {

1426 
fûes
[
fûíum
] = 
	`›_›í
(
ã°code
 + 1, filenum,

1427 
O_CREAT
|
O_EXCL
);

1429 
	`øndwrôe
(
fûes
[
fûíum
]);

1431 
	}
}

1438 
	$wl_wrôërunc£q
(c⁄° *
£ed
)

1440 
ã°code
 = 352;

1441 
numfûes
 = 27;

1442 
fûe
 *
fûes
[27];

1443 
fûíum
;

1444 
i
, 
num›s
;

1445 
£ednum
 = 
	`gënum
(
£ed
);

1447 
	`§™dom
(
£ednum
);

1450 
	`¸óãfûes
(
ã°code
, 
numfûes
/2, 
SIZE_MEDIUM
);

1451 
	`›_sync
();

1452 
	`›ífûes
(
ã°code
, 
fûes
, 
numfûes
/2,Çumfiles);

1455 
num›s
 = 
	`øndom
() % 100 + 100;

1456 
i
=0; i<
num›s
; i++) {

1458 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1460 i‡(
fûes
[
fûíum
] =
NULL
) {

1461 
fûes
[
fûíum
] = 
	`›_›í
(
ã°code
 + 1, filenum, 0);

1463 i‡(
	`øndom
() % 5 == 0) {

1464 
	`øndåunˇã
(
fûes
[
fûíum
]);

1467 
	`øndwrôe
(
fûes
[
fûíum
]);

1470 
	}
}

1476 
	$wl_mkrm£q
(c⁄° *
£ed
)

1478 
ã°code
 = 354;

1479 
numfûes
 = 27;

1480 
exi°s
[27];

1481 
fûíum
;

1482 
i
, 
num›s
;

1483 
£ednum
 = 
	`gënum
(
£ed
);

1485 
	`§™dom
(
£ednum
);

1487 
i
=0; i<
numfûes
; i++) {

1488 
exi°s
[
i
] = 0;

1492 
num›s
 = 
	`øndom
() % 100 + 100;

1493 
i
=0; i<
num›s
; i++) {

1494 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1495 i‡(
exi°s
[
fûíum
]) {

1496 
	`›_u∆ök
(
fûíum
);

1497 
exi°s
[
fûíum
] = 0;

1500 
	`wrôíewfûe
(
ã°code
, 
fûíum
, 
SIZE_ONE
);

1501 
exi°s
[
fûíum
] = 1;

1504 
	}
}

1510 
	$wl_löku∆ök£q
(c⁄° *
£ed
)

1512 
ã°code
 = 355;

1513 
numfûes
 = 14;

1514 
exi°s
[14];

1515 
fûíum
;

1516 
i
, 
num›s
;

1517 
£ednum
 = 
	`gënum
(
£ed
);

1519 
	`§™dom
(
£ednum
);

1521 
i
=0; i<
numfûes
; i++) {

1522 
exi°s
[
i
] = 0;

1525 
i
=0; i<
numfûes
; i++) {

1526 
	`wrôíewfûe
(
ã°code
, 
i
, 
SIZE_ONE
);

1528 
	`›_sync
();

1531 
num›s
 = 
	`øndom
() % 100 + 100;

1532 
i
=0; i<
num›s
; i++) {

1533 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1534 i‡(
exi°s
[
fûíum
]) {

1535 
	`›_u∆ök
(
fûíum
 + 
numfûes
);

1536 
exi°s
[
fûíum
] = 0;

1539 
	`›_lök
(
	`øndom
(Ë% 
numfûes
, 
fûíum
 +Çumfiles);

1540 
exi°s
[
fûíum
] = 1;

1543 
	}
}

1549 
	$wl_ª«me£q
(c⁄° *
£ed
)

1551 
ã°code
 = 356;

1552 
numfûes
 = 27;

1553 
exi°s
[27];

1554 
fûíum1
, 
fûíum2
;

1555 
i
, 
˘
, 
num›s
;

1556 
£ednum
 = 
	`gënum
(
£ed
);

1558 
	`§™dom
(
£ednum
);

1560 
i
=0; i<
numfûes
; i++) {

1561 
exi°s
[
i
] = 0;

1564 
i
=0; i<
numfûes
/3; i++) {

1565 
	`wrôíewfûe
(
ã°code
, 
i
, 
SIZE_ONE
);

1566 
exi°s
[
i
] = 1;

1568 
	`›_sync
();

1571 
num›s
 = 
	`øndom
() % 100 + 100;

1572 
˘
 = 0;

1573 
˘
 < 
num›s
) {

1574 
fûíum1
 = 
	`øndom
(Ë% 
numfûes
;

1575 
fûíum2
 = 
	`øndom
(Ë% 
numfûes
;

1576 i‡(
exi°s
[
fûíum1
] && !exi°s[
fûíum2
]) {

1577 
	`›_ª«me
(
fûíum1
, 
fûíum2
);

1578 
exi°s
[
fûíum1
] = 0;

1579 
exi°s
[
fûíum2
] = 1;

1580 
˘
++;

1583 
	}
}

1589 
	#ISNT
 0

	)

1590 
	#IS_FILE
 1

	)

1591 
	#IS_DIR
 2

	)

1594 
boﬁ


1595 
	$ønd›
(
ã°code
, *
exi°s
, 
numfûes
,

1596 
boﬁ
 
dofûe›s
, 
fûe
 **
fûes
)

1598 
sizes
 
sz
;

1599 
fûíum
, 
fûíum2
;

1601 
	`øndom
(Ë% (
dofûe›s
 ? 8 : 6)) {

1604 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1605 i‡(
exi°s
[
fûíum
] =
ISNT
) {

1606 i‡(
dofûe›s
) {

1607 
sz
 = 
	`øndsize
();

1610 
sz
 = 
SIZE_ONE
;

1612 
	`wrôíewfûe
(
ã°code
, 
fûíum
, 
sz
);

1613 
exi°s
[
fûíum
] = 
IS_FILE
;

1614  
åue
;

1619 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1620 i‡(
exi°s
[
fûíum
] =
ISNT
) {

1621 
	`›_mkdú
(
fûíum
);

1622 
exi°s
[
fûíum
] = 
IS_DIR
;

1623  
åue
;

1629 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1630 
fûíum2
 = 
	`øndom
(Ë% 
numfûes
;

1631 i‡(
exi°s
[
fûíum
] =
IS_FILE
 &&

1632 
exi°s
[
fûíum2
] =
ISNT
) {

1633 
	`›_lök
(
fûíum
, 
fûíum2
);

1634 
exi°s
[
fûíum2
] = 
IS_FILE
;

1635  
åue
;

1641 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1642 i‡(
exi°s
[
fûíum
] =
IS_FILE
) {

1643 
	`›_u∆ök
(
fûíum
);

1644 
exi°s
[
fûíum
] = 
ISNT
;

1645 i‡(
fûes
 !
NULL
 && fûes[
fûíum
] != NULL) {

1646 
	`›_˛o£
(
fûes
[
fûíum
]);

1647 
fûes
[
fûíum
] = 
NULL
;

1649  
åue
;

1654 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1655 i‡(
exi°s
[
fûíum
] =
IS_DIR
) {

1656 
	`›_rmdú
(
fûíum
);

1657 
exi°s
[
fûíum
] = 
ISNT
;

1658  
åue
;

1663 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1664 
fûíum2
 = 
	`øndom
(Ë% 
numfûes
;

1667 i‡(
fûíum
 =
fûíum2
) {

1671 i‡(
exi°s
[
fûíum
] !
ISNT
 &&

1672 (
exi°s
[
fûíum2
] =
ISNT
 ||

1673 
exi°s
[
fûíum2
] =exi°s[
fûíum
])) {

1674 
	`›_ª«me
(
fûíum
, 
fûíum2
);

1675 i‡(
fûíum
 !
fûíum2
) {

1676 
exi°s
[
fûíum2
] =Éxi°s[
fûíum
];

1677 
exi°s
[
fûíum
] = 
ISNT
;

1679  
åue
;

1685 
	`as£π
(
dofûe›s
);

1686 
	`as£π
(
fûes
 !
NULL
);

1689 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1690 i‡(
exi°s
[
fûíum
] =
IS_FILE
) {

1691 i‡(
fûes
[
fûíum
] =
NULL
) {

1692 
fûes
[
fûíum
] = 
	`›_›í
(
ã°code
, filenum, 0);

1694 
	`øndåunˇã
(
fûes
[
fûíum
]);

1695  
åue
;

1702 
	`as£π
(
dofûe›s
);

1703 
	`as£π
(
fûes
 !
NULL
);

1705 
fûíum
 = 
	`øndom
(Ë% 
numfûes
;

1706 i‡(
exi°s
[
fûíum
] =
IS_FILE
) {

1707 i‡(
fûes
[
fûíum
] =
NULL
) {

1708 
fûes
[
fûíum
] = 
	`›_›í
(
ã°code
, filenum, 0);

1710 
	`øndwrôe
(
fûes
[
fûíum
]);

1711  
åue
;

1715  
Ál£
;

1716 
	}
}

1720 
	$¥ï
(
ã°code
, *
exi°s
, 
numfûes
,

1721 
boﬁ
 
dofûe›s
, 
fûe
 **
fûes
)

1723 
i
;

1725 
i
=0; i<
numfûes
; i++) {

1726 
exi°s
[
i
] = 
ISNT
;

1729 
i
=0; i<
numfûes
/4; i++) {

1730 
	`wrôíewfûe
(
ã°code
, 
i
, 
SIZE_ONE
);

1731 
exi°s
[
i
] = 
IS_FILE
;

1733 
i
=0; i<
numfûes
/3; i++) {

1734 
	`›_mkdú
(
numfûes
/4 + 
i
);

1735 
exi°s
[
numfûes
/4 + 
i
] = 
IS_DIR
;

1738 i‡(
dofûe›s
) {

1739 
i
=0; i<
numfûes
; i++) {

1740 
fûes
[
i
] = 
NULL
;

1743 
	}
}

1746 
	$wl_dú›£q
(c⁄° *
£ed
)

1748 
ã°code
 = 357;

1749 
numfûes
 = 27;

1750 
exi°s
[27];

1751 
˘
, 
num›s
;

1752 
£ednum
 = 
	`gënum
(
£ed
);

1754 
	`§™dom
(
£ednum
);

1756 
	`¥ï
(
ã°code
, 
exi°s
, 
numfûes
, 
Ál£
, 
NULL
);

1757 
	`›_sync
();

1760 
num›s
 = 
	`øndom
() % 100 + 100;

1761 
˘
 = 0;

1762 
˘
 < 
num›s
) {

1763 i‡(
	`ønd›
(
ã°code
, 
exi°s
, 
numfûes
, 
Ál£
, 
NULL
)) {

1764 
˘
++;

1767 
	}
}

1773 
	$wl_gí£q
(c⁄° *
£ed
)

1775 
ã°code
 = 358;

1776 
numfûes
 = 27;

1777 
exi°s
[27];

1778 
fûe
 *
fûes
[27];

1779 
˘
, 
num›s
;

1780 
£ednum
 = 
	`gënum
(
£ed
);

1782 
	`§™dom
(
£ednum
);

1784 
	`¥ï
(
ã°code
, 
exi°s
, 
numfûes
, 
åue
, 
fûes
);

1785 
	`›_sync
();

1788 
num›s
 = 
	`øndom
() % 100 + 100;

1789 
˘
 = 0;

1790 
˘
 < 
num›s
) {

1791 i‡(
	`ønd›
(
ã°code
, 
exi°s
, 
numfûes
, 
åue
, 
fûes
)) {

1792 
˘
++;

1795 
	}
}

	@userland/testbin/frack/workloads.h

69 
wl_¸óãwrôe
(c⁄° *
size
);

70 
wl_ªwrôe
(c⁄° *
size
);

71 
wl_øndupd©e
(c⁄° *
size
);

72 
wl_åuncwrôe
(c⁄° *
size
);

73 
wl_makehﬁe
(c⁄° *
size
);

74 
wl_fûlhﬁe
(c⁄° *
size
);

75 
wl_åuncfûl
(c⁄° *
size
);

76 
wl_≠≥nd
(c⁄° *
size
);

81 
wl_åunczîo
(c⁄° *
size
);

82 
wl_åunc⁄eblock
(c⁄° *
size
);

83 
wl_åuncsmÆÀrsize
(c⁄° *
size
);

84 
wl_åun˛¨gîsize
(c⁄° *
size
);

85 
wl_≠≥nd™dåunczîo
(c⁄° *
size
);

86 
wl_≠≥nd™dåun˝¨éy
(c⁄° *
size
);

91 
wl_mkfûe
();

92 
wl_mkdú
();

93 
wl_mkm™yfûe
();

94 
wl_mkm™ydú
();

95 
wl_mkåì
();

96 
wl_mkøndåì
(c⁄° *
£ed
);

101 
wl_rmfûe
();

102 
wl_rmdú
();

103 
wl_rmfûedñayed
();

104 
wl_rmfûedñayed≠≥nd
();

105 
wl_rmdúdñayed
();

106 
wl_rmm™yfûe
();

107 
wl_rmm™yfûedñayed
();

108 
wl_rmm™yfûedñayed™d≠≥nd
();

109 
wl_rmm™ydú
();

110 
wl_rmm™ydúdñayed
();

111 
wl_rmåì
();

112 
wl_rmøndåì
(c⁄° *
£ed
);

117 
wl_lökfûe
();

118 
wl_lökm™yfûe
();

119 
wl_u∆ökfûe
();

120 
wl_u∆ökm™yfûe
();

121 
wl_löku∆ökfûe
();

126 
wl_ª«mefûe
();

127 
wl_ª«medú
();

128 
wl_ª«mesubåì
();

129 
wl_ª«mexdfûe
();

130 
wl_ª«mexddú
();

131 
wl_ª«mexdsubåì
();

132 
wl_ª«mem™yfûe
();

133 
wl_ª«mem™ydú
();

134 
wl_ª«mem™ysubåì
();

139 
wl_c›y™dª«me
();

140 
wl_u¡¨
();

141 
wl_compûe
();

142 
wl_cvsupd©e
();

147 
wl_wrôefûe£q
(c⁄° *
£ed
);

148 
wl_wrôërunc£q
(c⁄° *
£ed
);

149 
wl_mkrm£q
(c⁄° *
£ed
);

150 
wl_löku∆ök£q
(c⁄° *
£ed
);

151 
wl_ª«me£q
(c⁄° *
£ed
);

152 
wl_dú›£q
(c⁄° *
£ed
);

153 
wl_gí£q
(c⁄° *
£ed
);

	@userland/testbin/guzzle/guzzle.c

37 
	~<°dio.h
>

38 
	~<uni°d.h
>

40 
	#TOP
 1<<25

	)

46 
	$maö
(
¨gc
, *
¨gv
[])

48 vﬁ©ûê
i
;

49 
ch
 = '+';

51 i‡(
¨gc
 == 2) {

52 
ch
 = 
¨gv
[1][0];

55 
i
=0; i<
TOP
; i++) {

57 i‡–(
i
%10000) == 0) {

58 
	`putch¨
(
ch
);

62 
	}
}

	@userland/testbin/hash/hash.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<f˙é.h
>

44 
	~<îr.h
>

46 #ifde‡
HOST


47 
	~"ho°com∑t.h
"

50 
	#HASHP
 104729

	)

53 
	$maö
(
¨gc
, *
¨gv
[])

55 
fd
;

56 
ªadbuf
[1];

57 
j
 = 0;

59 #ifde‡
HOST


60 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

63 i‡(
¨gc
 != 2) {

64 
	`îrx
(1, "Usage: hash filename");

67 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
, 0664);

69 i‡(
fd
<0) {

70 
	`îr
(1, "%s", 
¨gv
[1]);

74 i‡(
	`ªad
(
fd
, 
ªadbuf
, 1) <= 0) ;

75 
j
 = ((j*8Ë+ (Ë
ªadbuf
[0]Ë% 
HASHP
;

78 
	`˛o£
(
fd
);

80 
	`¥ötf
("Hash : %d\n", 
j
);

83 
	}
}

	@userland/testbin/hog/hog.c

38 
	$maö
()

40 vﬁ©ûê
i
;

41 vﬁ©ûê
k
, 
l
, 
m
;

43 
k
 = 1283;

44 
l
 = 53;

45 
i
=0; i<15000000; i++) {

46 
l
 = 
m
 + 
k
;

50 ()
l
;

53 
	}
}

	@userland/testbin/huge/huge.c

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

43 
	#PageSize
 4096

	)

44 
	#NumPages
 512

	)

46 
	g•¨£
[
NumPages
][
PageSize
];

49 
	$maö
()

51 
i
,
j
;

53 
	`¥ötf
("EnteringÅhe hugeÖrogram - I will stressÅest your VM\n");

56 
i
=0; i<
NumPages
; i++) {

57 
•¨£
[
i
][0]=i;

60 
	`¥ötf
("stage [1] done\n");

63 
j
=0; j<5; j++) {

64 
i
=0; i<
NumPages
; i++) {

65 
•¨£
[
i
][0]++;

67 
	`¥ötf
("°agê[2.%d] d⁄e\n", 
j
);

70 
	`¥ötf
("stage [2] done\n");

73 
i
=
NumPages
-1; i>=0; i--) {

74 i‡(
•¨£
[
i
][0]!=i+5) {

75 
	`¥ötf
("BAD NEWS!!! - your VM mechanism hasá bug!\n");

76 
	`exô
(1);

80 
	`¥ötf
("YouÖassed!\n");

83 
	}
}

	@userland/testbin/kitchen/kitchen.c

38 
	~<uni°d.h
>

39 
	~<îr.h
>

41 *
	gßrgv
[2] = { (*)"sök", 
NULL
 };

43 
	#MAXPROCS
 6

	)

44 
	gpids
[
MAXPROCS
], 
	g≈ids
;

48 
	$sök
()

50 
pid
 = 
	`f‹k
();

51 
pid
) {

53 
	`îr
(1, "fork");

56 
	`execv
("/ã°bö/sök", 
ßrgv
);

57 
	`îr
(1, "/testbin/sink");

60 
pids
[
≈ids
++] = 
pid
;

63 
	}
}

67 
	$waôÆl
()

69 
i
, 
°©us
;

70 
i
=0; i<
≈ids
; i++) {

71 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

72 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

74 i‡(
	`WIFSIGNALED
(
°©us
)) {

75 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

77 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

78 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

85 
	$maö
()

87 
	`sök
();

88 
	`sök
();

89 
	`sök
();

90 
	`sök
();

92 
	`waôÆl
();

95 
	}
}

	@userland/testbin/malloctest/malloctest.c

44 
	~<°döt.h
>

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<uni°d.h
>

48 
	~<f˙é.h
>

49 
	~<as£π.h
>

50 
	~<îr.h
>

53 
	#_PATH_RANDOM
 "øndom:"

	)

55 
	#SMALLSIZE
 72

	)

56 
	#MEDIUMSIZE
 896

	)

57 
	#BIGSIZE
 16384

	)

58 
	#HUGESIZE
 (1024 * 1024 * 1024)

	)

61 
	#OVERHEAD
 32

	)

64 
	#ABSURD_OVERHEAD
 256

	)

68 
	$gëi
()

70 
vÆ
=0;

71 
ch
, 
digôs
=0;

74 
ch
 = 
	`gëch¨
();

75 i‡(
ch
=='\n' || ch=='\r') {

76 
	`putch¨
('\n');

79 i‡((
ch
=='\b' || ch==127Ë&& 
digôs
>0) {

80 
	`¥ötf
("\b \b");

81 
vÆ
 = val/10;

82 
digôs
--;

84 i‡(
ch
>='0' && ch<='9') {

85 
	`putch¨
(
ch
);

86 
vÆ
 = vÆ*10 + (
ch
-'0');

87 
digôs
++;

90 
	`putch¨
('\a');

94 i‡(
digôs
==0) {

97  
vÆ
;

98 
	}
}

107 
	$m¨kblock
(vﬁ©ûê*
±r
, 
size_t
 
size
, 
büs
, 
d›röt
)

109 
size_t
 
n
, 
i
;

110 *
∂
;

111 
vÆ
;

113 
∂
 = (*)
±r
;

114 
n
 = 
size
 / ();

116 
i
=0; i<
n
; i++) {

117 
vÆ
 = (()
i
 ^ ()
büs
);

118 
∂
[
i
] = 
vÆ
;

119 i‡(
d›röt
 && (
i
%64==63)) {

120 
	`¥ötf
(".");

123 i‡(
d›röt
) {

124 
	`¥ötf
("\n");

126 
	}
}

133 
	$checkblock
(vﬁ©ûê*
±r
, 
size_t
 
size
, 
büs
, 
d›röt
)

135 
size_t
 
n
, 
i
;

136 *
∂
;

137 
vÆ
;

139 
∂
 = (*)
±r
;

140 
n
 = 
size
 / ();

142 
i
=0; i<
n
; i++) {

143 
vÆ
 = (()
i
 ^ ()
büs
);

144 i‡(
∂
[
i
] !
vÆ
) {

145 i‡(
d›röt
) {

146 
	`¥ötf
("\n");

148 
	`¥ötf
("FAILED: data mismatchát offset %lu of block "

150 (Ë(
i
*()),

151 ()(
uöçå_t
)
∂
,

152 
∂
[
i
], 
vÆ
);

155 i‡(
d›röt
 && (
i
%64==63)) {

156 
	`¥ötf
(".");

159 i‡(
d›röt
) {

160 
	`¥ötf
("\n");

164 
	}
}

177 
	$ã°1
()

179 vﬁ©ûê*
x
;

181 
	`¥ötf
("*** MallocÅest 1 ***\n");

182 
	`¥ötf
("AŒoˇtög %u byãs\n", 
BIGSIZE
);

183 
x
 = 
	`mÆloc
(
BIGSIZE
);

184 i‡(
x
==
NULL
) {

185 
	`¥ötf
("FAILED: malloc failed\n");

189 
	`m¨kblock
(
x
, 
BIGSIZE
, 0, 0);

190 i‡(
	`checkblock
(
x
, 
BIGSIZE
, 0, 0)) {

191 
	`¥ötf
("FAILED: data corrupt\n");

195 
	`‰ì
((*)
x
);

197 
	`¥ötf
("Passed mallocÅest 1.\n");

198 
	}
}

235 
	$ã°2
()

237 vﬁ©ûê*
x
;

238 
size_t
 
size
;

240 
	`¥ötf
("Entering mallocÅest 2.\n");

241 
	`¥ötf
("Make sure youÑeadánd understandÅhe comment in malloctest.c "

244 
	`¥ötf
("Testing how much memory we canállocate:\n");

246 
size
 = 
HUGESIZE
; (
x
 = 
	`mÆloc
(size))==
NULL
; size = size/2) {

247 
	`¥ötf
(" %9lu byãs: faûed\n", (Ë
size
);

249 
	`¥ötf
(" %9lu byãs: suc˚eded\n", (Ë
size
);

251 
	`¥ötf
("PassedÖart 1\n");

253 
	`¥ötf
("TouchingállÅhe words inÅhe block.\n");

254 
	`m¨kblock
(
x
, 
size
, 0, 1);

256 
	`¥ötf
("ValidatingÅhe words inÅhe block.\n");

257 i‡(
	`checkblock
(
x
, 
size
, 0, 1)) {

258 
	`¥ötf
("FAILED: data corrupt\n");

261 
	`¥ötf
("PassedÖart 2\n");

264 
	`¥ötf
("FreeingÅhe block\n");

265 
	`‰ì
((*)
x
);

266 
	`¥ötf
("PassedÖart 3\n");

267 
	`¥ötf
("Allocatingánother block\n");

269 
x
 = 
	`mÆloc
(
size
);

270 i‡(
x
==
NULL
) {

271 
	`¥ötf
("FAILED: free didn'tÑeturnÅhe memory?\n");

274 
	`‰ì
((*)
x
);

276 
	`¥ötf
("Passed mallocÅest 2.\n");

277 
	}
}

293 
	sã°3
 {

294 
ã°3
 *
	m√xt
;

295 
	mjunk
[(
SMALLSIZE
 - (
ã°3
 *))];

300 
	$ã°3
()

302 
ã°3
 *
li°
 = 
NULL
, *
tmp
;

303 
size_t
 
tŸ
=0;

304 
˘
=0, 
Áûed
=0;

305 *
x
;

307 
	`¥ötf
("Entering mallocÅest 3.\n");

308 
	`¥ötf
("Make sure youÑeadánd understandÅhe comment in malloctest.c "

311 
	`¥ötf
("Testing how much memory we canállocate:\n");

313 (
tmp
 = 
	`mÆloc
((
ã°3
))Ë!
NULL
) {

315 
	`as£π
(
tmp
 !
li°
);

316 
tmp
->
√xt
 = 
li°
;

317 
li°
 = 
tmp
;

319 
tŸ
 +(
ã°3
);

321 
	`m¨kblock
(
li°
->
junk
, ÷i°->junk), (
uöçå_t
)list, 0);

323 
˘
++;

324 i‡(
˘
%128==0) {

325 
	`¥ötf
(".");

329 
	`¥ötf
("AŒoˇãd %lu byãs\n", (Ë
tŸ
);

331 
	`¥ötf
("Trying some moreállocations which IÉxpectÅo fail...\n");

333 
x
 = 
	`mÆloc
(
SMALLSIZE
);

334 i‡(
x
 !
NULL
) {

335 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
SMALLSIZE
);

339 
x
 = 
	`mÆloc
(
MEDIUMSIZE
);

340 i‡(
x
 !
NULL
) {

341 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
MEDIUMSIZE
);

345 
x
 = 
	`mÆloc
(
BIGSIZE
);

346 i‡(
x
 !
NULL
) {

347 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
BIGSIZE
);

351 
	`¥ötf
("Ok,Çow I'm goingÅo freeÉverything...\n");

353 
li°
 !
NULL
) {

354 
tmp
 = 
li°
->
√xt
;

356 i‡(
	`checkblock
(
li°
->
junk
, (list->junk),

357 (
uöçå_t
)
li°
, 0)) {

358 
Áûed
 = 1;

361 
	`‰ì
(
li°
);

362 
li°
 = 
tmp
;

365 i‡(
Áûed
) {

366 
	`¥ötf
("FAILED: data corruption\n");

370 
	`¥ötf
("Let me see if I canállocate some moreÇow...\n");

372 
x
 = 
	`mÆloc
(
MEDIUMSIZE
);

373 i‡(
x
 =
NULL
) {

374 
	`¥ötf
("FAIL: Nope, I couldn't.\n");

377 
	`‰ì
(
x
);

379 
	`¥ötf
("Passed mallocÅest 3\n");

380 
	}
}

395 
	$ã°4
()

397 *
x
, *
y
, *
z
;

398 
lx
, 
ly
, 
lz
, 
ovîhód
, 
zsize
;

400 
	`¥ötf
("Entering mallocÅest 4.\n");

401 
	`¥ötf
("ThisÅest is intended for first/best-fit based mallocs.\n");

402 
	`¥ötf
("ThisÅest mayÇot work correctly ifÑunáfter otherÅests.\n");

404 
	`¥ötf
("Testing freeÜist coalescing:\n");

406 
x
 = 
	`mÆloc
(
SMALLSIZE
);

407 i‡(
x
==
NULL
) {

408 
	`¥ötf
("FAILED: mÆloc(%uËÁûed\n", 
SMALLSIZE
);

412 
y
 = 
	`mÆloc
(
MEDIUMSIZE
);

413 i‡(
y
==
NULL
) {

414 
	`¥ötf
("FAILED: mÆloc(%uËÁûed\n", 
MEDIUMSIZE
);

419 
	`¥ötf
("Buh? I can't fitá void * inán unsignedÜong\n");

420 
	`¥ötf
("ENVIRONMENT FAILED...\n");

424 
lx
 = ()
x
;

425 
ly
 = ()
y
;

427 
	`¥ötf
("x i†0x%lx; y i†0x%lx\n", 
lx
, 
ly
);

438 i‡(
lx
 =
ly
) {

439 
	`¥ötf
("FAIL: x == y\n");

449 i‡(
lx
 < 
ly
 &&Üx + 
SMALLSIZE
 >Üy) {

450 
	`¥ötf
("FAIL: y starts within x\n");

453 i‡(
ly
 < 
lx
 &&Üy + 
MEDIUMSIZE
 >Üx) {

454 
	`¥ötf
("FAIL: x starts within y\n");

463 i‡(
ly
 < 
lx
) {

464 
	`¥ötf
("TEST UNSUITABLE: y is below x\n");

471 
ovîhód
 = 
ly
 - (
lx
 + 
SMALLSIZE
);

472 
	`¥ötf
("Aµ¨íàblock ovîhód: %lu\n", 
ovîhód
);

474 i‡(
ovîhód
 > 
ABSURD_OVERHEAD
) {

475 
	`¥ötf
("TEST UNSUITABLE: block overheadábsurdlyÜarge.\n");

478 i‡(
ovîhód
 > 
OVERHEAD
) {

479 
	`¥ötf
("FAIL: block overhead isÅooÜarge.\n");

483 
	`¥ötf
("Freeing blocks...\n");

484 
	`‰ì
(
x
);

485 
	`‰ì
(
y
);

487 
zsize
 = 
SMALLSIZE
 + 
MEDIUMSIZE
 + 
ovîhód
;

489 
	`¥ötf
("NowáŒoˇtög %lu byãs... shouldÑeu£Åhê•a˚.\n", 
zsize
);

490 
z
 = 
	`mÆloc
(
zsize
);

491 i‡(
z
 =
NULL
) {

492 
	`¥ötf
("FAIL: Allocation failed...\n");

496 
lz
 = (Ë
z
;

498 
	`¥ötf
("z i†0x%lx (x wa†0x%lx, y 0x%lx)\n", 
lz
, 
lx
, 
ly
);

500 i‡(
lz
==
lx
) {

501 
	`¥ötf
("Passed.\n");

504 
	`¥ötf
("Failed.\n");

507 
	`‰ì
(
z
);

508 
	}
}

524 
	$ã°567
(
ã°no
, 
£ed
)

526 c⁄° 
sizes
[8] = { 13, 17, 69, 176, 433, 871, 1150, 6060 };

528 *
±rs
[32];

529 
psizes
[32];

530 
i
, 
n
, 
size
, 
Áûed
=0;

532 
	`§™dom
(
£ed
);

533 
	`¥ötf
("SìdedÑ™domÇumbî gíî©‹ wôh %lu.\n", 
£ed
);

535 
i
=0; i<32; i++) {

536 
±rs
[
i
] = 
NULL
;

537 
psizes
[
i
] = 0;

540 
i
=0; i<100000; i++) {

541 
n
 = 
	`øndom
()%32;

542 i‡(
±rs
[
n
] =
NULL
) {

543 
size
 = 
sizes
[
	`øndom
()%8];

544 
±rs
[
n
] = 
	`mÆloc
(
size
);

545 
psizes
[
n
] = 
size
;

546 i‡(
±rs
[
n
] =
NULL
) {

547 
	`¥ötf
("\nmÆlo¯%u faûed\n", 
size
);

548 
Áûed
 = 1;

551 
	`m¨kblock
(
±rs
[
n
], 
size
,Ç, 0);

554 
size
 = 
psizes
[
n
];

555 i‡(
	`checkblock
(
±rs
[
n
], 
size
,Ç, 0)) {

556 
Áûed
 = 1;

559 
	`‰ì
(
±rs
[
n
]);

560 
±rs
[
n
] = 
NULL
;

561 
psizes
[
n
] = 0;

563 i‡(
i
%256==0) {

564 
	`¥ötf
(".");

567 
	`¥ötf
("\n");

569 
i
=0; i<32; i++) {

570 i‡(
±rs
[
i
] !
NULL
) {

571 
	`‰ì
(
±rs
[
i
]);

575 i‡(
Áûed
) {

576 
	`¥ötf
("FAILED mÆlo¯ã° %d\n", 
ã°no
);

579 
	`¥ötf
("Pas£d mÆlo¯ã° %d\n", 
ã°no
);

581 
	}
}

585 
	$ã°5
()

587 
	`¥ötf
("Beginning mallocÅest 5\n");

588 
	`ã°567
(5, 0);

589 
	}
}

593 
	$ã°6
()

595 
fd
, 
Àn
;

596 
£ed
;

598 
	`¥ötf
("Beginning mallocÅest 6\n");

600 
fd
 = 
	`›í
(
_PATH_RANDOM
, 
O_RDONLY
);

601 i‡(
fd
 < 0) {

602 
	`îr
(1, "%s", 
_PATH_RANDOM
);

604 
Àn
 = 
	`ªad
(
fd
, &
£ed
, (seed));

605 i‡(
Àn
 < 0) {

606 
	`îr
(1, "%s", 
_PATH_RANDOM
);

608 i‡(
Àn
 < ()(
£ed
)) {

609 
	`îrx
(1, "%s: Sh‹àªad", 
_PATH_RANDOM
);

611 
	`˛o£
(
fd
);

613 
	`ã°567
(6, 
£ed
);

614 
	}
}

618 
	$ã°7
()

620 
£ed
;

622 
	`¥ötf
("Beginning mallocÅest 7\n");

624 
	`¥ötf
("EnterÑandom seed: ");

625 
£ed
 = 
	`gëi
();

627 
	`ã°567
(7, 
£ed
);

628 
	}
}

633 
	mnum
;

634 c⁄° *
	mdesc
;

635 (*
	mfunc
)();

636 } 
	gã°s
[] = {

637 { 1, "Sim∂êÆloˇti⁄Åe°", 
ã°1
 },

638 { 2, "AŒoˇãáŒ mem‹y i¿®big chunk", 
ã°2
 },

639 { 3, "AŒoˇãáŒ mem‹y i¿smÆ»chunks", 
ã°3
 },

640 { 4, "Fªêli° cﬂÀscögÅe° (fú°/√xt/be°-fô o∆y)", 
ã°4
 },

641 { 5, "Såes†ã°", 
ã°5
 },

642 { 6, "R™domized såes†ã°", 
ã°6
 },

643 { 7, "Såes†ã° wôhÖ¨ticuœ∏£ed", 
ã°7
 },

644 { -1, 
NULL
, NULL }

649 
	$dŸe°
(
ä
)

651 
i
;

652 
i
=0; 
ã°s
[i].
num
>=0; i++) {

653 i‡(
ã°s
[
i
].
num
 =
ä
) {

654 
ã°s
[
i
].
	`func
();

659 
	}
}

662 
	$maö
(
¨gc
, *
¨gv
[])

664 
i
, 
ä
, 
míu
=1;

666 i‡(
¨gc
 > 1) {

667 
i
=1; i<
¨gc
; i++) {

668 
	`dŸe°
(
	`©oi
(
¨gv
[
i
]));

674 i‡(
míu
) {

675 
i
=0; 
ã°s
[i].
num
>=0; i++) {

676 
	`¥ötf
(" %2d %s\n", 
ã°s
[
i
].
num
,

677 
ã°s
[
i
].
desc
);

679 
míu
 = 0;

681 
	`¥ötf
("malloctest: ");

682 
ä
 = 
	`gëi
();

683 i‡(
ä
 < 0) {

687 i‡(
	`dŸe°
(
ä
)) {

688 
míu
 = 1;

693 
	}
}

	@userland/testbin/matmult/matmult-orig.c

48 
	~<uni°d.h
>

49 
	~<°dio.h
>

51 
	#Dim
 360

	)

55 
	#RIGHT
 46397160

	)

57 
	gA
[
Dim
][Dim];

58 
	gB
[
Dim
][Dim];

59 
	gC
[
Dim
][Dim];

62 
	$maö
()

64 
i
, 
j
, 
k
, 
r
;

66 
i
 = 0; i < 
Dim
; i++)

67 
j
 = 0; j < 
Dim
; j++) {

68 
A
[
i
][
j
] = i;

69 
B
[
i
][
j
] = j;

70 
C
[
i
][
j
] = 0;

73 
i
 = 0; i < 
Dim
; i++)

74 
j
 = 0; j < 
Dim
; j++)

75 
k
 = 0; k < 
Dim
; k++)

76 
C
[
i
][
j
] +
A
[i][
k
] * 
B
[k][j];

78 
	`¥ötf
("matmult-orig finished.\n");

79 
r
 = 
C
[
Dim
-1][Dim-1];

80 
	`¥ötf
("™swî is: %d (should bê%d)\n", 
r
, 
RIGHT
);

81 i‡(
r
 !
RIGHT
) {

82 
	`¥ötf
("FAILED\n");

85 
	`¥ötf
("Passed.\n");

88 
	}
}

	@userland/testbin/matmult/matmult.c

42 
	~<uni°d.h
>

43 
	~<°dio.h
>

45 
	#Dim
 72

	)

49 
	#RIGHT
 8772192

	)

51 
	gA
[
Dim
][Dim];

52 
	gB
[
Dim
][Dim];

53 
	gC
[
Dim
][Dim];

54 
	gT
[
Dim
][Dim][Dim];

57 
	$maö
()

59 
i
, 
j
, 
k
, 
r
;

61 
i
 = 0; i < 
Dim
; i++)

62 
j
 = 0; j < 
Dim
; j++) {

63 
A
[
i
][
j
] = i;

64 
B
[
i
][
j
] = j;

65 
C
[
i
][
j
] = 0;

68 
i
 = 0; i < 
Dim
; i++)

69 
j
 = 0; j < 
Dim
; j++)

70 
k
 = 0; k < 
Dim
; k++)

71 
T
[
i
][
j
][
k
] = 
A
[i][k] * 
B
[k][j];

73 
i
 = 0; i < 
Dim
; i++)

74 
j
 = 0; j < 
Dim
; j++)

75 
k
 = 0; k < 
Dim
; k++)

76 
C
[
i
][
j
] +
T
[i][j][
k
];

78 
r
 = 0;

79 
i
 = 0; i < 
Dim
; i++)

80 
r
 +
C
[
i
][i];

82 
	`¥ötf
("matmult finished.\n");

83 
	`¥ötf
("™swî is: %d (should bê%d)\n", 
r
, 
RIGHT
);

84 i‡(
r
 !
RIGHT
) {

85 
	`¥ötf
("FAILED\n");

88 
	`¥ötf
("Passed.\n");

90 
	}
}

	@userland/testbin/multiexec/multiexec.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<uni°d.h
>

39 
	~<îr.h
>

59 
	su£m
 {

60 
	m«me
[32];

61 
	mfd
;

66 
	$£m¸óã
(c⁄° *
èg
, 
u£m
 *
£m
)

68 
fd
;

70 
	`¢¥ötf
(
£m
->
«me
, (sem->name), "sem:parallelvm.%s.%d",

71 
èg
, ()
	`gëpid
());

73 
fd
 = 
	`›í
(
£m
->
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

74 i‡(
fd
 < 0) {

75 
	`îr
(1, "%s: cª©e", 
£m
->
«me
);

77 
	`˛o£
(
fd
);

78 
	}
}

82 
	$£m›í
(
u£m
 *
£m
)

84 
£m
->
fd
 = 
	`›í
(£m->
«me
, 
O_RDWR
, 0664);

85 i‡(
£m
->
fd
 < 0) {

86 
	`îr
(1, "%s: o≥n", 
£m
->
«me
);

88 
	}
}

92 
	$£m˛o£
(
u£m
 *
£m
)

94 
	`˛o£
(
£m
->
fd
);

95 
	}
}

99 
	$£mde°roy
(
u£m
 *
£m
)

101 
	`ªmove
(
£m
->
«me
);

102 
	}
}

106 
	$£mP
(
u£m
 *
£m
, 
size_t
 
num
)

108 i‡(
	`ªad
(
£m
->
fd
, 
NULL
, 
num
) < 0) {

109 
	`îr
(1, "%s:Ñód", 
£m
->
«me
);

111 
	}
}

115 
	$£mV
(
u£m
 *
£m
, 
size_t
 
num
)

117 i‡(
	`wrôe
(
£m
->
fd
, 
NULL
, 
num
) < 0) {

118 
	`îr
(1, "%s: wrôe", 
£m
->
«me
);

120 
	}
}

125 
	#SUBARGC_MAX
 64

	)

126 *
	gsub¨gv
[
SUBARGC_MAX
];

127 
	gsub¨gc
 = 0;

131 
	$•awn
(
njobs
)

133 
u£m
 
s1
, 
s2
;

134 
pid_t
 
pids
[
njobs
];

135 
Áûed
, 
°©us
;

136 
i
;

138 
	`£m¸óã
("1", &
s1
);

139 
	`£m¸óã
("2", &
s2
);

141 
	`¥ötf
("F‹kög %d chûdÖro˚s£s...\n", 
njobs
);

143 
i
=0; i<
njobs
; i++) {

144 
pids
[
i
] = 
	`f‹k
();

145 i‡(
pids
[
i
] == -1) {

147 
	`îr
(1, "fork");

149 i‡(
pids
[
i
] == 0) {

151 
	`£m›í
(&
s1
);

152 
	`£m›í
(&
s2
);

153 
	`£mV
(&
s1
, 1);

154 
	`£mP
(&
s2
, 1);

155 
	`£m˛o£
(&
s1
);

156 
	`£m˛o£
(&
s2
);

157 
	`execv
(
sub¨gv
[0], subargv);

158 
	`w¨n
("execv");

159 
	`_exô
(1);

163 
	`£m›í
(&
s1
);

164 
	`£m›í
(&
s2
);

165 
	`¥ötf
("Waiting for fork...\n");

166 
	`£mP
(&
s1
, 
njobs
);

167 
	`¥ötf
("StartingÅheÉxecs...\n");

168 
	`£mV
(&
s2
, 
njobs
);

170 
Áûed
 = 0;

171 
i
=0; i<
njobs
; i++) {

172 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0) < 0) {

173 
	`w¨n
("waitpid");

174 
Áûed
++;

176 i‡(
	`WIFSIGNALED
(
°©us
)) {

177 
	`w¨nx
("pid %d (child %d): Signal %d",

178 ()
pids
[
i
], i, 
	`WTERMSIG
(
°©us
));

179 
Áûed
++;

181 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) != 0) {

182 
	`w¨nx
("pid %d (child %d): Exit %d",

183 ()
pids
[
i
], i, 
	`WEXITSTATUS
(
°©us
));

184 
Áûed
++;

187 i‡(
Áûed
 > 0) {

188 
	`w¨nx
("%d chûdª¿Áûed", 
Áûed
);

191 
	`¥ötf
("Succeeded\n");

194 
	`£m˛o£
(&
s1
);

195 
	`£m˛o£
(&
s2
);

196 
	`£mde°roy
(&
s1
);

197 
	`£mde°roy
(&
s2
);

198 
	}
}

201 
	$maö
(
¨gc
, *
¨gv
[])

203 
deÁu…_¥og
[] = "/bin/pwd";

205 
njobs
 = 12;

206 
i
;

208 
i
=1; i<
¨gc
; i++) {

209 i‡(!
	`°rcmp
(
¨gv
[
i
], "-j")) {

210 
i
++;

211 i‡(
¨gv
[
i
] =
NULL
) {

212 
	`îrx
(1, "Option -jÑequiresánárgument");

214 
njobs
 = 
	`©oi
(
¨gv
[
i
]);

217 i‡(!
	`°∫cmp
(
¨gv
[
i
], "-j", 2)) {

218 
njobs
 = 
	`©oi
(
¨gv
[
i
] + 2);

222 
sub¨gv
[
sub¨gc
++] = 
¨gv
[
i
];

223 i‡(
sub¨gc
 >
SUBARGC_MAX
) {

224 
	`îrx
(1, "Too manyárguments");

229 i‡(
sub¨gc
 == 0) {

230 
sub¨gv
[
sub¨gc
++] = 
deÁu…_¥og
;

232 
sub¨gv
[
sub¨gc
] = 
NULL
;

234 
	`•awn
(
njobs
);

237 
	}
}

	@userland/testbin/palin/palin.c

84 
	~<°dio.h
>

85 
	~<°rög.h
>

87 
	g∑lödrome
[8000] =

174 
	$maö
()

176 *
°¨t
, *
íd
;

178 
	`¥ötf
("WelcomeÅoÅheÖalindromeÅester!\n");

179 
	`¥ötf
("I willÅakeáÜargeÖalindromeándÅest it.\n");

180 
	`¥ötf
("Here it is:\n");

181 
	`¥ötf
("%s\n", 
∑lödrome
);

183 
	`¥ötf
("Testing...");

185 
íd
 = 
∑lödrome
+
	`°æí
(palindrome);

186 
íd
--;

188 
°¨t
 = 
∑lödrome
; sèπ <
íd
; start++,Énd--) {

189 
	`putch¨
('.');

190 i‡(*
°¨t
 !*
íd
) {

191 
	`¥ötf
("NOTáÖalindrome\n");

196 
	`¥ötf
("ISáÖalindrome\n");

198 
	}
}

	@userland/testbin/parallelvm/parallelvm.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/waô.h
>

41 
	~<°d¨g.h
>

42 
	~<°dboﬁ.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<°dlib.h
>

46 
	~<uni°d.h
>

47 
	~<îr.h
>

49 
	#NJOBS
 24

	)

51 
	#DIM
 35

	)

52 
	#NMATS
 11

	)

53 
	#JOBSIZE
 ((
NMATS
+1)*
DIM
*DIM*())

	)

55 c⁄° 
	gright_™swîs
[
NJOBS
] = {

84 
	sm©rix
 {

85 
	mm_d©a
[
DIM
][DIM];

96 
	$ßy
(c⁄° *
fmt
, ...)

98 
buf
[256];

99 
va_li°
 
≠
;

100 
	`va_°¨t
(
≠
, 
fmt
);

101 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

102 
	`va_íd
(
≠
);

103 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
	`°æí
(buf));

104 
	}
}

110 
	$mu…ùly
(
m©rix
 *
ªs
, c⁄° m©rix *
m1
, c⁄° m©rix *
m2
)

112 
i
, 
j
, 
k
;

114 
i
=0; i<
DIM
; i++) {

115 
j
=0; j<
DIM
; j++) {

116 
vÆ
=0;

117 
k
=0; k<
DIM
; k++) {

118 
vÆ
 +
m1
->
m_d©a
[
i
][
k
]*
m2
->m_d©a[k][
j
];

120 
ªs
->
m_d©a
[
i
][
j
] = 
vÆ
;

123 
	}
}

127 
	$addeq
(
m©rix
 *
m1
, c⁄° m©rix *
m2
)

129 
i
, 
j
;

130 
i
=0; i<
DIM
; i++) {

131 
j
=0; j<
DIM
; j++) {

132 
m1
->
m_d©a
[
i
][
j
] +
m2
->m_data[i][j];

135 
	}
}

139 
	$åa˚
(c⁄° 
m©rix
 *
m1
)

141 
i
, 
t
=0;

142 
i
=0; i<
DIM
; i++) {

143 
t
 +
m1
->
m_d©a
[
i
][i];

145  
t
;

146 
	}
}

150 
m©rix
 
	gm©s
[
NMATS
];

154 
	$p›uœã_öôül_m©rixes
(
mynum
)

156 
i
,
j
;

157 
m©rix
 *
m
 = &
m©s
[0];

158 
i
=0; i<
DIM
; i++) {

159 
j
=0; j<
DIM
; j++) {

160 
m
->
m_d©a
[
i
][
j
] = 
mynum
+i-2*j;

164 
	`mu…ùly
(&
m©s
[1], &mats[0], &mats[0]);

165 
	}
}

169 
	$compuã
(
n
)

171 
m©rix
 
tmp
;

172 
i
, 
j
;

174 
i
=0,
j
=
n
-1; i<j; i++,j--) {

175 
	`mu…ùly
(&
tmp
, &
m©s
[
i
], &m©s[
j
]);

176 
	`addeq
(&
m©s
[
n
], &
tmp
);

178 
	}
}

182 
	$compuãÆl
(
mynum
)

184 
i
;

185 
	`p›uœã_öôül_m©rixes
(
mynum
);

186 
i
=2; i<
NMATS
; i++) {

187 
	`compuã
(
i
);

189 
	}
}

193 
	$™swî
()

195  
	`åa˚
(&
m©s
[
NMATS
-1]);

196 
	}
}

200 
	$go
(
mynum
)

202 
r
;

204 
	`ßy
("Pro˚s†%d (pid %dË°¨tög compuèti⁄...\n", 
mynum
,

205 (Ë
	`gëpid
());

207 
	`compuãÆl
(
mynum
);

208 
r
 = 
	`™swî
();

210 i‡(
r
 !
right_™swîs
[
mynum
]) {

211 
	`ßy
("Process %dánswer %d: FAILED, should be %d\n",

212 
mynum
, 
r
, 
right_™swîs
[mynum]);

213 
	`exô
(1);

215 
	`ßy
("Pro˚s†%dánswî %d:Öas£d\n", 
mynum
, 
r
);

216 
	`exô
(0);

217 
	}
}

237 
	su£m
 {

238 
	m«me
[32];

239 
	mfd
;

244 
	$£m¸óã
(c⁄° *
èg
, 
u£m
 *
£m
)

246 
fd
;

248 
	`¢¥ötf
(
£m
->
«me
, (sem->name), "sem:parallelvm.%s.%d",

249 
èg
, ()
	`gëpid
());

251 
fd
 = 
	`›í
(
£m
->
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

252 i‡(
fd
 < 0) {

253 
	`îr
(1, "%s: cª©e", 
£m
->
«me
);

255 
	`˛o£
(
fd
);

256 
	}
}

260 
	$£m›í
(
u£m
 *
£m
)

262 
£m
->
fd
 = 
	`›í
(£m->
«me
, 
O_RDWR
, 0664);

263 i‡(
£m
->
fd
 < 0) {

264 
	`îr
(1, "%s: o≥n", 
£m
->
«me
);

266 
	}
}

270 
	$£m˛o£
(
u£m
 *
£m
)

272 
	`˛o£
(
£m
->
fd
);

273 
	}
}

277 
	$£mde°roy
(
u£m
 *
£m
)

279 
	`ªmove
(
£m
->
«me
);

280 
	}
}

284 
	$£mP
(
u£m
 *
£m
, 
size_t
 
num
)

286 i‡(
	`ªad
(
£m
->
fd
, 
NULL
, 
num
) < 0) {

287 
	`îr
(1, "%s:Ñód", 
£m
->
«me
);

289 
	}
}

293 
	$£mV
(
u£m
 *
£m
, 
size_t
 
num
)

295 i‡(
	`wrôe
(
£m
->
fd
, 
NULL
, 
num
) < 0) {

296 
	`îr
(1, "%s: wrôe", 
£m
->
«me
);

298 
	}
}

305 
	$°©us_is_Áûuª
(
°©us
)

308 i‡(
	`WIFSIGNALED
(
°©us
)) {

311 i‡(!
	`WIFEXITED
(
°©us
)) {

315 
°©us
 = 
	`WEXITSTATUS
(status);

316  
°©us
 != 0;

317 
	}
}

321 
	$makïrocs
(
boﬁ
 
dowaô
)

323 
i
, 
°©us
, 
Áûcou¡
;

324 
u£m
 
s1
, 
s2
;

325 
pid_t
 
pids
[
NJOBS
];

327 i‡(
dowaô
) {

328 
	`£m¸óã
("1", &
s1
);

329 
	`£m¸óã
("2", &
s2
);

332 
	`¥ötf
("Job sizê≠¥oxim©ñy %lu byãs\n", (Ë
JOBSIZE
);

333 
	`¥ötf
("F‹kög %d jobs;ÅŸÆÜﬂd %luk\n", 
NJOBS
,

334 (Ë(
NJOBS
 * 
JOBSIZE
)/1024);

336 
i
=0; i<
NJOBS
; i++) {

337 
pids
[
i
] = 
	`f‹k
();

338 i‡(
pids
[
i
]<0) {

339 
	`w¨n
("fork");

341 i‡(
pids
[
i
]==0) {

343 i‡(
dowaô
) {

344 
	`ßy
("Pro˚s†%d f‹ked\n", 
i
);

345 
	`£m›í
(&
s1
);

346 
	`£m›í
(&
s2
);

347 
	`£mV
(&
s1
, 1);

348 
	`£mP
(&
s2
, 1);

349 
	`£m˛o£
(&
s1
);

350 
	`£m˛o£
(&
s2
);

352 
	`go
(
i
);

356 i‡(
dowaô
) {

357 
	`£m›í
(&
s1
);

358 
	`£m›í
(&
s2
);

359 
	`ßy
("Waiting for fork...\n");

360 
	`£mP
(&
s1
, 
NJOBS
);

361 
	`ßy
("Starting computation.\n");

362 
	`£mV
(&
s2
, 
NJOBS
);

365 
Áûcou¡
=0;

366 
i
=0; i<
NJOBS
; i++) {

367 i‡(
pids
[
i
]<0) {

368 
Áûcou¡
++;

371 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

372 
	`îr
(1, "waitpid");

374 i‡(
	`°©us_is_Áûuª
(
°©us
)) {

375 
Áûcou¡
++;

380 i‡(
Áûcou¡
>0) {

381 
	`¥ötf
("%d sub¥o˚s£†Áûed\n", 
Áûcou¡
);

382 
	`exô
(1);

384 
	`¥ötf
("Test complete\n");

386 
	`£m˛o£
(&
s1
);

387 
	`£m˛o£
(&
s2
);

388 
	`£mde°roy
(&
s1
);

389 
	`£mde°roy
(&
s2
);

390 
	}
}

393 
	$maö
(
¨gc
, *
¨gv
[])

395 
boﬁ
 
dowaô
 = 
Ál£
;

397 i‡(
¨gc
 == 0) {

400 i‡(
¨gc
 == 1) {

403 i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "-w")) {

404 
dowaô
 = 
åue
;

407 
	`¥ötf
("Usage:Öarallelvm [-w]\n");

410 
	`makïrocs
(
dowaô
);

412 
	}
}

	@userland/testbin/poisondisk/poisondisk.c

35 
	~<°döt.h
>

36 
	~<°rög.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

40 #ifde‡
HOST


41 
	~"ho°com∑t.h
"

44 
	~"disk.h
"

46 
	#POISON_BYTE
 0xa9

	)

47 
	#BLOCKSIZE
 512

	)

51 
	$pois⁄
()

53 
buf
[
BLOCKSIZE
];

54 
off_t
 
£˘‹s
, 
i
;

56 
	`mem£t
(
buf
, 
POISON_BYTE
, (buf));

58 
£˘‹s
 = 
	`diskblocks
();

59 
i
=0; i<
£˘‹s
; i++) {

60 
	`diskwrôe
(
buf
, 
i
);

62 
	}
}

65 
	$maö
(
¨gc
, *
¨gv
[])

67 i‡(
¨gc
 != 2) {

68 
	`îrx
(1, "Ußge: %†disk-image", 
¨gv
[0]);

70 
	`›ídisk
(
¨gv
[1]);

71 
	`pois⁄
();

72 
	`˛o£disk
();

74 
	}
}

	@userland/testbin/psort/psort.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/°©.h
>

41 
	~<sys/waô.h
>

42 
	~<°dio.h
>

43 
	~<°d¨g.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<as£π.h
>

47 
	~<uni°d.h
>

48 
	~<f˙é.h
>

49 
	~<î∫o.h
>

51 #i‚de‡
RANDOM_MAX


53 
	#RANDOM_MAX
 
RAND_MAX


	)

56 
	#PATH_KEYS
 "s‹tkeys"

	)

57 
	#PATH_SORTED
 "ouçut"

	)

58 
	#PATH_TESTDIR
 "ps‹tdú"

	)

59 
	#PATH_RANDOM
 "ønd:"

	)

109 
	#WORKNUM
 (96*1024)

	)

110 
	gnum¥ocs
 = 4;

111 
	gnumkeys
 = 128*1024;

114 
	gw‹k•a˚
[
WORKNUM
];

117 
	gøndom£ed
 = 15432753;

120 
off_t
 
	gc‹ª˘size
;

121 
	gchecksum
;

123 
	#NOBODY
 (-1)

	)

124 
	gme
 = 
NOBODY
;

126 c⁄° *
	g¥og«me
;

132 
	$s‹töts
(*
v
, 
num
)

134 
pivŸvÆ
, 
pivŸpoöt
, 
pivŸcou¡
;

135 
‰⁄ços
, 
ªadpos
, 
ídpos
, 
i
, 
j
;

136 
tmp
;

138 i‡(
num
 < 2) {

142 
pivŸpoöt
 = 
num
/2;

143 
pivŸvÆ
 = 
v
[
pivŸpoöt
];

144 
pivŸcou¡
 = 0;

146 
‰⁄ços
 = 0;

147 
ªadpos
 = 0;

148 
ídpos
 = 
num
;

149 
ªadpos
 < 
ídpos
) {

150 i‡(
v
[
ªadpos
] < 
pivŸvÆ
) {

151 
v
[
‰⁄ços
++] = v[
ªadpos
++];

153 i‡(
v
[
ªadpos
] =
pivŸvÆ
) {

154 
ªadpos
++;

155 
pivŸcou¡
++;

158 
tmp
 = 
v
[--
ídpos
];

159 
v
[
ídpos
] = v[
ªadpos
];

160 
v
[
ªadpos
] = 
tmp
;

163 
	`as£π
(
ªadpos
 =
ídpos
);

164 
	`as£π
(
‰⁄ços
 + 
pivŸcou¡
 =
ªadpos
);

166 
i
=
‰⁄ços
; i<
ídpos
; i++) {

167 
v
[
i
] = 
pivŸvÆ
;

170 
i
=
ídpos
, 
j
=
num
-1; i<j; i++,j--) {

171 
tmp
 = 
v
[
i
];

172 
v
[
i
] = v[
j
];

173 
v
[
j
] = 
tmp
;

176 
	`s‹töts
(
v
, 
‰⁄ços
);

177 
	`s‹töts
(&
v
[
ídpos
], 
num
-endpos);

178 
	}
}

184 
	$öô¥og«me
(c⁄° *
av0
)

186 i‡(
av0
) {

187 
¥og«me
 = 
	`°ºchr
(
av0
, '/');

188 i‡(
¥og«me
) {

189 
¥og«me
++;

192 
¥og«me
 = 
av0
;

196 
¥og«me
 = "psort";

198 
	}
}

202 
	$vscom∂aö
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
va_li°
 
≠
, 
îr
)

204 
size_t
 
pos
;

206 i‡(
me
 >= 0) {

207 
	`¢¥ötf
(
buf
, 
Àn
, "%s:Öro¯%d: ", 
¥og«me
, 
me
);

210 
	`¢¥ötf
(
buf
, 
Àn
, "%s: ", 
¥og«me
);

212 
pos
 = 
	`°æí
(
buf
);

214 
	`v¢¥ötf
(
buf
+
pos
, 
Àn
-pos, 
fmt
, 
≠
);

215 
pos
 = 
	`°æí
(
buf
);

217 i‡(
îr
 >= 0) {

218 
	`¢¥ötf
(
buf
+
pos
, 
Àn
-pos, ": %s\n", 
	`°ªº‹
(
îr
));

221 
	`¢¥ötf
(
buf
+
pos
, 
Àn
-pos, "\n");

223 
	}
}

227 
	$com∂aöx
(c⁄° *
fmt
, ...)

229 
buf
[256];

230 
va_li°
 
≠
;

231 
ssize_t
 
junk
;

233 
	`va_°¨t
(
≠
, 
fmt
);

234 
	`vscom∂aö
(
buf
, (buf), 
fmt
, 
≠
, -1);

235 
	`va_íd
(
≠
);

238 
junk
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

244 ()
junk
;

245 
	}
}

249 
	$com∂aö
(c⁄° *
fmt
, ...)

251 
buf
[256];

252 
va_li°
 
≠
;

253 
ssize_t
 
junk
;

254 
îr
 = 
î∫o
;

256 
	`va_°¨t
(
≠
, 
fmt
);

257 
	`vscom∂aö
(
buf
, (buf), 
fmt
, 
≠
, 
îr
);

258 
	`va_íd
(
≠
);

261 
junk
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

267 ()
junk
;

268 
	}
}

274 
	$do›í
(c⁄° *
∑th
, 
Êags
, 
mode
)

276 
fd
;

278 
fd
 = 
	`›í
(
∑th
, 
Êags
, 
mode
);

279 i‡(
fd
<0) {

280 
	`com∂aö
("%s", 
∑th
);

281 
	`exô
(1);

283  
fd
;

284 
	}
}

288 
	$do˛o£
(c⁄° *
∑th
, 
fd
)

290 i‡(
	`˛o£
(
fd
)) {

291 
	`com∂aö
("%s: clo£", 
∑th
);

292 
	`exô
(1);

294 
	}
}

298 
	$do¸óã
(c⁄° *
∑th
)

300 
fd
;

302 
fd
 = 
	`do›í
(
∑th
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

303 
	`do˛o£
(
∑th
, 
fd
);

304 
	}
}

308 
	$d‹emove
(c⁄° *
∑th
)

310 
n‹emove
;

312 i‡(
n‹emove
) {

316 i‡(
	`ªmove
(
∑th
) < 0) {

317 i‡(
î∫o
 =
ENOSYS
) {

319 
n‹emove
 = 1;

321 
	`com∂aö
("%s:Ñemove", 
∑th
);

323 
	}
}

326 
off_t


327 
	$gësize
(c⁄° *
∑th
)

329 
°©
 
buf
;

330 
fd
;

331 
no_°©
, 
no_f°©
;

333 i‡(!
no_°©
) {

334 i‡(
	`°©
(
∑th
, &
buf
) == 0) {

335  
buf
.
°_size
;

337 i‡(
î∫o
 !
ENOSYS
) {

338 
	`com∂aö
("%s: sèt", 
∑th
);

339 
	`exô
(1);

342 
no_°©
 = 1;

345 
fd
 = 
	`do›í
(
∑th
, 
O_RDONLY
, 0);

346 i‡(!
no_f°©
) {

347 i‡(
	`f°©
(
fd
, &
buf
) == 0) {

348 
	`˛o£
(
fd
);

349  
buf
.
°_size
;

351 i‡(
î∫o
 !
ENOSYS
) {

352 
	`com∂aö
("%s: sèt", 
∑th
);

353 
	`exô
(1);

356 
no_f°©
 = 1;

360 i‡(
	`l£ek
(
fd
, 0, 
SEEK_END
) >= 0) {

361 
buf
.
°_size
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
);

362 i‡(
buf
.
°_size
 >= 0) {

363  
buf
.
°_size
;

366 
	`com∂aö
("%s: gëtög fûêsizêwôhÜ£ek", 
∑th
);

367 
	`˛o£
(
fd
);

368 
	`exô
(1);

369 
	}
}

372 
size_t


373 
	$d‹ód
(c⁄° *
∑th
, 
fd
, *
buf
, 
size_t
 
Àn
)

375 
ªsu…
;

377 
ªsu…
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

378 i‡(
ªsu…
 < 0) {

379 
	`com∂aö
("%s:Ñód", 
∑th
);

380 
	`exô
(1);

382  (
size_t
Ë
ªsu…
;

383 
	}
}

387 
	$d€xa˘ªad
(c⁄° *
∑th
, 
fd
, *
buf
, 
size_t
 
Àn
)

389 
size_t
 
ªsu…
;

391 
ªsu…
 = 
	`d‹ód
(
∑th
, 
fd
, 
buf
, 
Àn
);

392 i‡(
ªsu…
 !
Àn
) {

393 
	`com∂aöx
("%s:Ñód: sh‹àcou¡", 
∑th
);

394 
	`exô
(1);

396 
	}
}

400 
	$dowrôe
(c⁄° *
∑th
, 
fd
, c⁄° *
buf
, 
size_t
 
Àn
)

402 
ªsu…
;

404 
ªsu…
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

405 i‡(
ªsu…
 < 0) {

406 
	`com∂aö
("%s: wrôe", 
∑th
);

407 
	`exô
(1);

409 i‡((
size_t
Ë
ªsu…
 !
Àn
) {

410 
	`com∂aöx
("%s: wrôe: sh‹àcou¡", 
∑th
);

411 
	`exô
(1);

413 
	}
}

417 
	$dﬁ£ek
(c⁄° *
«me
, 
fd
, 
off_t
 
off£t
, 
whí˚
)

419 i‡(
	`l£ek
(
fd
, 
off£t
, 
whí˚
) < 0) {

420 
	`com∂aö
("%s:Ü£ek", 
«me
);

421 
	`exô
(1);

423 
	}
}

428 
	$dochdú
(c⁄° *
∑th
)

430 i‡(
	`chdú
(
∑th
) < 0) {

431 
	`com∂aö
("%s: chdú", 
∑th
);

432 
	`exô
(1);

434 
	}
}

438 
	$domkdú
(c⁄° *
∑th
, 
mode
)

440 i‡(
	`mkdú
(
∑th
, 
mode
) < 0) {

441 
	`com∂aö
("%s: mkdú", 
∑th
);

442 
	`exô
(1);

444 
	}
}

448 
pid_t


449 
	$dof‹k
()

451 
pid_t
 
pid
;

453 
pid
 = 
	`f‹k
();

454 i‡(
pid
 < 0) {

455 
	`com∂aö
("fork");

459  
pid
;

460 
	}
}

466 
	$dowaô
(
guy
, 
pid_t
 
pid
)

468 
°©us
, 
ªsu…
;

470 
ªsu…
 = 
	`waôpid
(
pid
, &
°©us
, 0);

471 i‡(
ªsu…
 < 0) {

472 
	`com∂aö
("waitpid");

475 i‡(
	`WIFSIGNALED
(
°©us
)) {

476 
	`com∂aöx
("¥o¯%d: sig«»%d", 
guy
, 
	`WTERMSIG
(
°©us
));

479 
	`as£π
(
	`WIFEXITED
(
°©us
));

480 
°©us
 = 
	`WEXITSTATUS
(status);

481 i‡(
°©us
) {

482 
	`com∂aöx
("¥o¯%d:Éxô %d", 
guy
, 
°©us
);

486 
	}
}

490 
dof‹kÆl
(c⁄° *
pha£«me
, (*
func
)())

492 
i
, 
bad
 = 0;

493 
pid_t
 
pids
[
num¥ocs
];

495 
i
=0; i<
num¥ocs
; i++) {

496 
pids
[
i
] = 
	`dof‹k
();

497 i‡(
pids
[
i
] < 0) {

498 
bad
 = 1;

500 i‡(
pids
[
i
] == 0) {

502 
me
 = 
i
;

503 
	`func
();

504 
	`exô
(0);

508 
i
=0; i<
num¥ocs
; i++) {

509 i‡(
pids
[
i
] > 0 && 
	`dowaô
(i,Öids[i])) {

510 
bad
 = 1;

514 i‡(
bad
) {

515 
	`com∂aöx
("%†Áûed.", 
pha£«me
);

516 
	`exô
(1);

518 
	}
}

522 
	$£ekmy∂a˚
(c⁄° *
«me
, 
fd
)

524 
keys_≥r
, 
myfú°
;

525 
off_t
 
off£t
;

527 
keys_≥r
 = 
numkeys
 / 
num¥ocs
;

528 
myfú°
 = 
me
*
keys_≥r
;

529 
off£t
 = 
myfú°
 * ();

531 
	`dﬁ£ek
(
«me
, 
fd
, 
off£t
, 
SEEK_SET
);

532 
	}
}

536 
	$gëmykeys
()

538 
keys_≥r
, 
myfú°
, 
mykeys
;

540 
keys_≥r
 = 
numkeys
 / 
num¥ocs
;

541 
myfú°
 = 
me
*
keys_≥r
;

542 
mykeys
 = (
me
 < 
num¥ocs
-1Ë? 
keys_≥r
 : 
numkeys
 - 
myfú°
;

544  
mykeys
;

545 
	}
}

551 
	$checksum_fûe
(c⁄° *
∑th
)

553 
fd
;

554 
buf
[512];

555 
size_t
 
cou¡
, 
i
;

556 
sum
 = 0;

558 
fd
 = 
	`do›í
(
∑th
, 
O_RDONLY
, 0);

560 (
cou¡
 = 
	`d‹ód
(
∑th
, 
fd
, 
buf
, (buf))) > 0) {

561 
i
=0; i<
cou¡
; i++) {

562 
sum
 +(Ë
buf
[
i
];

566 
	`do˛o£
(
∑th
, 
fd
);

568  
sum
;

569 
	}
}

573 *
	g£eds
;

577 
	$gíkeys_sub
()

579 
fd
, 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
, 
vÆue
;

581 
fd
 = 
	`do›í
(
PATH_KEYS
, 
O_WRONLY
, 0);

583 
mykeys
 = 
	`gëmykeys
();

584 
	`£ekmy∂a˚
(
PATH_KEYS
, 
fd
);

586 
	`§™dom
(
£eds
[
me
]);

587 
keys_d⁄e
 = 0;

588 
keys_d⁄e
 < 
mykeys
) {

589 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

590 i‡(
keys_to_do
 > 
WORKNUM
) {

591 
keys_to_do
 = 
WORKNUM
;

594 
i
=0; i<
keys_to_do
; i++) {

595 
vÆue
 = 
	`øndom
();

598 
	`as£π
(
vÆue
 >= 0);

599 
	`as£π
(
vÆue
 <
RANDOM_MAX
);

602 
vÆue
 =0 || vÆuê=
RANDOM_MAX
) {

603 
vÆue
 = 
	`øndom
();

606 
w‹k•a˚
[
i
] = 
vÆue
;

609 
	`dowrôe
(
PATH_KEYS
, 
fd
, 
w‹k•a˚
, 
keys_to_do
*());

610 
keys_d⁄e
 +
keys_to_do
;

613 
	`do˛o£
(
PATH_KEYS
, 
fd
);

614 
	}
}

618 
	$gíkeys
()

620 
£ed•a˚
[
num¥ocs
];

621 
i
;

624 
	`do¸óã
(
PATH_KEYS
);

627 
	`§™dom
(
øndom£ed
);

628 
i
=0; i<
num¥ocs
; i++) {

629 
£ed•a˚
[
i
] = 
	`øndom
();

633 
	`com∂aöx
("Gíî©ög %d i¡egî†usög %dÖrocs", 
numkeys
, 
num¥ocs
);

634 
£eds
 = 
£ed•a˚
;

635 
	`dof‹kÆl
("Inôüliz©i⁄", 
gíkeys_sub
);

636 
£eds
 = 
NULL
;

639 i‡(
	`gësize
(
PATH_KEYS
Ë!
c‹ª˘size
) {

640 
	`com∂aöx
("%s: fûêi†wr⁄g size", 
PATH_KEYS
);

641 
	`exô
(1);

645 
	`com∂aöx
("ChecksummingÅhe data (using oneÖroc)");

646 
checksum
 = 
	`checksum_fûe
(
PATH_KEYS
);

647 
	`com∂aöx
("Checksum o‡uns‹ãd keys: %ld", 
checksum
);

648 
	}
}

654 
	$bö«me
(
a
, 
b
)

656 
rv
[32];

657 
	`¢¥ötf
(
rv
, ‘v), "bö-%d-%d", 
a
, 
b
);

658  
rv
;

659 
	}
}

663 
	$mîged«me
(
a
)

665 
rv
[32];

666 
	`¢¥ötf
(
rv
, ‘v), "mîged-%d", 
a
);

667  
rv
;

668 
	}
}

672 
	$bö
()

674 
öfd
, 
outfds
[
num¥ocs
];

675 c⁄° *
«me
;

676 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
;

677 
key
, 
pivŸ
, 
bönum
;

679 
öfd
 = 
	`do›í
(
PATH_KEYS
, 
O_RDONLY
, 0);

681 
mykeys
 = 
	`gëmykeys
();

682 
	`£ekmy∂a˚
(
PATH_KEYS
, 
öfd
);

684 
i
=0; i<
num¥ocs
; i++) {

685 
«me
 = 
	`bö«me
(
me
, 
i
);

686 
outfds
[
i
] = 
	`do›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

689 
pivŸ
 = (
RANDOM_MAX
 / 
num¥ocs
);

691 
keys_d⁄e
 = 0;

692 
keys_d⁄e
 < 
mykeys
) {

693 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

694 i‡(
keys_to_do
 > 
WORKNUM
) {

695 
keys_to_do
 = 
WORKNUM
;

698 
	`d€xa˘ªad
(
PATH_KEYS
, 
öfd
, 
w‹k•a˚
,

699 
keys_to_do
 * ());

701 
i
=0; i<
keys_to_do
; i++) {

702 
key
 = 
w‹k•a˚
[
i
];

704 
bönum
 = 
key
 / 
pivŸ
;

705 i‡(
key
 <= 0) {

706 
	`com∂aöx
("¥o¯%d: g¨bagêkey %d", 
me
, 
key
);

707 
key
 = 0;

709 
	`as£π
(
bönum
 >= 0);

710 
	`as£π
(
bönum
 < 
num¥ocs
);

711 
	`dowrôe
("bö", 
outfds
[
bönum
], &
key
, (key));

714 
keys_d⁄e
 +
keys_to_do
;

716 
	`do˛o£
(
PATH_KEYS
, 
öfd
);

718 
i
=0; i<
num¥ocs
; i++) {

719 
	`do˛o£
(
	`bö«me
(
me
, 
i
), 
outfds
[i]);

721 
	}
}

725 
	$s‹tbös
()

727 c⁄° *
«me
;

728 
i
, 
fd
;

729 
off_t
 
bösize
;

731 
i
=0; i<
num¥ocs
; i++) {

732 
«me
 = 
	`bö«me
(
me
, 
i
);

733 
bösize
 = 
	`gësize
(
«me
);

734 i‡(
bösize
 % () != 0) {

735 
	`com∂aöx
("%s: bö sizê%ldÇÿgood", 
«me
,

736 (Ë
bösize
);

737 
	`exô
(1);

739 i‡(
bösize
 > (
off_t
Ë(
w‹k•a˚
)) {

740 
	`com∂aöx
("¥o¯%d: %s: böÅoÿœrge", 
me
, 
«me
);

741 
	`exô
(1);

744 
fd
 = 
	`do›í
(
«me
, 
O_RDWR
, 0);

745 
	`d€xa˘ªad
(
«me
, 
fd
, 
w‹k•a˚
, 
bösize
);

747 
	`s‹töts
(
w‹k•a˚
, 
bösize
/());

749 
	`dﬁ£ek
(
«me
, 
fd
, 0, 
SEEK_SET
);

750 
	`dowrôe
(
«me
, 
fd
, 
w‹k•a˚
, 
bösize
);

751 
	`do˛o£
(
«me
, 
fd
);

753 
	}
}

757 
	$mîgebös
()

759 
öfds
[
num¥ocs
], 
outfd
;

760 
vÆues
[
num¥ocs
], 
ªady
[numprocs];

761 c⁄° *
«me
, *
ouäame
;

762 
i
, 
ªsu…
;

763 
numªady
, 
∂a˚
, 
vÆ
, 
w‹knum
;

765 
ouäame
 = 
	`mîged«me
(
me
);

766 
outfd
 = 
	`do›í
(
ouäame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

768 
i
=0; i<
num¥ocs
; i++) {

769 
«me
 = 
	`bö«me
(
i
, 
me
);

770 
öfds
[
i
] = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

771 
vÆues
[
i
] = 0;

772 
ªady
[
i
] = 0;

775 
w‹knum
 = 0;

778 
numªady
 = 0;

779 
i
=0; i<
num¥ocs
; i++) {

780 i‡(
öfds
[
i
] < 0) {

784 i‡(!
ªady
[
i
]) {

785 
ªsu…
 = 
	`d‹ód
("bö", 
öfds
[
i
],

786 &
vÆ
, ());

787 i‡(
ªsu…
 == 0) {

788 
	`do˛o£
("bö", 
öfds
[
i
]);

789 
öfds
[
i
] = -1;

792 i‡((
size_t
Ë
ªsu…
 != ()) {

793 
	`com∂aöx
("%s:Ñead: short count",

794 
	`bö«me
(
i
, 
me
));

795 
	`exô
(1);

797 
vÆues
[
i
] = 
vÆ
;

798 
ªady
[
i
] = 1;

800 
numªady
++;

802 i‡(
numªady
 == 0) {

807 
∂a˚
 = -1;

808 
i
=0; i<
num¥ocs
; i++) {

809 i‡(!
ªady
[
i
]) {

812 i‡(
∂a˚
 < 0 || 
vÆues
[
i
] < 
vÆ
) {

813 
vÆ
 = 
vÆues
[
i
];

814 
∂a˚
 = 
i
;

817 
	`as£π
(
∂a˚
 >= 0);

819 
w‹k•a˚
[
w‹knum
++] = 
vÆ
;

820 i‡(
w‹knum
 >
WORKNUM
) {

821 
	`as£π
(
w‹knum
 =
WORKNUM
);

822 
	`dowrôe
(
ouäame
, 
outfd
, 
w‹k•a˚
,

823 
w‹knum
 * ());

824 
w‹knum
 = 0;

826 
ªady
[
∂a˚
] = 0;

829 
	`dowrôe
(
ouäame
, 
outfd
, 
w‹k•a˚
, 
w‹knum
 * ());

830 
	`do˛o£
(
ouäame
, 
outfd
);

832 
i
=0; i<
num¥ocs
; i++) {

833 
	`as£π
(
öfds
[
i
] < 0);

835 
	}
}

839 
	$as£mbÀ
()

841 
off_t
 
mypos
;

842 
i
, 
fd
;

843 c⁄° *
¨gs
[3];

845 
mypos
 = 0;

846 
i
=0; i<
me
; i++) {

847 
mypos
 +
	`gësize
(
	`mîged«me
(
i
));

850 
fd
 = 
	`do›í
(
PATH_SORTED
, 
O_WRONLY
, 0);

851 
	`dﬁ£ek
(
PATH_SORTED
, 
fd
, 
mypos
, 
SEEK_SET
);

853 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) < 0) {

854 
	`com∂aö
("dup2");

855 
	`exô
(1);

858 
	`do˛o£
(
PATH_SORTED
, 
fd
);

860 
¨gs
[0] = "cat";

861 
¨gs
[1] = 
	`mîged«me
(
me
);

862 
¨gs
[2] = 
NULL
;

863 
	`execv
("/bö/ˇt", (**Ë
¨gs
);

864 
	`com∂aö
("/bin/cat:Éxec");

865 
	`exô
(1);

866 
	}
}

870 
	$checksize_bös
()

872 
off_t
 
tŸsize
;

873 
i
, 
j
;

875 
tŸsize
 = 0;

876 
i
=0; i<
num¥ocs
; i++) {

877 
j
=0; j<
num¥ocs
; j++) {

878 
tŸsize
 +
	`gësize
(
	`bö«me
(
i
, 
j
));

881 i‡(
tŸsize
 !
c‹ª˘size
) {

882 
	`com∂aö
("Sum of bin sizes is wrong (%ld, should be %ld)",

883 (Ë
tŸsize
, (Ë
c‹ª˘size
);

884 
	`exô
(1);

886 
	}
}

890 
	$checksize_mîge
()

892 
off_t
 
tŸsize
;

893 
i
;

895 
tŸsize
 = 0;

896 
i
=0; i<
num¥ocs
; i++) {

897 
tŸsize
 +
	`gësize
(
	`mîged«me
(
i
));

899 i‡(
tŸsize
 !
c‹ª˘size
) {

900 
	`com∂aö
("Sum of merged sizes is wrong (%ld, should be %ld)",

901 (Ë
tŸsize
, (Ë
c‹ª˘size
);

902 
	`exô
(1);

904 
	}
}

908 
	$s‹t
()

910 
s‹ãdsum
;

911 
i
, 
j
;

914 
	`com∂aöx
("Tossing into %d bins using %dÖrocs",

915 
num¥ocs
*numprocs,Çumprocs);

916 
	`dof‹kÆl
("Tossög", 
bö
);

917 
	`checksize_bös
();

918 
	`com∂aöx
("DoneÅossing into bins.");

921 
	`com∂aöx
("Sorting %d bins using %dÖrocs",

922 
num¥ocs
*numprocs,Çumprocs);

923 
	`dof‹kÆl
("S‹tög", 
s‹tbös
);

924 
	`checksize_bös
();

925 
	`com∂aöx
("Done sortingÅhe bins.");

928 
	`com∂aöx
("Merging %d bins using %dÖrocs",

929 
num¥ocs
*numprocs,Çumprocs);

930 
	`dof‹kÆl
("Mîgög", 
mîgebös
);

931 
	`checksize_mîge
();

932 
	`com∂aöx
("Done mergingÅhe bins.");

935 
i
=0; i<
num¥ocs
; i++) {

936 
j
=0; j<
num¥ocs
; j++) {

937 
	`d‹emove
(
	`bö«me
(
i
, 
j
));

942 
	`com∂aöx
("As£mblög ouçuàfûêusög %dÖrocs", 
num¥ocs
);

943 
	`do¸óã
(
PATH_SORTED
);

944 
	`dof‹kÆl
("FöÆás£mbly", 
as£mbÀ
);

945 i‡(
	`gësize
(
PATH_SORTED
Ë!
c‹ª˘size
) {

946 
	`com∂aöx
("%s: fûêi†wr⁄g size", 
PATH_SORTED
);

947 
	`exô
(1);

951 
i
=0; i<
num¥ocs
; i++) {

952 
	`d‹emove
(
	`mîged«me
(
i
));

956 
	`com∂aöx
("ChecksummingÅhe output (using oneÖroc)");

957 
s‹ãdsum
 = 
	`checksum_fûe
(
PATH_SORTED
);

958 
	`com∂aöx
("Checksum o‡s‹ãd keys: %ld", 
s‹ãdsum
);

960 i‡(
s‹ãdsum
 !
checksum
) {

961 
	`com∂aöx
("Sums doÇot match");

962 
	`exô
(1);

964 
	}
}

970 
	$vÆid«me
(
a
)

972 
rv
[32];

973 
	`¢¥ötf
(
rv
, ‘v), "vÆid-%d", 
a
);

974  
rv
;

975 
	}
}

979 
	$checksize_vÆid
()

981 
off_t
 
tŸvsize
, 
c‹ª˘vsize
;

982 
i
;

984 
c‹ª˘vsize
 = (
off_t
Ë
num¥ocs
*2*();

986 
tŸvsize
 = 0;

987 
i
=0; i<
num¥ocs
; i++) {

988 
tŸvsize
 +
	`gësize
(
	`vÆid«me
(
i
));

990 i‡(
tŸvsize
 !
c‹ª˘vsize
) {

991 
	`com∂aöx
("Sum of validation sizes is wrong "

993 (Ë
tŸvsize
, (Ë
c‹ª˘vsize
);

994 
	`exô
(1);

996 
	}
}

1000 
	$dovÆid©e
()

1002 c⁄° *
«me
;

1003 
fd
, 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
;

1004 
key
, 
smÆÀ°
, 
œrge°
;

1006 
«me
 = 
PATH_SORTED
;

1007 
fd
 = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

1009 
mykeys
 = 
	`gëmykeys
();

1010 
	`£ekmy∂a˚
(
«me
, 
fd
);

1012 
smÆÀ°
 = 
RANDOM_MAX
;

1013 
œrge°
 = 0;

1015 
keys_d⁄e
 = 0;

1016 
keys_d⁄e
 < 
mykeys
) {

1017 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

1018 i‡(
keys_to_do
 > 
WORKNUM
) {

1019 
keys_to_do
 = 
WORKNUM
;

1022 
	`d€xa˘ªad
(
«me
, 
fd
, 
w‹k•a˚
, 
keys_to_do
 * ());

1024 
i
=0; i<
keys_to_do
; i++) {

1025 
key
 = 
w‹k•a˚
[
i
];

1027 i‡(
key
 < 0) {

1028 
	`com∂aö
("%s: foundÇeg©ivêkey", 
«me
);

1029 
	`exô
(1);

1031 i‡(
key
 == 0) {

1032 
	`com∂aö
("%s: found zîÿkey", 
«me
);

1033 
	`exô
(1);

1035 i‡(
key
 >
RANDOM_MAX
) {

1036 
	`com∂aö
("%s: foundÅoo-œrgêkey", 
«me
);

1037 
	`exô
(1);

1040 i‡(
key
 < 
smÆÀ°
) {

1041 
smÆÀ°
 = 
key
;

1043 i‡(
key
 > 
œrge°
) {

1044 
œrge°
 = 
key
;

1048 
keys_d⁄e
 +
keys_to_do
;

1050 
	`do˛o£
(
«me
, 
fd
);

1052 
«me
 = 
	`vÆid«me
(
me
);

1053 
fd
 = 
	`do›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

1054 
	`dowrôe
(
«me
, 
fd
, &
smÆÀ°
, (smallest));

1055 
	`dowrôe
(
«me
, 
fd
, &
œrge°
, (largest));

1056 
	`do˛o£
(
«me
, 
fd
);

1057 
	}
}

1061 
	$vÆid©e
()

1063 
smÆÀ°
, 
œrge°
, 
¥ev_œrge°
;

1064 
i
, 
fd
;

1065 c⁄° *
«me
;

1067 
	`com∂aöx
("VÆid©ögÅhês‹ãd d©®usög %dÖrocs", 
num¥ocs
);

1068 
	`dof‹kÆl
("VÆid©i⁄", 
dovÆid©e
);

1069 
	`checksize_vÆid
();

1071 
¥ev_œrge°
 = 1;

1073 
i
=0; i<
num¥ocs
; i++) {

1074 
«me
 = 
	`vÆid«me
(
i
);

1075 
fd
 = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

1077 
	`d€xa˘ªad
(
«me
, 
fd
, &
smÆÀ°
, ());

1078 
	`d€xa˘ªad
(
«me
, 
fd
, &
œrge°
, ());

1080 i‡(
smÆÀ°
 < 1) {

1081 
	`com∂aöx
("VÆid©i⁄: block %d: bad SMALLEST", 
i
);

1082 
	`exô
(1);

1084 i‡(
œrge°
 >
RANDOM_MAX
) {

1085 
	`com∂aöx
("VÆid©i⁄: block %d: bad LARGEST", 
i
);

1086 
	`exô
(1);

1088 i‡(
smÆÀ°
 > 
œrge°
) {

1089 
	`com∂aöx
("Validation: block %d: SMALLEST > LARGEST",

1090 
i
);

1091 
	`exô
(1);

1094 i‡(
smÆÀ°
 < 
¥ev_œrge°
) {

1095 
	`com∂aö
("Validation: block %d smallest key %d",

1096 
i
, 
smÆÀ°
);

1097 
	`com∂aö
("Validation:Örevious blockÜargest key %d",

1098 
¥ev_œrge°
);

1099 
	`com∂aö
("Validation failed");

1100 
	`exô
(1);

1105 
i
=0; i<
num¥ocs
; i++) {

1106 
	`d‹emove
(
	`vÆid«me
(
i
));

1108 
	}
}

1114 
	$£tdú
()

1117 
	`domkdú
(
PATH_TESTDIR
, 0775);

1118 
	`dochdú
(
PATH_TESTDIR
);

1120 
	}
}

1124 
	$un£tdú
()

1126 
	`d‹emove
(
PATH_KEYS
);

1127 
	`d‹emove
(
PATH_SORTED
);

1129 
	`dochdú
("..");

1131 i‡(
	`rmdú
(
PATH_TESTDIR
) < 0) {

1132 
	`com∂aö
("%s:Ñmdú", 
PATH_TESTDIR
);

1136 
	}
}

1142 
	$øndomize
()

1144 
fd
;

1146 
fd
 = 
	`do›í
(
PATH_RANDOM
, 
O_RDONLY
, 0);

1147 
	`d€xa˘ªad
(
PATH_RANDOM
, 
fd
, &
øndom£ed
, (randomseed));

1148 
	`do˛o£
(
PATH_RANDOM
, 
fd
);

1149 
	}
}

1153 
	$ußge
()

1155 
	`com∂aö
("Ußge: %†[-∞¥ocs] [-k keys] [-†£ed] [-r]", 
¥og«me
);

1156 
	`exô
(1);

1157 
	}
}

1161 
	$dﬂrgs
(
¨gc
, *
¨gv
[])

1163 
i
, 
ch
, 
vÆ
, 
¨g
;

1165 
i
=1; i<
¨gc
; i++) {

1166 i‡(
¨gv
[
i
][0] != '-') {

1167 
	`ußge
();

1170 
ch
 = 
¨gv
[
i
][1];

1171 
ch
) {

1172 'p': 
¨g
 = 1; ;

1173 'k': 
¨g
 = 1; ;

1174 's': 
¨g
 = 1; ;

1175 'r': 
¨g
 = 0; ;

1176 : 
	`ußge
(); ;

1178 i‡(
¨g
) {

1179 i‡(
¨gv
[
i
][2]) {

1180 
vÆ
 = 
	`©oi
(
¨gv
[
i
]+2);

1183 
i
++;

1184 i‡(!
¨gv
[
i
]) {

1185 
	`com∂aö
("Option -%cÑequiresán "

1186 "¨gumít", 
ch
);

1187 
	`exô
(1);

1189 
vÆ
 = 
	`©oi
(
¨gv
[
i
]);

1191 
ch
) {

1192 'p': 
num¥ocs
 = 
vÆ
; ;

1193 'k': 
numkeys
 = 
vÆ
; ;

1194 's': 
øndom£ed
 = 
vÆ
; ;

1195 : 
	`as£π
(0); ;

1199 
ch
) {

1200 'r': 
	`øndomize
(); ;

1201 : 
	`as£π
(0); ;

1205 
	}
}

1208 
	$maö
(
¨gc
, *
¨gv
[])

1210 
	`öô¥og«me
(
¨gc
 > 0 ? 
¨gv
[0] : 
NULL
);

1212 
	`dﬂrgs
(
¨gc
, 
¨gv
);

1213 
c‹ª˘size
 = (
off_t
Ë(
numkeys
*());

1215 
	`£tdú
();

1217 
	`gíkeys
();

1218 
	`s‹t
();

1219 
	`vÆid©e
();

1220 
	`com∂aöx
("Succeeded.");

1222 
	`un£tdú
();

1225 
	}
}

	@userland/testbin/quinthuge/quinthuge.c

38 
	~<ã°/quöt.h
>

41 
	$maö
()

43 
	`quöt
("/testbin/huge");

45 
	}
}

	@userland/testbin/quintmat/quintmat.c

38 
	~<ã°/quöt.h
>

41 
	$maö
()

43 
	`quöt
("/testbin/matmult");

45 
	}
}

	@userland/testbin/quintsort/quintsort.c

38 
	~<ã°/quöt.h
>

41 
	$maö
()

43 
	`quöt
("/testbin/sort");

45 
	}
}

	@userland/testbin/randcall/extern.h

30 
	~<sys/ty≥s.h
>

32 *
ønd±r
();

33 
øndöt
();

34 
off_t
 
øndoff
();

35 
size_t
 
øndsize
();

37 
åyˇŒs
(
as°
, 
dof‹k
, 
cou¡
);

	@userland/testbin/randcall/main.c

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

32 
	~<°rög.h
>

34 
	~"exã∫.h
"

38 
	$øndch¨
(*
c
)

40 #i‡
RAND_MAX
 != 0x7fffffff

44 
lbôs
 = 0;

45 
 um
 = 0;

47 
bô
;

48 
˘
 = 0;

50 *
c
 = 0;

52 
˘
 < 
CHAR_BIT
) {

53 i‡(
 um
==0) {

54 
lbôs
 = 
	`øndom
();

55 
 um
 = 31;

58 
bô
 = 
lbôs
 & 1;

59 i‡(
bô
) {

60 (*
c
) |= 1;

62 (*
c
) <<= 1;

63 
˘
++;

64 
lbôs
 >>= 1;

65 
 um
--;

67 
	}
}

71 
	$fûÃ™d
(*
p
, 
size_t
 
Àn
)

73 
size_t
 
i
;

74 *
˝
 = 
p
;

75 
i
=0; i<
Àn
; i++) {

76 
	`øndch¨
(&
˝
[
i
]);

78 
	}
}

81 
	$ønd±r
()

83 *
x
;

84 
	`fûÃ™d
(&
x
, (x));

85  
x
;

86 
	}
}

89 
	$øndöt
()

91 
x
;

92 
	`fûÃ™d
(&
x
, (x));

93  
x
;

94 
	}
}

96 
off_t


97 
	$øndoff
()

99 
off_t
 
x
;

100 
	`fûÃ™d
(&
x
, (x));

101  
x
;

102 
	}
}

104 
size_t


105 
	$øndsize
()

107 
size_t
 
x
;

108 
	`fûÃ™d
(&
x
, (x));

109  
x
;

110 
	}
}

114 
	$ußge
()

116 
	`¥ötf
("Usage:Ñandcall [-f] [-c count] [-r seed] 2|3|4|all\n");

117 
	`¥ötf
(" -f suppress forking\n");

118 
	`¥ötf
(" -c set iteration count (default 100)\n");

119 
	`¥ötf
(" -r setÖseudorandom seed (default 0)\n");

120 
	`exô
(1);

121 
	}
}

124 
	$maö
(
¨gc
, *
¨gv
[])

126 
cou¡
=100, 
£ed
 = 0, 
dof‹k
 = 1;

127 
™
, 
i
;

129 
i
=1; i<
¨gc
; i++) {

130 i‡(!
	`°rcmp
(
¨gv
[
i
], "-f")) {

131 
dof‹k
 = 0;

133 i‡(!
	`°rcmp
(
¨gv
[
i
], "-c"Ë&& i<
¨gc
-1) {

134 
cou¡
 = 
	`©oi
(
¨gv
[++
i
]);

136 i‡(!
	`°rcmp
(
¨gv
[
i
], "-r"Ë&& i<
¨gc
-1) {

137 
£ed
 = 
	`©oi
(
¨gv
[++
i
]);

139 i‡(
¨gv
[
i
][0] == '-') {

140 
	`ußge
();

146 i‡(
i
 !
¨gc
-1) {

147 
	`ußge
();

150 i‡(!
	`°rcmp
(
¨gv
[
i
], "all")) {

151 
™
 = 5;

154 
™
 = 
	`©oi
(
¨gv
[
i
]);

155 i‡(
™
 <2 ||án > 4) {

156 
	`ußge
();

160 
	`¥ötf
("Sìd: %d Cou¡: %d\n", 
£ed
, 
cou¡
);

162 
	`§™dom
(
£ed
);

163 
	`åyˇŒs
(
™
, 
dof‹k
, 
cou¡
);

166 
	}
}

	@userland/testbin/redirect/redirect.c

42 
	~<°dio.h
>

43 
	~<°rög.h
>

44 
	~<uni°d.h
>

45 
	~<îr.h
>

47 
	#PATH_CAT
 "/bö/ˇt"

	)

48 
	#INFILE
 "ªdúe˘.ö"

	)

49 
	#OUTFILE
 "ªdúe˘.out"

	)

51 c⁄° 
	g¶og™
[] = "CECIDI, ET NON SURGERE POSSUM!\n";

55 
	$do›í
(c⁄° *
∑th
, 
›íÊags
)

57 
fd
;

59 
fd
 = 
	`›í
(
∑th
, 
›íÊags
, 0664);

60 i‡(
fd
 < 0) {

61 
	`îr
(1, "%s", 
∑th
);

63  
fd
;

64 
	}
}

68 
	$dodup2
(
ofd
, 
nfd
, c⁄° *
fûe
)

70 
r
;

72 
r
 = 
	`dup2
(
ofd
, 
nfd
);

73 i‡(
r
 < 0) {

74 
	`îr
(1, "%s: dup2", 
fûe
);

76 i‡(
r
 !
nfd
) {

77 
	`îrx
(1, "%s: dup2: Ex≥˘ed %d, gŸ %d", 
nfd
, 
r
);

79 
	}
}

83 
	$do˛o£
(
fd
, c⁄° *
fûe
)

85 i‡(
	`˛o£
(
fd
)) {

86 
	`w¨nx
("%s: clo£", 
fûe
);

88 
	}
}

92 
	$mkfûe
()

94 
fd
;

95 
ssize_t
 
r
;

97 
fd
 = 
	`do›í
(
INFILE
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

99 
r
 = 
	`wrôe
(
fd
, 
¶og™
, 
	`°æí
(slogan));

100 i‡(
r
 < 0) {

101 
	`îr
(1, "%s: wrôe", 
INFILE
);

103 i‡((
size_t
)
r
 !
	`°æí
(
¶og™
)) {

104 
	`îrx
(1, "%s: write: Short count (got %zd,Éxpected %zu)",

105 
INFILE
, 
r
, 
	`°æí
(
¶og™
));

108 
	`do˛o£
(
fd
, 
INFILE
);

109 
	}
}

113 
	$chkfûe
()

115 
buf
[256];

116 
ssize_t
 
r
;

117 
fd
;

119 
fd
 = 
	`do›í
(
OUTFILE
, 
O_RDONLY
);

121 
r
 = 
	`ªad
(
fd
, 
buf
, (buf));

122 i‡(
r
 < 0) {

123 
	`îr
(1, "%s:Ñód", 
OUTFILE
);

125 i‡(
r
 == 0) {

126 
	`îrx
(1, "%s:Ñód: U√x≥˘ed EOF", 
OUTFILE
);

128 i‡((
size_t
)
r
 !
	`°æí
(
¶og™
)) {

129 
	`îrx
(1, "%s:Ñead: Short count (got %zd,Éxpected %zu)",

130 
OUTFILE
, 
r
, 
	`°æí
(
¶og™
));

133 
	`do˛o£
(
fd
, 
OUTFILE
);

134 
	}
}

138 
	$ˇt
()

140 
pid_t
 
pid
;

141 
rfd
, 
wfd
, 
ªsu…
, 
°©us
;

142 c⁄° *
¨gs
[2];

144 
rfd
 = 
	`do›í
(
INFILE
, 
O_RDONLY
);

145 
wfd
 = 
	`do›í
(
OUTFILE
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

147 
pid
 = 
	`f‹k
();

148 i‡(
pid
 < 0) {

149 
	`îr
(1, "fork");

152 i‡(
pid
 == 0) {

154 
	`dodup2
(
rfd
, 
STDIN_FILENO
, 
INFILE
);

155 
	`dodup2
(
wfd
, 
STDOUT_FILENO
, 
OUTFILE
);

156 
	`do˛o£
(
rfd
, 
INFILE
);

157 
	`do˛o£
(
wfd
, 
OUTFILE
);

158 
¨gs
[0] = "cat";

159 
¨gs
[1] = 
NULL
;

160 
	`execv
(
PATH_CAT
, (**)
¨gs
);

161 
	`w¨n
("%s:Éxecv", 
PATH_CAT
);

162 
	`_exô
(1);

166 
	`do˛o£
(
rfd
, 
INFILE
);

167 
	`do˛o£
(
wfd
, 
OUTFILE
);

169 
ªsu…
 = 
	`waôpid
(
pid
, &
°©us
, 0);

170 i‡(
ªsu…
 == -1) {

171 
	`îr
(1, "waitpid");

173 i‡(
	`WIFSIGNALED
(
°©us
)) {

174 
	`îrx
(1, "pid %d: Sig«»%d", ()
pid
, 
	`WTERMSIG
(
°©us
));

176 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) != 0) {

177 
	`îrx
(1, "pid %d: Exô %d", ()
pid
, 
	`WEXITSTATUS
(
°©us
));

179 
	}
}

182 
	$maö
()

184 
	`¥ötf
("Cª©ög %s...\n", 
INFILE
);

185 
	`mkfûe
();

187 
	`¥ötf
("Ru¬ög c© < %†> %s\n", 
INFILE
, 
OUTFILE
);

188 
	`ˇt
();

190 
	`¥ötf
("Checkög %s...\n", 
OUTFILE
);

191 
	`chkfûe
();

193 
	`¥ötf
("Passed.\n");

194 ()
	`ªmove
(
INFILE
);

195 ()
	`ªmove
(
OUTFILE
);

197 
	}
}

	@userland/testbin/rmdirtest/rmdirtest.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/°©.h
>

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<î∫o.h
>

46 
	~<limôs.h
>

47 
	~<îr.h
>

50 c⁄° 
	gã°dú
[] = "testdir";

51 
	g°¨çoöt
[
PATH_MAX
 - (
ã°dú
)];

60 
	$°¨tup
()

62 i‡(
	`gëcwd
(
°¨çoöt
, (°¨çoöt))==
NULL
) {

63 
	`îr
(1, "getcwd (not inÅest dir)");

66 i‡(
	`mkdú
(
ã°dú
, 0775) < 0) {

67 
	`îr
(1, "%s: mkdú", 
ã°dú
);

70 i‡(
	`chdú
(
ã°dú
) < 0) {

71 
	`îr
(1, "%s: chdú", 
ã°dú
);

73 
	}
}

85 
	$kûldú
()

87 
tmp
[
PATH_MAX
];

89 
	`¢¥ötf
(
tmp
, —mp), "%s/%s", 
°¨çoöt
, 
ã°dú
);

90 i‡(
	`rmdú
(
tmp
)<0) {

91 
	`îr
(1, "%s:Ñmdú", 
tmp
);

93 
	}
}

102 
	$föish
()

104 i‡(
	`chdú
(
°¨çoöt
)<0) {

105 
	`îr
(1, "%s: chdú", 
°¨çoöt
);

107 
	}
}

117 
	$ã°1
()

119 
	`¥ötf
("Makög %s\n", 
ã°dú
);

120 
	`°¨tup
();

122 
	`¥ötf
("Removög %†whûêö it\n", 
ã°dú
);

123 
	`kûldú
();

125 
	`¥ötf
("LeavingÅheÅest directory\n");

126 
	`föish
();

127 
	}
}

135 
	$ã°2
()

137 
fd
;

139 
	`¥ötf
("NowÅrying withÅhe directory open...\n");

140 
	`°¨tup
();

141 
fd
 = 
	`›í
(".", 
O_RDONLY
);

142 i‡(
fd
<0) {

143 
	`îr
(1, ".: open");

145 
	`kûldú
();

146 
	`föish
();

149 i‡(
	`˛o£
(
fd
)<0) {

150 
	`îr
(1, "ªmoved %s: clo£", 
ã°dú
);

152 
	}
}

160 
	$ã°3
()

162 
buf
[
PATH_MAX
];

163 
fd
;

165 
	`¥ötf
("Checking if .ÉxistsáfterÑmdir\n");

166 
	`°¨tup
();

167 
	`kûldú
();

169 
fd
 = 
	`›í
(".", 
O_RDONLY
);

170 i‡(
fd
<0) {

171 
î∫o
) {

172 
EINVAL
:

173 
EIO
:

174 
ENOENT
:

177 
	`îr
(1, ".");

182 
	`˛o£
(
fd
);

185 
fd
 = 
	`›í
("..", 
O_RDONLY
);

186 i‡(
fd
<0) {

187 
î∫o
) {

188 
EINVAL
:

189 
EIO
:

190 
ENOENT
:

193 
	`îr
(1, "..");

198 
	`w¨nx
("..: openableáfterÑmdir - might be bad");

199 
	`˛o£
(
fd
);

202 
	`¢¥ötf
(
buf
, (buf), "../%s", 
ã°dú
);

203 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

204 i‡(
fd
<0) {

205 
î∫o
) {

206 
EINVAL
:

207 
EIO
:

208 
ENOENT
:

211 
	`îr
(1, "%s", 
buf
);

216 
	`îrx
(1, "%s: w‹k†a·îÑmdú", 
buf
);

219 
	`föish
();

220 
	}
}

228 
	$ã°4
()

230 
buf
[4096];

231 
fd
;

233 
	`¥ötf
("Checking if creating files worksáfterÑmdir...\n");

234 
	`°¨tup
();

235 
	`kûldú
();

237 
fd
 = 
	`›í
("√wfûe", 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

238 i‡(
fd
<0) {

239 
î∫o
) {

240 
EINVAL
:

241 
EIO
:

242 
ENOENT
:

245 
	`îr
(1, "%s", 
buf
);

250 
	`w¨nx
("newfile: creating filesáfterÑmdir works");

251 
	`w¨nx
("(this is only ok ifÅhe space getsÑeclaimed)");

256 
	`mem£t
(
buf
, 'J', (buf));

257 
	`wrôe
(
fd
, 
buf
, (buf));

258 
	`wrôe
(
fd
, 
buf
, (buf));

259 
	`wrôe
(
fd
, 
buf
, (buf));

260 
	`wrôe
(
fd
, 
buf
, (buf));

261 
	`˛o£
(
fd
);

264 
	`föish
();

265 
	}
}

273 
	$ã°5
()

275 
	`¥ötf
("Checking if creating subdirs worksáfterÑmdir...\n");

276 
	`°¨tup
();

277 
	`kûldú
();

279 i‡(
	`mkdú
("newdir", 0775)<0) {

280 
î∫o
) {

281 
EINVAL
:

282 
EIO
:

283 
ENOENT
:

286 
	`îr
(1, "mkdir inÑemoved dir");

291 
	`w¨nx
("newfile: creating directoriesáfterÑmdir works");

292 
	`w¨nx
("(this is only ok ifÅhe space getsÑeclaimed)");

297 
	`mkdú
("newdir/t0", 0775);

298 
	`mkdú
("newdir/t1", 0775);

299 
	`mkdú
("newdir/t2", 0775);

300 
	`mkdú
("newdir/t3", 0775);

301 
	`mkdú
("newdir/t4", 0775);

302 
	`mkdú
("newdir/t5", 0775);

305 
	`föish
();

306 
	}
}

313 
	$ã°6
()

315 
buf
[
PATH_MAX
];

316 
fd
, 
Àn
;

318 
	`¥ötf
("NowÅryingÅoÜistÅhe directory...\n");

319 
	`°¨tup
();

320 
fd
 = 
	`›í
(".", 
O_RDONLY
);

321 i‡(
fd
<0) {

322 
	`îr
(1, ".: open");

324 
	`kûldú
();

326 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1))>0) {

327 i‡(()
Àn
 >(
buf
)-1) {

328 
	`îrx
(1, ".: getdirentry:Ñeturned invalidÜength");

330 
buf
[
Àn
] = 0;

331 i‡(!
	`°rcmp
(
buf
, ".") || !strcmp(buf, "..")) {

335 
	`îrx
(1, ".: gëdúíåy:Ñëu∫ed u√x≥˘edÇamê%s", 
buf
);

337 i‡(
Àn
==0) {

341 
î∫o
) {

342 
EINVAL
:

343 
EIO
:

346 
	`îr
(1, ".: getdirentry");

351 
	`föish
();

354 i‡(
	`˛o£
(
fd
)<0) {

355 
	`îr
(1, "ªmoved %s: clo£", 
ã°dú
);

357 
	}
}

364 
	$ã°7
()

366 
buf
[
PATH_MAX
];

368 
	`°¨tup
();

369 
	`kûldú
();

370 i‡(
	`gëcwd
(
buf
, (buf))==
NULL
) {

371 
î∫o
) {

372 
EINVAL
:

373 
EIO
:

374 
ENOENT
:

377 
	`îr
(1, "gëcwdá·îÑemovög %s", 
ã°dú
);

382 
	`îrx
(1, "getcwdáfterÑemoving %s: succeeded (got %s)",

383 
ã°dú
, 
buf
);

386 
	`föish
();

387 
	}
}

392 
	$maö
()

394 
	`ã°1
();

395 
	`ã°2
();

396 
	`ã°3
();

397 
	`ã°4
();

398 
	`ã°5
();

399 
	`ã°6
();

400 
	`ã°7
();

402 
	`¥ötf
("Whew... survived.\n");

404 
	}
}

	@userland/testbin/rmtest/rmtest.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<uni°d.h
>

43 
	~<î∫o.h
>

44 
	~<îr.h
>

46 
	#TEST
 "rmd©a"

	)

47 
	#TESTDATA
 "I wish I wa†®hódlight. -- Jîry G¨cü"

	)

48 
	#TESTLEN
 ((
TESTDATA
)-1)

	)

52 
	$d‹m
(
fd
)

63 
pid_t
 
pid
;

64 
°©us
;

66 
pid
 = 
	`f‹k
();

67 i‡(
pid
<0) {

68 
	`îr
(1, "fork");

70 i‡(
pid
==0) {

72 
	`˛o£
(
fd
);

73 i‡(
	`ªmove
(
TEST
)) {

74 
	`îr
(1, "%s:Ñemove", 
TEST
);

76 
	`_exô
(0);

79 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

80 
	`îr
(1, "waitpid");

82 i‡(
	`WIFSIGNALED
(
°©us
)) {

83 
	`w¨n
("chûdÖro˚s†exôed wôh sig«»%d", 
	`WTERMSIG
(
°©us
));

85 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

86 
	`w¨nx
("chûdÖro˚s†exôed wôh codê%d",
	`WEXITSTATUS
(
°©us
));

88 
	}
}

92 
	$ßme
(c⁄° *
a
, c⁄° *
b
, 
Àn
)

94 
Àn
-- > 0) {

95 i‡(*
a
++ !*
b
++)  0;

98 
	}
}

101 
	$maö
()

103 
fûe
, 
Àn
;

104 
buf
[
TESTLEN
];

107 
fûe
 = 
	`›í
(
TEST
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0664);

108 
	`wrôe
(
fûe
, 
TESTDATA
, 
TESTLEN
);

109 
	`˛o£
(
fûe
);

112 
fûe
 = 
	`›í
(
TEST
, 
O_RDONLY
);

113 
Àn
 = 
	`ªad
(
fûe
, 
buf
, 
TESTLEN
);

114 i‡(
Àn
 < 0) {

115 
	`w¨n
("read: before deletion");

117 i‡(
Àn
 < ()
TESTLEN
) {

118 
	`w¨nx
("ªad: bef‹êdñëi⁄: sh‹àcou¡ %d", 
Àn
);

120 i‡(!
	`ßme
(
buf
, 
TESTDATA
, 
TESTLEN
)) {

121 
	`îrx
(1, "Failed: dataÑead back wasÇotÅhe same");

125 i‡(
	`l£ek
(
fûe
, 0, 
SEEK_SET
)) {

126 
	`îr
(1, "lseek");

130 
	`d‹m
(
fûe
);

133 
	`mem£t
(
buf
, '\0', 
TESTLEN
);

134 
Àn
 = 
	`ªad
(
fûe
, 
buf
, 
TESTLEN
);

135 i‡(
Àn
 < 0) {

136 
	`w¨n
("read:áfter deletion");

138 i‡(
Àn
 < ()
TESTLEN
) {

139 
	`w¨nx
("ªad:á·î dñëi⁄: sh‹àcou¡ %d", 
Àn
);

142 i‡(!
	`ßme
(
buf
, 
TESTDATA
, 
TESTLEN
)) {

143 
	`îrx
(1, "Failed: dataÑeadáfter deletion wasÇotÅhe same");

147 
	`˛o£
(
fûe
);

150 
fûe
 = 
	`›í
(
TEST
, 
O_RDONLY
);

151 i‡(
fûe
 >= 0) {

152 
	`˛o£
(
fûe
);

153 
	`îrx
(1, "Failed:Åhe file could still be opened");

156 i‡(
î∫o
!=
ENOENT
) {

157 
	`îr
(1, "UnexpectedÉrrorÑeopeningÅhe file");

160 
	`¥ötf
("Succeeded!\n");

163 
	}
}

	@userland/testbin/sbrktest/sbrktest.c

30 
	~<°dboﬁ.h
>

31 
	~<°döt.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<uni°d.h
>

36 
	~<îr.h
>

37 
	~<î∫o.h
>

39 
	#_PATH_RANDOM
 "øndom:"

	)

46 
	#PAGE_SIZE
 4096

	)

53 
	$gëi
()

55 
vÆ
=0;

56 
ch
, 
digôs
=0;

59 
ch
 = 
	`gëch¨
();

60 i‡(
ch
=='\n' || ch=='\r') {

61 
	`putch¨
('\n');

64 i‡((
ch
=='\b' || ch==127Ë&& 
digôs
>0) {

65 
	`¥ötf
("\b \b");

66 
vÆ
 = val/10;

67 
digôs
--;

69 i‡(
ch
>='0' && ch<='9') {

70 
	`putch¨
(
ch
);

71 
vÆ
 = vÆ*10 + (
ch
-'0');

72 
digôs
++;

75 
	`putch¨
('\a');

79 i‡(
digôs
==0) {

82  
vÆ
;

83 
	}
}

87 
	$gë£ed
()

89 
fd
, 
Àn
;

90 
£ed
;

92 
fd
 = 
	`›í
(
_PATH_RANDOM
, 
O_RDONLY
);

93 i‡(
fd
 < 0) {

94 
	`îr
(1, "%s", 
_PATH_RANDOM
);

96 
Àn
 = 
	`ªad
(
fd
, &
£ed
, (seed));

97 i‡(
Àn
 < 0) {

98 
	`îr
(1, "%s", 
_PATH_RANDOM
);

100 i‡(
Àn
 < ()(
£ed
)) {

101 
	`îrx
(1, "%s: Sh‹àªad", 
_PATH_RANDOM
);

103 
	`˛o£
(
fd
);

105  
£ed
;

106 
	}
}

109 
pid_t


110 
	$dof‹k
()

112 
pid_t
 
pid
;

114 
pid
 = 
	`f‹k
();

115 i‡(
pid
 < 0) {

116 
	`îr
(1, "fork");

118  
pid
;

119 
	}
}

123 
	$dowaô
(
pid_t
 
pid
)

125 
°©us
;

126 
ªsu…
;

128 
ªsu…
 = 
	`waôpid
(
pid
, &
°©us
, 0);

129 i‡(
ªsu…
 == -1) {

130 
	`îr
(1, "waitpid");

132 i‡(
	`WIFSIGNALED
(
°©us
)) {

133 
	`îrx
(1, "chûd: Sig«»%d", 
	`WTERMSIG
(
°©us
));

135 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) != 0) {

136 
	`îrx
(1, "chûd: Exô %d", 
	`WEXITSTATUS
(
°©us
));

138 
	}
}

142 
	$ßy
(c⁄° *
msg
)

145 
	`wrôe
(
STDOUT_FILENO
, 
msg
, 
	`°æí
(msg));

146 
	}
}

156 
	$m¨k∑ge
(vﬁ©ûê*
ba£±r
, 
∑geoff£t
)

158 vﬁ©ûê*
∑gïå
;

159 
size_t
 
n
, 
i
;

160 vﬁ©ûê*
∂
;

161 
vÆ
;

163 
∑gïå
 = 
ba£±r
;

164 
∑gïå
 +(
size_t
)
PAGE_SIZE
 * 
∑geoff£t
;

166 
∂
 = (vﬁ©ûê*)
∑gïå
;

167 
n
 = 
PAGE_SIZE
 / ();

169 
i
=0; i<
n
; i++) {

170 
vÆ
 = (()
i
 ^ ()
∑geoff£t
);

171 
∂
[
i
] = 
vÆ
;

173 
	}
}

180 
	$check∑ge
(vﬁ©ûê*
ba£±r
, 
∑geoff£t
, 
boﬁ
 
√ed∆
)

182 vﬁ©ûê*
∑gïå
;

183 
size_t
 
n
, 
i
;

184 vﬁ©ûê*
∂
;

185 
vÆ
;

187 
∑gïå
 = 
ba£±r
;

188 
∑gïå
 +(
size_t
)
PAGE_SIZE
 * 
∑geoff£t
;

190 
∂
 = (vﬁ©ûê*)
∑gïå
;

191 
n
 = 
PAGE_SIZE
 / ();

193 
i
=0; i<
n
; i++) {

194 
vÆ
 = (()
i
 ^ ()
∑geoff£t
);

195 i‡(
∂
[
i
] !
vÆ
) {

196 i‡(
√ed∆
) {

197 
	`¥ötf
("\n");

199 
	`¥ötf
("FAILED: data mismatchát offset %lu ofÖage "

201 (Ë(
i
*()),

202 ()(
uöçå_t
)
∂
,

203 
∂
[
i
], 
vÆ
);

209 
	}
}

216 
	$m¨k∑gñight
(vﬁ©ûê*
ba£±r
, 
∑geoff£t
)

218 vﬁ©ûê*
∑gïå
;

219 vﬁ©ûê*
∂
;

221 
∑gïå
 = 
ba£±r
;

222 
∑gïå
 +(
size_t
)
PAGE_SIZE
 * 
∑geoff£t
;

224 
∂
 = (vﬁ©ûê*)
∑gïå
;

225 
∂
[0] = 
∑geoff£t
;

226 
	}
}

233 
	$check∑gñight
(vﬁ©ûê*
ba£±r
, 
∑geoff£t
, 
boﬁ
 
√ed∆
)

235 vﬁ©ûê*
∑gïå
;

236 vﬁ©ûê*
∂
;

238 
∑gïå
 = 
ba£±r
;

239 
∑gïå
 +(
size_t
)
PAGE_SIZE
 * 
∑geoff£t
;

241 
∂
 = (vﬁ©ûê*)
∑gïå
;

242 i‡(
∂
[0] !
∑geoff£t
) {

243 i‡(
√ed∆
) {

244 
	`¥ötf
("\n");

246 
	`¥ötf
("FAILED: data mismatchát offset 0 ofÖage "

248 ()(
uöçå_t
)
∂
,

249 
∂
[0], 
∑geoff£t
);

253 
	}
}

260 
	$dosbrk
(
ssize_t
 
size
)

262 *
p
;

264 
p
 = 
	`sbrk
(
size
);

265 i‡(
p
 == (*)-1) {

266 
	`îr
(1, "FAILED: sbrk");

268 i‡(
p
 =
NULL
) {

269 
	`îrx
(1, "FAILED: sbrkÑeturned NULL, which is illegal");

271  
p
;

272 
	}
}

279 
	$£tup
()

281 *
›
;

282 
uöçå_t
 
›x
;

283 
size_t
 
amou¡
;

284 
îr‹
;

286 
›
 = 
	`dosbrk
(0);

287 
›x
 = (
uöçå_t
)
›
;

289 i‡(
›x
 % 
PAGE_SIZE
) {

290 
amou¡
 = 
PAGE_SIZE
 - (
›x
 % PAGE_SIZE);

291 i‡(
	`sbrk
(
amou¡
) == (*)-1) {

292 
îr‹
 = 
î∫o
;

293 
	`w¨nx
("Initial heap wasÇotÖageáligned");

294 
	`w¨nx
("...andÅryingÅoálign it gave: %s",

295 
	`°ªº‹
(
îr‹
));

299 
›
 = 
	`dosbrk
(0);

300 
›x
 = (
uöçå_t
)
›
;

302 i‡(
›x
 % 
PAGE_SIZE
) {

303 
	`w¨nx
("Initial heap wasÇotÖageáligned");

304 
	`îrx
(1, "...andÅryingÅoálign it didn'tÅake.");

306 
	}
}

316 
	$ã°1
()

318 *
p
;

320 
	`¥ötf
("AllocatingáÖage...\n");

321 
p
 = 
	`dosbrk
(
PAGE_SIZE
);

322 
	`m¨k∑ge
(
p
, 0);

323 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

324 
	`îrx
(1, "FAILED: data corrupt");

327 
	`¥ötf
("Passed sbrkÅest 1.\n");

328 
	}
}

335 
	$ã°2
()

337 *
›
, *
p
, *
q
;

339 
›
 = 
	`dosbrk
(0);

341 
	`¥ötf
("AllocatingáÖage...\n");

342 
p
 = 
	`dosbrk
(
PAGE_SIZE
);

343 i‡(
p
 !
›
) {

344 
	`îrx
(1, "FAILED: sbrk grow didn'tÑeturnÅhe old break "

345 "(gŸ %p,Éx≥˘ed %p", 
p
, 
›
);

347 
	`m¨k∑ge
(
p
, 0);

348 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

349 
	`îrx
(1, "FAILED: data corrupt");

352 
p
 = 
	`dosbrk
(0);

354 
	`¥ötf
("FreeingÅheÖage...\n");

355 
q
 = 
	`dosbrk
(-
PAGE_SIZE
);

356 i‡(
q
 !
p
) {

357 
	`îrx
(1, "FAILED: sbrk shrink didn'tÑeturnÅhe old break "

358 "(gŸ %p,Éx≥˘ed %p", 
q
, 
p
);

360 
q
 = 
	`dosbrk
(0);

361 i‡(
q
 !
›
) {

362 
	`îrx
(1, "FAILED: sbrk shrink didn'tÑestoreÅhe heap "

363 "(gŸ %p,Éx≥˘ed %p", 
q
, 
›
);

366 
	`¥ötf
("Passed sbrkÅest 2.\n");

367 
	}
}

375 
	$ã°3
()

377 c⁄° 
num
 = 6;

379 *
›
, *
p
, *
q
;

380 
i
;

381 
boﬁ
 
bad
;

383 
›
 = 
	`dosbrk
(0);

385 
	`¥ötf
("AŒoˇtög %uÖages...\n", 
num
);

386 
p
 = 
	`dosbrk
(
PAGE_SIZE
 * 
num
);

387 i‡(
p
 !
›
) {

388 
	`îrx
(1, "FAILED: sbrk grow didn'tÑeturnÅhe old break "

389 "(gŸ %p,Éx≥˘ed %p", 
p
, 
›
);

392 
bad
 = 
Ál£
;

393 
i
=0; i<
num
; i++) {

394 
	`m¨k∑ge
(
p
, 
i
);

395 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

396 
	`w¨nx
("FAILED: d©®c‹ru± o¿∑gê%u", 
i
);

397 
bad
 = 
åue
;

400 i‡(
bad
) {

401 
	`exô
(1);

404 
p
 = 
	`dosbrk
(0);

406 
	`¥ötf
("FreeingÅheÖages...\n");

407 
q
 = 
	`dosbrk
(-
PAGE_SIZE
 * 
num
);

408 i‡(
q
 !
p
) {

409 
	`îrx
(1, "FAILED: sbrk shrink didn'tÑeturnÅhe old break "

410 "(gŸ %p,Éx≥˘ed %p", 
q
, 
p
);

412 
q
 = 
	`dosbrk
(0);

413 i‡(
q
 !
›
) {

414 
	`îrx
(1, "FAILED: sbrk shrink didn'tÑestoreÅhe heap "

415 "(gŸ %p,Éx≥˘ed %p", 
q
, 
›
);

418 
	`¥ötf
("Passed sbrkÅest 3.\n");

419 
	}
}

428 
	$ã°4
()

430 c⁄° 
num
 = 6;

432 *
›
, *
p
, *
q
;

433 
i
, 
j
;

434 
boﬁ
 
bad
;

436 
›
 = 
	`dosbrk
(0);

438 
	`¥ötf
("AŒoˇtög %uÖages...\n", 
num
);

439 
p
 = 
	`dosbrk
(
PAGE_SIZE
 * 
num
);

440 i‡(
p
 !
›
) {

441 
	`îrx
(1, "FAILED: sbrk grow didn'tÑeturnÅhe old break "

442 "(gŸ %p,Éx≥˘ed %p", 
p
, 
›
);

445 
bad
 = 
Ál£
;

446 
i
=0; i<
num
; i++) {

447 
	`m¨k∑ge
(
p
, 
i
);

448 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

449 
	`w¨nx
("FAILED: d©®c‹ru± o¿∑gê%u", 
i
);

450 
bad
 = 
åue
;

453 i‡(
bad
) {

454 
	`exô
(1);

457 
	`¥ötf
("FreeingÅheÖages oneátáÅime...\n");

458 
i
=
num
; i-- > 0; ) {

459 ()
	`dosbrk
(-
PAGE_SIZE
);

460 
j
=0; j<
i
; j++) {

461 i‡(
	`check∑ge
(
p
, 
j
, 
Ál£
)) {

462 
	`w¨nx
("FAILED: data corrupt onÖage %u "

463 "a·î fªeög %uÖages", 
j
, 
i
);

464 
bad
 = 
åue
;

468 i‡(
bad
) {

469 
	`exô
(1);

472 
q
 = 
	`dosbrk
(0);

473 i‡(
q
 !
›
) {

474 
	`îrx
(1, "FAILED: sbrk shrink didn'tÑestoreÅhe heap "

475 "(gŸ %p,Éx≥˘ed %p", 
q
, 
›
);

478 
	`¥ötf
("Passed sbrkÅest 4.\n");

479 
	}
}

490 
	$ã°5
()

492 *
p
;

494 
p
 = 
	`dosbrk
(0);

495 
	`¥ötf
("This shouldÖroduce fatal signal 11 (SIGSEGV).\n");

496 ((*)
p
)[10] = 0;

497 
	`îrx
(1, "FAILED: I didn't crash");

498 
	}
}

506 
	$ã°6
()

508 *
p
;

510 ()
	`dosbrk
(
PAGE_SIZE
);

511 
p
 = 
	`dosbrk
(0);

512 
	`¥ötf
("This shouldÖroduce fatal signal 11 (SIGSEGV).\n");

513 ((*)
p
)[10] = 0;

514 
	`îrx
(1, "FAILED: I didn't crash");

515 
	}
}

523 
	$ã°7
()

525 *
p
;

527 ()
	`dosbrk
(
PAGE_SIZE
);

528 ()
	`dosbrk
(-
PAGE_SIZE
);

529 
p
 = 
	`dosbrk
(0);

530 
	`¥ötf
("This shouldÖroduce fatal signal 11 (SIGSEGV).\n");

531 ((*)
p
)[10] = 0;

532 
	`îrx
(1, "FAILED: I didn't crash");

533 
	}
}

542 
	$ã°8
()

544 *
p
;

546 ()
	`dosbrk
(
PAGE_SIZE
 * 12);

547 ()
	`dosbrk
(-
PAGE_SIZE
 * 6);

548 
p
 = 
	`dosbrk
(0);

549 
	`¥ötf
("This shouldÖroduce fatal signal 11 (SIGSEGV).\n");

550 ((*)
p
)[10] = 0;

551 
	`îrx
(1, "FAILED: I didn't crash");

552 
	}
}

582 
	$ã°9
()

584 
size_t
 
size
;

585 
i
, 
∑ges
, 
dŸ
;

586 *
p
;

587 
boﬁ
 
bad
;

589 
	#HUGESIZE
 (1024 * 1024 * 1024Ë

	)

591 
	`¥ötf
("Checking how much memory we canállocate:\n");

592 
size
 = 
HUGESIZE
; (
p
 = 
	`sbrk
(size)) == (*)-1; size = size/2) {

593 
	`¥ötf
(" %9lu byãs: faûed\n", (Ë
size
);

595 
	`¥ötf
(" %9lu byãs: suc˚eded\n", (Ë
size
);

596 
	`¥ötf
("Passed sbrkÅest 9 (part 1/5)\n");

598 
	`¥ötf
("TouchingÉachÖage.\n");

599 
∑ges
 = 
size
 / 
PAGE_SIZE
;

600 
dŸ
 = 
∑ges
 / 64;

601 
i
=0; i<
∑ges
; i++) {

602 
	`m¨k∑gñight
(
p
, 
i
);

603 i‡(
dŸ
 > 0 && 
i
 % dot == 0) {

604 
	`¥ötf
(".");

607 i‡(
dŸ
 > 0) {

608 
	`¥ötf
("\n");

611 
	`¥ötf
("TestingÉachÖage.\n");

612 
bad
 = 
Ál£
;

613 
i
=0; i<
∑ges
; i++) {

614 i‡(
	`check∑gñight
(
p
, 
i
, 
dŸ
 > 0)) {

615 i‡(
dŸ
 > 0) {

616 
	`¥ötf
("\n");

618 
	`w¨nx
("FAILED: data corrupt");

619 
bad
 = 
åue
;

621 i‡(
dŸ
 > 0 && 
i
 % dot == 0) {

622 
	`¥ötf
(".");

625 i‡(
dŸ
 > 0) {

626 
	`¥ötf
("\n");

628 i‡(
bad
) {

629 
	`exô
(1);

631 
	`¥ötf
("Passed sbrkÅest 9 (part 2/5)\n");

633 
	`¥ötf
("FreeingÅhe memory.\n");

634 ()
	`dosbrk
(-
size
);

635 
	`¥ötf
("Passed sbrkÅest 9 (part 3/5)\n");

637 
	`¥ötf
("AllocatingÅhe memoryágain.\n");

638 ()
	`dosbrk
(
size
);

639 
	`¥ötf
("Passed sbrkÅest 9 (part 4/5)\n");

641 
	`¥ötf
("AndÑeally freeing it.\n");

642 ()
	`dosbrk
(-
size
);

643 
	`¥ötf
("Passed sbrkÅest 9 (all)\n");

644 
	}
}

652 
	$ã°10
()

654 *
p
, *
›
;

655 
i
, 
n
;

656 
boﬁ
 
bad
;

658 
	`¥ötf
("Allocatingáll of memory oneÖageátáÅime:\n");

659 
›
 = 
	`dosbrk
(0);

660 
n
 = 0;

661 (
p
 = 
	`sbrk
(
PAGE_SIZE
)) != (*)-1) {

662 
	`m¨k∑gñight
(
›
, 
n
);

663 
n
++;

665 
	`¥ötf
("GŸ %uÖage†(%zu byãs).\n", 
n
, (
size_t
)
PAGE_SIZE
 *Ç);

667 
	`¥ötf
("Now freeingÅhem.\n");

668 
bad
 = 
Ál£
;

669 
i
=0; i<
n
; i++) {

670 i‡(
	`check∑gñight
(
›
, 
n
 - 
i
 - 1, 
Ál£
)) {

671 
	`w¨nx
("FAILED: d©®c‹ru± o¿∑gê%u", 
i
);

672 
bad
 = 
åue
;

674 ()
	`dosbrk
(-
PAGE_SIZE
);

676 i‡(
bad
) {

677 
	`exô
(1);

679 
	`¥ötf
("Fªed %uÖages.\n", 
n
);

681 
p
 = 
	`dosbrk
(0);

682 i‡(
p
 !
›
) {

683 
	`îrx
(1, "FAILURE: break didÇotÑeturnÅo original value");

686 
	`¥ötf
("NowÜet's see if I canállocateánotherÖage.\n");

687 
p
 = 
	`dosbrk
(
PAGE_SIZE
);

688 
	`m¨k∑ge
(
p
, 0);

689 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

690 
	`îrx
(1, "FAILED: data corrupt");

692 ()
	`dosbrk
(-
PAGE_SIZE
);

694 
	`¥ötf
("Passed sbrkÅest 10.\n");

695 
	}
}

702 
	$ã°11
()

704 c⁄° 
num
 = 256;

706 *
p
;

707 
i
;

708 
boﬁ
 
bad
;

710 
	`¥ötf
("AŒoˇtög %uÖage†(%zu byãs).\n", 
num
,

711 (
size_t
)
PAGE_SIZE
 * 
num
);

712 
p
 = 
	`dosbrk
(
num
 * 
PAGE_SIZE
);

714 
	`¥ötf
("TouchingÅheÖages.\n");

715 
i
=0; i<
num
; i++) {

716 
	`m¨k∑gñight
(
p
, 
i
);

717 i‡(
i
 % 4 == 0) {

718 
	`¥ötf
(".");

721 
	`¥ötf
("\n");

723 
	`¥ötf
("CheckingÅheÖages.\n");

724 
bad
 = 
Ál£
;

725 
i
=0; i<
num
; i++) {

726 i‡(
	`check∑gñight
(
p
, 
i
, 
åue
)) {

727 
	`w¨nx
("FAILED: data corrupt");

728 
bad
 = 
åue
;

730 i‡(
i
 % 4 == 0) {

731 
	`¥ötf
(".");

734 
	`¥ötf
("\n");

735 i‡(
bad
) {

736 
	`exô
(1);

739 
	`¥ötf
("Now NOT freeingÅheÖages. They should get freed onÉxit.\n");

740 
	`¥ötf
("IfÇot, you'llÇoticeÖretty quickly.\n");

741 
	}
}

754 
	$ã°12
()

756 
pid_t
 
pid
;

757 *
p
;

759 
	`¥ötf
("Forking...\n");

760 
pid
 = 
	`dof‹k
();

761 i‡(
pid
 == 0) {

763 
	`ßy
("ChildállocatingáÖage...\n");

764 
p
 = 
	`dosbrk
(
PAGE_SIZE
);

765 
	`m¨k∑ge
(
p
, 0);

766 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

767 
	`îrx
(1, "FAILED: data corrupt in child");

769 
	`ßy
("Child done.\n");

770 
	`exô
(0);

773 
	`ßy
("ParentállocatingáÖage...\n");

774 
p
 = 
	`dosbrk
(
PAGE_SIZE
);

775 
	`m¨k∑ge
(
p
, 0);

776 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

777 
	`îrx
(1, "FAILED: data corrupt inÖarent");

779 
	`ßy
("Parent done.\n");

780 
	`dowaô
(
pid
);

781 
	`¥ötf
("Passed sbrkÅest 12.\n");

782 
	}
}

789 
	$ã°13
()

791 
pid_t
 
pid
;

792 *
p
;

794 
	`¥ötf
("AllocatingáÖage...\n");

795 
p
 = 
	`dosbrk
(
PAGE_SIZE
);

796 
	`m¨k∑ge
(
p
, 0);

797 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

798 
	`îrx
(1, "FAILED: data corrupt before forking");

801 
	`¥ötf
("Forking...\n");

802 
pid
 = 
	`dof‹k
();

803 i‡(
pid
 == 0) {

805 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

806 
	`îrx
(1, "FAILED: data corrupt in child");

808 
	`exô
(0);

810 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

811 
	`îrx
(1, "FAILED: data corrupt inÖarent");

813 
	`dowaô
(
pid
);

814 
	`¥ötf
("Passed sbrkÅest 13.\n");

815 
	}
}

822 
	$ã°14
()

824 
pid_t
 
pid
;

825 *
p
;

827 
	`¥ötf
("AllocatingáÖage...\n");

828 
p
 = 
	`dosbrk
(
PAGE_SIZE
);

829 
	`m¨k∑ge
(
p
, 0);

830 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

831 
	`îrx
(1, "FAILED: data corrupt before forking");

834 
	`¥ötf
("Forking...\n");

835 
pid
 = 
	`dof‹k
();

836 i‡(
pid
 == 0) {

838 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

839 
	`îrx
(1, "FAILED: data corrupt in child");

841 
	`¥ötf
("Child freeingáÖage...\n");

842 
	`dosbrk
(-
PAGE_SIZE
);

843 
	`exô
(0);

845 
	`dowaô
(
pid
);

846 i‡(
	`check∑ge
(
p
, 0, 
Ál£
)) {

847 
	`îrx
(1, "FAILED: data corrupt inÖarentáfter childÑan");

849 
	`¥ötf
("Passed sbrkÅest 14.\n");

850 
	}
}

858 
	$ã°15
()

860 
num
 = 12;

862 
pid_t
 
pid
;

863 
i
;

864 *
p
;

866 
	`¥ötf
("AŒoˇtög %uÖages...\n", 
num
);

867 
p
 = 
	`dosbrk
(
PAGE_SIZE
 * 
num
);

868 
i
=0; i<
num
; i++) {

869 
	`m¨k∑ge
(
p
, 
i
);

871 
i
=0; i<
num
; i++) {

872 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

873 
	`îrx
(1, "FAILED: data corrupt before forking");

877 
	`¥ötf
("Freeing oneÖage...\n");

878 ()
	`dosbrk
(-
PAGE_SIZE
);

879 
num
--;

880 
i
=0; i<
num
; i++) {

881 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

882 
	`îrx
(1, "FAILED: data corrupt before forking (2)");

886 
	`¥ötf
("AllocatingÅwoÖages...\n");

887 ()
	`dosbrk
(
PAGE_SIZE
 * 2);

888 
	`m¨k∑ge
(
p
, 
num
++);

889 
	`m¨k∑ge
(
p
, 
num
++);

890 
i
=0; i<
num
; i++) {

891 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

892 
	`îrx
(1, "FAILED: data corrupt before forking (3)");

896 
	`¥ötf
("Forking...\n");

897 
pid
 = 
	`dof‹k
();

898 i‡(
pid
 == 0) {

900 
i
=0; i<
num
; i++) {

901 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

902 
	`îrx
(1, "FAILED: data corrupt in child");

906 
	`ßy
("Child: freeingÅhreeÖages\n");

907 
	`dosbrk
(-
PAGE_SIZE
 * 3);

908 
num
 -= 3;

909 
i
=0; i<
num
; i++) {

910 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

911 
	`îrx
(1, "FAILED: data corrupt in child (2)");

915 
	`ßy
("Child:állocatingÅwoÖages\n");

916 
	`dosbrk
(
PAGE_SIZE
 * 2);

917 
	`m¨k∑ge
(
p
, 
num
++);

918 
	`m¨k∑ge
(
p
, 
num
++);

919 
i
=0; i<
num
; i++) {

920 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

921 
	`îrx
(1, "FAILED: data corrupt in child (3)");

925 
	`ßy
("Child: freeingáll\n");

926 
	`dosbrk
(-
PAGE_SIZE
 * 
num
);

927 
	`exô
(0);

929 
	`ßy
("Parent:állocating fourÖages\n");

930 
	`dosbrk
(
PAGE_SIZE
 * 4);

931 
i
=0; i<4; i++) {

932 
	`m¨k∑ge
(
p
, 
num
++);

934 
i
=0; i<
num
; i++) {

935 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

936 
	`îrx
(1, "FAILED: data corrupt inÖarent");

940 
	`ßy
("Parent: waiting\n");

941 
	`dowaô
(
pid
);

943 
i
=0; i<
num
; i++) {

944 i‡(
	`check∑ge
(
p
, 
i
, 
Ál£
)) {

945 
	`îrx
(1, "FAILED: data corruptáfter waiting");

949 ()
	`dosbrk
(-
PAGE_SIZE
 * 
num
);

950 
	`¥ötf
("Passed sbrkÅest 15.\n");

951 
	}
}

958 
	$°ªs°e°
(
£ed
, 
boﬁ
 
œrge
)

960 c⁄° 
lo›s
 = 10000;

961 c⁄° 
dŸ
 = 200;

963 *
›
;

964 
num
;

965 
i
, 
j
, 
∑ges
;

966 
r
;

967 
boﬁ
 
bad
, 
√g
;

969 
	`§™dom
(
£ed
);

970 
	`¥ötf
("SìdedÑ™domÇumbî gíî©‹ wôh %lu.\n", 
£ed
);

972 
›
 = 
	`dosbrk
(0);

974 
bad
 = 
Ál£
;

975 
num
 = 0;

976 
i
=0; i<
lo›s
; i++) {

983 
r
 = 
	`øndom
();

984 
∑ges
 = 
r
 % (
œrge
 ? 32 : 8);

985 
√g
 = 
∑ges
 <
num
 && ((
r
 & 128) == 0);

986 i‡(!
√g
 && 
num
 + 
∑ges
 > (
œrge
 ? 128 : 32)) {

987 
√g
 = 1;

989 i‡(
√g
) {

990 
	`dosbrk
(-(
∑ges
 * 
PAGE_SIZE
));

991 
num
 -
∑ges
;

994 
	`dosbrk
(
∑ges
 * 
PAGE_SIZE
);

995 
j
=0; j<
∑ges
; j++) {

996 
	`m¨k∑gñight
(
›
, 
num
 + 
j
);

998 
num
 +
∑ges
;

1000 
j
=0; j<
num
; j++) {

1001 i‡(
	`check∑gñight
(
›
, 
j
, 
åue
)) {

1002 
	`¥ötf
("\n");

1003 
	`w¨nx
("FAILED: d©®c‹ru± o¿∑gê%u", 
j
);

1004 
bad
 = 
åue
;

1007 i‡(
i
 % 
dŸ
 == 0) {

1008 
	`¥ötf
(".");

1011 
	`¥ötf
("\n");

1012 i‡(
bad
) {

1013 
	`w¨nx
("FAILED");

1014 
	`exô
(1);

1017 
	`dosbrk
(-(
num
 * 
PAGE_SIZE
));

1018 
	`¥ötf
("Pas£d sbrk %†°ªs†ã°.\n", 
œrge
 ? "large" : "small");

1019 
	}
}

1023 
	$ã°16
()

1025 
	`°ªs°e°
(0, 
Ál£
);

1026 
	}
}

1030 
	$ã°17
()

1032 
	`°ªs°e°
(
	`gë£ed
(), 
Ál£
);

1033 
	}
}

1037 
	$ã°18
()

1039 
	`¥ötf
("EnterÑandom seed: ");

1040 
	`°ªs°e°
(
	`gëi
(), 
Ál£
);

1041 
	}
}

1045 
	$ã°19
()

1047 
	`°ªs°e°
(0, 
åue
);

1048 
	}
}

1052 
	$ã°20
()

1054 
	`°ªs°e°
(
	`gë£ed
(), 
åue
);

1055 
	}
}

1059 
	$ã°21
()

1061 
	`¥ötf
("EnterÑandom seed: ");

1062 
	`°ªs°e°
(
	`gëi
(), 
åue
);

1063 
	}
}

1069 
	mnum
;

1070 c⁄° *
	mdesc
;

1071 (*
	mfunc
)();

1072 } 
	gã°s
[] = {

1073 { 1, "AŒoˇã o√Öage", 
ã°1
 },

1074 { 2, "AŒoˇãánd fªê⁄ê∑ge", 
ã°2
 },

1075 { 3, "AŒoˇãánd fªê£vîÆÖages", 
ã°3
 },

1076 { 4, "AŒoˇã sevîÆÖage†™d fªêthem o√áà®time", 
ã°4
 },

1077 { 5, "CheckÅhêhó∞íd (¸ashes)", 
ã°5
 },

1078 { 6, "AŒoˇãánd checkÅhêhó∞íd (¸ashes)", 
ã°6
 },

1079 { 7, "AŒoˇãánd fªê™d checkÅhêhó∞íd (¸ashes)", 
ã°7
 },

1080 { 8, "AŒoˇã sevîÆ, fªêsome, check hó∞íd (¸ashes)", 
ã°8
 },

1081 { 9, "AŒoˇãáŒ mem‹y i¿®big chunk", 
ã°9
 },

1082 { 10, "AŒoˇãáŒ mem‹yáÖagê©áÅime", 
ã°10
 },

1083 { 11, "AŒoˇãáÜŸánd i¡íti⁄ÆlyÜók it", 
ã°11
 },

1084 { 12, "F‹kándÅhíáŒoˇã", 
ã°12
 },

1085 { 13, "AŒoˇãándÅhí f‹k", 
ã°13
 },

1086 { 14, "AŒoˇãándÅhí f‹kánd fªe", 
ã°14
 },

1087 { 15, "AŒoˇã, f‹k,áŒoˇã m‹e,ánd fªê◊nd s∑m)", 
ã°15
 },

1088 { 16, "SmÆ»°ªs†ã°", 
ã°16
 },

1089 { 17, "R™domized smÆ»°ªs†ã°", 
ã°17
 },

1090 { 18, "SmÆ»°ªs†ã° wôhÖ¨ticuœ∏£ed", 
ã°18
 },

1091 { 19, "L¨gê°ªs†ã°", 
ã°19
 },

1092 { 20, "R™domizedÜ¨gê°ªs†ã°", 
ã°20
 },

1093 { 21, "L¨gê°ªs†ã° wôhÖ¨ticuœ∏£ed", 
ã°21
 },

1095 c⁄° 
	gnumã°s
 = (
ã°s
) / (tests[0]);

1099 
	$dŸe°
(
ä
)

1101 
i
;

1103 
i
=0; i<
numã°s
; i++) {

1104 i‡(
ã°s
[
i
].
num
 =
ä
) {

1105 
ã°s
[
i
].
	`func
();

1110 
	}
}

1113 
	$maö
(
¨gc
, *
¨gv
[])

1115 
i
, 
ä
;

1116 
j
;

1117 
boﬁ
 
míu
 = 
åue
;

1119 
	`£tup
();

1121 i‡(
¨gc
 > 1) {

1122 
i
=1; i<
¨gc
; i++) {

1123 
	`dŸe°
(
	`©oi
(
¨gv
[
i
]));

1129 i‡(
míu
) {

1130 
j
=0; j<
numã°s
; j++) {

1131 
	`¥ötf
(" %2d %s\n", 
ã°s
[
j
].
num
,

1132 
ã°s
[
j
].
desc
);

1134 
míu
 = 
Ál£
;

1136 
	`¥ötf
("sbrktest: ");

1137 
ä
 = 
	`gëi
();

1138 i‡(
ä
 < 0) {

1142 i‡(
	`dŸe°
(
ä
)) {

1143 
míu
 = 
åue
;

1148 
	}
}

	@userland/testbin/sink/sink.c

38 
	~<uni°d.h
>

39 
	~<îr.h
>

42 
	$maö
()

44 
ch
=0;

45 
r
;

47 
ch
!='q') {

48 
r
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

49 i‡(
r
<0) {

50 
	`îr
(1, "stdin");

52 i‡(
r
==0) {

59 
	}
}

	@userland/testbin/sort/sort.c

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<îr.h
>

44 
	#SIZE
 (144*1024)

	)

59 
	$s‹t
(*
¨r
, 
size
)

61 
tmp
[
SIZE
];

62 
pivŸ
, 
i
, 
j
, 
k
;

64 i‡(
size
<2) {

68 
pivŸ
 = 
size
/2;

69 
	`s‹t
(
¨r
, 
pivŸ
);

70 
	`s‹t
(&
¨r
[
pivŸ
], 
size
-pivot);

72 
i
 = 0;

73 
j
 = 
pivŸ
;

74 
k
 = 0;

75 
i
<
pivŸ
 && 
j
<
size
) {

76 i‡(
¨r
[
i
] <áº[
j
]) {

77 
tmp
[
k
++] = 
¨r
[
i
++];

80 
tmp
[
k
++] = 
¨r
[
j
++];

83 
i
<
pivŸ
) {

84 
tmp
[
k
++] = 
¨r
[
i
++];

86 
j
<
size
) {

87 
tmp
[
k
++] = 
¨r
[
j
++];

90 
	`mem˝y
(
¨r
, 
tmp
, 
size
*());

91 
	}
}

95 
	gA
[
SIZE
];

99 
	$öô¨øy
()

101 
i
;

106 
	`§™dom
(533);

108 
i
 = 0; i < 
SIZE
; i++) {

109 
A
[
i
] = 
	`øndom
();

111 
	}
}

115 
	$check
()

117 
i
;

119 
i
=0; i<
SIZE
-1; i++) {

120 i‡(
A
[
i
] > A[i+1]) {

121 
	`îrx
(1, "Failed: A[%d] is %d, A[%d] is %d",

122 
i
, 
A
[i], i+1, A[i+1]);

125 
	`w¨nx
("Passed.");

126 
	}
}

129 
	$maö
()

131 
	`öô¨øy
();

132 
	`s‹t
(
A
, 
SIZE
);

133 
	`check
();

135 
	}
}

	@userland/testbin/sparsefile/sparsefile.c

39 
	~<°dlib.h
>

40 
	~<°dio.h
>

41 
	~<uni°d.h
>

42 
	~<f˙é.h
>

43 
	~<îr.h
>

46 
	$maö
(
¨gc
, *
¨gv
[])

48 c⁄° *
fûíame
;

49 
size
;

50 
fd
;

51 
r
;

52 
byã
;

54 i‡(
¨gc
 != 3) {

55 
	`îrx
(1, "Usage: sparsefile <filename> <size>");

58 
fûíame
 = 
¨gv
[1];

59 
size
 = 
	`©oi
(
¨gv
[2]);

60 
byã
 = '\n';

62 i‡(
size
 == 0) {

63 
	`îr
(1, "Sparse files ofÜength zeroáreÇot meaningful");

66 
	`¥ötf
("Cª©ögá s∑r£ fûêo‡sizê%d\n", 
size
);

68 
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

69 i‡(
fd
 < 0) {

70 
	`îr
(1, "%s: cª©e", 
fûíame
);

73 i‡(
	`l£ek
(
fd
, 
size
-1, 
SEEK_SET
) == -1) {

74 
	`îr
(1, "%s:Ü£ek", 
fûíame
);

76 
r
 = 
	`wrôe
(
fd
, &
byã
, 1);

77 i‡(
r
 < 0) {

78 
	`îr
(1, "%s: wrôe", 
fûíame
);

80 i‡(
r
 != 1) {

81 
	`îrx
(1, "%s: wrôe: U√x≥˘edÑesu… cou¡ %d", 
fûíame
, 
r
);

84 
	`˛o£
(
fd
);

87 
	}
}

	@userland/testbin/sty/sty.c

39 
	~<uni°d.h
>

40 
	~<îr.h
>

42 *
	gh¨gv
[2] = { (*)"hog", 
NULL
 };

44 
	#MAXPROCS
 6

	)

45 
	gpids
[
MAXPROCS
], 
	g≈ids
;

49 
	$hog
()

51 
pid
 = 
	`f‹k
();

52 
pid
) {

54 
	`îr
(1, "fork");

57 
	`execv
("/ã°bö/hog", 
h¨gv
);

58 
	`îr
(1, "/testbin/hog");

61 
pids
[
≈ids
++] = 
pid
;

64 
	}
}

68 
	$waôÆl
()

70 
i
, 
°©us
;

71 
i
=0; i<
≈ids
; i++) {

72 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

73 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

75 i‡(
	`WIFSIGNALED
(
°©us
)) {

76 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

78 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

79 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

82 
	}
}

85 
	$maö
()

87 
	`hog
();

88 
	`hog
();

89 
	`hog
();

90 
	`hog
();

91 
	`hog
();

92 
	`hog
();

94 
	`waôÆl
();

96 
	}
}

	@userland/testbin/tail/tail.c

39 
	~<uni°d.h
>

40 
	~<°dlib.h
>

41 
	~<îr.h
>

43 
	#BUFSIZE
 1000

	)

48 
	gbuf„r
[
BUFSIZE
];

52 
	$èû
(
fûe
, 
off_t
 
whîe
, c⁄° *
fûíame
)

54 
Àn
;

56 i‡(
	`l£ek
(
fûe
, 
whîe
, 
SEEK_SET
)<0) {

57 
	`îr
(1, "%s", 
fûíame
);

60 (
Àn
 = 
	`ªad
(
fûe
, 
buf„r
, (buffer))) > 0) {

61 
	`wrôe
(
STDOUT_FILENO
, 
buf„r
, 
Àn
);

63 
	}
}

66 
	$maö
(
¨gc
, **
¨gv
)

68 
fûe
;

70 i‡(
¨gc
 < 3) {

71 
	`îrx
(1, "Usage:Åail <file> <location>");

73 
fûe
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

74 i‡(
fûe
 < 0) {

75 
	`îr
(1, "%s", 
¨gv
[1]);

77 
	`èû
(
fûe
, 
	`©oi
(
¨gv
[2]),árgv[1]);

78 
	`˛o£
(
fûe
);

80 
	}
}

	@userland/testbin/tictac/tictac.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

44 
	#NEWLINE
 012

	)

45 
	#EMPTY
 0

	)

46 
	#X_PLAYER
 1

	)

47 
	#O_PLAYER
 2

	)

48 
	#X_MARKER
 1

	)

49 
	#O_MARKER
 2

	)

50 
	#DIM
 3

	)

51 
	#DIMCHAR
 "2"

	)

52 
	#MAXSTRING
 100

	)

54 íum { 
	mFALSE
, 
	mTRUE
 } 
	tboﬁ
;

57 
boﬁ
 
ask_ye¢o
(c⁄° *
msg
);

58 
boﬁ
 
do_move
(
∂ayî
);

59 
öôülize_bﬂrd
();

60 
boﬁ
 
is_wö
(
x
, 
y
);

61 
ªad_°rög
(*
buf
, 
Àngth
);

62 
¥öt_bﬂrd
();

63 
¥öt_ö°ru˘i⁄s
();

64 
boﬁ
 
wö_cﬁumn
(
y
, 
m¨kî
);

65 
boﬁ
 
wö_düg_À·
(
x
, 
y
, 
m¨kî
);

66 
boﬁ
 
wö_düg_right
(
x
, 
y
, 
m¨kî
);

67 
boﬁ
 
wö_row
(
x
, 
m¨kî
);

68 
boﬁ
 
Såcmp
(c⁄° *
a
, c⁄° *
b
);

74 
	gbﬂrd
[
DIM
][DIM];

79 
	$maö
()

81 
boﬁ
 
wö
 = 
FALSE
;

82 
move
, 
max_moves
;

83 
∂ayî
;

85 
	`¥öt_ö°ru˘i⁄s
();

86 
max_moves
 = 
DIM
 * DIM;

88 
TRUE
) {

89 
	`öôülize_bﬂrd
();

90 
move
 = 1; movê<
max_moves
; move++) {

91 
∂ayî
 = 
move
 % 2 == 0 ? 2 : 1;

92 
wö
 = 
	`do_move
(
∂ayî
);

93 
	`¥öt_bﬂrd
();

94 i‡(
wö
) {

95 
	`¥ötf
("Pœyî %d, you WON!\n\n", 
∂ayî
);

103 i‡(!
wö
)

104 
	`¥ötf
("Tie Game!\n\n");

105 i‡(!
	`ask_ye¢o
("Do you wishÅoÖlayágain?"))

109 
	}
}

122 
	$¥öt_ö°ru˘i⁄s
()

124 
	`¥ötf
("WelcomeÅoÅic-tac-toe!\n");

125 
	`¥ötf
("Player 1álwaysÖlays XándÖlayer 2álwaysÖlay O\n");

126 
	`¥ötf
("GoodÜuck!\n\n\n");

127 
	}
}

140 
	$¥öt_bﬂrd
()

142 
i
, 
j
;

145 
	`¥ötf
("\n 0 1 2\n");

147 
i
 = 0; i < 
DIM
; i++) {

149 
	`¥ötf
(" %d ", 
i
);

150 
j
 = 0; j < 
DIM
; j++) {

151 
bﬂrd
[
i
][
j
]) {

152 
EMPTY
: 
	`¥ötf
(" "); ;

153 
X_MARKER
: 
	`¥ötf
(" X "); ;

154 
O_MARKER
: 
	`¥ötf
(" O "); ;

155 : 
	`¥ötf
("???"); ;

158 
	`¥ötf
("\n");

160 
	`¥ötf
("\n");

161 
	}
}

178 
boﬁ


179 
	$ask_ye¢o
(c⁄° *
msg
)

181 
™swî
[
MAXSTRING
];

183 
TRUE
) {

184 
	`¥ötf
("%†[yes/no] ", 
msg
);

185 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

186 (
FALSE
);

187 i‡(
	`Såcmp
(
™swî
, "yes"))

188 (
TRUE
);

189 i‡(
	`Såcmp
(
™swî
, "no"))

190 (
FALSE
);

192 
	`¥ötf
("PleaseánswerÉither yes orÇo\n");

194 
	}
}

212 
boﬁ


213 
	$do_move
(
∂ayî
)

215 
x
, 
y
;

216 
™swî
[
MAXSTRING
];

217 
cx
;

219 
	`¥ötf
("Pœyî %d (%c), you∏move\n", 
∂ayî
,

220 
∂ayî
 =
X_PLAYER
 ? 'X' : 'O');

222 
TRUE
) {

223 
	`¥ötf
("WhichÑow [0-%d]: ", 
DIM
-1);

224 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

225 (
FALSE
);

226 
cx
 = 
™swî
[0];

227 
x
 = 
cx
 - '0';

228 i‡(
x
 < 0 || x >
DIM
) {

229 
	`¥ötf
("InvÆidÑow; mu° bê>0ánd < %d\n", 
DIM
-1);

232 
	`¥ötf
("Which cﬁum¿[0-%d]: ", 
DIM
-1);

233 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

234 (
FALSE
);

235 
cx
 = 
™swî
[0];

236 
y
 = 
cx
 - '0';

237 i‡(
y
 < 0 || y >
DIM
) {

238 
	`¥ötf
("Invalid column; must be >= 0ánd < %d\n",

239 
DIM
-1);

243 i‡(
bﬂrd
[
x
][
y
] !
EMPTY
) {

244 
	`¥ötf
("ThatÜocation is occupied;ÖleaseÅryágain\n");

245 
	`¥öt_bﬂrd
();

249 
bﬂrd
[
x
][
y
] = 
∂ayî
 =
X_PLAYER
 ? 
X_MARKER
 : 
O_MARKER
;

251 (
	`is_wö
(
x
, 
y
));

253 
	}
}

277 
boﬁ


278 
	$is_wö
(
x
, 
y
)

280 
m¨kî
;

282 
m¨kî
 = 
bﬂrd
[
x
][
y
];

290 (
	`wö_row
(
x
, 
m¨kî
Ë|| 
	`wö_cﬁumn
(
y
, marker) ||

291 
	`wö_düg_À·
(
x
, 
y
, 
m¨kî
Ë|| 
	`wö_düg_right
(x, y, marker));

292 
	}
}

297 
boﬁ


298 
	$wö_cﬁumn
(
y
, 
m¨kî
)

300 
i
;

301 
i
 = 0; i < 
DIM
; i++)

302 i‡(
bﬂrd
[
i
][
y
] !
m¨kî
)

303 (
FALSE
);

304 (
TRUE
);

305 
	}
}

307 
boﬁ


308 
	$wö_row
(
x
, 
m¨kî
)

310 
i
;

311 
i
 = 0; i < 
DIM
; i++)

312 i‡(
bﬂrd
[
x
][
i
] !
m¨kî
)

313 (
FALSE
);

314 (
TRUE
);

315 
	}
}

317 
boﬁ


318 
	$wö_düg_À·
(
x
, 
y
, 
m¨kî
)

320 
i
;

323 i‡(
x
 !
y
)

324 (
FALSE
);

326 
i
 = 0; i < 
DIM
; i++)

327 i‡(
bﬂrd
[
i
][i] !
m¨kî
)

328 (
FALSE
);

329 (
TRUE
);

330 
	}
}

332 
boﬁ


333 
	$wö_düg_right
(
x
, 
y
, 
m¨kî
)

335 
i
;

338 i‡(
x
 + 
y
 !
DIM
 - 1)

339 (
FALSE
);

340 
i
 = 0; i < 
DIM
; i++)

341 i‡(
bﬂrd
[
i
][
DIM
 - 1 - i] !
m¨kî
)

342 (
FALSE
);

343 (
TRUE
);

344 
	}
}

347 
	$öôülize_bﬂrd
()

349 
i
, 
j
;

351 
i
 = 0; i < 
DIM
; i++)

352 
j
 = 0; j < 
DIM
; j++)

353 
bﬂrd
[
i
][
j
] = 
EMPTY
;

354 
	}
}

357 
	$ªad_°rög
(*
buf
, 
Àngth
)

359 
ch¨_ªad
;

360 
i
;

362 
i
 = 0;

363 (
ch¨_ªad
 = 
	`gëch¨
()Ë!
EOF
 && ch¨_ªad !
NEWLINE
 &&

364 
i
 < 
Àngth
) {

365 
buf
[
i
] = (Ë
ch¨_ªad
;

366 
i
++;

367 
	`putch¨
(
ch¨_ªad
);

370 i‡(
ch¨_ªad
 =
EOF
)

377 i‡(
i
 >
Àngth
)

378 
i
--;

379 
buf
[
i
] = 0;

380 (
i
);

381 
	}
}

383 
boﬁ


384 
	$Såcmp
(c⁄° *
a
, c⁄° *
b
)

386 i‡(
a
 =
NULL
)

387 (
b
 =
NULL
);

388 i‡(
b
 =
NULL
)

389 (
FALSE
);

391 *
a
 && *
b
)

392 i‡(*
a
++ !*
b
++)

393 (
FALSE
);

395 (*
a
 =*
b
);

397 
	}
}

	@userland/testbin/triplehuge/triplehuge.c

38 
	~<ã°/åùÀ.h
>

41 
	$maö
()

43 
	`åùÀ
("/testbin/huge");

45 
	}
}

	@userland/testbin/triplemat/triplemat.c

38 
	~<ã°/åùÀ.h
>

41 
	$maö
()

43 
	`åùÀ
("/testbin/matmult");

45 
	}
}

	@userland/testbin/triplesort/triplesort.c

38 
	~<ã°/åùÀ.h
>

41 
	$maö
()

43 
	`åùÀ
("/testbin/sort");

45 
	}
}

	@userland/testbin/usemtest/usemtest.c

41 
	~<sys/ty≥s.h
>

42 
	~<sys/waô.h
>

43 
	~<°dio.h
>

44 
	~<uni°d.h
>

45 
	~<f˙é.h
>

46 
	~<îr.h
>

48 
	#ONCELOOPS
 3

	)

49 
	#TWICELOOPS
 2

	)

50 
	#THRICELOOPS
 1

	)

51 
	#LOOPS
 (
ONCELOOPS
 + 2*
TWICELOOPS
 + 3*
THRICELOOPS
)

	)

52 
	#NUMJOBS
 4

	)

60 
	$ßy
(c⁄° *
°r
)

62 
size_t
 
i
;

64 
i
=0; 
°r
[i]; i++) {

65 
	`putch¨
(
°r
[
i
]);

67 
	}
}

72 
	$ßyf
(c⁄° *
°r
, ...)

74 
buf
[256];

75 
va_li°
 
≠
;

77 
	`va_°¨t
(
≠
, 
fmt
);

78 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

79 
	`va_íd
(
≠
);

81 
	`ßy
(
°r
);

82 
	}
}

90 
	$dowaô
(
pid_t
 
pid
, 
num
)

92 
pid_t
 
r
;

93 
°©us
;

95 
r
 = 
	`waôpid
(
pid
, &
°©us
, 0);

96 i‡(
r
 < 0) {

97 
	`w¨n
("waitpid");

100 i‡(
	`WIFSIGNALED
(
°©us
)) {

101 
	`w¨nx
("pid %d (sub¥o˚s†%u): Sig«»%d", ()
pid
,

102 
num
, 
	`WTERMSIG
(
°©us
));

104 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) != 0) {

105 
	`w¨nx
("pid %d (sub¥o˚s†%u): Exô %d", ()
pid
,

106 
num
, 
	`WEXITSTATUS
(
°©us
));

108 
	}
}

116 
	su£m
 {

117 
	m«me
[32];

118 
	mfd
;

123 
	$u£m_öô
(
u£m
 *
£m
, c⁄° *
èg
, 
num
)

125 
	`¢¥ötf
(
£m
->
«me
, (£m->«me), "£m:u£mã°.%s%u", 
èg
, 
num
);

126 
£m
->
fd
 = 
	`›í
(£m->
«me
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0664);

127 i‡(
£m
->
fd
 < 0) {

128 
	`îr
(1, "%s: cª©e", 
£m
->
«me
);

130 
	`˛o£
(
£m
->
fd
);

131 
£m
->
fd
 = -1;

132 
	}
}

136 
	$u£m_›í
(
u£m
 *
£m
)

138 
£m
->
fd
 = 
	`›í
(£m->
«me
, 
O_RDWR
);

139 i‡(
£m
->
fd
 < 0) {

140 
	`îr
(1, "%s: o≥n", 
£m
->
«me
);

142 
	}
}

146 
	$u£m_˛o£
(
u£m
 *
£m
)

148 i‡(
	`˛o£
(
£m
->
fd
) == -1) {

149 
	`w¨n
("%s: clo£", 
£m
->
«me
);

151 
	}
}

155 
	$u£m_˛ónup
(
u£m
 *
£m
)

157 ()
	`ªmove
(
£m
->
«me
);

158 
	}
}

162 
	$P
(
u£m
 *
£m
)

164 
ssize_t
 
r
;

165 
c
;

167 
r
 = 
	`ªad
(
£m
->
fd
, &
c
, 1);

168 i‡(
r
 < 0) {

169 
	`îr
(1, "%s:Ñód", 
£m
->
«me
);

171 i‡(
r
 == 0) {

172 
	`îrx
(1, "%s:Ñód: u√x≥˘ed EOF", 
£m
->
«me
);

174 
	}
}

178 
	$V
(
u£m
 *
£m
)

180 
ssize_t
 
r
;

181 
c
;

183 
r
 = 
	`wrôe
(
£m
->
fd
, &
c
, 1);

184 i‡(
r
 < 0) {

185 
	`îr
(1, "%s: wrôe", 
£m
->
«me
);

187 i‡(
r
 == 0) {

188 
	`îrx
(1, "%s: wrôe: sh‹àcou¡", 
£m
->
«me
);

190 
	}
}

197 
	$chûd_∂aö
(
u£m
 *
go£m
, u£m *
waô£m
, 
num
)

199 c⁄° *c⁄° 
°rögs
[
NUMJOBS
] = {

206 c⁄° *
°rög
;

207 
i
;

209 
°rög
 = 
°rögs
[
num
];

210 
i
=0; i<
LOOPS
; i++) {

211 
	`P
(
go£m
);

212 
	`ßy
(
°rög
);

213 
	`V
(
waô£m
);

215 
	}
}

219 
	$chûd_wôh_own_fd
(
u£m
 *
go£m
, u£m *
waô£m
, 
num
)

221 
	`u£m_›í
(
go£m
);

222 
	`u£m_›í
(
waô£m
);

223 
	`chûd_∂aö
(
go£m
, 
waô£m
, 
num
);

224 
	`u£m_˛o£
(
go£m
);

225 
	`u£m_˛o£
(
waô£m
);

226 
	}
}

230 
	$ba£∑ª¡
(
u£m
 *
go£ms
, u£m *
waô£ms
)

232 
i
, 
j
;

234 
i
=0; i<
NUMJOBS
; i++) {

235 
	`u£m_›í
(&
go£ms
[
i
]);

236 
	`u£m_›í
(&
waô£ms
[
i
]);

239 
	`ßy
("Once...\n");

240 
j
=0; j<
ONCELOOPS
; j++) {

241 
i
=0; i<
NUMJOBS
; i++) {

242 
	`V
(&
go£ms
[
i
]);

243 
	`P
(&
waô£ms
[
i
]);

244 
	`putch¨
(' ');

246 
	`putch¨
('\n');

249 
	`ßy
("Twice...\n");

250 
j
=0; j<
TWICELOOPS
; j++) {

251 
i
=0; i<
NUMJOBS
; i++) {

252 
	`V
(&
go£ms
[
i
]);

253 
	`P
(&
waô£ms
[
i
]);

254 
	`putch¨
(' ');

255 
	`V
(&
go£ms
[
i
]);

256 
	`P
(&
waô£ms
[
i
]);

257 
	`putch¨
(' ');

259 
	`putch¨
('\n');

262 
	`ßy
("ThreeÅimes...\n");

263 
j
=0; j<
THRICELOOPS
; j++) {

264 
i
=0; i<
NUMJOBS
; i++) {

265 
	`V
(&
go£ms
[
i
]);

266 
	`P
(&
waô£ms
[
i
]);

267 
	`putch¨
(' ');

268 
	`V
(&
go£ms
[
i
]);

269 
	`P
(&
waô£ms
[
i
]);

270 
	`putch¨
(' ');

271 
	`V
(&
go£ms
[
i
]);

272 
	`P
(&
waô£ms
[
i
]);

273 
	`putch¨
('\n');

277 
i
=0; i<
NUMJOBS
; i++) {

278 
	`u£m_˛o£
(&
go£ms
[
i
]);

279 
	`u£m_˛o£
(&
waô£ms
[
i
]);

281 
	}
}

285 
	$ba£ã°
()

287 
i
;

288 
u£m
 
go£ms
[
NUMJOBS
], 
waô£ms
[NUMJOBS];

289 
pid_t
 
pids
[
NUMJOBS
];

291 
i
=0; i<
NUMJOBS
; i++) {

292 
	`u£m_öô
(&
go£ms
[
i
], "g", i);

293 
	`u£m_öô
(&
waô£ms
[
i
], "w", i);

296 
i
=0; i<
NUMJOBS
; i++) {

297 
pids
[
i
] = 
	`f‹k
();

298 i‡(
pids
[
i
] < 0) {

299 
	`îr
(1, "fork");

301 i‡(
pids
[
i
] == 0) {

302 
	`chûd_wôh_own_fd
(&
go£ms
[
i
], &
waô£ms
[i], i);

303 
	`_exô
(0);

306 
	`ba£∑ª¡
(
go£ms
, 
waô£ms
);

308 
i
=0; i<
NUMJOBS
; i++) {

309 
	`dowaô
(
pids
[
i
], i);

312 
i
=0; i<
NUMJOBS
; i++) {

313 
	`u£m_˛ónup
(&
go£ms
[
i
]);

314 
	`u£m_˛ónup
(&
waô£ms
[
i
]);

316 
	}
}

320 
	$c⁄˝¨ít
(
u£m
 *
go£ms
, u£m *
waô£ms
)

322 
i
, 
j
;

328 
j
=0; j<
LOOPS
; j++) {

329 
i
=0; i<
NUMJOBS
; i++) {

330 
	`V
(&
go£ms
[
i
]);

331 
	`P
(&
waô£ms
[
i
]);

332 
	`putch¨
(' ');

334 
	`putch¨
('\n');

336 
	}
}

340 
	$c⁄˘e°
()

342 
i
;

343 
u£m
 
go£ms
[
NUMJOBS
], 
waô£ms
[NUMJOBS];

344 
pid_t
 
pids
[
NUMJOBS
];

346 
	`ßy
("Shoot...\n");

348 
i
=0; i<
NUMJOBS
; i++) {

349 
	`u£m_öô
(&
go£ms
[
i
], "g", i);

350 
	`u£m_öô
(&
waô£ms
[
i
], "w", i);

351 
	`u£m_›í
(&
go£ms
[
i
]);

352 
	`u£m_›í
(&
waô£ms
[
i
]);

355 
i
=0; i<
NUMJOBS
; i++) {

356 
pids
[
i
] = 
	`f‹k
();

357 i‡(
pids
[
i
] < 0) {

358 
	`îr
(1, "fork");

360 i‡(
pids
[
i
] == 0) {

361 
	`chûd_∂aö
(&
go£ms
[
i
], &
waô£ms
[i], i);

362 
	`_exô
(0);

365 
	`c⁄˝¨ít
(
go£ms
, 
waô£ms
);

367 
i
=0; i<
NUMJOBS
; i++) {

368 
	`dowaô
(
pids
[
i
], i);

371 
i
=0; i<
NUMJOBS
; i++) {

372 
	`u£m_˛o£
(&
go£ms
[
i
]);

373 
	`u£m_˛o£
(&
waô£ms
[
i
]);

374 
	`u£m_˛ónup
(&
go£ms
[
i
]);

375 
	`u£m_˛ónup
(&
waô£ms
[
i
]);

377 
	}
}

383 
	$maö
()

385 
	`ba£ã°
();

386 
	`c⁄˘e°
();

387 
	`ßy
("Passed.\n");

389 
	}
}

	@userland/testbin/userthreads/userthreads.c

52 
	~<uni°d.h
>

53 
	~<°dio.h
>

55 
	#NTHREADS
 3

	)

56 
	#MAX
 1<<25

	)

61 vﬁ©ûê
	gcou¡
 = 0;

64 
ThªadRu¬î
();

65 
BœdeRu¬î
();

68 
	$maö
(
¨gc
, *
¨gv
[])

70 
i
;

72 ()
¨gc
;

73 ()
¨gv
;

75 
i
=0; i<
NTHREADS
; i++) {

76 i‡(
i
)

77 
	`thªadf‹k
(
ThªadRu¬î
);

79 
	`thªadf‹k
(
BœdeRu¬î
);

82 
	`¥ötf
("Parent hasÜeft.\n");

84 
	}
}

92 
	$BœdeRu¬î
()

94 
cou¡
 < 
MAX
) {

95 i‡(
cou¡
 % 500 == 0)

96 
	`¥ötf
("Blade ");

97 
cou¡
++;

99 
	}
}

102 
	$ThªadRu¬î
()

104 
cou¡
 < 
MAX
) {

105 i‡(
cou¡
 % 513 == 0)

106 
	`¥ötf
(" Runner\n");

107 
cou¡
++;

109 
	}
}

	@userland/testbin/zero/zero.c

38 
	~<°dio.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

47 
	gd©a_°uff
[] = {

60 
	#SUM_OF_DATA_STUFF
 525

	)

66 
	gbss_°uff
[3000];

70 
	$check_d©a
()

72 
i
, 
num
, 
k
;

74 
num
 = (
d©a_°uff
) / (data_stuff[0]);

75 
k
=
i
=0; i<
num
; i++) {

76 
k
 +
d©a_°uff
[
i
];

78 i‡(
k
 !
SUM_OF_DATA_STUFF
) {

79 
	`w¨nx
("My initialized data sumsÅoÅhe wrong value!");

80 
	`w¨nx
("GŸ: %u Ex≥˘ed: %u", 
k
, 
SUM_OF_DATA_STUFF
);

81 
	`îrx
(1, "FAILED");

83 
	}
}

87 
	$check_bss
()

89 
i
, 
num
;

91 
num
 = (
bss_°uff
) / (bss_stuff[0]);

92 
i
=0; i<
num
; i++) {

93 i‡(
bss_°uff
[
i
] != 0) {

94 
	`w¨nx
("BSSÉntryát index %u (address %p)Çot zero!",

95 
i
, &
bss_°uff
[i]);

96 
	`w¨nx
("Found: 0x%x", 
bss_°uff
[
i
]);

97 
	`îrx
(1, "FAILED");

100 
	}
}

104 
	$check_sbrk
()

106 *
ba£
;

107 
i
;

110 
	#SBRK_SIZE
 8192

	)

112 
ba£
 = 
	`sbrk
(
SBRK_SIZE
);

113 i‡(
ba£
 == (*)-1) {

114 i‡(
î∫o
 =
ENOSYS
) {

115 
	`¥ötf
("I guess you haven't implemented sbrk yet.\n");

118 
	`îr
(1, "sbrk");

121 
i
=0; i<
SBRK_SIZE
; i++) {

122 i‡(
ba£
[
i
] != 0) {

123 
	`w¨nx
("Byteát offset %u (address %p)Çot zero",

124 
i
, &
ba£
[i]);

125 
	`w¨nx
("GŸ: 0x%x", ()
ba£
[
i
]);

126 
	`w¨nx
("Ba£ o‡sbrkÑegi⁄: %p", 
ba£
);

127 
	`îrx
(1, "FAILED");

130 
	}
}

134 
	$maö
()

136 
	`¥ötf
("zero:Öhase 1: checking .bss\n");

137 
	`check_d©a
();

138 
	`check_bss
();

140 
	`¥ötf
("zero:Öhase 2: checking sbrk()\n");

141 
	`check_sbrk
();

143 
	`¥ötf
("zero:Öassed\n");

145 
	}
}

	@
1
.
0
470
13806
build/install/hostinclude/hostcompat.h
build/install/include/assert.h
build/install/include/err.h
build/install/include/errno.h
build/install/include/fcntl.h
build/install/include/kern/endian.h
build/install/include/kern/errmsg.h
build/install/include/kern/errno.h
build/install/include/kern/fcntl.h
build/install/include/kern/ioctl.h
build/install/include/kern/iovec.h
build/install/include/kern/limits.h
build/install/include/kern/mips/endian.h
build/install/include/kern/mips/regdefs.h
build/install/include/kern/mips/setjmp.h
build/install/include/kern/mips/signal.h
build/install/include/kern/mips/types.h
build/install/include/kern/reboot.h
build/install/include/kern/resource.h
build/install/include/kern/seek.h
build/install/include/kern/sfs.h
build/install/include/kern/signal.h
build/install/include/kern/socket.h
build/install/include/kern/stat.h
build/install/include/kern/stattypes.h
build/install/include/kern/syscall.h
build/install/include/kern/time.h
build/install/include/kern/types.h
build/install/include/kern/unistd.h
build/install/include/kern/wait.h
build/install/include/limits.h
build/install/include/setjmp.h
build/install/include/signal.h
build/install/include/stdarg.h
build/install/include/stdbool.h
build/install/include/stdint.h
build/install/include/stdio.h
build/install/include/stdlib.h
build/install/include/string.h
build/install/include/sys/cdefs.h
build/install/include/sys/endian.h
build/install/include/sys/ioctl.h
build/install/include/sys/null.h
build/install/include/sys/reboot.h
build/install/include/sys/stat.h
build/install/include/sys/types.h
build/install/include/sys/wait.h
build/install/include/test/quint.h
build/install/include/test/triple.h
build/install/include/time.h
build/install/include/types/size_t.h
build/install/include/unistd.h
common/gcc-millicode/adddi3.c
common/gcc-millicode/anddi3.c
common/gcc-millicode/ashldi3.c
common/gcc-millicode/ashrdi3.c
common/gcc-millicode/cmpdi2.c
common/gcc-millicode/divdi3.c
common/gcc-millicode/iordi3.c
common/gcc-millicode/longlong.h
common/gcc-millicode/lshldi3.c
common/gcc-millicode/lshrdi3.c
common/gcc-millicode/moddi3.c
common/gcc-millicode/muldi3.c
common/gcc-millicode/negdi2.c
common/gcc-millicode/notdi2.c
common/gcc-millicode/qdivrem.c
common/gcc-millicode/subdi3.c
common/gcc-millicode/ucmpdi2.c
common/gcc-millicode/udivdi3.c
common/gcc-millicode/umoddi3.c
common/gcc-millicode/xordi3.c
common/libc/printf/__printf.c
common/libc/printf/snprintf.c
common/libc/stdlib/atoi.c
common/libc/string/bzero.c
common/libc/string/memcpy.c
common/libc/string/memmove.c
common/libc/string/memset.c
common/libc/string/strcat.c
common/libc/string/strchr.c
common/libc/string/strcmp.c
common/libc/string/strcpy.c
common/libc/string/strlen.c
common/libc/string/strrchr.c
common/libc/string/strtok_r.c
kern/arch/mips/include/current.h
kern/arch/mips/include/elf.h
kern/arch/mips/include/kern/endian.h
kern/arch/mips/include/kern/regdefs.h
kern/arch/mips/include/kern/setjmp.h
kern/arch/mips/include/kern/signal.h
kern/arch/mips/include/kern/types.h
kern/arch/mips/include/membar.h
kern/arch/mips/include/specialreg.h
kern/arch/mips/include/spinlock.h
kern/arch/mips/include/thread.h
kern/arch/mips/include/tlb.h
kern/arch/mips/include/trapframe.h
kern/arch/mips/include/types.h
kern/arch/mips/include/vm.h
kern/arch/mips/locore/trap.c
kern/arch/mips/syscall/syscall.c
kern/arch/mips/thread/cpu.c
kern/arch/mips/thread/switchframe.c
kern/arch/mips/thread/switchframe.h
kern/arch/mips/thread/thread_machdep.c
kern/arch/mips/vm/dumbvm.c
kern/arch/mips/vm/ram.c
kern/arch/sys161/dev/lamebus_machdep.c
kern/arch/sys161/include/bus.h
kern/arch/sys161/include/maxcpus.h
kern/compile/DUMBVM/.depend.__printf.c
kern/compile/DUMBVM/autoconf.c
kern/compile/DUMBVM/autoconf.h
kern/compile/DUMBVM/opt-dumbvm.h
kern/compile/DUMBVM/opt-net.h
kern/compile/DUMBVM/opt-netfs.h
kern/compile/DUMBVM/opt-noasserts.h
kern/compile/DUMBVM/opt-semfs.h
kern/compile/DUMBVM/opt-sfs.h
kern/compile/DUMBVM/vers.c
kern/dev/generic/beep.c
kern/dev/generic/beep.h
kern/dev/generic/console.c
kern/dev/generic/console.h
kern/dev/generic/random.c
kern/dev/generic/random.h
kern/dev/generic/rtclock.c
kern/dev/generic/rtclock.h
kern/dev/lamebus/beep_ltimer.c
kern/dev/lamebus/con_lscreen.c
kern/dev/lamebus/con_lser.c
kern/dev/lamebus/emu.c
kern/dev/lamebus/emu.h
kern/dev/lamebus/emu_att.c
kern/dev/lamebus/lamebus.c
kern/dev/lamebus/lamebus.h
kern/dev/lamebus/lhd.c
kern/dev/lamebus/lhd.h
kern/dev/lamebus/lhd_att.c
kern/dev/lamebus/lnet.c
kern/dev/lamebus/lnet_att.c
kern/dev/lamebus/lrandom.c
kern/dev/lamebus/lrandom.h
kern/dev/lamebus/lrandom_att.c
kern/dev/lamebus/lscreen.c
kern/dev/lamebus/lscreen.h
kern/dev/lamebus/lscreen_att.c
kern/dev/lamebus/lser.c
kern/dev/lamebus/lser.h
kern/dev/lamebus/lser_att.c
kern/dev/lamebus/ltimer.c
kern/dev/lamebus/ltimer.h
kern/dev/lamebus/ltimer_att.c
kern/dev/lamebus/ltrace.c
kern/dev/lamebus/ltrace.h
kern/dev/lamebus/ltrace_att.c
kern/dev/lamebus/random_lrandom.c
kern/dev/lamebus/rtclock_ltimer.c
kern/fs/semfs/semfs.h
kern/fs/semfs/semfs_fsops.c
kern/fs/semfs/semfs_obj.c
kern/fs/semfs/semfs_vnops.c
kern/fs/sfs/sfs_balloc.c
kern/fs/sfs/sfs_bmap.c
kern/fs/sfs/sfs_dir.c
kern/fs/sfs/sfs_fsops.c
kern/fs/sfs/sfs_inode.c
kern/fs/sfs/sfs_io.c
kern/fs/sfs/sfs_vnops.c
kern/fs/sfs/sfsprivate.h
kern/include/addrspace.h
kern/include/array.h
kern/include/bitmap.h
kern/include/cdefs.h
kern/include/clock.h
kern/include/copyinout.h
kern/include/cpu.h
kern/include/current.h
kern/include/device.h
kern/include/elf.h
kern/include/emufs.h
kern/include/endian.h
kern/include/fs.h
kern/include/kern/endian.h
kern/include/kern/errmsg.h
kern/include/kern/errno.h
kern/include/kern/fcntl.h
kern/include/kern/ioctl.h
kern/include/kern/iovec.h
kern/include/kern/limits.h
kern/include/kern/reboot.h
kern/include/kern/resource.h
kern/include/kern/seek.h
kern/include/kern/sfs.h
kern/include/kern/signal.h
kern/include/kern/socket.h
kern/include/kern/stat.h
kern/include/kern/stattypes.h
kern/include/kern/syscall.h
kern/include/kern/time.h
kern/include/kern/types.h
kern/include/kern/unistd.h
kern/include/kern/wait.h
kern/include/lib.h
kern/include/limits.h
kern/include/mainbus.h
kern/include/membar.h
kern/include/proc.h
kern/include/setjmp.h
kern/include/sfs.h
kern/include/signal.h
kern/include/spinlock.h
kern/include/spl.h
kern/include/stat.h
kern/include/stdarg.h
kern/include/synch.h
kern/include/syscall.h
kern/include/test.h
kern/include/thread.h
kern/include/threadlist.h
kern/include/threadprivate.h
kern/include/types.h
kern/include/uio.h
kern/include/version.h
kern/include/vfs.h
kern/include/vm.h
kern/include/vnode.h
kern/include/wchan.h
kern/lib/array.c
kern/lib/bitmap.c
kern/lib/bswap.c
kern/lib/kgets.c
kern/lib/kprintf.c
kern/lib/misc.c
kern/lib/time.c
kern/lib/uio.c
kern/main/main.c
kern/main/menu.c
kern/proc/proc.c
kern/syscall/loadelf.c
kern/syscall/runprogram.c
kern/syscall/time_syscalls.c
kern/test/arraytest.c
kern/test/bitmaptest.c
kern/test/fstest.c
kern/test/kmalloctest.c
kern/test/malloctest.c
kern/test/nettest.c
kern/test/synchtest.c
kern/test/threadlisttest.c
kern/test/threadtest.c
kern/test/tt3.c
kern/thread/clock.c
kern/thread/spinlock.c
kern/thread/spl.c
kern/thread/synch.c
kern/thread/thread.c
kern/thread/threadlist.c
kern/vfs/device.c
kern/vfs/devnull.c
kern/vfs/vfscwd.c
kern/vfs/vfsfail.c
kern/vfs/vfslist.c
kern/vfs/vfslookup.c
kern/vfs/vfspath.c
kern/vfs/vnode.c
kern/vm/addrspace.c
kern/vm/copyinout.c
kern/vm/kmalloc.c
userland/bin/cat/cat.c
userland/bin/cp/cp.c
userland/bin/false/false.c
userland/bin/ln/ln.c
userland/bin/ls/ls.c
userland/bin/mkdir/mkdir.c
userland/bin/mv/mv.c
userland/bin/pwd/pwd.c
userland/bin/rm/rm.c
userland/bin/rmdir/rmdir.c
userland/bin/sh/sh.c
userland/bin/sync/sync.c
userland/bin/tac/tac.c
userland/bin/true/true.c
userland/include/assert.h
userland/include/err.h
userland/include/errno.h
userland/include/fcntl.h
userland/include/limits.h
userland/include/setjmp.h
userland/include/signal.h
userland/include/stdarg.h
userland/include/stdbool.h
userland/include/stdint.h
userland/include/stdio.h
userland/include/stdlib.h
userland/include/string.h
userland/include/sys/cdefs.h
userland/include/sys/endian.h
userland/include/sys/ioctl.h
userland/include/sys/null.h
userland/include/sys/reboot.h
userland/include/sys/stat.h
userland/include/sys/types.h
userland/include/sys/wait.h
userland/include/test/quint.h
userland/include/test/triple.h
userland/include/time.h
userland/include/types/size_t.h
userland/include/unistd.h
userland/lib/hostcompat/err.c
userland/lib/hostcompat/host-err.h
userland/lib/hostcompat/hostcompat.c
userland/lib/hostcompat/hostcompat.h
userland/lib/hostcompat/ntohll.c
userland/lib/hostcompat/time.c
userland/lib/libc/stdio/__puts.c
userland/lib/libc/stdio/getchar.c
userland/lib/libc/stdio/printf.c
userland/lib/libc/stdio/putchar.c
userland/lib/libc/stdio/puts.c
userland/lib/libc/stdlib/abort.c
userland/lib/libc/stdlib/exit.c
userland/lib/libc/stdlib/getenv.c
userland/lib/libc/stdlib/malloc.c
userland/lib/libc/stdlib/qsort.c
userland/lib/libc/stdlib/random.c
userland/lib/libc/stdlib/system.c
userland/lib/libc/string/memcmp.c
userland/lib/libc/string/strerror.c
userland/lib/libc/string/strtok.c
userland/lib/libc/time/time.c
userland/lib/libc/unix/__assert.c
userland/lib/libc/unix/err.c
userland/lib/libc/unix/errno.c
userland/lib/libc/unix/execvp.c
userland/lib/libc/unix/getcwd.c
userland/lib/libtest/quint.c
userland/lib/libtest/triple.c
userland/sbin/dumpsfs/dumpsfs.c
userland/sbin/halt/halt.c
userland/sbin/mksfs/disk.c
userland/sbin/mksfs/disk.h
userland/sbin/mksfs/mksfs.c
userland/sbin/mksfs/support.c
userland/sbin/mksfs/support.h
userland/sbin/poweroff/poweroff.c
userland/sbin/reboot/reboot.c
userland/sbin/sfsck/compat.h
userland/sbin/sfsck/freemap.c
userland/sbin/sfsck/freemap.h
userland/sbin/sfsck/ibmacros.h
userland/sbin/sfsck/inode.c
userland/sbin/sfsck/inode.h
userland/sbin/sfsck/main.c
userland/sbin/sfsck/main.h
userland/sbin/sfsck/pass1.c
userland/sbin/sfsck/pass2.c
userland/sbin/sfsck/passes.h
userland/sbin/sfsck/sb.c
userland/sbin/sfsck/sb.h
userland/sbin/sfsck/sfs.c
userland/sbin/sfsck/sfs.h
userland/sbin/sfsck/utils.c
userland/sbin/sfsck/utils.h
userland/testbin/add/add.c
userland/testbin/argtest/argtest.c
userland/testbin/badcall/bad_chdir.c
userland/testbin/badcall/bad_close.c
userland/testbin/badcall/bad_dup2.c
userland/testbin/badcall/bad_execv.c
userland/testbin/badcall/bad_fsync.c
userland/testbin/badcall/bad_ftruncate.c
userland/testbin/badcall/bad_getcwd.c
userland/testbin/badcall/bad_getdirentry.c
userland/testbin/badcall/bad_ioctl.c
userland/testbin/badcall/bad_link.c
userland/testbin/badcall/bad_lseek.c
userland/testbin/badcall/bad_mkdir.c
userland/testbin/badcall/bad_open.c
userland/testbin/badcall/bad_pipe.c
userland/testbin/badcall/bad_read.c
userland/testbin/badcall/bad_readlink.c
userland/testbin/badcall/bad_reboot.c
userland/testbin/badcall/bad_remove.c
userland/testbin/badcall/bad_rename.c
userland/testbin/badcall/bad_rmdir.c
userland/testbin/badcall/bad_sbrk.c
userland/testbin/badcall/bad_stat.c
userland/testbin/badcall/bad_symlink.c
userland/testbin/badcall/bad_time.c
userland/testbin/badcall/bad_waitpid.c
userland/testbin/badcall/bad_write.c
userland/testbin/badcall/common_buf.c
userland/testbin/badcall/common_fds.c
userland/testbin/badcall/common_path.c
userland/testbin/badcall/config.h
userland/testbin/badcall/driver.c
userland/testbin/badcall/test.h
userland/testbin/bigexec/bigexec.c
userland/testbin/bigfile/bigfile.c
userland/testbin/bigseek/bigseek.c
userland/testbin/bloat/bloat.c
userland/testbin/conman/conman.c
userland/testbin/crash/crash.c
userland/testbin/ctest/ctest.c
userland/testbin/dirconc/dirconc.c
userland/testbin/dirseek/dirseek.c
userland/testbin/dirtest/dirtest.c
userland/testbin/f_test/f_hdr.h
userland/testbin/f_test/f_read.c
userland/testbin/f_test/f_test.c
userland/testbin/f_test/f_write.c
userland/testbin/factorial/factorial.c
userland/testbin/farm/farm.c
userland/testbin/faulter/faulter.c
userland/testbin/filetest/filetest.c
userland/testbin/forkbomb/forkbomb.c
userland/testbin/forktest/forktest.c
userland/testbin/frack/check.c
userland/testbin/frack/check.h
userland/testbin/frack/data.c
userland/testbin/frack/data.h
userland/testbin/frack/do.c
userland/testbin/frack/do.h
userland/testbin/frack/main.c
userland/testbin/frack/main.h
userland/testbin/frack/name.c
userland/testbin/frack/name.h
userland/testbin/frack/ops.c
userland/testbin/frack/ops.h
userland/testbin/frack/pool.c
userland/testbin/frack/pool.h
userland/testbin/frack/workloads.c
userland/testbin/frack/workloads.h
userland/testbin/guzzle/guzzle.c
userland/testbin/hash/hash.c
userland/testbin/hog/hog.c
userland/testbin/huge/huge.c
userland/testbin/kitchen/kitchen.c
userland/testbin/malloctest/malloctest.c
userland/testbin/matmult/matmult-orig.c
userland/testbin/matmult/matmult.c
userland/testbin/multiexec/multiexec.c
userland/testbin/palin/palin.c
userland/testbin/parallelvm/parallelvm.c
userland/testbin/poisondisk/poisondisk.c
userland/testbin/psort/psort.c
userland/testbin/quinthuge/quinthuge.c
userland/testbin/quintmat/quintmat.c
userland/testbin/quintsort/quintsort.c
userland/testbin/randcall/extern.h
userland/testbin/randcall/main.c
userland/testbin/redirect/redirect.c
userland/testbin/rmdirtest/rmdirtest.c
userland/testbin/rmtest/rmtest.c
userland/testbin/sbrktest/sbrktest.c
userland/testbin/sink/sink.c
userland/testbin/sort/sort.c
userland/testbin/sparsefile/sparsefile.c
userland/testbin/sty/sty.c
userland/testbin/tail/tail.c
userland/testbin/tictac/tictac.c
userland/testbin/triplehuge/triplehuge.c
userland/testbin/triplemat/triplemat.c
userland/testbin/triplesort/triplesort.c
userland/testbin/usemtest/usemtest.c
userland/testbin/userthreads/userthreads.c
userland/testbin/zero/zero.c
